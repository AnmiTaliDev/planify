/* Calendar.c generated by valac 0.50.10, the Vala compiler
 * generated from Calendar.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

#define WIDGETS_CALENDAR_TYPE_CALENDAR (widgets_calendar_calendar_get_type ())
#define WIDGETS_CALENDAR_CALENDAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendar))
#define WIDGETS_CALENDAR_CALENDAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendarClass))
#define WIDGETS_CALENDAR_IS_CALENDAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR))
#define WIDGETS_CALENDAR_IS_CALENDAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR))
#define WIDGETS_CALENDAR_CALENDAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendarClass))

typedef struct _WidgetsCalendarCalendar WidgetsCalendarCalendar;
typedef struct _WidgetsCalendarCalendarClass WidgetsCalendarCalendarClass;
typedef struct _WidgetsCalendarCalendarPrivate WidgetsCalendarCalendarPrivate;

#define WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER (widgets_calendar_calendar_header_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeader))
#define WIDGETS_CALENDAR_CALENDAR_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeaderClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER))
#define WIDGETS_CALENDAR_IS_CALENDAR_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER))
#define WIDGETS_CALENDAR_CALENDAR_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeaderClass))

typedef struct _WidgetsCalendarCalendarHeader WidgetsCalendarCalendarHeader;
typedef struct _WidgetsCalendarCalendarHeaderClass WidgetsCalendarCalendarHeaderClass;

#define WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK (widgets_calendar_calendar_week_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_WEEK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK, WidgetsCalendarCalendarWeek))
#define WIDGETS_CALENDAR_CALENDAR_WEEK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK, WidgetsCalendarCalendarWeekClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_WEEK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK))
#define WIDGETS_CALENDAR_IS_CALENDAR_WEEK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK))
#define WIDGETS_CALENDAR_CALENDAR_WEEK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK, WidgetsCalendarCalendarWeekClass))

typedef struct _WidgetsCalendarCalendarWeek WidgetsCalendarCalendarWeek;
typedef struct _WidgetsCalendarCalendarWeekClass WidgetsCalendarCalendarWeekClass;

#define WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW (widgets_calendar_calendar_view_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, WidgetsCalendarCalendarView))
#define WIDGETS_CALENDAR_CALENDAR_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, WidgetsCalendarCalendarViewClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW))
#define WIDGETS_CALENDAR_IS_CALENDAR_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW))
#define WIDGETS_CALENDAR_CALENDAR_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, WidgetsCalendarCalendarViewClass))

typedef struct _WidgetsCalendarCalendarView WidgetsCalendarCalendarView;
typedef struct _WidgetsCalendarCalendarViewClass WidgetsCalendarCalendarViewClass;
enum  {
	WIDGETS_CALENDAR_CALENDAR_0_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_BLOCK_PAST_DAYS_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_DATE_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_NUM_PROPERTIES
};
static GParamSpec* widgets_calendar_calendar_properties[WIDGETS_CALENDAR_CALENDAR_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
enum  {
	WIDGETS_CALENDAR_CALENDAR_SELECTION_CHANGED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_NUM_SIGNALS
};
static guint widgets_calendar_calendar_signals[WIDGETS_CALENDAR_CALENDAR_NUM_SIGNALS] = {0};

struct _WidgetsCalendarCalendar {
	GtkBox parent_instance;
	WidgetsCalendarCalendarPrivate * priv;
};

struct _WidgetsCalendarCalendarClass {
	GtkBoxClass parent_class;
};

struct _WidgetsCalendarCalendarPrivate {
	WidgetsCalendarCalendarHeader* calendar_header;
	WidgetsCalendarCalendarWeek* calendar_week;
	WidgetsCalendarCalendarView* calendar_view;
	gboolean _block_past_days;
	gint month_nav;
	gint year_nav;
	gint day_nav;
	GDateTime* current_date;
	GDateTime* _date;
};

static gint WidgetsCalendarCalendar_private_offset;
static gpointer widgets_calendar_calendar_parent_class = NULL;
extern GSettings* planner_settings;

GType widgets_calendar_calendar_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsCalendarCalendar, g_object_unref)
GType widgets_calendar_calendar_header_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsCalendarCalendarHeader, g_object_unref)
GType widgets_calendar_calendar_week_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsCalendarCalendarWeek, g_object_unref)
GType widgets_calendar_calendar_view_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsCalendarCalendarView, g_object_unref)
WidgetsCalendarCalendar* widgets_calendar_calendar_new (gboolean block_past_days);
WidgetsCalendarCalendar* widgets_calendar_calendar_construct (GType object_type,
                                                              gboolean block_past_days);
void widgets_calendar_calendar_next_month (WidgetsCalendarCalendar* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gint util_get_days_of_month (Util* self,
                             gint index,
                             gint year_nav);
void widgets_calendar_calendar_view_fill_grid_days (WidgetsCalendarCalendarView* self,
                                                    gint start_day,
                                                    gint max_day,
                                                    gint current_day,
                                                    gboolean is_current_month,
                                                    gboolean block_past_days,
                                                    GDateTime* month);
gboolean util_is_current_month (Util* self,
                                GDateTime* date);
gboolean widgets_calendar_calendar_get_block_past_days (WidgetsCalendarCalendar* self);
void widgets_calendar_calendar_header_set_date (WidgetsCalendarCalendarHeader* self,
                                                GDateTime* value);
void widgets_calendar_calendar_previous_month (WidgetsCalendarCalendar* self);
static void widgets_calendar_calendar_today (WidgetsCalendarCalendar* self);
static void widgets_calendar_calendar_set_block_past_days (WidgetsCalendarCalendar* self,
                                                    gboolean value);
GDateTime* widgets_calendar_calendar_get_date (WidgetsCalendarCalendar* self);
static GObject * widgets_calendar_calendar_constructor (GType type,
                                                 guint n_construct_properties,
                                                 GObjectConstructParam * construct_properties);
WidgetsCalendarCalendarHeader* widgets_calendar_calendar_header_new (void);
WidgetsCalendarCalendarHeader* widgets_calendar_calendar_header_construct (GType object_type);
WidgetsCalendarCalendarWeek* widgets_calendar_calendar_week_new (void);
WidgetsCalendarCalendarWeek* widgets_calendar_calendar_week_construct (GType object_type);
WidgetsCalendarCalendarView* widgets_calendar_calendar_view_new (void);
WidgetsCalendarCalendarView* widgets_calendar_calendar_view_construct (GType object_type);
static void _widgets_calendar_calendar___lambda87_ (WidgetsCalendarCalendar* self);
static void __widgets_calendar_calendar___lambda87__widgets_calendar_calendar_header_left_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                                                            gpointer self);
static void _widgets_calendar_calendar___lambda88_ (WidgetsCalendarCalendar* self);
static void __widgets_calendar_calendar___lambda88__widgets_calendar_calendar_header_center_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                                                              gpointer self);
static void _widgets_calendar_calendar___lambda89_ (WidgetsCalendarCalendar* self);
static void __widgets_calendar_calendar___lambda89__widgets_calendar_calendar_header_right_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                                                             gpointer self);
static void _widgets_calendar_calendar___lambda90_ (WidgetsCalendarCalendar* self,
                                             gint day);
static void __widgets_calendar_calendar___lambda90__widgets_calendar_calendar_view_day_selected (WidgetsCalendarCalendarView* _sender,
                                                                                          gint day,
                                                                                          gpointer self);
static void _widgets_calendar_calendar___lambda91_ (WidgetsCalendarCalendar* self,
                                             const gchar* key);
void widgets_calendar_calendar_week_update (WidgetsCalendarCalendarWeek* self);
static void __widgets_calendar_calendar___lambda91__g_settings_changed (GSettings* _sender,
                                                                 const gchar* key,
                                                                 gpointer self);
static void widgets_calendar_calendar_finalize (GObject * obj);
static GType widgets_calendar_calendar_get_type_once (void);
static void _vala_widgets_calendar_calendar_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);
static void _vala_widgets_calendar_calendar_set_property (GObject * object,
                                                   guint property_id,
                                                   const GValue * value,
                                                   GParamSpec * pspec);

static inline gpointer
widgets_calendar_calendar_get_instance_private (WidgetsCalendarCalendar* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsCalendarCalendar_private_offset);
}

WidgetsCalendarCalendar*
widgets_calendar_calendar_construct (GType object_type,
                                     gboolean block_past_days)
{
	WidgetsCalendarCalendar * self = NULL;
#line 46 "../src/Widgets/Calendar/Calendar.vala"
	self = (WidgetsCalendarCalendar*) g_object_new (object_type, "block-past-days", block_past_days, "orientation", GTK_ORIENTATION_VERTICAL, "height-request", 200, NULL);
#line 45 "../src/Widgets/Calendar/Calendar.vala"
	return self;
#line 215 "Calendar.c"
}

WidgetsCalendarCalendar*
widgets_calendar_calendar_new (gboolean block_past_days)
{
#line 45 "../src/Widgets/Calendar/Calendar.vala"
	return widgets_calendar_calendar_construct (WIDGETS_CALENDAR_TYPE_CALENDAR, block_past_days);
#line 223 "Calendar.c"
}

void
widgets_calendar_calendar_next_month (WidgetsCalendarCalendar* self)
{
	GDateTime* date = NULL;
	GDateTime* _tmp0_;
	GDateTime* firts_week = NULL;
	GDateTime* _tmp1_;
	gint start_day = 0;
	GSettings* _tmp2_;
	gint max_days = 0;
	Util* _tmp3_;
	Util* _tmp4_;
	gint _tmp5_;
	WidgetsCalendarCalendarView* _tmp6_;
	Util* _tmp7_;
	Util* _tmp8_;
	gboolean _tmp9_;
	WidgetsCalendarCalendarHeader* _tmp10_;
#line 91 "../src/Widgets/Calendar/Calendar.vala"
	g_return_if_fail (self != NULL);
#line 92 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->month_nav = self->priv->month_nav + 1;
#line 94 "../src/Widgets/Calendar/Calendar.vala"
	if (self->priv->month_nav > 12) {
#line 95 "../src/Widgets/Calendar/Calendar.vala"
		self->priv->year_nav = self->priv->year_nav + 1;
#line 96 "../src/Widgets/Calendar/Calendar.vala"
		self->priv->month_nav = 1;
#line 254 "Calendar.c"
	}
#line 99 "../src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = g_date_time_new_local (self->priv->year_nav, self->priv->month_nav, 1, 0, 0, (gdouble) 0);
#line 99 "../src/Widgets/Calendar/Calendar.vala"
	date = _tmp0_;
#line 100 "../src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = g_date_time_new_local (g_date_time_get_year (date), g_date_time_get_month (date), 1, 0, 0, (gdouble) 0);
#line 100 "../src/Widgets/Calendar/Calendar.vala"
	firts_week = _tmp1_;
#line 101 "../src/Widgets/Calendar/Calendar.vala"
	_tmp2_ = planner_settings;
#line 101 "../src/Widgets/Calendar/Calendar.vala"
	start_day = g_date_time_get_day_of_week (firts_week) - g_settings_get_enum (_tmp2_, "start-week");
#line 102 "../src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = util_get_default ();
#line 102 "../src/Widgets/Calendar/Calendar.vala"
	_tmp4_ = _tmp3_;
#line 102 "../src/Widgets/Calendar/Calendar.vala"
	_tmp5_ = util_get_days_of_month (_tmp4_, g_date_time_get_month (date), self->priv->year_nav);
#line 102 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (_tmp4_);
#line 102 "../src/Widgets/Calendar/Calendar.vala"
	max_days = _tmp5_;
#line 104 "../src/Widgets/Calendar/Calendar.vala"
	_tmp6_ = self->priv->calendar_view;
#line 104 "../src/Widgets/Calendar/Calendar.vala"
	_tmp7_ = util_get_default ();
#line 104 "../src/Widgets/Calendar/Calendar.vala"
	_tmp8_ = _tmp7_;
#line 104 "../src/Widgets/Calendar/Calendar.vala"
	_tmp9_ = self->priv->_block_past_days;
#line 104 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_view_fill_grid_days (_tmp6_, start_day, max_days, g_date_time_get_day_of_month (date), util_is_current_month (_tmp8_, date), _tmp9_, date);
#line 104 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (_tmp8_);
#line 111 "../src/Widgets/Calendar/Calendar.vala"
	_tmp10_ = self->priv->calendar_header;
#line 111 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_header_set_date (_tmp10_, date);
#line 91 "../src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (firts_week);
#line 91 "../src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (date);
#line 298 "Calendar.c"
}

void
widgets_calendar_calendar_previous_month (WidgetsCalendarCalendar* self)
{
	GDateTime* date = NULL;
	GDateTime* _tmp0_;
	GDateTime* firts_week = NULL;
	GDateTime* _tmp1_;
	gint start_day = 0;
	GSettings* _tmp2_;
	gint max_days = 0;
	Util* _tmp3_;
	Util* _tmp4_;
	gint _tmp5_;
	WidgetsCalendarCalendarView* _tmp6_;
	Util* _tmp7_;
	Util* _tmp8_;
	gboolean _tmp9_;
	WidgetsCalendarCalendarHeader* _tmp10_;
#line 114 "../src/Widgets/Calendar/Calendar.vala"
	g_return_if_fail (self != NULL);
#line 115 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->month_nav = self->priv->month_nav - 1;
#line 117 "../src/Widgets/Calendar/Calendar.vala"
	if (self->priv->month_nav < 1) {
#line 118 "../src/Widgets/Calendar/Calendar.vala"
		self->priv->year_nav = self->priv->year_nav - 1;
#line 119 "../src/Widgets/Calendar/Calendar.vala"
		self->priv->month_nav = 12;
#line 329 "Calendar.c"
	}
#line 122 "../src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = g_date_time_new_local (self->priv->year_nav, self->priv->month_nav, 1, 0, 0, (gdouble) 0);
#line 122 "../src/Widgets/Calendar/Calendar.vala"
	date = _tmp0_;
#line 123 "../src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = g_date_time_new_local (g_date_time_get_year (date), g_date_time_get_month (date), 1, 0, 0, (gdouble) 0);
#line 123 "../src/Widgets/Calendar/Calendar.vala"
	firts_week = _tmp1_;
#line 124 "../src/Widgets/Calendar/Calendar.vala"
	_tmp2_ = planner_settings;
#line 124 "../src/Widgets/Calendar/Calendar.vala"
	start_day = g_date_time_get_day_of_week (firts_week) - g_settings_get_enum (_tmp2_, "start-week");
#line 125 "../src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = util_get_default ();
#line 125 "../src/Widgets/Calendar/Calendar.vala"
	_tmp4_ = _tmp3_;
#line 125 "../src/Widgets/Calendar/Calendar.vala"
	_tmp5_ = util_get_days_of_month (_tmp4_, g_date_time_get_month (date), self->priv->year_nav);
#line 125 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (_tmp4_);
#line 125 "../src/Widgets/Calendar/Calendar.vala"
	max_days = _tmp5_;
#line 126 "../src/Widgets/Calendar/Calendar.vala"
	_tmp6_ = self->priv->calendar_view;
#line 126 "../src/Widgets/Calendar/Calendar.vala"
	_tmp7_ = util_get_default ();
#line 126 "../src/Widgets/Calendar/Calendar.vala"
	_tmp8_ = _tmp7_;
#line 126 "../src/Widgets/Calendar/Calendar.vala"
	_tmp9_ = self->priv->_block_past_days;
#line 126 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_view_fill_grid_days (_tmp6_, start_day, max_days, g_date_time_get_day_of_month (date), util_is_current_month (_tmp8_, date), _tmp9_, date);
#line 126 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (_tmp8_);
#line 133 "../src/Widgets/Calendar/Calendar.vala"
	_tmp10_ = self->priv->calendar_header;
#line 133 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_header_set_date (_tmp10_, date);
#line 114 "../src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (firts_week);
#line 114 "../src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (date);
#line 373 "Calendar.c"
}

static void
widgets_calendar_calendar_today (WidgetsCalendarCalendar* self)
{
	gint year = 0;
	GDateTime* _tmp0_;
	gint month = 0;
	GDateTime* _tmp1_;
	gint day = 0;
	GDateTime* _tmp2_;
	GDateTime* firts_week = NULL;
	GDateTime* _tmp3_;
	gint start_day = 0;
	GSettings* _tmp4_;
	gint max_days = 0;
	Util* _tmp5_;
	Util* _tmp6_;
	GDateTime* _tmp7_;
	gint _tmp8_;
	WidgetsCalendarCalendarView* _tmp9_;
	gboolean _tmp10_;
	GDateTime* _tmp11_;
	WidgetsCalendarCalendarHeader* _tmp12_;
	GDateTime* _tmp13_;
#line 136 "../src/Widgets/Calendar/Calendar.vala"
	g_return_if_fail (self != NULL);
#line 137 "../src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = self->priv->current_date;
#line 137 "../src/Widgets/Calendar/Calendar.vala"
	year = g_date_time_get_year (_tmp0_);
#line 138 "../src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = self->priv->current_date;
#line 138 "../src/Widgets/Calendar/Calendar.vala"
	month = g_date_time_get_month (_tmp1_);
#line 139 "../src/Widgets/Calendar/Calendar.vala"
	_tmp2_ = self->priv->current_date;
#line 139 "../src/Widgets/Calendar/Calendar.vala"
	day = g_date_time_get_day_of_month (_tmp2_);
#line 141 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->month_nav = month;
#line 142 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->year_nav = year;
#line 143 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->day_nav = day;
#line 145 "../src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = g_date_time_new_local (year, month, 1, 0, 0, (gdouble) 0);
#line 145 "../src/Widgets/Calendar/Calendar.vala"
	firts_week = _tmp3_;
#line 146 "../src/Widgets/Calendar/Calendar.vala"
	_tmp4_ = planner_settings;
#line 146 "../src/Widgets/Calendar/Calendar.vala"
	start_day = g_date_time_get_day_of_week (firts_week) - g_settings_get_enum (_tmp4_, "start-week");
#line 147 "../src/Widgets/Calendar/Calendar.vala"
	_tmp5_ = util_get_default ();
#line 147 "../src/Widgets/Calendar/Calendar.vala"
	_tmp6_ = _tmp5_;
#line 147 "../src/Widgets/Calendar/Calendar.vala"
	_tmp7_ = self->priv->current_date;
#line 147 "../src/Widgets/Calendar/Calendar.vala"
	_tmp8_ = util_get_days_of_month (_tmp6_, g_date_time_get_month (_tmp7_), self->priv->year_nav);
#line 147 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (_tmp6_);
#line 147 "../src/Widgets/Calendar/Calendar.vala"
	max_days = _tmp8_;
#line 149 "../src/Widgets/Calendar/Calendar.vala"
	_tmp9_ = self->priv->calendar_view;
#line 149 "../src/Widgets/Calendar/Calendar.vala"
	_tmp10_ = self->priv->_block_past_days;
#line 149 "../src/Widgets/Calendar/Calendar.vala"
	_tmp11_ = self->priv->current_date;
#line 149 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_view_fill_grid_days (_tmp9_, start_day, max_days, day, TRUE, _tmp10_, _tmp11_);
#line 158 "../src/Widgets/Calendar/Calendar.vala"
	_tmp12_ = self->priv->calendar_header;
#line 158 "../src/Widgets/Calendar/Calendar.vala"
	_tmp13_ = self->priv->current_date;
#line 158 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_header_set_date (_tmp12_, _tmp13_);
#line 136 "../src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (firts_week);
#line 455 "Calendar.c"
}

gboolean
widgets_calendar_calendar_get_block_past_days (WidgetsCalendarCalendar* self)
{
	gboolean result;
#line 27 "../src/Widgets/Calendar/Calendar.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 27 "../src/Widgets/Calendar/Calendar.vala"
	result = self->priv->_block_past_days;
#line 27 "../src/Widgets/Calendar/Calendar.vala"
	return result;
#line 468 "Calendar.c"
}

static void
widgets_calendar_calendar_set_block_past_days (WidgetsCalendarCalendar* self,
                                               gboolean value)
{
	gboolean old_value;
#line 27 "../src/Widgets/Calendar/Calendar.vala"
	g_return_if_fail (self != NULL);
#line 27 "../src/Widgets/Calendar/Calendar.vala"
	old_value = widgets_calendar_calendar_get_block_past_days (self);
#line 27 "../src/Widgets/Calendar/Calendar.vala"
	if (old_value != value) {
#line 27 "../src/Widgets/Calendar/Calendar.vala"
		self->priv->_block_past_days = value;
#line 27 "../src/Widgets/Calendar/Calendar.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_calendar_calendar_properties[WIDGETS_CALENDAR_CALENDAR_BLOCK_PAST_DAYS_PROPERTY]);
#line 486 "Calendar.c"
	}
}

GDateTime*
widgets_calendar_calendar_get_date (WidgetsCalendarCalendar* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
#line 37 "../src/Widgets/Calendar/Calendar.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 38 "../src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = g_date_time_new_local (self->priv->year_nav, self->priv->month_nav, self->priv->day_nav, 0, 0, (gdouble) 0);
#line 38 "../src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (self->priv->_date);
#line 38 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->_date = _tmp0_;
#line 39 "../src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = self->priv->_date;
#line 39 "../src/Widgets/Calendar/Calendar.vala"
	result = _tmp1_;
#line 39 "../src/Widgets/Calendar/Calendar.vala"
	return result;
#line 510 "Calendar.c"
}

static void
_widgets_calendar_calendar___lambda87_ (WidgetsCalendarCalendar* self)
{
#line 67 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_previous_month (self);
#line 518 "Calendar.c"
}

static void
__widgets_calendar_calendar___lambda87__widgets_calendar_calendar_header_left_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                                                       gpointer self)
{
#line 66 "../src/Widgets/Calendar/Calendar.vala"
	_widgets_calendar_calendar___lambda87_ ((WidgetsCalendarCalendar*) self);
#line 527 "Calendar.c"
}

static void
_widgets_calendar_calendar___lambda88_ (WidgetsCalendarCalendar* self)
{
#line 71 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_today (self);
#line 535 "Calendar.c"
}

static void
__widgets_calendar_calendar___lambda88__widgets_calendar_calendar_header_center_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                                                         gpointer self)
{
#line 70 "../src/Widgets/Calendar/Calendar.vala"
	_widgets_calendar_calendar___lambda88_ ((WidgetsCalendarCalendar*) self);
#line 544 "Calendar.c"
}

static void
_widgets_calendar_calendar___lambda89_ (WidgetsCalendarCalendar* self)
{
#line 75 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_next_month (self);
#line 552 "Calendar.c"
}

static void
__widgets_calendar_calendar___lambda89__widgets_calendar_calendar_header_right_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                                                        gpointer self)
{
#line 74 "../src/Widgets/Calendar/Calendar.vala"
	_widgets_calendar_calendar___lambda89_ ((WidgetsCalendarCalendar*) self);
#line 561 "Calendar.c"
}

static void
_widgets_calendar_calendar___lambda90_ (WidgetsCalendarCalendar* self,
                                        gint day)
{
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
#line 79 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->day_nav = day;
#line 80 "../src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = g_date_time_new_local (self->priv->year_nav, self->priv->month_nav, self->priv->day_nav, 0, 0, (gdouble) 0);
#line 80 "../src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = _tmp0_;
#line 80 "../src/Widgets/Calendar/Calendar.vala"
	g_signal_emit (self, widgets_calendar_calendar_signals[WIDGETS_CALENDAR_CALENDAR_SELECTION_CHANGED_SIGNAL], 0, _tmp1_);
#line 80 "../src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (_tmp1_);
#line 580 "Calendar.c"
}

static void
__widgets_calendar_calendar___lambda90__widgets_calendar_calendar_view_day_selected (WidgetsCalendarCalendarView* _sender,
                                                                                     gint day,
                                                                                     gpointer self)
{
#line 78 "../src/Widgets/Calendar/Calendar.vala"
	_widgets_calendar_calendar___lambda90_ ((WidgetsCalendarCalendar*) self, day);
#line 590 "Calendar.c"
}

static void
_widgets_calendar_calendar___lambda91_ (WidgetsCalendarCalendar* self,
                                        const gchar* key)
{
#line 83 "../src/Widgets/Calendar/Calendar.vala"
	g_return_if_fail (key != NULL);
#line 84 "../src/Widgets/Calendar/Calendar.vala"
	if (g_strcmp0 (key, "start-week") == 0) {
#line 601 "Calendar.c"
		WidgetsCalendarCalendarWeek* _tmp0_;
#line 85 "../src/Widgets/Calendar/Calendar.vala"
		_tmp0_ = self->priv->calendar_week;
#line 85 "../src/Widgets/Calendar/Calendar.vala"
		widgets_calendar_calendar_week_update (_tmp0_);
#line 86 "../src/Widgets/Calendar/Calendar.vala"
		widgets_calendar_calendar_today (self);
#line 609 "Calendar.c"
	}
}

static void
__widgets_calendar_calendar___lambda91__g_settings_changed (GSettings* _sender,
                                                            const gchar* key,
                                                            gpointer self)
{
#line 83 "../src/Widgets/Calendar/Calendar.vala"
	_widgets_calendar_calendar___lambda91_ ((WidgetsCalendarCalendar*) self, key);
#line 620 "Calendar.c"
}

static GObject *
widgets_calendar_calendar_constructor (GType type,
                                       guint n_construct_properties,
                                       GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsCalendarCalendar * self;
	GDateTime* _tmp0_;
	WidgetsCalendarCalendarHeader* _tmp1_;
	WidgetsCalendarCalendarWeek* _tmp2_;
	WidgetsCalendarCalendarView* _tmp3_;
	WidgetsCalendarCalendarHeader* _tmp4_;
	WidgetsCalendarCalendarWeek* _tmp5_;
	WidgetsCalendarCalendarView* _tmp6_;
	WidgetsCalendarCalendarHeader* _tmp7_;
	WidgetsCalendarCalendarHeader* _tmp8_;
	WidgetsCalendarCalendarHeader* _tmp9_;
	WidgetsCalendarCalendarView* _tmp10_;
	GSettings* _tmp11_;
#line 53 "../src/Widgets/Calendar/Calendar.vala"
	parent_class = G_OBJECT_CLASS (widgets_calendar_calendar_parent_class);
#line 53 "../src/Widgets/Calendar/Calendar.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 53 "../src/Widgets/Calendar/Calendar.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendar);
#line 54 "../src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 54 "../src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (self->priv->current_date);
#line 54 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->current_date = _tmp0_;
#line 56 "../src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = widgets_calendar_calendar_header_new ();
#line 56 "../src/Widgets/Calendar/Calendar.vala"
	g_object_ref_sink (_tmp1_);
#line 56 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_header);
#line 56 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->calendar_header = _tmp1_;
#line 57 "../src/Widgets/Calendar/Calendar.vala"
	_tmp2_ = widgets_calendar_calendar_week_new ();
#line 57 "../src/Widgets/Calendar/Calendar.vala"
	g_object_ref_sink (_tmp2_);
#line 57 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_week);
#line 57 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->calendar_week = _tmp2_;
#line 58 "../src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = widgets_calendar_calendar_view_new ();
#line 58 "../src/Widgets/Calendar/Calendar.vala"
	g_object_ref_sink (_tmp3_);
#line 58 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_view);
#line 58 "../src/Widgets/Calendar/Calendar.vala"
	self->priv->calendar_view = _tmp3_;
#line 60 "../src/Widgets/Calendar/Calendar.vala"
	_tmp4_ = self->priv->calendar_header;
#line 60 "../src/Widgets/Calendar/Calendar.vala"
	gtk_box_pack_start ((GtkBox*) self, (GtkWidget*) _tmp4_, TRUE, TRUE, (guint) 0);
#line 61 "../src/Widgets/Calendar/Calendar.vala"
	_tmp5_ = self->priv->calendar_week;
#line 61 "../src/Widgets/Calendar/Calendar.vala"
	gtk_box_pack_start ((GtkBox*) self, (GtkWidget*) _tmp5_, TRUE, TRUE, (guint) 0);
#line 62 "../src/Widgets/Calendar/Calendar.vala"
	_tmp6_ = self->priv->calendar_view;
#line 62 "../src/Widgets/Calendar/Calendar.vala"
	gtk_box_pack_start ((GtkBox*) self, (GtkWidget*) _tmp6_, TRUE, TRUE, (guint) 0);
#line 64 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_today (self);
#line 66 "../src/Widgets/Calendar/Calendar.vala"
	_tmp7_ = self->priv->calendar_header;
#line 66 "../src/Widgets/Calendar/Calendar.vala"
	g_signal_connect_object (_tmp7_, "left-clicked", (GCallback) __widgets_calendar_calendar___lambda87__widgets_calendar_calendar_header_left_clicked, self, 0);
#line 70 "../src/Widgets/Calendar/Calendar.vala"
	_tmp8_ = self->priv->calendar_header;
#line 70 "../src/Widgets/Calendar/Calendar.vala"
	g_signal_connect_object (_tmp8_, "center-clicked", (GCallback) __widgets_calendar_calendar___lambda88__widgets_calendar_calendar_header_center_clicked, self, 0);
#line 74 "../src/Widgets/Calendar/Calendar.vala"
	_tmp9_ = self->priv->calendar_header;
#line 74 "../src/Widgets/Calendar/Calendar.vala"
	g_signal_connect_object (_tmp9_, "right-clicked", (GCallback) __widgets_calendar_calendar___lambda89__widgets_calendar_calendar_header_right_clicked, self, 0);
#line 78 "../src/Widgets/Calendar/Calendar.vala"
	_tmp10_ = self->priv->calendar_view;
#line 78 "../src/Widgets/Calendar/Calendar.vala"
	g_signal_connect_object (_tmp10_, "day-selected", (GCallback) __widgets_calendar_calendar___lambda90__widgets_calendar_calendar_view_day_selected, self, 0);
#line 83 "../src/Widgets/Calendar/Calendar.vala"
	_tmp11_ = planner_settings;
#line 83 "../src/Widgets/Calendar/Calendar.vala"
	g_signal_connect_object (_tmp11_, "changed", (GCallback) __widgets_calendar_calendar___lambda91__g_settings_changed, self, 0);
#line 53 "../src/Widgets/Calendar/Calendar.vala"
	return obj;
#line 715 "Calendar.c"
}

static void
widgets_calendar_calendar_class_init (WidgetsCalendarCalendarClass * klass,
                                      gpointer klass_data)
{
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsCalendarCalendar_private_offset);
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_calendar_calendar_get_property;
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_calendar_calendar_set_property;
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_calendar_calendar_constructor;
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_calendar_calendar_finalize;
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_CALENDAR_CALENDAR_BLOCK_PAST_DAYS_PROPERTY, widgets_calendar_calendar_properties[WIDGETS_CALENDAR_CALENDAR_BLOCK_PAST_DAYS_PROPERTY] = g_param_spec_boolean ("block-past-days", "block-past-days", "block-past-days", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_CALENDAR_CALENDAR_DATE_PROPERTY, widgets_calendar_calendar_properties[WIDGETS_CALENDAR_CALENDAR_DATE_PROPERTY] = g_param_spec_boxed ("date", "date", "date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_signals[WIDGETS_CALENDAR_CALENDAR_SELECTION_CHANGED_SIGNAL] = g_signal_new ("selection-changed", WIDGETS_CALENDAR_TYPE_CALENDAR, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOXED, G_TYPE_NONE, 1, G_TYPE_DATE_TIME);
#line 740 "Calendar.c"
}

static void
widgets_calendar_calendar_instance_init (WidgetsCalendarCalendar * self,
                                         gpointer klass)
{
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	self->priv = widgets_calendar_calendar_get_instance_private (self);
#line 749 "Calendar.c"
}

static void
widgets_calendar_calendar_finalize (GObject * obj)
{
	WidgetsCalendarCalendar * self;
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendar);
#line 23 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_header);
#line 24 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_week);
#line 25 "../src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_view);
#line 33 "../src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (self->priv->current_date);
#line 35 "../src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (self->priv->_date);
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	G_OBJECT_CLASS (widgets_calendar_calendar_parent_class)->finalize (obj);
#line 770 "Calendar.c"
}

static GType
widgets_calendar_calendar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsCalendarCalendarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_calendar_calendar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsCalendarCalendar), 0, (GInstanceInitFunc) widgets_calendar_calendar_instance_init, NULL };
	GType widgets_calendar_calendar_type_id;
	widgets_calendar_calendar_type_id = g_type_register_static (gtk_box_get_type (), "WidgetsCalendarCalendar", &g_define_type_info, 0);
	WidgetsCalendarCalendar_private_offset = g_type_add_instance_private (widgets_calendar_calendar_type_id, sizeof (WidgetsCalendarCalendarPrivate));
	return widgets_calendar_calendar_type_id;
}

GType
widgets_calendar_calendar_get_type (void)
{
	static volatile gsize widgets_calendar_calendar_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_calendar_calendar_type_id__volatile)) {
		GType widgets_calendar_calendar_type_id;
		widgets_calendar_calendar_type_id = widgets_calendar_calendar_get_type_once ();
		g_once_init_leave (&widgets_calendar_calendar_type_id__volatile, widgets_calendar_calendar_type_id);
	}
	return widgets_calendar_calendar_type_id__volatile;
}

static void
_vala_widgets_calendar_calendar_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	WidgetsCalendarCalendar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendar);
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	switch (property_id) {
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		case WIDGETS_CALENDAR_CALENDAR_BLOCK_PAST_DAYS_PROPERTY:
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		g_value_set_boolean (value, widgets_calendar_calendar_get_block_past_days (self));
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		break;
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		case WIDGETS_CALENDAR_CALENDAR_DATE_PROPERTY:
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		g_value_set_boxed (value, widgets_calendar_calendar_get_date (self));
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		break;
#line 817 "Calendar.c"
		default:
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		break;
#line 823 "Calendar.c"
	}
}

static void
_vala_widgets_calendar_calendar_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec)
{
	WidgetsCalendarCalendar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendar);
#line 22 "../src/Widgets/Calendar/Calendar.vala"
	switch (property_id) {
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		case WIDGETS_CALENDAR_CALENDAR_BLOCK_PAST_DAYS_PROPERTY:
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		widgets_calendar_calendar_set_block_past_days (self, g_value_get_boolean (value));
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		break;
#line 843 "Calendar.c"
		default:
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Widgets/Calendar/Calendar.vala"
		break;
#line 849 "Calendar.c"
	}
}

