/* ScheduledDay.c generated by valac 0.50.10, the Vala compiler
 * generated from ScheduledDay.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <granite.h>

#define VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY (views_scheduled_scheduled_day_get_type ())
#define VIEWS_SCHEDULED_SCHEDULED_DAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, ViewsScheduledScheduledDay))
#define VIEWS_SCHEDULED_SCHEDULED_DAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, ViewsScheduledScheduledDayClass))
#define VIEWS_SCHEDULED_IS_SCHEDULED_DAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY))
#define VIEWS_SCHEDULED_IS_SCHEDULED_DAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY))
#define VIEWS_SCHEDULED_SCHEDULED_DAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, ViewsScheduledScheduledDayClass))

typedef struct _ViewsScheduledScheduledDay ViewsScheduledScheduledDay;
typedef struct _ViewsScheduledScheduledDayClass ViewsScheduledScheduledDayClass;
typedef struct _ViewsScheduledScheduledDayPrivate ViewsScheduledScheduledDayPrivate;
enum  {
	VIEWS_SCHEDULED_SCHEDULED_DAY_0_PROPERTY,
	VIEWS_SCHEDULED_SCHEDULED_DAY_DATE_PROPERTY,
	VIEWS_SCHEDULED_SCHEDULED_DAY_NUM_PROPERTIES
};
static GParamSpec* views_scheduled_scheduled_day_properties[VIEWS_SCHEDULED_SCHEDULED_DAY_NUM_PROPERTIES];
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _Block31Data Block31Data;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define OBJECTS_TYPE_DUE_DATE (objects_due_date_get_type ())
#define OBJECTS_DUE_DATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_DUE_DATE, ObjectsDueDate))
#define OBJECTS_DUE_DATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_DUE_DATE, ObjectsDueDateClass))
#define OBJECTS_IS_DUE_DATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_DUE_DATE))
#define OBJECTS_IS_DUE_DATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_DUE_DATE))
#define OBJECTS_DUE_DATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_DUE_DATE, ObjectsDueDateClass))

typedef struct _ObjectsDueDate ObjectsDueDate;
typedef struct _ObjectsDueDateClass ObjectsDueDateClass;

struct _ViewsScheduledScheduledDay {
	GtkButton parent_instance;
	ViewsScheduledScheduledDayPrivate * priv;
};

struct _ViewsScheduledScheduledDayClass {
	GtkButtonClass parent_class;
};

struct _ViewsScheduledScheduledDayPrivate {
	GDateTime* _date;
	GeeHashMap* component_dots;
	GtkGrid* dots_grid;
};

struct _Block31Data {
	int _ref_count_;
	ViewsScheduledScheduledDay* self;
	GtkStack* day_stack;
};

static gint ViewsScheduledScheduledDay_private_offset;
static gpointer views_scheduled_scheduled_day_parent_class = NULL;
extern ServicesDatabase* planner_database;

GType views_scheduled_scheduled_day_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsScheduledScheduledDay, g_object_unref)
ViewsScheduledScheduledDay* views_scheduled_scheduled_day_new (GDateTime* date);
ViewsScheduledScheduledDay* views_scheduled_scheduled_day_construct (GType object_type,
                                                                     GDateTime* date);
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
void views_scheduled_scheduled_day_add_component_dot (ViewsScheduledScheduledDay* self,
                                                      ObjectsItem* item);
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
void util_set_widget_color (Util* self,
                            const gchar* color,
                            GtkWidget* widget);
gchar* util_get_color (Util* self,
                       const gchar* key);
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
ObjectsProject* objects_item_get_project (ObjectsItem* self);
const gchar* objects_project_get_color (ObjectsProject* self);
void views_scheduled_scheduled_day_remove_component_dot (ViewsScheduledScheduledDay* self,
                                                         const gchar* id);
gboolean views_scheduled_scheduled_day_has_component (ViewsScheduledScheduledDay* self,
                                                      const gchar* id);
static guint views_scheduled_scheduled_day_day_hash (ViewsScheduledScheduledDay* self,
                                              GDateTime* date);
GDateTime* views_scheduled_scheduled_day_get_date (ViewsScheduledScheduledDay* self);
static void views_scheduled_scheduled_day_set_date (ViewsScheduledScheduledDay* self,
                                             GDateTime* value);
static GObject * views_scheduled_scheduled_day_constructor (GType type,
                                                     guint n_construct_properties,
                                                     GObjectConstructParam * construct_properties);
static Block31Data* block31_data_ref (Block31Data* _data31_);
static void block31_data_unref (void * _userdata_);
gboolean util_is_today (Util* self,
                        GDateTime* date);
static gboolean _views_scheduled_scheduled_day____lambda269_ (Block31Data* _data31_);
static gboolean __views_scheduled_scheduled_day____lambda269__gsource_func (gpointer self);
gboolean util_is_overdue (Util* self,
                          GDateTime* date);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
static void _views_scheduled_scheduled_day___lambda270_ (ViewsScheduledScheduledDay* self,
                                                  ObjectsItem* item);
gboolean objects_item_get_has_due (ObjectsItem* self);
gboolean objects_item_get_checked (ObjectsItem* self);
GType objects_due_date_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsDueDate, g_object_unref)
ObjectsDueDate* objects_item_get_due (ObjectsItem* self);
GDateTime* objects_due_date_get_datetime (ObjectsDueDate* self);
static void __views_scheduled_scheduled_day___lambda270__services_database_item_updated (ServicesDatabase* _sender,
                                                                                  ObjectsItem* item,
                                                                                  gint64 update_id,
                                                                                  gpointer self);
static void views_scheduled_scheduled_day_finalize (GObject * obj);
static GType views_scheduled_scheduled_day_get_type_once (void);
static void _vala_views_scheduled_scheduled_day_get_property (GObject * object,
                                                       guint property_id,
                                                       GValue * value,
                                                       GParamSpec * pspec);
static void _vala_views_scheduled_scheduled_day_set_property (GObject * object,
                                                       guint property_id,
                                                       const GValue * value,
                                                       GParamSpec * pspec);

static inline gpointer
views_scheduled_scheduled_day_get_instance_private (ViewsScheduledScheduledDay* self)
{
	return G_STRUCT_MEMBER_P (self, ViewsScheduledScheduledDay_private_offset);
}

ViewsScheduledScheduledDay*
views_scheduled_scheduled_day_construct (GType object_type,
                                         GDateTime* date)
{
	ViewsScheduledScheduledDay * self = NULL;
#line 7 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_val_if_fail (date != NULL, NULL);
#line 8 "../src/Views/Scheduled/ScheduledDay.vala"
	self = (ViewsScheduledScheduledDay*) g_object_new (object_type, "date", date, NULL);
#line 7 "../src/Views/Scheduled/ScheduledDay.vala"
	return self;
#line 206 "ScheduledDay.c"
}

ViewsScheduledScheduledDay*
views_scheduled_scheduled_day_new (GDateTime* date)
{
#line 7 "../src/Views/Scheduled/ScheduledDay.vala"
	return views_scheduled_scheduled_day_construct (VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, date);
#line 214 "ScheduledDay.c"
}

void
views_scheduled_scheduled_day_add_component_dot (ViewsScheduledScheduledDay* self,
                                                 ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	gchar* component_uid = NULL;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	GeeHashMap* _tmp6_;
	const gchar* _tmp7_;
#line 83 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_if_fail (self != NULL);
#line 83 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_if_fail (item != NULL);
#line 84 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp0_ = self->priv->component_dots;
#line 84 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp1_ = gee_abstract_map_get_size ((GeeAbstractMap*) _tmp0_);
#line 84 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp2_ = _tmp1_;
#line 84 "../src/Views/Scheduled/ScheduledDay.vala"
	if (_tmp2_ >= 3) {
#line 85 "../src/Views/Scheduled/ScheduledDay.vala"
		return;
#line 244 "ScheduledDay.c"
	}
#line 88 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp3_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 88 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp4_ = _tmp3_;
#line 88 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp5_ = g_strdup (_tmp4_);
#line 88 "../src/Views/Scheduled/ScheduledDay.vala"
	component_uid = _tmp5_;
#line 89 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp6_ = self->priv->component_dots;
#line 89 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp7_ = component_uid;
#line 89 "../src/Views/Scheduled/ScheduledDay.vala"
	if (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp6_, _tmp7_)) {
#line 260 "ScheduledDay.c"
		GtkImage* event_dot = NULL;
		GtkImage* _tmp8_;
		GtkImage* _tmp9_;
		GThemedIcon* _tmp10_;
		GThemedIcon* _tmp11_;
		GtkImage* _tmp12_;
		GtkStyleContext* style_context = NULL;
		GtkImage* _tmp13_;
		GtkStyleContext* _tmp14_;
		GtkStyleContext* _tmp15_;
		Util* _tmp16_;
		Util* _tmp17_;
		Util* _tmp18_;
		Util* _tmp19_;
		ObjectsProject* _tmp20_;
		ObjectsProject* _tmp21_;
		const gchar* _tmp22_;
		const gchar* _tmp23_;
		gchar* _tmp24_;
		gchar* _tmp25_;
		GtkImage* _tmp26_;
		GeeHashMap* _tmp27_;
		const gchar* _tmp28_;
		GtkImage* _tmp29_;
		GtkGrid* _tmp30_;
		GtkImage* _tmp31_;
		GtkGrid* _tmp32_;
#line 90 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp8_ = (GtkImage*) gtk_image_new ();
#line 90 "../src/Views/Scheduled/ScheduledDay.vala"
		g_object_ref_sink (_tmp8_);
#line 90 "../src/Views/Scheduled/ScheduledDay.vala"
		event_dot = _tmp8_;
#line 91 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp9_ = event_dot;
#line 91 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp10_ = (GThemedIcon*) g_themed_icon_new ("pager-checked-symbolic");
#line 91 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp11_ = _tmp10_;
#line 91 "../src/Views/Scheduled/ScheduledDay.vala"
		g_object_set (_tmp9_, "gicon", (GIcon*) _tmp11_, NULL);
#line 91 "../src/Views/Scheduled/ScheduledDay.vala"
		_g_object_unref0 (_tmp11_);
#line 92 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp12_ = event_dot;
#line 92 "../src/Views/Scheduled/ScheduledDay.vala"
		gtk_image_set_pixel_size (_tmp12_, 6);
#line 94 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp13_ = event_dot;
#line 94 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
#line 94 "../src/Views/Scheduled/ScheduledDay.vala"
		style_context = _tmp14_;
#line 95 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp15_ = style_context;
#line 95 "../src/Views/Scheduled/ScheduledDay.vala"
		gtk_style_context_add_class (_tmp15_, GRANITE_STYLE_CLASS_ACCENT);
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp16_ = util_get_default ();
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp17_ = _tmp16_;
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp18_ = util_get_default ();
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp19_ = _tmp18_;
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp20_ = objects_item_get_project (item);
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp21_ = _tmp20_;
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp22_ = objects_project_get_color (_tmp21_);
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp23_ = _tmp22_;
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp24_ = util_get_color (_tmp19_, _tmp23_);
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp25_ = _tmp24_;
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp26_ = event_dot;
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		util_set_widget_color (_tmp17_, _tmp25_, (GtkWidget*) _tmp26_);
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_g_free0 (_tmp25_);
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_g_object_unref0 (_tmp19_);
#line 96 "../src/Views/Scheduled/ScheduledDay.vala"
		_g_object_unref0 (_tmp17_);
#line 98 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp27_ = self->priv->component_dots;
#line 98 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp28_ = component_uid;
#line 98 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp29_ = event_dot;
#line 98 "../src/Views/Scheduled/ScheduledDay.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp27_, _tmp28_, (GtkWidget*) _tmp29_);
#line 99 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp30_ = self->priv->dots_grid;
#line 99 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp31_ = event_dot;
#line 99 "../src/Views/Scheduled/ScheduledDay.vala"
		gtk_container_add ((GtkContainer*) _tmp30_, (GtkWidget*) _tmp31_);
#line 100 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp32_ = self->priv->dots_grid;
#line 100 "../src/Views/Scheduled/ScheduledDay.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp32_);
#line 89 "../src/Views/Scheduled/ScheduledDay.vala"
		_g_object_unref0 (event_dot);
#line 368 "ScheduledDay.c"
	}
#line 83 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_free0 (component_uid);
#line 372 "ScheduledDay.c"
}

void
views_scheduled_scheduled_day_remove_component_dot (ViewsScheduledScheduledDay* self,
                                                    const gchar* id)
{
	GtkWidget* dot = NULL;
	GeeHashMap* _tmp0_;
	gpointer _tmp1_;
	GtkWidget* _tmp2_;
#line 104 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_if_fail (self != NULL);
#line 104 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_if_fail (id != NULL);
#line 105 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp0_ = self->priv->component_dots;
#line 105 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp1_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp0_, id);
#line 105 "../src/Views/Scheduled/ScheduledDay.vala"
	dot = (GtkWidget*) _tmp1_;
#line 106 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp2_ = dot;
#line 106 "../src/Views/Scheduled/ScheduledDay.vala"
	if (_tmp2_ != NULL) {
#line 397 "ScheduledDay.c"
		GtkWidget* _tmp3_;
		GeeHashMap* _tmp4_;
#line 107 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp3_ = dot;
#line 107 "../src/Views/Scheduled/ScheduledDay.vala"
		gtk_widget_destroy (_tmp3_);
#line 108 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp4_ = self->priv->component_dots;
#line 108 "../src/Views/Scheduled/ScheduledDay.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp4_, id, NULL);
#line 408 "ScheduledDay.c"
	}
#line 104 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (dot);
#line 412 "ScheduledDay.c"
}

gboolean
views_scheduled_scheduled_day_has_component (ViewsScheduledScheduledDay* self,
                                             const gchar* id)
{
	GeeHashMap* _tmp0_;
	gboolean result = FALSE;
#line 112 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 112 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_val_if_fail (id != NULL, FALSE);
#line 113 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp0_ = self->priv->component_dots;
#line 113 "../src/Views/Scheduled/ScheduledDay.vala"
	result = gee_abstract_map_has_key ((GeeAbstractMap*) _tmp0_, id);
#line 113 "../src/Views/Scheduled/ScheduledDay.vala"
	return result;
#line 431 "ScheduledDay.c"
}

static guint
views_scheduled_scheduled_day_day_hash (ViewsScheduledScheduledDay* self,
                                        GDateTime* date)
{
	guint result = 0U;
#line 116 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 116 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_val_if_fail (date != NULL, 0U);
#line 117 "../src/Views/Scheduled/ScheduledDay.vala"
	result = (guint) (((g_date_time_get_year (date) * 10000) + (g_date_time_get_month (date) * 100)) + g_date_time_get_day_of_month (date));
#line 117 "../src/Views/Scheduled/ScheduledDay.vala"
	return result;
#line 447 "ScheduledDay.c"
}

GDateTime*
views_scheduled_scheduled_day_get_date (ViewsScheduledScheduledDay* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp0_ = self->priv->_date;
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
	result = _tmp0_;
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
	return result;
#line 463 "ScheduledDay.c"
}

static gpointer
_g_date_time_ref0 (gpointer self)
{
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
	return self ? g_date_time_ref (self) : NULL;
#line 471 "ScheduledDay.c"
}

static void
views_scheduled_scheduled_day_set_date (ViewsScheduledScheduledDay* self,
                                        GDateTime* value)
{
	GDateTime* old_value;
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
	old_value = views_scheduled_scheduled_day_get_date (self);
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
	if (old_value != value) {
#line 485 "ScheduledDay.c"
		GDateTime* _tmp0_;
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp0_ = _g_date_time_ref0 (value);
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
		_g_date_time_unref0 (self->priv->_date);
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
		self->priv->_date = _tmp0_;
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
		g_object_notify_by_pspec ((GObject *) self, views_scheduled_scheduled_day_properties[VIEWS_SCHEDULED_SCHEDULED_DAY_DATE_PROPERTY]);
#line 495 "ScheduledDay.c"
	}
}

static Block31Data*
block31_data_ref (Block31Data* _data31_)
{
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	g_atomic_int_inc (&_data31_->_ref_count_);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	return _data31_;
#line 506 "ScheduledDay.c"
}

static void
block31_data_unref (void * _userdata_)
{
	Block31Data* _data31_;
	_data31_ = (Block31Data*) _userdata_;
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	if (g_atomic_int_dec_and_test (&_data31_->_ref_count_)) {
#line 516 "ScheduledDay.c"
		ViewsScheduledScheduledDay* self;
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
		self = _data31_->self;
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
		_g_object_unref0 (_data31_->day_stack);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
		_g_object_unref0 (self);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
		g_slice_free (Block31Data, _data31_);
#line 526 "ScheduledDay.c"
	}
}

static gboolean
_views_scheduled_scheduled_day____lambda269_ (Block31Data* _data31_)
{
	ViewsScheduledScheduledDay* self;
	GtkStack* _tmp0_;
	gboolean result = FALSE;
#line 42 "../src/Views/Scheduled/ScheduledDay.vala"
	self = _data31_->self;
#line 43 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp0_ = _data31_->day_stack;
#line 43 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_stack_set_visible_child_name (_tmp0_, "icon");
#line 44 "../src/Views/Scheduled/ScheduledDay.vala"
	result = G_SOURCE_REMOVE;
#line 44 "../src/Views/Scheduled/ScheduledDay.vala"
	return result;
#line 546 "ScheduledDay.c"
}

static gboolean
__views_scheduled_scheduled_day____lambda269__gsource_func (gpointer self)
{
	gboolean result;
	result = _views_scheduled_scheduled_day____lambda269_ (self);
#line 42 "../src/Views/Scheduled/ScheduledDay.vala"
	return result;
#line 556 "ScheduledDay.c"
}

static void
_views_scheduled_scheduled_day___lambda270_ (ViewsScheduledScheduledDay* self,
                                             ObjectsItem* item)
{
	gboolean _tmp0_ = FALSE;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	gboolean _tmp10_ = FALSE;
	gboolean _tmp11_ = FALSE;
	const gchar* _tmp12_;
	const gchar* _tmp13_;
#line 71 "../src/Views/Scheduled/ScheduledDay.vala"
	g_return_if_fail (item != NULL);
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp1_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp2_ = _tmp1_;
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
	if (views_scheduled_scheduled_day_has_component (self, _tmp2_)) {
#line 578 "ScheduledDay.c"
		gboolean _tmp3_ = FALSE;
		gboolean _tmp4_;
		gboolean _tmp5_;
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp4_ = objects_item_get_has_due (item);
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp5_ = _tmp4_;
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
		if (!_tmp5_) {
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp3_ = TRUE;
#line 590 "ScheduledDay.c"
		} else {
			gboolean _tmp6_;
			gboolean _tmp7_;
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp6_ = objects_item_get_checked (item);
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp7_ = _tmp6_;
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp3_ = _tmp7_;
#line 600 "ScheduledDay.c"
		}
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp0_ = _tmp3_;
#line 604 "ScheduledDay.c"
	} else {
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp0_ = FALSE;
#line 608 "ScheduledDay.c"
	}
#line 72 "../src/Views/Scheduled/ScheduledDay.vala"
	if (_tmp0_) {
#line 612 "ScheduledDay.c"
		const gchar* _tmp8_;
		const gchar* _tmp9_;
#line 73 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp8_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 73 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp9_ = _tmp8_;
#line 73 "../src/Views/Scheduled/ScheduledDay.vala"
		views_scheduled_scheduled_day_remove_component_dot (self, _tmp9_);
#line 621 "ScheduledDay.c"
	}
#line 76 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp12_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 76 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp13_ = _tmp12_;
#line 76 "../src/Views/Scheduled/ScheduledDay.vala"
	if (views_scheduled_scheduled_day_has_component (self, _tmp13_)) {
#line 629 "ScheduledDay.c"
		gboolean _tmp14_;
		gboolean _tmp15_;
#line 76 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp14_ = objects_item_get_has_due (item);
#line 76 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp15_ = _tmp14_;
#line 76 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp11_ = _tmp15_;
#line 638 "ScheduledDay.c"
	} else {
#line 76 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp11_ = FALSE;
#line 642 "ScheduledDay.c"
	}
#line 76 "../src/Views/Scheduled/ScheduledDay.vala"
	if (_tmp11_) {
#line 646 "ScheduledDay.c"
		ObjectsDueDate* _tmp16_;
		ObjectsDueDate* _tmp17_;
		GDateTime* _tmp18_;
		GDateTime* _tmp19_;
		GDateTime* _tmp20_;
#line 77 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp16_ = objects_item_get_due (item);
#line 77 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp17_ = _tmp16_;
#line 77 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp18_ = objects_due_date_get_datetime (_tmp17_);
#line 77 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp19_ = _tmp18_;
#line 77 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp20_ = self->priv->_date;
#line 77 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp10_ = views_scheduled_scheduled_day_day_hash (self, _tmp19_) != views_scheduled_scheduled_day_day_hash (self, _tmp20_);
#line 664 "ScheduledDay.c"
	} else {
#line 76 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp10_ = FALSE;
#line 668 "ScheduledDay.c"
	}
#line 76 "../src/Views/Scheduled/ScheduledDay.vala"
	if (_tmp10_) {
#line 672 "ScheduledDay.c"
		const gchar* _tmp21_;
		const gchar* _tmp22_;
#line 78 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp21_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 78 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp22_ = _tmp21_;
#line 78 "../src/Views/Scheduled/ScheduledDay.vala"
		views_scheduled_scheduled_day_remove_component_dot (self, _tmp22_);
#line 681 "ScheduledDay.c"
	}
}

static void
__views_scheduled_scheduled_day___lambda270__services_database_item_updated (ServicesDatabase* _sender,
                                                                             ObjectsItem* item,
                                                                             gint64 update_id,
                                                                             gpointer self)
{
#line 71 "../src/Views/Scheduled/ScheduledDay.vala"
	_views_scheduled_scheduled_day___lambda270_ ((ViewsScheduledScheduledDay*) self, item);
#line 693 "ScheduledDay.c"
}

static GObject *
views_scheduled_scheduled_day_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsScheduledScheduledDay * self;
	Block31Data* _data31_;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	GtkLabel* day_name_label = NULL;
	GDateTime* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GtkLabel* _tmp5_ = NULL;
	GtkLabel* _tmp6_;
	GtkLabel* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkLabel* day_label = NULL;
	GDateTime* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	GtkLabel* _tmp12_ = NULL;
	GtkLabel* _tmp13_;
	GtkImage* today_icon = NULL;
	GThemedIcon* _tmp14_;
	GtkImage* _tmp15_ = NULL;
	GtkStack* _tmp16_ = NULL;
	GtkStack* _tmp17_;
	GtkLabel* _tmp18_;
	GtkStack* _tmp19_;
	GtkImage* _tmp20_;
	Util* _tmp21_;
	Util* _tmp22_;
	GDateTime* _tmp23_;
	gboolean _tmp24_;
	GeeHashMap* _tmp40_;
	GtkGrid* _tmp41_ = NULL;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp42_ = NULL;
	GtkGrid* _tmp43_;
	GtkLabel* _tmp44_;
	GtkGrid* _tmp45_;
	GtkStack* _tmp46_;
	GtkGrid* _tmp47_;
	GtkGrid* _tmp48_;
	GtkGrid* _tmp49_;
	ServicesDatabase* _tmp50_;
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	parent_class = G_OBJECT_CLASS (views_scheduled_scheduled_day_parent_class);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, ViewsScheduledScheduledDay);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	_data31_ = g_slice_new0 (Block31Data);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	_data31_->_ref_count_ = 1;
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	_data31_->self = g_object_ref (self);
#line 12 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 12 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_FLAT);
#line 13 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 13 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_style_context_add_class (_tmp1_, "scheduled-day");
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp2_ = self->priv->_date;
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp3_ = g_date_time_format (_tmp2_, "%a");
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp4_ = _tmp3_;
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp5_ = (GtkLabel*) gtk_label_new (_tmp4_);
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp5_, TRUE);
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp5_, GTK_ALIGN_CENTER);
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp5_, 3);
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	g_object_ref_sink (_tmp5_);
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp6_ = _tmp5_;
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_free0 (_tmp4_);
#line 15 "../src/Views/Scheduled/ScheduledDay.vala"
	day_name_label = _tmp6_;
#line 21 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp7_ = day_name_label;
#line 21 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
#line 21 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_style_context_add_class (_tmp8_, GRANITE_STYLE_CLASS_SMALL_LABEL);
#line 23 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp9_ = self->priv->_date;
#line 23 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp10_ = g_strdup_printf ("%i", g_date_time_get_day_of_month (_tmp9_));
#line 23 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp11_ = _tmp10_;
#line 23 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp12_ = (GtkLabel*) gtk_label_new (_tmp11_);
#line 23 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp12_, TRUE);
#line 23 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp12_, GTK_ALIGN_CENTER);
#line 23 "../src/Views/Scheduled/ScheduledDay.vala"
	g_object_ref_sink (_tmp12_);
#line 23 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp13_ = _tmp12_;
#line 23 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_free0 (_tmp11_);
#line 23 "../src/Views/Scheduled/ScheduledDay.vala"
	day_label = _tmp13_;
#line 28 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp14_ = (GThemedIcon*) g_themed_icon_new ("planner-today");
#line 28 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp15_ = (GtkImage*) gtk_image_new ();
#line 28 "../src/Views/Scheduled/ScheduledDay.vala"
	g_object_set (_tmp15_, "gicon", (GIcon*) _tmp14_, NULL);
#line 28 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (_tmp14_);
#line 28 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_image_set_pixel_size (_tmp15_, 19);
#line 28 "../src/Views/Scheduled/ScheduledDay.vala"
	g_object_ref_sink (_tmp15_);
#line 28 "../src/Views/Scheduled/ScheduledDay.vala"
	today_icon = _tmp15_;
#line 33 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp16_ = (GtkStack*) gtk_stack_new ();
#line 33 "../src/Views/Scheduled/ScheduledDay.vala"
	g_object_set ((GtkWidget*) _tmp16_, "expand", TRUE, NULL);
#line 33 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_stack_set_transition_type (_tmp16_, GTK_STACK_TRANSITION_TYPE_CROSSFADE);
#line 33 "../src/Views/Scheduled/ScheduledDay.vala"
	g_object_ref_sink (_tmp16_);
#line 33 "../src/Views/Scheduled/ScheduledDay.vala"
	_data31_->day_stack = _tmp16_;
#line 38 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp17_ = _data31_->day_stack;
#line 38 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp18_ = day_label;
#line 38 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_stack_add_named (_tmp17_, (GtkWidget*) _tmp18_, "day");
#line 39 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp19_ = _data31_->day_stack;
#line 39 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp20_ = today_icon;
#line 39 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_stack_add_named (_tmp19_, (GtkWidget*) _tmp20_, "icon");
#line 41 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp21_ = util_get_default ();
#line 41 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp22_ = _tmp21_;
#line 41 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp23_ = self->priv->_date;
#line 41 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp24_ = util_is_today (_tmp22_, _tmp23_);
#line 41 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (_tmp22_);
#line 41 "../src/Views/Scheduled/ScheduledDay.vala"
	if (_tmp24_) {
#line 861 "ScheduledDay.c"
		GtkStack* _tmp25_;
		guint _tmp26_;
		guint _tmp27_;
#line 42 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp25_ = _data31_->day_stack;
#line 42 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp26_ = gtk_stack_get_transition_duration (_tmp25_);
#line 42 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp27_ = _tmp26_;
#line 42 "../src/Views/Scheduled/ScheduledDay.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp27_, __views_scheduled_scheduled_day____lambda269__gsource_func, block31_data_ref (_data31_), block31_data_unref);
#line 873 "ScheduledDay.c"
	} else {
		Util* _tmp28_;
		Util* _tmp29_;
		GDateTime* _tmp30_;
		gboolean _tmp31_;
#line 46 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp28_ = util_get_default ();
#line 46 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp29_ = _tmp28_;
#line 46 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp30_ = self->priv->_date;
#line 46 "../src/Views/Scheduled/ScheduledDay.vala"
		_tmp31_ = util_is_overdue (_tmp29_, _tmp30_);
#line 46 "../src/Views/Scheduled/ScheduledDay.vala"
		_g_object_unref0 (_tmp29_);
#line 46 "../src/Views/Scheduled/ScheduledDay.vala"
		if (_tmp31_) {
#line 891 "ScheduledDay.c"
			GtkLabel* _tmp32_;
			GtkStyleContext* _tmp33_;
			GtkLabel* _tmp34_;
			GtkStyleContext* _tmp35_;
#line 47 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp32_ = day_name_label;
#line 47 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp33_ = gtk_widget_get_style_context ((GtkWidget*) _tmp32_);
#line 47 "../src/Views/Scheduled/ScheduledDay.vala"
			gtk_style_context_remove_class (_tmp33_, GTK_STYLE_CLASS_DIM_LABEL);
#line 48 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp34_ = day_label;
#line 48 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp35_ = gtk_widget_get_style_context ((GtkWidget*) _tmp34_);
#line 48 "../src/Views/Scheduled/ScheduledDay.vala"
			gtk_style_context_add_class (_tmp35_, GTK_STYLE_CLASS_DIM_LABEL);
#line 908 "ScheduledDay.c"
		} else {
			GtkLabel* _tmp36_;
			GtkStyleContext* _tmp37_;
			GtkLabel* _tmp38_;
			GtkStyleContext* _tmp39_;
#line 50 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp36_ = day_name_label;
#line 50 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp37_ = gtk_widget_get_style_context ((GtkWidget*) _tmp36_);
#line 50 "../src/Views/Scheduled/ScheduledDay.vala"
			gtk_style_context_remove_class (_tmp37_, GTK_STYLE_CLASS_DIM_LABEL);
#line 51 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp38_ = day_label;
#line 51 "../src/Views/Scheduled/ScheduledDay.vala"
			_tmp39_ = gtk_widget_get_style_context ((GtkWidget*) _tmp38_);
#line 51 "../src/Views/Scheduled/ScheduledDay.vala"
			gtk_style_context_add_class (_tmp39_, "font-bold");
#line 926 "ScheduledDay.c"
		}
	}
#line 54 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp40_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, gtk_widget_get_type (), (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 54 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (self->priv->component_dots);
#line 54 "../src/Views/Scheduled/ScheduledDay.vala"
	self->priv->component_dots = _tmp40_;
#line 55 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp41_ = (GtkGrid*) gtk_grid_new ();
#line 55 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp41_, GTK_ALIGN_CENTER);
#line 55 "../src/Views/Scheduled/ScheduledDay.vala"
	g_object_set ((GtkWidget*) _tmp41_, "height-request", 6, NULL);
#line 55 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp41_, 3);
#line 55 "../src/Views/Scheduled/ScheduledDay.vala"
	g_object_ref_sink (_tmp41_);
#line 55 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (self->priv->dots_grid);
#line 55 "../src/Views/Scheduled/ScheduledDay.vala"
	self->priv->dots_grid = _tmp41_;
#line 61 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp42_ = (GtkGrid*) gtk_grid_new ();
#line 61 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp42_, GTK_ORIENTATION_VERTICAL);
#line 61 "../src/Views/Scheduled/ScheduledDay.vala"
	g_object_ref_sink (_tmp42_);
#line 61 "../src/Views/Scheduled/ScheduledDay.vala"
	main_grid = _tmp42_;
#line 65 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp43_ = main_grid;
#line 65 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp44_ = day_name_label;
#line 65 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_container_add ((GtkContainer*) _tmp43_, (GtkWidget*) _tmp44_);
#line 66 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp45_ = main_grid;
#line 66 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp46_ = _data31_->day_stack;
#line 66 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_container_add ((GtkContainer*) _tmp45_, (GtkWidget*) _tmp46_);
#line 67 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp47_ = main_grid;
#line 67 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp48_ = self->priv->dots_grid;
#line 67 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_container_add ((GtkContainer*) _tmp47_, (GtkWidget*) _tmp48_);
#line 69 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp49_ = main_grid;
#line 69 "../src/Views/Scheduled/ScheduledDay.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp49_);
#line 71 "../src/Views/Scheduled/ScheduledDay.vala"
	_tmp50_ = planner_database;
#line 71 "../src/Views/Scheduled/ScheduledDay.vala"
	g_signal_connect_object (_tmp50_, "item-updated", (GCallback) __views_scheduled_scheduled_day___lambda270__services_database_item_updated, self, 0);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (main_grid);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (today_icon);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (day_label);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (day_name_label);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	block31_data_unref (_data31_);
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	_data31_ = NULL;
#line 11 "../src/Views/Scheduled/ScheduledDay.vala"
	return obj;
#line 997 "ScheduledDay.c"
}

static void
views_scheduled_scheduled_day_class_init (ViewsScheduledScheduledDayClass * klass,
                                          gpointer klass_data)
{
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	views_scheduled_scheduled_day_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	g_type_class_adjust_private_offset (klass, &ViewsScheduledScheduledDay_private_offset);
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_views_scheduled_scheduled_day_get_property;
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_views_scheduled_scheduled_day_set_property;
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	G_OBJECT_CLASS (klass)->constructor = views_scheduled_scheduled_day_constructor;
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	G_OBJECT_CLASS (klass)->finalize = views_scheduled_scheduled_day_finalize;
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_SCHEDULED_SCHEDULED_DAY_DATE_PROPERTY, views_scheduled_scheduled_day_properties[VIEWS_SCHEDULED_SCHEDULED_DAY_DATE_PROPERTY] = g_param_spec_boxed ("date", "date", "date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1018 "ScheduledDay.c"
}

static void
views_scheduled_scheduled_day_instance_init (ViewsScheduledScheduledDay * self,
                                             gpointer klass)
{
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	self->priv = views_scheduled_scheduled_day_get_instance_private (self);
#line 1027 "ScheduledDay.c"
}

static void
views_scheduled_scheduled_day_finalize (GObject * obj)
{
	ViewsScheduledScheduledDay * self;
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, ViewsScheduledScheduledDay);
#line 2 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_date_time_unref0 (self->priv->_date);
#line 4 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (self->priv->component_dots);
#line 5 "../src/Views/Scheduled/ScheduledDay.vala"
	_g_object_unref0 (self->priv->dots_grid);
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	G_OBJECT_CLASS (views_scheduled_scheduled_day_parent_class)->finalize (obj);
#line 1044 "ScheduledDay.c"
}

static GType
views_scheduled_scheduled_day_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ViewsScheduledScheduledDayClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_scheduled_scheduled_day_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsScheduledScheduledDay), 0, (GInstanceInitFunc) views_scheduled_scheduled_day_instance_init, NULL };
	GType views_scheduled_scheduled_day_type_id;
	views_scheduled_scheduled_day_type_id = g_type_register_static (gtk_button_get_type (), "ViewsScheduledScheduledDay", &g_define_type_info, 0);
	ViewsScheduledScheduledDay_private_offset = g_type_add_instance_private (views_scheduled_scheduled_day_type_id, sizeof (ViewsScheduledScheduledDayPrivate));
	return views_scheduled_scheduled_day_type_id;
}

GType
views_scheduled_scheduled_day_get_type (void)
{
	static volatile gsize views_scheduled_scheduled_day_type_id__volatile = 0;
	if (g_once_init_enter (&views_scheduled_scheduled_day_type_id__volatile)) {
		GType views_scheduled_scheduled_day_type_id;
		views_scheduled_scheduled_day_type_id = views_scheduled_scheduled_day_get_type_once ();
		g_once_init_leave (&views_scheduled_scheduled_day_type_id__volatile, views_scheduled_scheduled_day_type_id);
	}
	return views_scheduled_scheduled_day_type_id__volatile;
}

static void
_vala_views_scheduled_scheduled_day_get_property (GObject * object,
                                                  guint property_id,
                                                  GValue * value,
                                                  GParamSpec * pspec)
{
	ViewsScheduledScheduledDay * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, ViewsScheduledScheduledDay);
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	switch (property_id) {
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
		case VIEWS_SCHEDULED_SCHEDULED_DAY_DATE_PROPERTY:
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
		g_value_set_boxed (value, views_scheduled_scheduled_day_get_date (self));
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
		break;
#line 1085 "ScheduledDay.c"
		default:
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
		break;
#line 1091 "ScheduledDay.c"
	}
}

static void
_vala_views_scheduled_scheduled_day_set_property (GObject * object,
                                                  guint property_id,
                                                  const GValue * value,
                                                  GParamSpec * pspec)
{
	ViewsScheduledScheduledDay * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, ViewsScheduledScheduledDay);
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
	switch (property_id) {
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
		case VIEWS_SCHEDULED_SCHEDULED_DAY_DATE_PROPERTY:
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
		views_scheduled_scheduled_day_set_date (self, g_value_get_boxed (value));
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
		break;
#line 1111 "ScheduledDay.c"
		default:
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/Scheduled/ScheduledDay.vala"
		break;
#line 1117 "ScheduledDay.c"
	}
}

