/* ProjectPicker.c generated by valac 0.50.10, the Vala compiler
 * generated from ProjectPicker.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <handy.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gtk/gtk.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>

#define DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER (dialogs_project_picker_project_picker_get_type ())
#define DIALOGS_PROJECT_PICKER_PROJECT_PICKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, DialogsProjectPickerProjectPicker))
#define DIALOGS_PROJECT_PICKER_PROJECT_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, DialogsProjectPickerProjectPickerClass))
#define DIALOGS_PROJECT_PICKER_IS_PROJECT_PICKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER))
#define DIALOGS_PROJECT_PICKER_IS_PROJECT_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER))
#define DIALOGS_PROJECT_PICKER_PROJECT_PICKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, DialogsProjectPickerProjectPickerClass))

typedef struct _DialogsProjectPickerProjectPicker DialogsProjectPickerProjectPicker;
typedef struct _DialogsProjectPickerProjectPickerClass DialogsProjectPickerProjectPickerClass;
typedef struct _DialogsProjectPickerProjectPickerPrivate DialogsProjectPickerProjectPickerPrivate;

#define DIALOGS_PROJECT_PICKER_TYPE_PROJECT_ROW (dialogs_project_picker_project_row_get_type ())
#define DIALOGS_PROJECT_PICKER_PROJECT_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_ROW, DialogsProjectPickerProjectRow))
#define DIALOGS_PROJECT_PICKER_PROJECT_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_ROW, DialogsProjectPickerProjectRowClass))
#define DIALOGS_PROJECT_PICKER_IS_PROJECT_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_ROW))
#define DIALOGS_PROJECT_PICKER_IS_PROJECT_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_ROW))
#define DIALOGS_PROJECT_PICKER_PROJECT_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_ROW, DialogsProjectPickerProjectRowClass))

typedef struct _DialogsProjectPickerProjectRow DialogsProjectPickerProjectRow;
typedef struct _DialogsProjectPickerProjectRowClass DialogsProjectPickerProjectRowClass;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define OBJECTS_TYPE_SECTION (objects_section_get_type ())
#define OBJECTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_SECTION, ObjectsSection))
#define OBJECTS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_SECTION, ObjectsSectionClass))
#define OBJECTS_IS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_SECTION))
#define OBJECTS_IS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_SECTION))
#define OBJECTS_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_SECTION, ObjectsSectionClass))

typedef struct _ObjectsSection ObjectsSection;
typedef struct _ObjectsSectionClass ObjectsSectionClass;
enum  {
	DIALOGS_PROJECT_PICKER_PROJECT_PICKER_0_PROPERTY,
	DIALOGS_PROJECT_PICKER_PROJECT_PICKER_PROJECT_PROPERTY,
	DIALOGS_PROJECT_PICKER_PROJECT_PICKER_SECTION_PROPERTY,
	DIALOGS_PROJECT_PICKER_PROJECT_PICKER_NUM_PROPERTIES
};
static GParamSpec* dialogs_project_picker_project_picker_properties[DIALOGS_PROJECT_PICKER_PROJECT_PICKER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_PLANNER (planner_get_type ())
#define PLANNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PLANNER, Planner))
#define PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_PLANNER, PlannerClass))
#define IS_PLANNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PLANNER))
#define IS_PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_PLANNER))
#define PLANNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PLANNER, PlannerClass))

typedef struct _Planner Planner;
typedef struct _PlannerClass PlannerClass;
typedef struct _PlannerPrivate PlannerPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define DIALOGS_PROJECT_PICKER_TYPE_SECTION_ROW (dialogs_project_picker_section_row_get_type ())
#define DIALOGS_PROJECT_PICKER_SECTION_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_PROJECT_PICKER_TYPE_SECTION_ROW, DialogsProjectPickerSectionRow))
#define DIALOGS_PROJECT_PICKER_SECTION_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_PROJECT_PICKER_TYPE_SECTION_ROW, DialogsProjectPickerSectionRowClass))
#define DIALOGS_PROJECT_PICKER_IS_SECTION_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_PROJECT_PICKER_TYPE_SECTION_ROW))
#define DIALOGS_PROJECT_PICKER_IS_SECTION_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_PROJECT_PICKER_TYPE_SECTION_ROW))
#define DIALOGS_PROJECT_PICKER_SECTION_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_PROJECT_PICKER_TYPE_SECTION_ROW, DialogsProjectPickerSectionRowClass))

typedef struct _DialogsProjectPickerSectionRow DialogsProjectPickerSectionRow;
typedef struct _DialogsProjectPickerSectionRowClass DialogsProjectPickerSectionRowClass;

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;
enum  {
	DIALOGS_PROJECT_PICKER_PROJECT_PICKER_CHANGED_SIGNAL,
	DIALOGS_PROJECT_PICKER_PROJECT_PICKER_NUM_SIGNALS
};
static guint dialogs_project_picker_project_picker_signals[DIALOGS_PROJECT_PICKER_PROJECT_PICKER_NUM_SIGNALS] = {0};

struct _DialogsProjectPickerProjectPicker {
	HdyWindow parent_instance;
	DialogsProjectPickerProjectPickerPrivate * priv;
	GeeHashMap* projects_hashmap;
};

struct _DialogsProjectPickerProjectPickerClass {
	HdyWindowClass parent_class;
};

struct _DialogsProjectPickerProjectPickerPrivate {
	GtkListBox* listbox;
	ObjectsProject* _project;
	ObjectsSection* _section;
};

struct _Planner {
	GtkApplication parent_instance;
	PlannerPrivate * priv;
	MainWindow* main_window;
};

struct _PlannerClass {
	GtkApplicationClass parent_class;
};

static gint DialogsProjectPickerProjectPicker_private_offset;
static gpointer dialogs_project_picker_project_picker_parent_class = NULL;
extern ServicesDatabase* planner_database;
extern ServicesEventBus* planner_event_bus;

GType dialogs_project_picker_project_picker_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsProjectPickerProjectPicker, g_object_unref)
GType dialogs_project_picker_project_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsProjectPickerProjectRow, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
GType objects_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsSection, g_object_unref)
DialogsProjectPickerProjectPicker* dialogs_project_picker_project_picker_new (void);
DialogsProjectPickerProjectPicker* dialogs_project_picker_project_picker_construct (GType object_type);
GType planner_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Planner, g_object_unref)
Planner* planner_get_instance (void);
GType main_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MainWindow, g_object_unref)
static void dialogs_project_picker_project_picker_hide_destroy (DialogsProjectPickerProjectPicker* self);
static gboolean __lambda46_ (DialogsProjectPickerProjectPicker* self);
static gboolean ___lambda46__gsource_func (gpointer self);
static void dialogs_project_picker_project_picker_add_projects (DialogsProjectPickerProjectPicker* self);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
GeeArrayList* services_database_get_projects (ServicesDatabase* self);
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
DialogsProjectPickerProjectRow* dialogs_project_picker_project_row_new (ObjectsProject* project);
DialogsProjectPickerProjectRow* dialogs_project_picker_project_row_construct (GType object_type,
                                                                              ObjectsProject* project);
GeeArrayList* services_database_get_sections (ServicesDatabase* self);
gint64 objects_section_get_project_id (ObjectsSection* self);
GType dialogs_project_picker_section_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsProjectPickerSectionRow, g_object_unref)
DialogsProjectPickerSectionRow* dialogs_project_picker_project_row_add_section (DialogsProjectPickerProjectRow* self,
                                                                                ObjectsSection* section);
void dialogs_project_picker_project_picker_popup (DialogsProjectPickerProjectPicker* self);
ObjectsProject* dialogs_project_picker_project_picker_get_project (DialogsProjectPickerProjectPicker* self);
void dialogs_project_picker_project_picker_set_project (DialogsProjectPickerProjectPicker* self,
                                                        ObjectsProject* value);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
gint64 objects_base_object_get_id (ObjectsBaseObject* self);
#define CONSTANTS_INACTIVE 0
ObjectsSection* dialogs_project_picker_project_picker_get_section (DialogsProjectPickerProjectPicker* self);
void dialogs_project_picker_project_picker_set_section (DialogsProjectPickerProjectPicker* self,
                                                        ObjectsSection* value);
static void g_cclosure_user_marshal_VOID__INT64_INT64 (GClosure * closure,
                                                GValue * return_value,
                                                guint n_param_values,
                                                const GValue * param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
static GObject * dialogs_project_picker_project_picker_constructor (GType type,
                                                             guint n_construct_properties,
                                                             GObjectConstructParam * construct_properties);
static gboolean _dialogs_project_picker_project_picker___lambda47_ (DialogsProjectPickerProjectPicker* self);
static gboolean __dialogs_project_picker_project_picker___lambda47__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                                         GdkEventFocus* event,
                                                                                         gpointer self);
static gboolean _dialogs_project_picker_project_picker___lambda48_ (DialogsProjectPickerProjectPicker* self,
                                                             GdkEventKey* key);
static gboolean __dialogs_project_picker_project_picker___lambda48__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                                           GdkEventKey* event,
                                                                                           gpointer self);
static void _dialogs_project_picker_project_picker___lambda49_ (DialogsProjectPickerProjectPicker* self);
static void __dialogs_project_picker_project_picker___lambda49__gtk_button_clicked (GtkButton* _sender,
                                                                             gpointer self);
static void _dialogs_project_picker_project_picker___lambda50_ (DialogsProjectPickerProjectPicker* self);
static void __dialogs_project_picker_project_picker___lambda50__gtk_button_clicked (GtkButton* _sender,
                                                                             gpointer self);
static void _dialogs_project_picker_project_picker___lambda51_ (DialogsProjectPickerProjectPicker* self,
                                                         gint64 project_id,
                                                         gint64 section_id);
ObjectsProject* services_database_get_project (ServicesDatabase* self,
                                               gint64 id);
ObjectsSection* services_database_get_section (ServicesDatabase* self,
                                               gint64 id);
static void __dialogs_project_picker_project_picker___lambda51__services_event_bus_project_picker_changed (ServicesEventBus* _sender,
                                                                                                    gint64 project_id,
                                                                                                    gint64 section_id,
                                                                                                    gpointer self);
static void dialogs_project_picker_project_picker_finalize (GObject * obj);
static GType dialogs_project_picker_project_picker_get_type_once (void);
static void _vala_dialogs_project_picker_project_picker_get_property (GObject * object,
                                                               guint property_id,
                                                               GValue * value,
                                                               GParamSpec * pspec);
static void _vala_dialogs_project_picker_project_picker_set_property (GObject * object,
                                                               guint property_id,
                                                               const GValue * value,
                                                               GParamSpec * pspec);

static inline gpointer
dialogs_project_picker_project_picker_get_instance_private (DialogsProjectPickerProjectPicker* self)
{
	return G_STRUCT_MEMBER_P (self, DialogsProjectPickerProjectPicker_private_offset);
}

DialogsProjectPickerProjectPicker*
dialogs_project_picker_project_picker_construct (GType object_type)
{
	DialogsProjectPickerProjectPicker * self = NULL;
	Planner* _tmp0_;
	Planner* _tmp1_;
	MainWindow* _tmp2_;
	GtkWidget* _tmp3_;
#line 54 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp0_ = planner_get_instance ();
#line 54 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp1_ = _tmp0_;
#line 54 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp2_ = _tmp1_->main_window;
#line 54 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp3_ = gtk_widget_get_toplevel ((GtkWidget*) _tmp2_);
#line 54 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	self = (DialogsProjectPickerProjectPicker*) g_object_new (object_type, "transient-for", G_TYPE_CHECK_INSTANCE_CAST (_tmp3_, gtk_window_get_type (), GtkWindow), "destroy-with-parent", TRUE, "window-position", GTK_WIN_POS_MOUSE, "resizable", FALSE, NULL);
#line 53 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return self;
#line 300 "ProjectPicker.c"
}

DialogsProjectPickerProjectPicker*
dialogs_project_picker_project_picker_new (void)
{
#line 53 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return dialogs_project_picker_project_picker_construct (DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER);
#line 308 "ProjectPicker.c"
}

static gboolean
__lambda46_ (DialogsProjectPickerProjectPicker* self)
{
	gboolean result = FALSE;
#line 180 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 181 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	result = G_SOURCE_REMOVE;
#line 181 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return result;
#line 321 "ProjectPicker.c"
}

static gboolean
___lambda46__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda46_ ((DialogsProjectPickerProjectPicker*) self);
#line 179 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return result;
#line 331 "ProjectPicker.c"
}

static void
dialogs_project_picker_project_picker_hide_destroy (DialogsProjectPickerProjectPicker* self)
{
#line 176 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_return_if_fail (self != NULL);
#line 177 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_hide ((GtkWidget*) self);
#line 179 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 500, ___lambda46__gsource_func, g_object_ref (self), g_object_unref);
#line 343 "ProjectPicker.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return self ? g_object_ref (self) : NULL;
#line 351 "ProjectPicker.c"
}

static void
dialogs_project_picker_project_picker_add_projects (DialogsProjectPickerProjectPicker* self)
{
	GtkListBox* _tmp54_;
#line 185 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_return_if_fail (self != NULL);
#line 360 "ProjectPicker.c"
	{
		GeeArrayList* _project_list = NULL;
		ServicesDatabase* _tmp0_;
		GeeArrayList* _tmp1_;
		GeeArrayList* _tmp2_;
		GeeArrayList* _tmp3_;
		gint _project_size = 0;
		GeeArrayList* _tmp4_;
		gint _tmp5_;
		gint _tmp6_;
		gint _project_index = 0;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp0_ = planner_database;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp1_ = services_database_get_projects (_tmp0_);
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp2_ = _tmp1_;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp3_ = _g_object_ref0 (_tmp2_);
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_project_list = _tmp3_;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp4_ = _project_list;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp5_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp4_);
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp6_ = _tmp5_;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_project_size = _tmp6_;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_project_index = -1;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		while (TRUE) {
#line 394 "ProjectPicker.c"
			gint _tmp7_;
			gint _tmp8_;
			ObjectsProject* project = NULL;
			GeeArrayList* _tmp9_;
			gpointer _tmp10_;
			GeeHashMap* _tmp11_;
			ObjectsProject* _tmp12_;
			const gchar* _tmp13_;
			const gchar* _tmp14_;
			ObjectsProject* _tmp15_;
			DialogsProjectPickerProjectRow* _tmp16_;
			DialogsProjectPickerProjectRow* _tmp17_;
			GtkListBox* _tmp18_;
			GeeHashMap* _tmp19_;
			ObjectsProject* _tmp20_;
			const gchar* _tmp21_;
			const gchar* _tmp22_;
			gpointer _tmp23_;
			DialogsProjectPickerProjectRow* _tmp24_;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_project_index = _project_index + 1;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp7_ = _project_index;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp8_ = _project_size;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			if (!(_tmp7_ < _tmp8_)) {
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				break;
#line 424 "ProjectPicker.c"
			}
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp9_ = _project_list;
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp10_ = gee_abstract_list_get ((GeeAbstractList*) _tmp9_, _project_index);
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			project = (ObjectsProject*) _tmp10_;
#line 187 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp11_ = self->projects_hashmap;
#line 187 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp12_ = project;
#line 187 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp13_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp12_);
#line 187 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp14_ = _tmp13_;
#line 187 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp15_ = project;
#line 187 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp16_ = dialogs_project_picker_project_row_new (_tmp15_);
#line 187 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			g_object_ref_sink (_tmp16_);
#line 187 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp17_ = _tmp16_;
#line 187 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			gee_abstract_map_set ((GeeAbstractMap*) _tmp11_, _tmp14_, _tmp17_);
#line 187 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_g_object_unref0 (_tmp17_);
#line 188 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp18_ = self->priv->listbox;
#line 188 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp19_ = self->projects_hashmap;
#line 188 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp20_ = project;
#line 188 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp21_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp20_);
#line 188 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp22_ = _tmp21_;
#line 188 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp23_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp19_, _tmp22_);
#line 188 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp24_ = (DialogsProjectPickerProjectRow*) _tmp23_;
#line 188 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			gtk_container_add ((GtkContainer*) _tmp18_, (GtkWidget*) _tmp24_);
#line 188 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_g_object_unref0 (_tmp24_);
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_g_object_unref0 (project);
#line 472 "ProjectPicker.c"
		}
#line 186 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_g_object_unref0 (_project_list);
#line 476 "ProjectPicker.c"
	}
	{
		GeeArrayList* _section_list = NULL;
		ServicesDatabase* _tmp25_;
		GeeArrayList* _tmp26_;
		GeeArrayList* _tmp27_;
		GeeArrayList* _tmp28_;
		gint _section_size = 0;
		GeeArrayList* _tmp29_;
		gint _tmp30_;
		gint _tmp31_;
		gint _section_index = 0;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp25_ = planner_database;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp26_ = services_database_get_sections (_tmp25_);
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp27_ = _tmp26_;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp28_ = _g_object_ref0 (_tmp27_);
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_section_list = _tmp28_;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp29_ = _section_list;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp30_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp29_);
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_tmp31_ = _tmp30_;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_section_size = _tmp31_;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_section_index = -1;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		while (TRUE) {
#line 511 "ProjectPicker.c"
			gint _tmp32_;
			gint _tmp33_;
			ObjectsSection* section = NULL;
			GeeArrayList* _tmp34_;
			gpointer _tmp35_;
			GeeHashMap* _tmp36_;
			ObjectsSection* _tmp37_;
			gint64 _tmp38_;
			gint64 _tmp39_;
			gchar* _tmp40_;
			gchar* _tmp41_;
			gboolean _tmp42_;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_section_index = _section_index + 1;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp32_ = _section_index;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp33_ = _section_size;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			if (!(_tmp32_ < _tmp33_)) {
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				break;
#line 534 "ProjectPicker.c"
			}
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp34_ = _section_list;
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp35_ = gee_abstract_list_get ((GeeAbstractList*) _tmp34_, _section_index);
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			section = (ObjectsSection*) _tmp35_;
#line 192 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp36_ = self->projects_hashmap;
#line 192 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp37_ = section;
#line 192 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp38_ = objects_section_get_project_id (_tmp37_);
#line 192 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp39_ = _tmp38_;
#line 192 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp40_ = g_strdup_printf ("%" G_GINT64_FORMAT, _tmp39_);
#line 192 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp41_ = _tmp40_;
#line 192 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_tmp42_ = gee_abstract_map_has_key ((GeeAbstractMap*) _tmp36_, _tmp41_);
#line 192 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_g_free0 (_tmp41_);
#line 192 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			if (_tmp42_) {
#line 560 "ProjectPicker.c"
				GeeHashMap* _tmp43_;
				ObjectsSection* _tmp44_;
				gint64 _tmp45_;
				gint64 _tmp46_;
				gchar* _tmp47_;
				gchar* _tmp48_;
				gpointer _tmp49_;
				DialogsProjectPickerProjectRow* _tmp50_;
				ObjectsSection* _tmp51_;
				DialogsProjectPickerSectionRow* _tmp52_;
				DialogsProjectPickerSectionRow* _tmp53_;
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp43_ = self->projects_hashmap;
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp44_ = section;
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp45_ = objects_section_get_project_id (_tmp44_);
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp46_ = _tmp45_;
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp47_ = g_strdup_printf ("%" G_GINT64_FORMAT, _tmp46_);
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp48_ = _tmp47_;
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp49_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp43_, _tmp48_);
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp50_ = (DialogsProjectPickerProjectRow*) _tmp49_;
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp51_ = section;
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp52_ = dialogs_project_picker_project_row_add_section (_tmp50_, _tmp51_);
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_tmp53_ = _tmp52_;
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_g_object_unref0 (_tmp53_);
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_g_object_unref0 (_tmp50_);
#line 193 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
				_g_free0 (_tmp48_);
#line 600 "ProjectPicker.c"
			}
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
			_g_object_unref0 (section);
#line 604 "ProjectPicker.c"
		}
#line 191 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		_g_object_unref0 (_section_list);
#line 608 "ProjectPicker.c"
	}
#line 197 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp54_ = self->priv->listbox;
#line 197 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp54_);
#line 614 "ProjectPicker.c"
}

void
dialogs_project_picker_project_picker_popup (DialogsProjectPickerProjectPicker* self)
{
#line 200 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_return_if_fail (self != NULL);
#line 201 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 624 "ProjectPicker.c"
}

ObjectsProject*
dialogs_project_picker_project_picker_get_project (DialogsProjectPickerProjectPicker* self)
{
	ObjectsProject* result;
	ObjectsProject* _tmp0_;
#line 29 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 30 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp0_ = self->priv->_project;
#line 30 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	result = _tmp0_;
#line 30 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return result;
#line 640 "ProjectPicker.c"
}

void
dialogs_project_picker_project_picker_set_project (DialogsProjectPickerProjectPicker* self,
                                                   ObjectsProject* value)
{
	ObjectsProject* _tmp0_;
	ServicesEventBus* _tmp1_;
	ObjectsProject* _tmp2_;
	gint64 _tmp3_;
	gint64 _tmp4_;
#line 33 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_return_if_fail (self != NULL);
#line 34 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp0_ = _g_object_ref0 (value);
#line 34 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (self->priv->_project);
#line 34 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	self->priv->_project = _tmp0_;
#line 35 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp1_ = planner_event_bus;
#line 35 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp2_ = self->priv->_project;
#line 35 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp3_ = objects_base_object_get_id ((ObjectsBaseObject*) _tmp2_);
#line 35 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp4_ = _tmp3_;
#line 35 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_signal_emit_by_name (_tmp1_, "project-picker-changed", _tmp4_, (gint64) CONSTANTS_INACTIVE);
#line 33 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_notify_by_pspec ((GObject *) self, dialogs_project_picker_project_picker_properties[DIALOGS_PROJECT_PICKER_PROJECT_PICKER_PROJECT_PROPERTY]);
#line 672 "ProjectPicker.c"
}

ObjectsSection*
dialogs_project_picker_project_picker_get_section (DialogsProjectPickerProjectPicker* self)
{
	ObjectsSection* result;
	ObjectsSection* _tmp0_;
#line 41 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 42 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp0_ = self->priv->_section;
#line 42 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	result = _tmp0_;
#line 42 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return result;
#line 688 "ProjectPicker.c"
}

void
dialogs_project_picker_project_picker_set_section (DialogsProjectPickerProjectPicker* self,
                                                   ObjectsSection* value)
{
	ObjectsSection* _tmp0_;
	ServicesEventBus* _tmp1_;
	ObjectsSection* _tmp2_;
	gint64 _tmp3_;
	gint64 _tmp4_;
	ObjectsSection* _tmp5_;
	gint64 _tmp6_;
	gint64 _tmp7_;
#line 45 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_return_if_fail (self != NULL);
#line 46 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp0_ = _g_object_ref0 (value);
#line 46 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (self->priv->_section);
#line 46 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	self->priv->_section = _tmp0_;
#line 47 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp1_ = planner_event_bus;
#line 47 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp2_ = self->priv->_section;
#line 47 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp3_ = objects_section_get_project_id (_tmp2_);
#line 47 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp4_ = _tmp3_;
#line 47 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp5_ = self->priv->_section;
#line 47 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp6_ = objects_base_object_get_id ((ObjectsBaseObject*) _tmp5_);
#line 47 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp7_ = _tmp6_;
#line 47 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_signal_emit_by_name (_tmp1_, "project-picker-changed", _tmp4_, _tmp7_);
#line 45 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_notify_by_pspec ((GObject *) self, dialogs_project_picker_project_picker_properties[DIALOGS_PROJECT_PICKER_PROJECT_PICKER_SECTION_PROPERTY]);
#line 729 "ProjectPicker.c"
}

static void
g_cclosure_user_marshal_VOID__INT64_INT64 (GClosure * closure,
                                           GValue * return_value,
                                           guint n_param_values,
                                           const GValue * param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__INT64_INT64) (gpointer data1, gint64 arg_1, gint64 arg_2, gpointer data2);
	register GMarshalFunc_VOID__INT64_INT64 callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_return_if_fail (n_param_values == 3);
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		data1 = closure->data;
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		data2 = param_values->data[0].v_pointer;
#line 754 "ProjectPicker.c"
	} else {
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		data2 = closure->data;
#line 760 "ProjectPicker.c"
	}
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	callback = (GMarshalFunc_VOID__INT64_INT64) (marshal_data ? marshal_data : cc->callback);
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	callback (data1, g_value_get_int64 (param_values + 1), g_value_get_int64 (param_values + 2), data2);
#line 766 "ProjectPicker.c"
}

static gboolean
_dialogs_project_picker_project_picker___lambda47_ (DialogsProjectPickerProjectPicker* self)
{
	gboolean result = FALSE;
#line 149 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	dialogs_project_picker_project_picker_hide_destroy (self);
#line 150 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	result = FALSE;
#line 150 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return result;
#line 779 "ProjectPicker.c"
}

static gboolean
__dialogs_project_picker_project_picker___lambda47__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                                GdkEventFocus* event,
                                                                                gpointer self)
{
	gboolean result;
	result = _dialogs_project_picker_project_picker___lambda47_ ((DialogsProjectPickerProjectPicker*) self);
#line 148 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return result;
#line 791 "ProjectPicker.c"
}

static gboolean
_dialogs_project_picker_project_picker___lambda48_ (DialogsProjectPickerProjectPicker* self,
                                                    GdkEventKey* key)
{
	gboolean result = FALSE;
#line 153 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_return_val_if_fail (key != NULL, FALSE);
#line 154 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	if (key->keyval == ((guint) 65307)) {
#line 155 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		dialogs_project_picker_project_picker_hide_destroy (self);
#line 805 "ProjectPicker.c"
	}
#line 158 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	result = FALSE;
#line 158 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return result;
#line 811 "ProjectPicker.c"
}

static gboolean
__dialogs_project_picker_project_picker___lambda48__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                                  GdkEventKey* event,
                                                                                  gpointer self)
{
	gboolean result;
	result = _dialogs_project_picker_project_picker___lambda48_ ((DialogsProjectPickerProjectPicker*) self, event);
#line 153 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return result;
#line 823 "ProjectPicker.c"
}

static void
_dialogs_project_picker_project_picker___lambda49_ (DialogsProjectPickerProjectPicker* self)
{
#line 162 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	dialogs_project_picker_project_picker_hide_destroy (self);
#line 831 "ProjectPicker.c"
}

static void
__dialogs_project_picker_project_picker___lambda49__gtk_button_clicked (GtkButton* _sender,
                                                                        gpointer self)
{
#line 161 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_dialogs_project_picker_project_picker___lambda49_ ((DialogsProjectPickerProjectPicker*) self);
#line 840 "ProjectPicker.c"
}

static void
_dialogs_project_picker_project_picker___lambda50_ (DialogsProjectPickerProjectPicker* self)
{
	ObjectsProject* _tmp0_;
	ObjectsProject* _tmp1_;
	gint64 _tmp2_;
	gint64 _tmp3_;
	ObjectsSection* _tmp4_;
	ObjectsSection* _tmp5_;
	gint64 _tmp6_;
	gint64 _tmp7_;
#line 166 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp0_ = dialogs_project_picker_project_picker_get_project (self);
#line 166 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp1_ = _tmp0_;
#line 166 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp2_ = objects_base_object_get_id ((ObjectsBaseObject*) _tmp1_);
#line 166 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp3_ = _tmp2_;
#line 166 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp4_ = dialogs_project_picker_project_picker_get_section (self);
#line 166 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp5_ = _tmp4_;
#line 166 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp6_ = objects_base_object_get_id ((ObjectsBaseObject*) _tmp5_);
#line 166 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp7_ = _tmp6_;
#line 166 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_signal_emit (self, dialogs_project_picker_project_picker_signals[DIALOGS_PROJECT_PICKER_PROJECT_PICKER_CHANGED_SIGNAL], 0, _tmp3_, _tmp7_);
#line 167 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	dialogs_project_picker_project_picker_hide_destroy (self);
#line 874 "ProjectPicker.c"
}

static void
__dialogs_project_picker_project_picker___lambda50__gtk_button_clicked (GtkButton* _sender,
                                                                        gpointer self)
{
#line 165 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_dialogs_project_picker_project_picker___lambda50_ ((DialogsProjectPickerProjectPicker*) self);
#line 883 "ProjectPicker.c"
}

static void
_dialogs_project_picker_project_picker___lambda51_ (DialogsProjectPickerProjectPicker* self,
                                                    gint64 project_id,
                                                    gint64 section_id)
{
	ServicesDatabase* _tmp0_;
	ObjectsProject* _tmp1_;
	ServicesDatabase* _tmp2_;
	ObjectsSection* _tmp3_;
#line 171 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp0_ = planner_database;
#line 171 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp1_ = services_database_get_project (_tmp0_, project_id);
#line 171 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (self->priv->_project);
#line 171 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	self->priv->_project = _tmp1_;
#line 172 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp2_ = planner_database;
#line 172 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp3_ = services_database_get_section (_tmp2_, section_id);
#line 172 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (self->priv->_section);
#line 172 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	self->priv->_section = _tmp3_;
#line 911 "ProjectPicker.c"
}

static void
__dialogs_project_picker_project_picker___lambda51__services_event_bus_project_picker_changed (ServicesEventBus* _sender,
                                                                                               gint64 project_id,
                                                                                               gint64 section_id,
                                                                                               gpointer self)
{
#line 170 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_dialogs_project_picker_project_picker___lambda51_ ((DialogsProjectPickerProjectPicker*) self, project_id, section_id);
#line 922 "ProjectPicker.c"
}

static GObject *
dialogs_project_picker_project_picker_constructor (GType type,
                                                   guint n_construct_properties,
                                                   GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	DialogsProjectPickerProjectPicker * self;
	GeeHashMap* _tmp0_;
	HdyHeaderBar* headerbar = NULL;
	HdyHeaderBar* _tmp1_ = NULL;
	HdyHeaderBar* _tmp2_;
	GtkStyleContext* _tmp3_;
	HdyHeaderBar* _tmp4_;
	GtkStyleContext* _tmp5_;
	GtkButton* done_button = NULL;
	GtkButton* _tmp6_ = NULL;
	GtkButton* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkButton* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkButton* cancel_button = NULL;
	GtkButton* _tmp11_ = NULL;
	GtkButton* _tmp12_;
	GtkStyleContext* _tmp13_;
	GtkLabel* title_label = NULL;
	GtkLabel* _tmp14_;
	GtkLabel* _tmp15_;
	GtkStyleContext* _tmp16_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp17_ = NULL;
	GtkBox* _tmp18_;
	GtkButton* _tmp19_;
	GtkBox* _tmp20_;
	GtkLabel* _tmp21_;
	GtkBox* _tmp22_;
	GtkButton* _tmp23_;
	GtkSearchEntry* search_entry = NULL;
	gchar* _tmp24_;
	GtkSearchEntry* _tmp25_ = NULL;
	GtkStyleContext* search_entry_context = NULL;
	GtkSearchEntry* _tmp26_;
	GtkStyleContext* _tmp27_;
	GtkStyleContext* _tmp28_;
	HdyHeaderBar* _tmp29_;
	GtkBox* _tmp30_;
	GtkListBox* _tmp31_ = NULL;
	GtkStyleContext* listbox_context = NULL;
	GtkListBox* _tmp32_;
	GtkStyleContext* _tmp33_;
	GtkStyleContext* _tmp34_;
	GtkStyleContext* _tmp35_;
	GtkGrid* listbox_grid = NULL;
	GtkGrid* _tmp36_ = NULL;
	GtkGrid* _tmp37_;
	GtkListBox* _tmp38_;
	GtkScrolledWindow* listbox_scrolled = NULL;
	GtkScrolledWindow* _tmp39_ = NULL;
	GtkScrolledWindow* _tmp40_;
	GtkGrid* _tmp41_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp42_ = NULL;
	GtkGrid* _tmp43_;
	HdyHeaderBar* _tmp44_;
	GtkGrid* _tmp45_;
	GtkSearchEntry* _tmp46_;
	GtkGrid* _tmp47_;
	GtkScrolledWindow* _tmp48_;
	GtkStyleContext* main_grid_context = NULL;
	GtkGrid* _tmp49_;
	GtkStyleContext* _tmp50_;
	GtkStyleContext* _tmp51_;
	GtkGrid* _tmp52_;
	GtkButton* _tmp53_;
	GtkButton* _tmp54_;
	ServicesEventBus* _tmp55_;
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	parent_class = G_OBJECT_CLASS (dialogs_project_picker_project_picker_parent_class);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, DialogsProjectPickerProjectPicker);
#line 63 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp0_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, DIALOGS_PROJECT_PICKER_TYPE_PROJECT_ROW, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 63 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (self->projects_hashmap);
#line 63 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	self->projects_hashmap = _tmp0_;
#line 65 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp1_ = (HdyHeaderBar*) hdy_header_bar_new ();
#line 65 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	hdy_header_bar_set_has_subtitle (_tmp1_, FALSE);
#line 65 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	hdy_header_bar_set_show_close_button (_tmp1_, FALSE);
#line 65 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp1_, TRUE);
#line 65 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_ref_sink (_tmp1_);
#line 65 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	headerbar = _tmp1_;
#line 70 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp2_ = headerbar;
#line 70 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
#line 70 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_style_context_add_class (_tmp3_, GTK_STYLE_CLASS_FLAT);
#line 71 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp4_ = headerbar;
#line 71 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) _tmp4_);
#line 71 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_style_context_add_class (_tmp5_, "default-decoration");
#line 73 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp6_ = (GtkButton*) gtk_button_new_with_label (_ ("Done"));
#line 73 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp6_, GTK_ALIGN_CENTER);
#line 73 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp6_, GTK_ALIGN_CENTER);
#line 73 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp6_, FALSE);
#line 73 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_ref_sink (_tmp6_);
#line 73 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	done_button = _tmp6_;
#line 78 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp7_ = done_button;
#line 78 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
#line 78 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_style_context_add_class (_tmp8_, GTK_STYLE_CLASS_FLAT);
#line 79 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp9_ = done_button;
#line 79 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
#line 79 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_style_context_add_class (_tmp10_, "primary-color");
#line 81 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp11_ = (GtkButton*) gtk_button_new_with_label (_ ("Cancel"));
#line 81 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp11_, GTK_ALIGN_CENTER);
#line 81 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp11_, GTK_ALIGN_CENTER);
#line 81 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp11_, FALSE);
#line 81 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_ref_sink (_tmp11_);
#line 81 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	cancel_button = _tmp11_;
#line 86 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp12_ = cancel_button;
#line 86 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp13_ = gtk_widget_get_style_context ((GtkWidget*) _tmp12_);
#line 86 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_style_context_add_class (_tmp13_, GTK_STYLE_CLASS_FLAT);
#line 88 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp14_ = (GtkLabel*) gtk_label_new (_ ("Projects"));
#line 88 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_ref_sink (_tmp14_);
#line 88 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	title_label = _tmp14_;
#line 89 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp15_ = title_label;
#line 89 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp16_ = gtk_widget_get_style_context ((GtkWidget*) _tmp15_);
#line 89 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_style_context_add_class (_tmp16_, "h4");
#line 91 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp17_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 91 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp17_, TRUE);
#line 91 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_ref_sink (_tmp17_);
#line 91 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	header_box = _tmp17_;
#line 94 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp18_ = header_box;
#line 94 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp19_ = cancel_button;
#line 94 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_box_pack_start (_tmp18_, (GtkWidget*) _tmp19_, FALSE, FALSE, (guint) 0);
#line 95 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp20_ = header_box;
#line 95 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp21_ = title_label;
#line 95 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_box_set_center_widget (_tmp20_, (GtkWidget*) _tmp21_);
#line 96 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp22_ = header_box;
#line 96 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp23_ = done_button;
#line 96 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_box_pack_end (_tmp22_, (GtkWidget*) _tmp23_, FALSE, FALSE, (guint) 0);
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp24_ = g_strdup (_ ("Type a project"));
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp25_ = (GtkSearchEntry*) gtk_search_entry_new ();
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_entry_set_placeholder_text ((GtkEntry*) _tmp25_, _tmp24_);
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_free0 (_tmp24_);
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp25_, TRUE);
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp25_, 12);
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp25_, 12);
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp25_, 3);
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp25_, 6);
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_ref_sink (_tmp25_);
#line 98 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	search_entry = _tmp25_;
#line 107 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp26_ = search_entry;
#line 107 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp27_ = gtk_widget_get_style_context ((GtkWidget*) _tmp26_);
#line 107 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	search_entry_context = _tmp27_;
#line 108 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp28_ = search_entry_context;
#line 108 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_style_context_add_class (_tmp28_, "border-radius-6");
#line 110 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp29_ = headerbar;
#line 110 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp30_ = header_box;
#line 110 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	hdy_header_bar_set_custom_title (_tmp29_, (GtkWidget*) _tmp30_);
#line 112 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp31_ = (GtkListBox*) gtk_list_box_new ();
#line 112 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp31_, TRUE);
#line 112 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_ref_sink (_tmp31_);
#line 112 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (self->priv->listbox);
#line 112 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	self->priv->listbox = _tmp31_;
#line 116 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp32_ = self->priv->listbox;
#line 116 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp33_ = gtk_widget_get_style_context ((GtkWidget*) _tmp32_);
#line 116 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	listbox_context = _tmp33_;
#line 117 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp34_ = listbox_context;
#line 117 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_style_context_add_class (_tmp34_, "listbox-separator-3");
#line 118 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp35_ = listbox_context;
#line 118 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_style_context_add_class (_tmp35_, "listbox-background");
#line 120 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp36_ = (GtkGrid*) gtk_grid_new ();
#line 120 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_set ((GtkWidget*) _tmp36_, "margin", 6, NULL);
#line 120 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp36_, 0);
#line 120 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_ref_sink (_tmp36_);
#line 120 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	listbox_grid = _tmp36_;
#line 125 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp37_ = listbox_grid;
#line 125 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp38_ = self->priv->listbox;
#line 125 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_container_add ((GtkContainer*) _tmp37_, (GtkWidget*) _tmp38_);
#line 127 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp39_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 127 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_set (_tmp39_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
#line 127 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_set ((GtkWidget*) _tmp39_, "expand", TRUE, NULL);
#line 127 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_set ((GtkWidget*) _tmp39_, "height-request", 210, NULL);
#line 127 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_ref_sink (_tmp39_);
#line 127 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	listbox_scrolled = _tmp39_;
#line 132 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp40_ = listbox_scrolled;
#line 132 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp41_ = listbox_grid;
#line 132 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_container_add ((GtkContainer*) _tmp40_, (GtkWidget*) _tmp41_);
#line 134 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp42_ = (GtkGrid*) gtk_grid_new ();
#line 134 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp42_, GTK_ORIENTATION_VERTICAL);
#line 134 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_set ((GtkWidget*) _tmp42_, "width-request", 225, NULL);
#line 134 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_ref_sink (_tmp42_);
#line 134 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	main_grid = _tmp42_;
#line 138 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp43_ = main_grid;
#line 138 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp44_ = headerbar;
#line 138 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_container_add ((GtkContainer*) _tmp43_, (GtkWidget*) _tmp44_);
#line 139 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp45_ = main_grid;
#line 139 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp46_ = search_entry;
#line 139 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_container_add ((GtkContainer*) _tmp45_, (GtkWidget*) _tmp46_);
#line 140 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp47_ = main_grid;
#line 140 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp48_ = listbox_scrolled;
#line 140 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_container_add ((GtkContainer*) _tmp47_, (GtkWidget*) _tmp48_);
#line 142 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp49_ = main_grid;
#line 142 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp50_ = gtk_widget_get_style_context ((GtkWidget*) _tmp49_);
#line 142 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	main_grid_context = _tmp50_;
#line 143 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp51_ = main_grid_context;
#line 143 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_style_context_add_class (_tmp51_, "view");
#line 145 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp52_ = main_grid;
#line 145 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp52_);
#line 146 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	dialogs_project_picker_project_picker_add_projects (self);
#line 148 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_signal_connect_object ((GtkWidget*) self, "focus-out-event", (GCallback) __dialogs_project_picker_project_picker___lambda47__gtk_widget_focus_out_event, self, 0);
#line 153 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_signal_connect_object ((GtkWidget*) self, "key-release-event", (GCallback) __dialogs_project_picker_project_picker___lambda48__gtk_widget_key_release_event, self, 0);
#line 161 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp53_ = cancel_button;
#line 161 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_signal_connect_object (_tmp53_, "clicked", (GCallback) __dialogs_project_picker_project_picker___lambda49__gtk_button_clicked, self, 0);
#line 165 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp54_ = done_button;
#line 165 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_signal_connect_object (_tmp54_, "clicked", (GCallback) __dialogs_project_picker_project_picker___lambda50__gtk_button_clicked, self, 0);
#line 170 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_tmp55_ = planner_event_bus;
#line 170 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_signal_connect_object (_tmp55_, "project-picker-changed", (GCallback) __dialogs_project_picker_project_picker___lambda51__services_event_bus_project_picker_changed, self, 0);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (main_grid);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (listbox_scrolled);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (listbox_grid);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (search_entry);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (header_box);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (title_label);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (cancel_button);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (done_button);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (headerbar);
#line 62 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	return obj;
#line 1293 "ProjectPicker.c"
}

static void
dialogs_project_picker_project_picker_class_init (DialogsProjectPickerProjectPickerClass * klass,
                                                  gpointer klass_data)
{
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	dialogs_project_picker_project_picker_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_type_class_adjust_private_offset (klass, &DialogsProjectPickerProjectPicker_private_offset);
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_dialogs_project_picker_project_picker_get_property;
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_dialogs_project_picker_project_picker_set_property;
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	G_OBJECT_CLASS (klass)->constructor = dialogs_project_picker_project_picker_constructor;
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	G_OBJECT_CLASS (klass)->finalize = dialogs_project_picker_project_picker_finalize;
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_PROJECT_PICKER_PROJECT_PICKER_PROJECT_PROPERTY, dialogs_project_picker_project_picker_properties[DIALOGS_PROJECT_PICKER_PROJECT_PICKER_PROJECT_PROPERTY] = g_param_spec_object ("project", "project", "project", OBJECTS_TYPE_PROJECT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_PROJECT_PICKER_PROJECT_PICKER_SECTION_PROPERTY, dialogs_project_picker_project_picker_properties[DIALOGS_PROJECT_PICKER_PROJECT_PICKER_SECTION_PROPERTY] = g_param_spec_object ("section", "section", "section", OBJECTS_TYPE_SECTION, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	dialogs_project_picker_project_picker_signals[DIALOGS_PROJECT_PICKER_PROJECT_PICKER_CHANGED_SIGNAL] = g_signal_new ("changed", DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__INT64_INT64, G_TYPE_NONE, 2, G_TYPE_INT64, G_TYPE_INT64);
#line 1318 "ProjectPicker.c"
}

static void
dialogs_project_picker_project_picker_instance_init (DialogsProjectPickerProjectPicker * self,
                                                     gpointer klass)
{
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	self->priv = dialogs_project_picker_project_picker_get_instance_private (self);
#line 1327 "ProjectPicker.c"
}

static void
dialogs_project_picker_project_picker_finalize (GObject * obj)
{
	DialogsProjectPickerProjectPicker * self;
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, DialogsProjectPickerProjectPicker);
#line 23 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (self->priv->listbox);
#line 25 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (self->projects_hashmap);
#line 27 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (self->priv->_project);
#line 39 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	_g_object_unref0 (self->priv->_section);
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	G_OBJECT_CLASS (dialogs_project_picker_project_picker_parent_class)->finalize (obj);
#line 1346 "ProjectPicker.c"
}

static GType
dialogs_project_picker_project_picker_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (DialogsProjectPickerProjectPickerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) dialogs_project_picker_project_picker_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (DialogsProjectPickerProjectPicker), 0, (GInstanceInitFunc) dialogs_project_picker_project_picker_instance_init, NULL };
	GType dialogs_project_picker_project_picker_type_id;
	dialogs_project_picker_project_picker_type_id = g_type_register_static (hdy_window_get_type (), "DialogsProjectPickerProjectPicker", &g_define_type_info, 0);
	DialogsProjectPickerProjectPicker_private_offset = g_type_add_instance_private (dialogs_project_picker_project_picker_type_id, sizeof (DialogsProjectPickerProjectPickerPrivate));
	return dialogs_project_picker_project_picker_type_id;
}

GType
dialogs_project_picker_project_picker_get_type (void)
{
	static volatile gsize dialogs_project_picker_project_picker_type_id__volatile = 0;
	if (g_once_init_enter (&dialogs_project_picker_project_picker_type_id__volatile)) {
		GType dialogs_project_picker_project_picker_type_id;
		dialogs_project_picker_project_picker_type_id = dialogs_project_picker_project_picker_get_type_once ();
		g_once_init_leave (&dialogs_project_picker_project_picker_type_id__volatile, dialogs_project_picker_project_picker_type_id);
	}
	return dialogs_project_picker_project_picker_type_id__volatile;
}

static void
_vala_dialogs_project_picker_project_picker_get_property (GObject * object,
                                                          guint property_id,
                                                          GValue * value,
                                                          GParamSpec * pspec)
{
	DialogsProjectPickerProjectPicker * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, DialogsProjectPickerProjectPicker);
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		case DIALOGS_PROJECT_PICKER_PROJECT_PICKER_PROJECT_PROPERTY:
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		g_value_set_object (value, dialogs_project_picker_project_picker_get_project (self));
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		break;
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		case DIALOGS_PROJECT_PICKER_PROJECT_PICKER_SECTION_PROPERTY:
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		g_value_set_object (value, dialogs_project_picker_project_picker_get_section (self));
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		break;
#line 1393 "ProjectPicker.c"
		default:
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		break;
#line 1399 "ProjectPicker.c"
	}
}

static void
_vala_dialogs_project_picker_project_picker_set_property (GObject * object,
                                                          guint property_id,
                                                          const GValue * value,
                                                          GParamSpec * pspec)
{
	DialogsProjectPickerProjectPicker * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, DialogsProjectPickerProjectPicker);
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		case DIALOGS_PROJECT_PICKER_PROJECT_PICKER_PROJECT_PROPERTY:
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		dialogs_project_picker_project_picker_set_project (self, g_value_get_object (value));
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		break;
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		case DIALOGS_PROJECT_PICKER_PROJECT_PICKER_SECTION_PROPERTY:
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		dialogs_project_picker_project_picker_set_section (self, g_value_get_object (value));
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		break;
#line 1425 "ProjectPicker.c"
		default:
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/ProjectPicker/ProjectPicker.vala"
		break;
#line 1431 "ProjectPicker.c"
	}
}

