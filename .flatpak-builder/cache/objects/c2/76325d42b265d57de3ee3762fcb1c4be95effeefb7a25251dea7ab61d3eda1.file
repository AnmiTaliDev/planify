/* Project.c generated by valac 0.50.10, the Vala compiler
 * generated from Project.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <handy.h>
#include <float.h>
#include <math.h>

#define VIEWS_TYPE_PROJECT (views_project_get_type ())
#define VIEWS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_PROJECT, ViewsProject))
#define VIEWS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_PROJECT, ViewsProjectClass))
#define VIEWS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_PROJECT))
#define VIEWS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_PROJECT))
#define VIEWS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_PROJECT, ViewsProjectClass))

typedef struct _ViewsProject ViewsProject;
typedef struct _ViewsProjectClass ViewsProjectClass;
typedef struct _ViewsProjectPrivate ViewsProjectPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define VIEWS_TYPE_LIST (views_list_get_type ())
#define VIEWS_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_LIST, ViewsList))
#define VIEWS_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_LIST, ViewsListClass))
#define VIEWS_IS_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_LIST))
#define VIEWS_IS_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_LIST))
#define VIEWS_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_LIST, ViewsListClass))

typedef struct _ViewsList ViewsList;
typedef struct _ViewsListClass ViewsListClass;
enum  {
	VIEWS_PROJECT_0_PROPERTY,
	VIEWS_PROJECT_PROJECT_PROPERTY,
	VIEWS_PROJECT_NUM_PROPERTIES
};
static GParamSpec* views_project_properties[VIEWS_PROJECT_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block26Data Block26Data;

#define WIDGETS_TYPE_TOP_HEADER_PROJECT (widgets_top_header_project_get_type ())
#define WIDGETS_TOP_HEADER_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TOP_HEADER_PROJECT, WidgetsTopHeaderProject))
#define WIDGETS_TOP_HEADER_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TOP_HEADER_PROJECT, WidgetsTopHeaderProjectClass))
#define WIDGETS_IS_TOP_HEADER_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TOP_HEADER_PROJECT))
#define WIDGETS_IS_TOP_HEADER_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TOP_HEADER_PROJECT))
#define WIDGETS_TOP_HEADER_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TOP_HEADER_PROJECT, WidgetsTopHeaderProjectClass))

typedef struct _WidgetsTopHeaderProject WidgetsTopHeaderProject;
typedef struct _WidgetsTopHeaderProjectClass WidgetsTopHeaderProjectClass;

#define WIDGETS_TYPE_MAGIC_BUTTON (widgets_magic_button_get_type ())
#define WIDGETS_MAGIC_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButton))
#define WIDGETS_MAGIC_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButtonClass))
#define WIDGETS_IS_MAGIC_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_MAGIC_BUTTON))
#define WIDGETS_IS_MAGIC_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_MAGIC_BUTTON))
#define WIDGETS_MAGIC_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButtonClass))

typedef struct _WidgetsMagicButton WidgetsMagicButton;
typedef struct _WidgetsMagicButtonClass WidgetsMagicButtonClass;

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;

struct _ViewsProject {
	GtkEventBox parent_instance;
	ViewsProjectPrivate * priv;
};

struct _ViewsProjectClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsProjectPrivate {
	ObjectsProject* _project;
	ViewsList* list_view;
};

struct _Block26Data {
	int _ref_count_;
	ViewsProject* self;
	GtkScrolledWindow* scrolled_window;
};

static gint ViewsProject_private_offset;
static gpointer views_project_parent_class = NULL;
extern ServicesEventBus* planner_event_bus;

GType views_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsProject, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
GType views_list_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsList, g_object_unref)
ViewsProject* views_project_new (ObjectsProject* project);
ViewsProject* views_project_construct (GType object_type,
                                       ObjectsProject* project);
ObjectsProject* views_project_get_project (ViewsProject* self);
static void views_project_set_project (ViewsProject* self,
                                ObjectsProject* value);
static GObject * views_project_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties);
static Block26Data* block26_data_ref (Block26Data* _data26_);
static void block26_data_unref (void * _userdata_);
GType widgets_top_header_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsTopHeaderProject, g_object_unref)
WidgetsTopHeaderProject* widgets_top_header_project_new (ObjectsProject* project);
WidgetsTopHeaderProject* widgets_top_header_project_construct (GType object_type,
                                                               ObjectsProject* project);
GType widgets_magic_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsMagicButton, g_object_unref)
WidgetsMagicButton* widgets_magic_button_new (void);
WidgetsMagicButton* widgets_magic_button_construct (GType object_type);
ViewsList* views_list_new (ObjectsProject* project);
ViewsList* views_list_construct (GType object_type,
                                 ObjectsProject* project);
static void _views_project___lambda311_ (Block26Data* _data26_);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
static void __views_project___lambda311__gtk_adjustment_value_changed (GtkAdjustment* _sender,
                                                                gpointer self);
static void _views_project___lambda312_ (ViewsProject* self);
void views_list_prepare_new_item (ViewsList* self);
static void __views_project___lambda312__widgets_magic_button_clicked (WidgetsMagicButton* _sender,
                                                                gpointer self);
static void views_project_finalize (GObject * obj);
static GType views_project_get_type_once (void);
static void _vala_views_project_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec);
static void _vala_views_project_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec);

static inline gpointer
views_project_get_instance_private (ViewsProject* self)
{
	return G_STRUCT_MEMBER_P (self, ViewsProject_private_offset);
}

ViewsProject*
views_project_construct (GType object_type,
                         ObjectsProject* project)
{
	ViewsProject * self = NULL;
#line 6 "../src/Views/Project.vala"
	g_return_val_if_fail (project != NULL, NULL);
#line 7 "../src/Views/Project.vala"
	self = (ViewsProject*) g_object_new (object_type, "project", project, NULL);
#line 6 "../src/Views/Project.vala"
	return self;
#line 183 "Project.c"
}

ViewsProject*
views_project_new (ObjectsProject* project)
{
#line 6 "../src/Views/Project.vala"
	return views_project_construct (VIEWS_TYPE_PROJECT, project);
#line 191 "Project.c"
}

ObjectsProject*
views_project_get_project (ViewsProject* self)
{
	ObjectsProject* result;
	ObjectsProject* _tmp0_;
#line 2 "../src/Views/Project.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Views/Project.vala"
	_tmp0_ = self->priv->_project;
#line 2 "../src/Views/Project.vala"
	result = _tmp0_;
#line 2 "../src/Views/Project.vala"
	return result;
#line 207 "Project.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 2 "../src/Views/Project.vala"
	return self ? g_object_ref (self) : NULL;
#line 215 "Project.c"
}

static void
views_project_set_project (ViewsProject* self,
                           ObjectsProject* value)
{
	ObjectsProject* old_value;
#line 2 "../src/Views/Project.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Views/Project.vala"
	old_value = views_project_get_project (self);
#line 2 "../src/Views/Project.vala"
	if (old_value != value) {
#line 229 "Project.c"
		ObjectsProject* _tmp0_;
#line 2 "../src/Views/Project.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 2 "../src/Views/Project.vala"
		_g_object_unref0 (self->priv->_project);
#line 2 "../src/Views/Project.vala"
		self->priv->_project = _tmp0_;
#line 2 "../src/Views/Project.vala"
		g_object_notify_by_pspec ((GObject *) self, views_project_properties[VIEWS_PROJECT_PROJECT_PROPERTY]);
#line 239 "Project.c"
	}
}

static Block26Data*
block26_data_ref (Block26Data* _data26_)
{
#line 12 "../src/Views/Project.vala"
	g_atomic_int_inc (&_data26_->_ref_count_);
#line 12 "../src/Views/Project.vala"
	return _data26_;
#line 250 "Project.c"
}

static void
block26_data_unref (void * _userdata_)
{
	Block26Data* _data26_;
	_data26_ = (Block26Data*) _userdata_;
#line 12 "../src/Views/Project.vala"
	if (g_atomic_int_dec_and_test (&_data26_->_ref_count_)) {
#line 260 "Project.c"
		ViewsProject* self;
#line 12 "../src/Views/Project.vala"
		self = _data26_->self;
#line 12 "../src/Views/Project.vala"
		_g_object_unref0 (_data26_->scrolled_window);
#line 12 "../src/Views/Project.vala"
		_g_object_unref0 (self);
#line 12 "../src/Views/Project.vala"
		g_slice_free (Block26Data, _data26_);
#line 270 "Project.c"
	}
}

static void
_views_project___lambda311_ (Block26Data* _data26_)
{
	ViewsProject* self;
	GtkScrolledWindow* _tmp0_;
	GtkAdjustment* _tmp1_;
	GtkAdjustment* _tmp2_;
	gdouble _tmp3_;
	gdouble _tmp4_;
#line 52 "../src/Views/Project.vala"
	self = _data26_->self;
#line 53 "../src/Views/Project.vala"
	_tmp0_ = _data26_->scrolled_window;
#line 53 "../src/Views/Project.vala"
	_tmp1_ = gtk_scrolled_window_get_vadjustment (_tmp0_);
#line 53 "../src/Views/Project.vala"
	_tmp2_ = _tmp1_;
#line 53 "../src/Views/Project.vala"
	_tmp3_ = gtk_adjustment_get_value (_tmp2_);
#line 53 "../src/Views/Project.vala"
	_tmp4_ = _tmp3_;
#line 53 "../src/Views/Project.vala"
	if (_tmp4_ > ((gdouble) 20)) {
#line 297 "Project.c"
		ServicesEventBus* _tmp5_;
#line 54 "../src/Views/Project.vala"
		_tmp5_ = planner_event_bus;
#line 54 "../src/Views/Project.vala"
		g_signal_emit_by_name (_tmp5_, "view-header", TRUE);
#line 303 "Project.c"
	} else {
		ServicesEventBus* _tmp6_;
#line 56 "../src/Views/Project.vala"
		_tmp6_ = planner_event_bus;
#line 56 "../src/Views/Project.vala"
		g_signal_emit_by_name (_tmp6_, "view-header", FALSE);
#line 310 "Project.c"
	}
}

static void
__views_project___lambda311__gtk_adjustment_value_changed (GtkAdjustment* _sender,
                                                           gpointer self)
{
#line 52 "../src/Views/Project.vala"
	_views_project___lambda311_ (self);
#line 320 "Project.c"
}

static void
_views_project___lambda312_ (ViewsProject* self)
{
	ViewsList* _tmp0_;
#line 61 "../src/Views/Project.vala"
	_tmp0_ = self->priv->list_view;
#line 61 "../src/Views/Project.vala"
	views_list_prepare_new_item (_tmp0_);
#line 331 "Project.c"
}

static void
__views_project___lambda312__widgets_magic_button_clicked (WidgetsMagicButton* _sender,
                                                           gpointer self)
{
#line 60 "../src/Views/Project.vala"
	_views_project___lambda312_ ((ViewsProject*) self);
#line 340 "Project.c"
}

static GObject *
views_project_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsProject * self;
	Block26Data* _data26_;
	WidgetsTopHeaderProject* top_project = NULL;
	ObjectsProject* _tmp0_;
	WidgetsTopHeaderProject* _tmp1_;
	WidgetsMagicButton* magic_button = NULL;
	WidgetsMagicButton* _tmp2_;
	ObjectsProject* _tmp3_;
	ViewsList* _tmp4_ = NULL;
	GtkGrid* content = NULL;
	GtkGrid* _tmp5_ = NULL;
	GtkGrid* _tmp6_;
	WidgetsTopHeaderProject* _tmp7_;
	GtkGrid* _tmp8_;
	ViewsList* _tmp9_;
	HdyClamp* content_clamp = NULL;
	HdyClamp* _tmp10_ = NULL;
	HdyClamp* _tmp11_;
	GtkGrid* _tmp12_;
	GtkScrolledWindow* _tmp13_ = NULL;
	GtkScrolledWindow* _tmp14_;
	HdyClamp* _tmp15_;
	GtkOverlay* overlay = NULL;
	GtkOverlay* _tmp16_ = NULL;
	GtkOverlay* _tmp17_;
	WidgetsMagicButton* _tmp18_;
	GtkOverlay* _tmp19_;
	GtkScrolledWindow* _tmp20_;
	GtkOverlay* _tmp21_;
	GtkScrolledWindow* _tmp22_;
	GtkAdjustment* _tmp23_;
	GtkAdjustment* _tmp24_;
	WidgetsMagicButton* _tmp25_;
#line 12 "../src/Views/Project.vala"
	parent_class = G_OBJECT_CLASS (views_project_parent_class);
#line 12 "../src/Views/Project.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 12 "../src/Views/Project.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_PROJECT, ViewsProject);
#line 12 "../src/Views/Project.vala"
	_data26_ = g_slice_new0 (Block26Data);
#line 12 "../src/Views/Project.vala"
	_data26_->_ref_count_ = 1;
#line 12 "../src/Views/Project.vala"
	_data26_->self = g_object_ref (self);
#line 13 "../src/Views/Project.vala"
	_tmp0_ = self->priv->_project;
#line 13 "../src/Views/Project.vala"
	_tmp1_ = widgets_top_header_project_new (_tmp0_);
#line 13 "../src/Views/Project.vala"
	g_object_ref_sink (_tmp1_);
#line 13 "../src/Views/Project.vala"
	top_project = _tmp1_;
#line 14 "../src/Views/Project.vala"
	_tmp2_ = widgets_magic_button_new ();
#line 14 "../src/Views/Project.vala"
	g_object_ref_sink (_tmp2_);
#line 14 "../src/Views/Project.vala"
	magic_button = _tmp2_;
#line 16 "../src/Views/Project.vala"
	_tmp3_ = self->priv->_project;
#line 16 "../src/Views/Project.vala"
	_tmp4_ = views_list_new (_tmp3_);
#line 16 "../src/Views/Project.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp4_, 0);
#line 16 "../src/Views/Project.vala"
	g_object_ref_sink (_tmp4_);
#line 16 "../src/Views/Project.vala"
	_g_object_unref0 (self->priv->list_view);
#line 16 "../src/Views/Project.vala"
	self->priv->list_view = _tmp4_;
#line 20 "../src/Views/Project.vala"
	_tmp5_ = (GtkGrid*) gtk_grid_new ();
#line 20 "../src/Views/Project.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp5_, GTK_ORIENTATION_VERTICAL);
#line 20 "../src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp5_, "expand", TRUE, NULL);
#line 20 "../src/Views/Project.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp5_, 36);
#line 20 "../src/Views/Project.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp5_, 36);
#line 20 "../src/Views/Project.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp5_, 36);
#line 20 "../src/Views/Project.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp5_, 6);
#line 20 "../src/Views/Project.vala"
	g_object_ref_sink (_tmp5_);
#line 20 "../src/Views/Project.vala"
	content = _tmp5_;
#line 28 "../src/Views/Project.vala"
	_tmp6_ = content;
#line 28 "../src/Views/Project.vala"
	_tmp7_ = top_project;
#line 28 "../src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp6_, (GtkWidget*) _tmp7_);
#line 29 "../src/Views/Project.vala"
	_tmp8_ = content;
#line 29 "../src/Views/Project.vala"
	_tmp9_ = self->priv->list_view;
#line 29 "../src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp8_, (GtkWidget*) _tmp9_);
#line 31 "../src/Views/Project.vala"
	_tmp10_ = (HdyClamp*) hdy_clamp_new ();
#line 31 "../src/Views/Project.vala"
	hdy_clamp_set_maximum_size (_tmp10_, 720);
#line 31 "../src/Views/Project.vala"
	g_object_ref_sink (_tmp10_);
#line 31 "../src/Views/Project.vala"
	content_clamp = _tmp10_;
#line 35 "../src/Views/Project.vala"
	_tmp11_ = content_clamp;
#line 35 "../src/Views/Project.vala"
	_tmp12_ = content;
#line 35 "../src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp11_, (GtkWidget*) _tmp12_);
#line 37 "../src/Views/Project.vala"
	_tmp13_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 37 "../src/Views/Project.vala"
	g_object_set (_tmp13_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
#line 37 "../src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp13_, "expand", TRUE, NULL);
#line 37 "../src/Views/Project.vala"
	g_object_ref_sink (_tmp13_);
#line 37 "../src/Views/Project.vala"
	_data26_->scrolled_window = _tmp13_;
#line 41 "../src/Views/Project.vala"
	_tmp14_ = _data26_->scrolled_window;
#line 41 "../src/Views/Project.vala"
	_tmp15_ = content_clamp;
#line 41 "../src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp14_, (GtkWidget*) _tmp15_);
#line 43 "../src/Views/Project.vala"
	_tmp16_ = (GtkOverlay*) gtk_overlay_new ();
#line 43 "../src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp16_, "expand", TRUE, NULL);
#line 43 "../src/Views/Project.vala"
	g_object_ref_sink (_tmp16_);
#line 43 "../src/Views/Project.vala"
	overlay = _tmp16_;
#line 46 "../src/Views/Project.vala"
	_tmp17_ = overlay;
#line 46 "../src/Views/Project.vala"
	_tmp18_ = magic_button;
#line 46 "../src/Views/Project.vala"
	gtk_overlay_add_overlay (_tmp17_, (GtkWidget*) _tmp18_);
#line 47 "../src/Views/Project.vala"
	_tmp19_ = overlay;
#line 47 "../src/Views/Project.vala"
	_tmp20_ = _data26_->scrolled_window;
#line 47 "../src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp19_, (GtkWidget*) _tmp20_);
#line 49 "../src/Views/Project.vala"
	_tmp21_ = overlay;
#line 49 "../src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp21_);
#line 50 "../src/Views/Project.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 52 "../src/Views/Project.vala"
	_tmp22_ = _data26_->scrolled_window;
#line 52 "../src/Views/Project.vala"
	_tmp23_ = gtk_scrolled_window_get_vadjustment (_tmp22_);
#line 52 "../src/Views/Project.vala"
	_tmp24_ = _tmp23_;
#line 52 "../src/Views/Project.vala"
	g_signal_connect_data (_tmp24_, "value-changed", (GCallback) __views_project___lambda311__gtk_adjustment_value_changed, block26_data_ref (_data26_), (GClosureNotify) block26_data_unref, 0);
#line 60 "../src/Views/Project.vala"
	_tmp25_ = magic_button;
#line 60 "../src/Views/Project.vala"
	g_signal_connect_object (_tmp25_, "clicked", (GCallback) __views_project___lambda312__widgets_magic_button_clicked, self, 0);
#line 12 "../src/Views/Project.vala"
	_g_object_unref0 (overlay);
#line 12 "../src/Views/Project.vala"
	_g_object_unref0 (content_clamp);
#line 12 "../src/Views/Project.vala"
	_g_object_unref0 (content);
#line 12 "../src/Views/Project.vala"
	_g_object_unref0 (magic_button);
#line 12 "../src/Views/Project.vala"
	_g_object_unref0 (top_project);
#line 12 "../src/Views/Project.vala"
	block26_data_unref (_data26_);
#line 12 "../src/Views/Project.vala"
	_data26_ = NULL;
#line 12 "../src/Views/Project.vala"
	return obj;
#line 535 "Project.c"
}

static void
views_project_class_init (ViewsProjectClass * klass,
                          gpointer klass_data)
{
#line 1 "../src/Views/Project.vala"
	views_project_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Views/Project.vala"
	g_type_class_adjust_private_offset (klass, &ViewsProject_private_offset);
#line 1 "../src/Views/Project.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_views_project_get_property;
#line 1 "../src/Views/Project.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_views_project_set_property;
#line 1 "../src/Views/Project.vala"
	G_OBJECT_CLASS (klass)->constructor = views_project_constructor;
#line 1 "../src/Views/Project.vala"
	G_OBJECT_CLASS (klass)->finalize = views_project_finalize;
#line 1 "../src/Views/Project.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_PROJECT_PROJECT_PROPERTY, views_project_properties[VIEWS_PROJECT_PROJECT_PROPERTY] = g_param_spec_object ("project", "project", "project", OBJECTS_TYPE_PROJECT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 556 "Project.c"
}

static void
views_project_instance_init (ViewsProject * self,
                             gpointer klass)
{
#line 1 "../src/Views/Project.vala"
	self->priv = views_project_get_instance_private (self);
#line 565 "Project.c"
}

static void
views_project_finalize (GObject * obj)
{
	ViewsProject * self;
#line 1 "../src/Views/Project.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_PROJECT, ViewsProject);
#line 2 "../src/Views/Project.vala"
	_g_object_unref0 (self->priv->_project);
#line 4 "../src/Views/Project.vala"
	_g_object_unref0 (self->priv->list_view);
#line 1 "../src/Views/Project.vala"
	G_OBJECT_CLASS (views_project_parent_class)->finalize (obj);
#line 580 "Project.c"
}

static GType
views_project_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ViewsProjectClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_project_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsProject), 0, (GInstanceInitFunc) views_project_instance_init, NULL };
	GType views_project_type_id;
	views_project_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsProject", &g_define_type_info, 0);
	ViewsProject_private_offset = g_type_add_instance_private (views_project_type_id, sizeof (ViewsProjectPrivate));
	return views_project_type_id;
}

GType
views_project_get_type (void)
{
	static volatile gsize views_project_type_id__volatile = 0;
	if (g_once_init_enter (&views_project_type_id__volatile)) {
		GType views_project_type_id;
		views_project_type_id = views_project_get_type_once ();
		g_once_init_leave (&views_project_type_id__volatile, views_project_type_id);
	}
	return views_project_type_id__volatile;
}

static void
_vala_views_project_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec)
{
	ViewsProject * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_PROJECT, ViewsProject);
#line 1 "../src/Views/Project.vala"
	switch (property_id) {
#line 1 "../src/Views/Project.vala"
		case VIEWS_PROJECT_PROJECT_PROPERTY:
#line 1 "../src/Views/Project.vala"
		g_value_set_object (value, views_project_get_project (self));
#line 1 "../src/Views/Project.vala"
		break;
#line 621 "Project.c"
		default:
#line 1 "../src/Views/Project.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/Project.vala"
		break;
#line 627 "Project.c"
	}
}

static void
_vala_views_project_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec)
{
	ViewsProject * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_PROJECT, ViewsProject);
#line 1 "../src/Views/Project.vala"
	switch (property_id) {
#line 1 "../src/Views/Project.vala"
		case VIEWS_PROJECT_PROJECT_PROPERTY:
#line 1 "../src/Views/Project.vala"
		views_project_set_project (self, g_value_get_object (value));
#line 1 "../src/Views/Project.vala"
		break;
#line 647 "Project.c"
		default:
#line 1 "../src/Views/Project.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/Project.vala"
		break;
#line 653 "Project.c"
	}
}

