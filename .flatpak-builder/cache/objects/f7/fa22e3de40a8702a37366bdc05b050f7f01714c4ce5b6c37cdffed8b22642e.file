/* LabelRow.c generated by valac 0.50.10, the Vala compiler
 * generated from LabelRow.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gdk/gdk.h>

#define DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW (dialogs_label_picker_label_row_get_type ())
#define DIALOGS_LABEL_PICKER_LABEL_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRow))
#define DIALOGS_LABEL_PICKER_LABEL_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRowClass))
#define DIALOGS_LABEL_PICKER_IS_LABEL_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW))
#define DIALOGS_LABEL_PICKER_IS_LABEL_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW))
#define DIALOGS_LABEL_PICKER_LABEL_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRowClass))

typedef struct _DialogsLabelPickerLabelRow DialogsLabelPickerLabelRow;
typedef struct _DialogsLabelPickerLabelRowClass DialogsLabelPickerLabelRowClass;
typedef struct _DialogsLabelPickerLabelRowPrivate DialogsLabelPickerLabelRowPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
enum  {
	DIALOGS_LABEL_PICKER_LABEL_ROW_0_PROPERTY,
	DIALOGS_LABEL_PICKER_LABEL_ROW_LABEL_PROPERTY,
	DIALOGS_LABEL_PICKER_LABEL_ROW_ACTIVE_PROPERTY,
	DIALOGS_LABEL_PICKER_LABEL_ROW_NUM_PROPERTIES
};
static GParamSpec* dialogs_label_picker_label_row_properties[DIALOGS_LABEL_PICKER_LABEL_ROW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
enum  {
	DIALOGS_LABEL_PICKER_LABEL_ROW_CHECKED_TOGGLED_SIGNAL,
	DIALOGS_LABEL_PICKER_LABEL_ROW_NUM_SIGNALS
};
static guint dialogs_label_picker_label_row_signals[DIALOGS_LABEL_PICKER_LABEL_ROW_NUM_SIGNALS] = {0};

struct _DialogsLabelPickerLabelRow {
	GtkListBoxRow parent_instance;
	DialogsLabelPickerLabelRowPrivate * priv;
};

struct _DialogsLabelPickerLabelRowClass {
	GtkListBoxRowClass parent_class;
};

struct _DialogsLabelPickerLabelRowPrivate {
	ObjectsLabel* _label;
	gboolean _active;
	GtkCheckButton* checked_button;
};

static gint DialogsLabelPickerLabelRow_private_offset;
static gpointer dialogs_label_picker_label_row_parent_class = NULL;

GType dialogs_label_picker_label_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsLabelPickerLabelRow, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
DialogsLabelPickerLabelRow* dialogs_label_picker_label_row_new (ObjectsLabel* label,
                                                                gboolean active);
DialogsLabelPickerLabelRow* dialogs_label_picker_label_row_construct (GType object_type,
                                                                      ObjectsLabel* label,
                                                                      gboolean active);
ObjectsLabel* dialogs_label_picker_label_row_get_label (DialogsLabelPickerLabelRow* self);
static void dialogs_label_picker_label_row_set_label (DialogsLabelPickerLabelRow* self,
                                               ObjectsLabel* value);
gboolean dialogs_label_picker_label_row_get_active (DialogsLabelPickerLabelRow* self);
static void dialogs_label_picker_label_row_set_active (DialogsLabelPickerLabelRow* self,
                                                gboolean value);
static void g_cclosure_user_marshal_VOID__OBJECT_BOOLEAN (GClosure * closure,
                                                   GValue * return_value,
                                                   guint n_param_values,
                                                   const GValue * param_values,
                                                   gpointer invocation_hint,
                                                   gpointer marshal_data);
static GObject * dialogs_label_picker_label_row_constructor (GType type,
                                                      guint n_construct_properties,
                                                      GObjectConstructParam * construct_properties);
const gchar* objects_label_get_name (ObjectsLabel* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
void util_set_widget_priority (Util* self,
                               gint priority,
                               GtkWidget* widget);
#define CONSTANTS_PRIORITY_4 1
static gboolean _dialogs_label_picker_label_row___lambda62_ (DialogsLabelPickerLabelRow* self);
static gboolean __dialogs_label_picker_label_row___lambda62__gtk_widget_button_release_event (GtkWidget* _sender,
                                                                                       GdkEventButton* event,
                                                                                       gpointer self);
static void dialogs_label_picker_label_row_finalize (GObject * obj);
static GType dialogs_label_picker_label_row_get_type_once (void);
static void _vala_dialogs_label_picker_label_row_get_property (GObject * object,
                                                        guint property_id,
                                                        GValue * value,
                                                        GParamSpec * pspec);
static void _vala_dialogs_label_picker_label_row_set_property (GObject * object,
                                                        guint property_id,
                                                        const GValue * value,
                                                        GParamSpec * pspec);

static inline gpointer
dialogs_label_picker_label_row_get_instance_private (DialogsLabelPickerLabelRow* self)
{
	return G_STRUCT_MEMBER_P (self, DialogsLabelPickerLabelRow_private_offset);
}

DialogsLabelPickerLabelRow*
dialogs_label_picker_label_row_construct (GType object_type,
                                          ObjectsLabel* label,
                                          gboolean active)
{
	DialogsLabelPickerLabelRow * self = NULL;
#line 29 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_return_val_if_fail (label != NULL, NULL);
#line 30 "../src/Dialogs/LabelPicker/LabelRow.vala"
	self = (DialogsLabelPickerLabelRow*) g_object_new (object_type, "label", label, "active", active, NULL);
#line 29 "../src/Dialogs/LabelPicker/LabelRow.vala"
	return self;
#line 173 "LabelRow.c"
}

DialogsLabelPickerLabelRow*
dialogs_label_picker_label_row_new (ObjectsLabel* label,
                                    gboolean active)
{
#line 29 "../src/Dialogs/LabelPicker/LabelRow.vala"
	return dialogs_label_picker_label_row_construct (DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, label, active);
#line 182 "LabelRow.c"
}

ObjectsLabel*
dialogs_label_picker_label_row_get_label (DialogsLabelPickerLabelRow* self)
{
	ObjectsLabel* result;
	ObjectsLabel* _tmp0_;
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp0_ = self->priv->_label;
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
	result = _tmp0_;
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
	return result;
#line 198 "LabelRow.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
	return self ? g_object_ref (self) : NULL;
#line 206 "LabelRow.c"
}

static void
dialogs_label_picker_label_row_set_label (DialogsLabelPickerLabelRow* self,
                                          ObjectsLabel* value)
{
	ObjectsLabel* old_value;
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
	old_value = dialogs_label_picker_label_row_get_label (self);
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
	if (old_value != value) {
#line 220 "LabelRow.c"
		ObjectsLabel* _tmp0_;
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
		_g_object_unref0 (self->priv->_label);
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
		self->priv->_label = _tmp0_;
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
		g_object_notify_by_pspec ((GObject *) self, dialogs_label_picker_label_row_properties[DIALOGS_LABEL_PICKER_LABEL_ROW_LABEL_PROPERTY]);
#line 230 "LabelRow.c"
	}
}

gboolean
dialogs_label_picker_label_row_get_active (DialogsLabelPickerLabelRow* self)
{
	gboolean result;
#line 24 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 24 "../src/Dialogs/LabelPicker/LabelRow.vala"
	result = self->priv->_active;
#line 24 "../src/Dialogs/LabelPicker/LabelRow.vala"
	return result;
#line 244 "LabelRow.c"
}

static void
dialogs_label_picker_label_row_set_active (DialogsLabelPickerLabelRow* self,
                                           gboolean value)
{
	gboolean old_value;
#line 24 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_return_if_fail (self != NULL);
#line 24 "../src/Dialogs/LabelPicker/LabelRow.vala"
	old_value = dialogs_label_picker_label_row_get_active (self);
#line 24 "../src/Dialogs/LabelPicker/LabelRow.vala"
	if (old_value != value) {
#line 24 "../src/Dialogs/LabelPicker/LabelRow.vala"
		self->priv->_active = value;
#line 24 "../src/Dialogs/LabelPicker/LabelRow.vala"
		g_object_notify_by_pspec ((GObject *) self, dialogs_label_picker_label_row_properties[DIALOGS_LABEL_PICKER_LABEL_ROW_ACTIVE_PROPERTY]);
#line 262 "LabelRow.c"
	}
}

static void
g_cclosure_user_marshal_VOID__OBJECT_BOOLEAN (GClosure * closure,
                                              GValue * return_value,
                                              guint n_param_values,
                                              const GValue * param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECT_BOOLEAN) (gpointer data1, gpointer arg_1, gboolean arg_2, gpointer data2);
	register GMarshalFunc_VOID__OBJECT_BOOLEAN callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_return_if_fail (n_param_values == 3);
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		data1 = closure->data;
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		data2 = param_values->data[0].v_pointer;
#line 288 "LabelRow.c"
	} else {
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		data2 = closure->data;
#line 294 "LabelRow.c"
	}
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	callback = (GMarshalFunc_VOID__OBJECT_BOOLEAN) (marshal_data ? marshal_data : cc->callback);
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	callback (data1, g_value_get_object (param_values + 1), g_value_get_boolean (param_values + 2), data2);
#line 300 "LabelRow.c"
}

static gboolean
_dialogs_label_picker_label_row___lambda62_ (DialogsLabelPickerLabelRow* self)
{
	GtkCheckButton* _tmp0_;
	GtkCheckButton* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	ObjectsLabel* _tmp4_;
	GtkCheckButton* _tmp5_;
	gboolean _tmp6_;
	gboolean _tmp7_;
	gboolean result = FALSE;
#line 60 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp0_ = self->priv->checked_button;
#line 60 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp1_ = self->priv->checked_button;
#line 60 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp2_ = gtk_toggle_button_get_active ((GtkToggleButton*) _tmp1_);
#line 60 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp3_ = _tmp2_;
#line 60 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_toggle_button_set_active ((GtkToggleButton*) _tmp0_, !_tmp3_);
#line 61 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp4_ = self->priv->_label;
#line 61 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp5_ = self->priv->checked_button;
#line 61 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp6_ = gtk_toggle_button_get_active ((GtkToggleButton*) _tmp5_);
#line 61 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp7_ = _tmp6_;
#line 61 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_signal_emit (self, dialogs_label_picker_label_row_signals[DIALOGS_LABEL_PICKER_LABEL_ROW_CHECKED_TOGGLED_SIGNAL], 0, _tmp4_, _tmp7_);
#line 62 "../src/Dialogs/LabelPicker/LabelRow.vala"
	result = GDK_EVENT_STOP;
#line 62 "../src/Dialogs/LabelPicker/LabelRow.vala"
	return result;
#line 339 "LabelRow.c"
}

static gboolean
__dialogs_label_picker_label_row___lambda62__gtk_widget_button_release_event (GtkWidget* _sender,
                                                                              GdkEventButton* event,
                                                                              gpointer self)
{
	gboolean result;
	result = _dialogs_label_picker_label_row___lambda62_ ((DialogsLabelPickerLabelRow*) self);
#line 59 "../src/Dialogs/LabelPicker/LabelRow.vala"
	return result;
#line 351 "LabelRow.c"
}

static GObject *
dialogs_label_picker_label_row_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	DialogsLabelPickerLabelRow * self;
	GtkStyleContext* _tmp0_;
	ObjectsLabel* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	GtkCheckButton* _tmp5_ = NULL;
	GtkCheckButton* _tmp6_;
	gboolean _tmp7_;
	GtkCheckButton* _tmp8_;
	GtkStyleContext* _tmp9_;
	Util* _tmp10_;
	Util* _tmp11_;
	GtkCheckButton* _tmp12_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp13_ = NULL;
	GtkGrid* _tmp14_;
	GtkCheckButton* _tmp15_;
	GtkGrid* _tmp16_;
	GtkCheckButton* _tmp17_;
#line 36 "../src/Dialogs/LabelPicker/LabelRow.vala"
	parent_class = G_OBJECT_CLASS (dialogs_label_picker_label_row_parent_class);
#line 36 "../src/Dialogs/LabelPicker/LabelRow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 36 "../src/Dialogs/LabelPicker/LabelRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRow);
#line 37 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 37 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_style_context_add_class (_tmp0_, "row");
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp1_ = self->priv->_label;
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp2_ = objects_label_get_name (_tmp1_);
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp3_ = _tmp2_;
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp4_ = g_strdup (_tmp3_);
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp5_ = (GtkCheckButton*) gtk_check_button_new ();
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp5_, FALSE);
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp5_, GTK_ALIGN_CENTER);
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_button_set_label ((GtkButton*) _tmp5_, _tmp4_);
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_g_free0 (_tmp4_);
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp5_, TRUE);
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_object_ref_sink (_tmp5_);
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_g_object_unref0 (self->priv->checked_button);
#line 39 "../src/Dialogs/LabelPicker/LabelRow.vala"
	self->priv->checked_button = _tmp5_;
#line 45 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp6_ = self->priv->checked_button;
#line 45 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp7_ = self->priv->_active;
#line 45 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_toggle_button_set_active ((GtkToggleButton*) _tmp6_, _tmp7_);
#line 47 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp8_ = self->priv->checked_button;
#line 47 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
#line 47 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_style_context_add_class (_tmp9_, "priority-color");
#line 48 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp10_ = util_get_default ();
#line 48 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp11_ = _tmp10_;
#line 48 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp12_ = self->priv->checked_button;
#line 48 "../src/Dialogs/LabelPicker/LabelRow.vala"
	util_set_widget_priority (_tmp11_, CONSTANTS_PRIORITY_4, (GtkWidget*) _tmp12_);
#line 48 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_g_object_unref0 (_tmp11_);
#line 50 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp13_ = (GtkGrid*) gtk_grid_new ();
#line 50 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_grid_set_column_spacing (_tmp13_, 6);
#line 50 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_object_set ((GtkWidget*) _tmp13_, "margin", 3, NULL);
#line 50 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_object_ref_sink (_tmp13_);
#line 50 "../src/Dialogs/LabelPicker/LabelRow.vala"
	main_grid = _tmp13_;
#line 55 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp14_ = main_grid;
#line 55 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp15_ = self->priv->checked_button;
#line 55 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_container_add ((GtkContainer*) _tmp14_, (GtkWidget*) _tmp15_);
#line 57 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp16_ = main_grid;
#line 57 "../src/Dialogs/LabelPicker/LabelRow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp16_);
#line 59 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_tmp17_ = self->priv->checked_button;
#line 59 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp17_, "button-release-event", (GCallback) __dialogs_label_picker_label_row___lambda62__gtk_widget_button_release_event, self, 0);
#line 36 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_g_object_unref0 (main_grid);
#line 36 "../src/Dialogs/LabelPicker/LabelRow.vala"
	return obj;
#line 467 "LabelRow.c"
}

static void
dialogs_label_picker_label_row_class_init (DialogsLabelPickerLabelRowClass * klass,
                                           gpointer klass_data)
{
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	dialogs_label_picker_label_row_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_type_class_adjust_private_offset (klass, &DialogsLabelPickerLabelRow_private_offset);
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_dialogs_label_picker_label_row_get_property;
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_dialogs_label_picker_label_row_set_property;
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	G_OBJECT_CLASS (klass)->constructor = dialogs_label_picker_label_row_constructor;
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	G_OBJECT_CLASS (klass)->finalize = dialogs_label_picker_label_row_finalize;
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_LABEL_PICKER_LABEL_ROW_LABEL_PROPERTY, dialogs_label_picker_label_row_properties[DIALOGS_LABEL_PICKER_LABEL_ROW_LABEL_PROPERTY] = g_param_spec_object ("label", "label", "label", OBJECTS_TYPE_LABEL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_LABEL_PICKER_LABEL_ROW_ACTIVE_PROPERTY, dialogs_label_picker_label_row_properties[DIALOGS_LABEL_PICKER_LABEL_ROW_ACTIVE_PROPERTY] = g_param_spec_boolean ("active", "active", "active", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	dialogs_label_picker_label_row_signals[DIALOGS_LABEL_PICKER_LABEL_ROW_CHECKED_TOGGLED_SIGNAL] = g_signal_new ("checked-toggled", DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECT_BOOLEAN, G_TYPE_NONE, 2, OBJECTS_TYPE_LABEL, G_TYPE_BOOLEAN);
#line 492 "LabelRow.c"
}

static void
dialogs_label_picker_label_row_instance_init (DialogsLabelPickerLabelRow * self,
                                              gpointer klass)
{
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	self->priv = dialogs_label_picker_label_row_get_instance_private (self);
#line 501 "LabelRow.c"
}

static void
dialogs_label_picker_label_row_finalize (GObject * obj)
{
	DialogsLabelPickerLabelRow * self;
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRow);
#line 23 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_g_object_unref0 (self->priv->_label);
#line 26 "../src/Dialogs/LabelPicker/LabelRow.vala"
	_g_object_unref0 (self->priv->checked_button);
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	G_OBJECT_CLASS (dialogs_label_picker_label_row_parent_class)->finalize (obj);
#line 516 "LabelRow.c"
}

static GType
dialogs_label_picker_label_row_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (DialogsLabelPickerLabelRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) dialogs_label_picker_label_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (DialogsLabelPickerLabelRow), 0, (GInstanceInitFunc) dialogs_label_picker_label_row_instance_init, NULL };
	GType dialogs_label_picker_label_row_type_id;
	dialogs_label_picker_label_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "DialogsLabelPickerLabelRow", &g_define_type_info, 0);
	DialogsLabelPickerLabelRow_private_offset = g_type_add_instance_private (dialogs_label_picker_label_row_type_id, sizeof (DialogsLabelPickerLabelRowPrivate));
	return dialogs_label_picker_label_row_type_id;
}

GType
dialogs_label_picker_label_row_get_type (void)
{
	static volatile gsize dialogs_label_picker_label_row_type_id__volatile = 0;
	if (g_once_init_enter (&dialogs_label_picker_label_row_type_id__volatile)) {
		GType dialogs_label_picker_label_row_type_id;
		dialogs_label_picker_label_row_type_id = dialogs_label_picker_label_row_get_type_once ();
		g_once_init_leave (&dialogs_label_picker_label_row_type_id__volatile, dialogs_label_picker_label_row_type_id);
	}
	return dialogs_label_picker_label_row_type_id__volatile;
}

static void
_vala_dialogs_label_picker_label_row_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec)
{
	DialogsLabelPickerLabelRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRow);
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		case DIALOGS_LABEL_PICKER_LABEL_ROW_LABEL_PROPERTY:
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		g_value_set_object (value, dialogs_label_picker_label_row_get_label (self));
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		break;
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		case DIALOGS_LABEL_PICKER_LABEL_ROW_ACTIVE_PROPERTY:
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		g_value_set_boolean (value, dialogs_label_picker_label_row_get_active (self));
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		break;
#line 563 "LabelRow.c"
		default:
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		break;
#line 569 "LabelRow.c"
	}
}

static void
_vala_dialogs_label_picker_label_row_set_property (GObject * object,
                                                   guint property_id,
                                                   const GValue * value,
                                                   GParamSpec * pspec)
{
	DialogsLabelPickerLabelRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRow);
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		case DIALOGS_LABEL_PICKER_LABEL_ROW_LABEL_PROPERTY:
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		dialogs_label_picker_label_row_set_label (self, g_value_get_object (value));
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		break;
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		case DIALOGS_LABEL_PICKER_LABEL_ROW_ACTIVE_PROPERTY:
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		dialogs_label_picker_label_row_set_active (self, g_value_get_boolean (value));
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		break;
#line 595 "LabelRow.c"
		default:
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/LabelPicker/LabelRow.vala"
		break;
#line 601 "LabelRow.c"
	}
}

