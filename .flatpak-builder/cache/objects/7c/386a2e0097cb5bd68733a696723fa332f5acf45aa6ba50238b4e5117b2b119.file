/* Section.c generated by valac 0.50.10, the Vala compiler
 * generated from Section.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gee.h>
#include <json-glib/json-glib.h>
#include <gio/gio.h>
#include <granite.h>
#include <gtk/gtk.h>
#include <glib/gi18n-lib.h>

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;
typedef struct _ObjectsBaseObjectPrivate ObjectsBaseObjectPrivate;

#define OBJECTS_TYPE_SECTION (objects_section_get_type ())
#define OBJECTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_SECTION, ObjectsSection))
#define OBJECTS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_SECTION, ObjectsSectionClass))
#define OBJECTS_IS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_SECTION))
#define OBJECTS_IS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_SECTION))
#define OBJECTS_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_SECTION, ObjectsSectionClass))

typedef struct _ObjectsSection ObjectsSection;
typedef struct _ObjectsSectionClass ObjectsSectionClass;
typedef struct _ObjectsSectionPrivate ObjectsSectionPrivate;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;
enum  {
	OBJECTS_SECTION_0_PROPERTY,
	OBJECTS_SECTION_PROJECT_ID_PROPERTY,
	OBJECTS_SECTION_NAME_PROPERTY,
	OBJECTS_SECTION_ARCHIVED_AT_PROPERTY,
	OBJECTS_SECTION_ADDED_AT_PROPERTY,
	OBJECTS_SECTION_SECTION_ORDER_PROPERTY,
	OBJECTS_SECTION_COLLAPSED_PROPERTY,
	OBJECTS_SECTION_IS_DELETED_PROPERTY,
	OBJECTS_SECTION_IS_ARCHIVED_PROPERTY,
	OBJECTS_SECTION_SHORT_NAME_PROPERTY,
	OBJECTS_SECTION_PROJECT_PROPERTY,
	OBJECTS_SECTION_ITEMS_PROPERTY,
	OBJECTS_SECTION_NUM_PROPERTIES
};
static GParamSpec* objects_section_properties[OBJECTS_SECTION_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
typedef struct _Block48Data Block48Data;

#define SERVICES_TYPE_TODOIST (services_todoist_get_type ())
#define SERVICES_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_TODOIST, ServicesTodoist))
#define SERVICES_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_TODOIST, ServicesTodoistClass))
#define SERVICES_IS_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_TODOIST))
#define SERVICES_IS_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_TODOIST))
#define SERVICES_TODOIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_TODOIST, ServicesTodoistClass))

typedef struct _ServicesTodoist ServicesTodoist;
typedef struct _ServicesTodoistClass ServicesTodoistClass;

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
#define __vala_JsonNode_free0(var) ((var == NULL) ? NULL : (var = (_vala_JsonNode_free (var), NULL)))

#define WIDGETS_TYPE_LOADING_BUTTON (widgets_loading_button_get_type ())
#define WIDGETS_LOADING_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LOADING_BUTTON, WidgetsLoadingButton))
#define WIDGETS_LOADING_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LOADING_BUTTON, WidgetsLoadingButtonClass))
#define WIDGETS_IS_LOADING_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LOADING_BUTTON))
#define WIDGETS_IS_LOADING_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LOADING_BUTTON))
#define WIDGETS_LOADING_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LOADING_BUTTON, WidgetsLoadingButtonClass))

typedef struct _WidgetsLoadingButton WidgetsLoadingButton;
typedef struct _WidgetsLoadingButtonClass WidgetsLoadingButtonClass;
typedef struct _Block49Data Block49Data;
typedef enum  {
	LOADING_BUTTON_TYPE_LABEL,
	LOADING_BUTTON_TYPE_ICON
} LoadingButtonType;

#define TYPE_LOADING_BUTTON_TYPE (loading_button_type_get_type ())
enum  {
	OBJECTS_SECTION_ITEM_ADDED_SIGNAL,
	OBJECTS_SECTION_NUM_SIGNALS
};
static guint objects_section_signals[OBJECTS_SECTION_NUM_SIGNALS] = {0};

struct _ObjectsBaseObject {
	GObject parent_instance;
	ObjectsBaseObjectPrivate * priv;
};

struct _ObjectsBaseObjectClass {
	GObjectClass parent_class;
	gchar* (*get_update_json) (ObjectsBaseObject* self, const gchar* uuid, const gchar* temp_id);
	gchar* (*get_add_json) (ObjectsBaseObject* self, const gchar* temp_id, const gchar* uuid);
};

struct _ObjectsSection {
	ObjectsBaseObject parent_instance;
	ObjectsSectionPrivate * priv;
};

struct _ObjectsSectionClass {
	ObjectsBaseObjectClass parent_class;
};

struct _ObjectsSectionPrivate {
	gint64 _project_id;
	gchar* _name;
	gchar* _archived_at;
	gchar* _added_at;
	gint _section_order;
	gboolean _collapsed;
	gboolean _is_deleted;
	gboolean _is_archived;
	gchar* _short_name;
	ObjectsProject* _project;
	GeeArrayList* _items;
	GRecMutex __lock__items;
};

struct _Block48Data {
	int _ref_count_;
	ObjectsSection* self;
	gboolean cloud;
};

struct _Block49Data {
	int _ref_count_;
	ObjectsSection* self;
	GraniteMessageDialog* message_dialog;
	WidgetsLoadingButton* remove_button;
};

static gint ObjectsSection_private_offset;
static gpointer objects_section_parent_class = NULL;
extern ServicesDatabase* planner_database;
extern ServicesTodoist* planner_todoist;

GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsSection, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
gchar* objects_base_object_get_update_json (ObjectsBaseObject* self,
                                            const gchar* uuid,
                                            const gchar* temp_id);
gchar* objects_base_object_get_add_json (ObjectsBaseObject* self,
                                         const gchar* temp_id,
                                         const gchar* uuid);
ObjectsSection* objects_section_new_from_json (JsonNode* node);
ObjectsSection* objects_section_construct_from_json (GType object_type,
                                                     JsonNode* node);
ObjectsBaseObject* objects_base_object_new (void);
ObjectsBaseObject* objects_base_object_construct (GType object_type);
void objects_base_object_set_id (ObjectsBaseObject* self,
                                 gint64 value);
void objects_section_update_from_json (ObjectsSection* self,
                                       JsonNode* node);
void objects_section_set_project_id (ObjectsSection* self,
                                     gint64 value);
void objects_section_set_name (ObjectsSection* self,
                               const gchar* value);
void objects_section_set_added_at (ObjectsSection* self,
                                   const gchar* value);
void objects_section_set_section_order (ObjectsSection* self,
                                        gint value);
void objects_section_set_is_deleted (ObjectsSection* self,
                                     gboolean value);
void objects_section_set_is_archived (ObjectsSection* self,
                                      gboolean value);
void objects_section_set_collapsed (ObjectsSection* self,
                                    gboolean value);
void objects_section_set_archived_at (ObjectsSection* self,
                                      const gchar* value);
void objects_section_set_project (ObjectsSection* self,
                                  ObjectsProject* project);
ObjectsItem* objects_section_add_item_if_not_exists (ObjectsSection* self,
                                                     ObjectsItem* new_item,
                                                     gboolean insert);
ObjectsItem* objects_section_get_item (ObjectsSection* self,
                                       gint64 id);
gint64 objects_base_object_get_id (ObjectsBaseObject* self);
void objects_item_set_section (ObjectsItem* self,
                               ObjectsSection* section);
void objects_section_add_item (ObjectsSection* self,
                               ObjectsItem* item);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
gboolean services_database_insert_item (ServicesDatabase* self,
                                        ObjectsItem* item,
                                        gboolean insert);
GeeArrayList* objects_section_get_items (ObjectsSection* self);
void objects_section_update (ObjectsSection* self,
                             gboolean cloud);
static Block48Data* block48_data_ref (Block48Data* _data48_);
static void block48_data_unref (void * _userdata_);
guint objects_base_object_get_update_timeout_id (ObjectsBaseObject* self);
#define CONSTANTS_UPDATE_TIMEOUT 1500
static gboolean __lambda27_ (Block48Data* _data48_);
void objects_base_object_set_update_timeout_id (ObjectsBaseObject* self,
                                                guint value);
void services_database_update_section (ServicesDatabase* self,
                                       ObjectsSection* section);
ObjectsProject* objects_section_get_project (ObjectsSection* self);
gboolean objects_project_get_todoist (ObjectsProject* self);
GType services_todoist_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesTodoist, g_object_unref)
void services_todoist_update (ServicesTodoist* self,
                              ObjectsBaseObject* object,
                              GAsyncReadyCallback _callback_,
                              gpointer _user_data_);
gboolean services_todoist_update_finish (ServicesTodoist* self,
                                         GAsyncResult* _res_);
static void ___lambda28_ (ObjectsSection* self,
                   GObject* obj,
                   GAsyncResult* res);
static void ____lambda28__gasync_ready_callback (GObject* source_object,
                                          GAsyncResult* res,
                                          gpointer self);
static gboolean ___lambda27__gsource_func (gpointer self);
static gchar* objects_section_real_get_update_json (ObjectsBaseObject* base,
                                             const gchar* uuid,
                                             const gchar* temp_id);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gchar* util_get_encode_text (Util* self,
                             const gchar* text);
const gchar* objects_section_get_name (ObjectsSection* self);
static void _vala_JsonNode_free (JsonNode* self);
static gchar* objects_section_real_get_add_json (ObjectsBaseObject* base,
                                          const gchar* temp_id,
                                          const gchar* uuid);
void objects_section_delete (ObjectsSection* self,
                             gboolean confirm);
GType widgets_loading_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsLoadingButton, g_object_unref)
static Block49Data* block49_data_ref (Block49Data* _data49_);
static void block49_data_unref (void * _userdata_);
void services_todoist_delete (ServicesTodoist* self,
                              ObjectsBaseObject* object,
                              GAsyncReadyCallback _callback_,
                              gpointer _user_data_);
gboolean services_todoist_delete_finish (ServicesTodoist* self,
                                         GAsyncResult* _res_);
static void ____lambda29_ (ObjectsSection* self,
                    GObject* obj,
                    GAsyncResult* res);
void services_database_delete_section (ServicesDatabase* self,
                                       ObjectsSection* section);
static void _____lambda29__gasync_ready_callback (GObject* source_object,
                                           GAsyncResult* res,
                                           gpointer self);
gchar* util_get_dialog_text (Util* self,
                             const gchar* text);
GType loading_button_type_get_type (void) G_GNUC_CONST;
WidgetsLoadingButton* widgets_loading_button_new (LoadingButtonType loading_type,
                                                  const gchar* text);
WidgetsLoadingButton* widgets_loading_button_construct (GType object_type,
                                                        LoadingButtonType loading_type,
                                                        const gchar* text);
void widgets_loading_button_set_is_loading (WidgetsLoadingButton* self,
                                            gboolean value);
static void ____lambda30_ (Block49Data* _data49_,
                    GObject* obj,
                    GAsyncResult* res);
static void _____lambda30__gasync_ready_callback (GObject* source_object,
                                           GAsyncResult* res,
                                           gpointer self);
ObjectsSection* objects_section_new (void);
ObjectsSection* objects_section_construct (GType object_type);
gint64 objects_section_get_project_id (ObjectsSection* self);
const gchar* objects_section_get_archived_at (ObjectsSection* self);
const gchar* objects_section_get_added_at (ObjectsSection* self);
gint objects_section_get_section_order (ObjectsSection* self);
gboolean objects_section_get_collapsed (ObjectsSection* self);
gboolean objects_section_get_is_deleted (ObjectsSection* self);
gboolean objects_section_get_is_archived (ObjectsSection* self);
const gchar* objects_section_get_short_name (ObjectsSection* self);
gchar* util_get_short_name (Util* self,
                            const gchar* name,
                            gint size);
#define CONSTANTS_SHORT_NAME_SIZE 20
ObjectsProject* services_database_get_project (ServicesDatabase* self,
                                               gint64 id);
GeeArrayList* services_database_get_item_by_baseobject (ServicesDatabase* self,
                                                        ObjectsBaseObject* object);
static GObject * objects_section_constructor (GType type,
                                       guint n_construct_properties,
                                       GObjectConstructParam * construct_properties);
static void _objects_section___lambda31_ (ObjectsSection* self);
static void __objects_section___lambda31__objects_base_object_deleted (ObjectsBaseObject* _sender,
                                                                gpointer self);
static void objects_section_finalize (GObject * obj);
static GType objects_section_get_type_once (void);
static void _vala_objects_section_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec);
static void _vala_objects_section_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec);

static inline gpointer
objects_section_get_instance_private (ObjectsSection* self)
{
	return G_STRUCT_MEMBER_P (self, ObjectsSection_private_offset);
}

ObjectsSection*
objects_section_construct_from_json (GType object_type,
                                     JsonNode* node)
{
	ObjectsSection * self = NULL;
	JsonObject* _tmp0_;
#line 64 "../src/Objects/Section.vala"
	g_return_val_if_fail (node != NULL, NULL);
#line 64 "../src/Objects/Section.vala"
	self = (ObjectsSection*) objects_base_object_construct (object_type);
#line 65 "../src/Objects/Section.vala"
	_tmp0_ = json_node_get_object (node);
#line 65 "../src/Objects/Section.vala"
	objects_base_object_set_id ((ObjectsBaseObject*) self, json_object_get_int_member (_tmp0_, "id"));
#line 66 "../src/Objects/Section.vala"
	objects_section_update_from_json (self, node);
#line 64 "../src/Objects/Section.vala"
	return self;
#line 397 "Section.c"
}

ObjectsSection*
objects_section_new_from_json (JsonNode* node)
{
#line 64 "../src/Objects/Section.vala"
	return objects_section_construct_from_json (OBJECTS_TYPE_SECTION, node);
#line 405 "Section.c"
}

void
objects_section_update_from_json (ObjectsSection* self,
                                  JsonNode* node)
{
	JsonObject* _tmp0_;
	JsonObject* _tmp1_;
	const gchar* _tmp2_;
	JsonObject* _tmp3_;
	const gchar* _tmp4_;
	JsonObject* _tmp5_;
	JsonObject* _tmp6_;
	JsonObject* _tmp7_;
	JsonObject* _tmp8_;
	JsonObject* _tmp9_;
#line 69 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 69 "../src/Objects/Section.vala"
	g_return_if_fail (node != NULL);
#line 70 "../src/Objects/Section.vala"
	_tmp0_ = json_node_get_object (node);
#line 70 "../src/Objects/Section.vala"
	objects_section_set_project_id (self, json_object_get_int_member (_tmp0_, "project_id"));
#line 71 "../src/Objects/Section.vala"
	_tmp1_ = json_node_get_object (node);
#line 71 "../src/Objects/Section.vala"
	_tmp2_ = json_object_get_string_member (_tmp1_, "name");
#line 71 "../src/Objects/Section.vala"
	objects_section_set_name (self, _tmp2_);
#line 72 "../src/Objects/Section.vala"
	_tmp3_ = json_node_get_object (node);
#line 72 "../src/Objects/Section.vala"
	_tmp4_ = json_object_get_string_member (_tmp3_, "added_at");
#line 72 "../src/Objects/Section.vala"
	objects_section_set_added_at (self, _tmp4_);
#line 73 "../src/Objects/Section.vala"
	_tmp5_ = json_node_get_object (node);
#line 73 "../src/Objects/Section.vala"
	objects_section_set_section_order (self, (gint) ((gint32) json_object_get_int_member (_tmp5_, "section_order")));
#line 74 "../src/Objects/Section.vala"
	_tmp6_ = json_node_get_object (node);
#line 74 "../src/Objects/Section.vala"
	objects_section_set_is_deleted (self, json_object_get_boolean_member (_tmp6_, "is_deleted"));
#line 75 "../src/Objects/Section.vala"
	_tmp7_ = json_node_get_object (node);
#line 75 "../src/Objects/Section.vala"
	objects_section_set_is_archived (self, json_object_get_boolean_member (_tmp7_, "is_archived"));
#line 76 "../src/Objects/Section.vala"
	_tmp8_ = json_node_get_object (node);
#line 76 "../src/Objects/Section.vala"
	objects_section_set_collapsed (self, json_object_get_boolean_member (_tmp8_, "collapsed"));
#line 78 "../src/Objects/Section.vala"
	_tmp9_ = json_node_get_object (node);
#line 78 "../src/Objects/Section.vala"
	if (!json_object_get_null_member (_tmp9_, "archived_at")) {
#line 462 "Section.c"
		JsonObject* _tmp10_;
		const gchar* _tmp11_;
#line 79 "../src/Objects/Section.vala"
		_tmp10_ = json_node_get_object (node);
#line 79 "../src/Objects/Section.vala"
		_tmp11_ = json_object_get_string_member (_tmp10_, "archived_at");
#line 79 "../src/Objects/Section.vala"
		objects_section_set_archived_at (self, _tmp11_);
#line 471 "Section.c"
	}
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 84 "../src/Objects/Section.vala"
	return self ? g_object_ref (self) : NULL;
#line 480 "Section.c"
}

void
objects_section_set_project (ObjectsSection* self,
                             ObjectsProject* project)
{
	ObjectsProject* _tmp0_;
#line 83 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 83 "../src/Objects/Section.vala"
	g_return_if_fail (project != NULL);
#line 84 "../src/Objects/Section.vala"
	_tmp0_ = _g_object_ref0 (project);
#line 84 "../src/Objects/Section.vala"
	_g_object_unref0 (self->priv->_project);
#line 84 "../src/Objects/Section.vala"
	self->priv->_project = _tmp0_;
#line 498 "Section.c"
}

ObjectsItem*
objects_section_add_item_if_not_exists (ObjectsSection* self,
                                        ObjectsItem* new_item,
                                        gboolean insert)
{
	ObjectsItem* return_value = NULL;
	GError* _inner_error0_ = NULL;
	ObjectsItem* result = NULL;
#line 87 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 87 "../src/Objects/Section.vala"
	g_return_val_if_fail (new_item != NULL, NULL);
#line 88 "../src/Objects/Section.vala"
	return_value = NULL;
#line 515 "Section.c"
	{
		GeeArrayList* _tmp0_;
#line 89 "../src/Objects/Section.vala"
		_tmp0_ = self->priv->_items;
#line 89 "../src/Objects/Section.vala"
		g_rec_mutex_lock (&self->priv->__lock__items);
#line 522 "Section.c"
		{
			gint64 _tmp1_;
			gint64 _tmp2_;
			ObjectsItem* _tmp3_;
			ObjectsItem* _tmp4_;
			ObjectsItem* _tmp7_;
			ObjectsItem* _tmp8_;
#line 90 "../src/Objects/Section.vala"
			_tmp1_ = objects_base_object_get_id ((ObjectsBaseObject*) new_item);
#line 90 "../src/Objects/Section.vala"
			_tmp2_ = _tmp1_;
#line 90 "../src/Objects/Section.vala"
			_tmp3_ = objects_section_get_item (self, _tmp2_);
#line 90 "../src/Objects/Section.vala"
			_g_object_unref0 (return_value);
#line 90 "../src/Objects/Section.vala"
			return_value = _tmp3_;
#line 91 "../src/Objects/Section.vala"
			_tmp4_ = return_value;
#line 91 "../src/Objects/Section.vala"
			if (_tmp4_ == NULL) {
#line 544 "Section.c"
				ServicesDatabase* _tmp5_;
				ObjectsItem* _tmp6_;
#line 92 "../src/Objects/Section.vala"
				objects_item_set_section (new_item, self);
#line 93 "../src/Objects/Section.vala"
				objects_section_add_item (self, new_item);
#line 94 "../src/Objects/Section.vala"
				_tmp5_ = planner_database;
#line 94 "../src/Objects/Section.vala"
				services_database_insert_item (_tmp5_, new_item, insert);
#line 95 "../src/Objects/Section.vala"
				_tmp6_ = _g_object_ref0 (new_item);
#line 95 "../src/Objects/Section.vala"
				_g_object_unref0 (return_value);
#line 95 "../src/Objects/Section.vala"
				return_value = _tmp6_;
#line 561 "Section.c"
			}
#line 97 "../src/Objects/Section.vala"
			_tmp7_ = return_value;
#line 97 "../src/Objects/Section.vala"
			_tmp8_ = _g_object_ref0 (_tmp7_);
#line 97 "../src/Objects/Section.vala"
			result = _tmp8_;
#line 569 "Section.c"
			{
				GeeArrayList* _tmp9_;
#line 89 "../src/Objects/Section.vala"
				_tmp9_ = self->priv->_items;
#line 89 "../src/Objects/Section.vala"
				g_rec_mutex_unlock (&self->priv->__lock__items);
#line 576 "Section.c"
			}
#line 97 "../src/Objects/Section.vala"
			_g_object_unref0 (return_value);
#line 97 "../src/Objects/Section.vala"
			return result;
#line 582 "Section.c"
		}
		__finally0:
		{
			GeeArrayList* _tmp10_;
#line 89 "../src/Objects/Section.vala"
			_tmp10_ = self->priv->_items;
#line 89 "../src/Objects/Section.vala"
			g_rec_mutex_unlock (&self->priv->__lock__items);
#line 591 "Section.c"
		}
#line 89 "../src/Objects/Section.vala"
		_g_object_unref0 (return_value);
#line 89 "../src/Objects/Section.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 89 "../src/Objects/Section.vala"
		g_clear_error (&_inner_error0_);
#line 89 "../src/Objects/Section.vala"
		return NULL;
#line 601 "Section.c"
	}
#line 87 "../src/Objects/Section.vala"
	_g_object_unref0 (return_value);
#line 605 "Section.c"
}

ObjectsItem*
objects_section_get_item (ObjectsSection* self,
                          gint64 id)
{
	ObjectsItem* return_value = NULL;
	GError* _inner_error0_ = NULL;
	ObjectsItem* result = NULL;
#line 101 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 102 "../src/Objects/Section.vala"
	return_value = NULL;
#line 619 "Section.c"
	{
		GeeArrayList* _tmp0_;
#line 103 "../src/Objects/Section.vala"
		_tmp0_ = self->priv->_items;
#line 103 "../src/Objects/Section.vala"
		g_rec_mutex_lock (&self->priv->__lock__items);
#line 626 "Section.c"
		{
			{
				GeeArrayList* _item_list = NULL;
				GeeArrayList* _tmp1_;
				GeeArrayList* _tmp2_;
				GeeArrayList* _tmp3_;
				gint _item_size = 0;
				GeeArrayList* _tmp4_;
				gint _tmp5_;
				gint _tmp6_;
				gint _item_index = 0;
#line 104 "../src/Objects/Section.vala"
				_tmp1_ = objects_section_get_items (self);
#line 104 "../src/Objects/Section.vala"
				_tmp2_ = _tmp1_;
#line 104 "../src/Objects/Section.vala"
				_tmp3_ = _g_object_ref0 (_tmp2_);
#line 104 "../src/Objects/Section.vala"
				_item_list = _tmp3_;
#line 104 "../src/Objects/Section.vala"
				_tmp4_ = _item_list;
#line 104 "../src/Objects/Section.vala"
				_tmp5_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp4_);
#line 104 "../src/Objects/Section.vala"
				_tmp6_ = _tmp5_;
#line 104 "../src/Objects/Section.vala"
				_item_size = _tmp6_;
#line 104 "../src/Objects/Section.vala"
				_item_index = -1;
#line 104 "../src/Objects/Section.vala"
				while (TRUE) {
#line 658 "Section.c"
					gint _tmp7_;
					gint _tmp8_;
					ObjectsItem* item = NULL;
					GeeArrayList* _tmp9_;
					gpointer _tmp10_;
					ObjectsItem* _tmp11_;
					gint64 _tmp12_;
					gint64 _tmp13_;
#line 104 "../src/Objects/Section.vala"
					_item_index = _item_index + 1;
#line 104 "../src/Objects/Section.vala"
					_tmp7_ = _item_index;
#line 104 "../src/Objects/Section.vala"
					_tmp8_ = _item_size;
#line 104 "../src/Objects/Section.vala"
					if (!(_tmp7_ < _tmp8_)) {
#line 104 "../src/Objects/Section.vala"
						break;
#line 677 "Section.c"
					}
#line 104 "../src/Objects/Section.vala"
					_tmp9_ = _item_list;
#line 104 "../src/Objects/Section.vala"
					_tmp10_ = gee_abstract_list_get ((GeeAbstractList*) _tmp9_, _item_index);
#line 104 "../src/Objects/Section.vala"
					item = (ObjectsItem*) _tmp10_;
#line 105 "../src/Objects/Section.vala"
					_tmp11_ = item;
#line 105 "../src/Objects/Section.vala"
					_tmp12_ = objects_base_object_get_id ((ObjectsBaseObject*) _tmp11_);
#line 105 "../src/Objects/Section.vala"
					_tmp13_ = _tmp12_;
#line 105 "../src/Objects/Section.vala"
					if (_tmp13_ == id) {
#line 693 "Section.c"
						ObjectsItem* _tmp14_;
						ObjectsItem* _tmp15_;
#line 106 "../src/Objects/Section.vala"
						_tmp14_ = item;
#line 106 "../src/Objects/Section.vala"
						_tmp15_ = _g_object_ref0 (_tmp14_);
#line 106 "../src/Objects/Section.vala"
						_g_object_unref0 (return_value);
#line 106 "../src/Objects/Section.vala"
						return_value = _tmp15_;
#line 107 "../src/Objects/Section.vala"
						_g_object_unref0 (item);
#line 107 "../src/Objects/Section.vala"
						break;
#line 708 "Section.c"
					}
#line 104 "../src/Objects/Section.vala"
					_g_object_unref0 (item);
#line 712 "Section.c"
				}
#line 104 "../src/Objects/Section.vala"
				_g_object_unref0 (_item_list);
#line 716 "Section.c"
			}
		}
		__finally0:
		{
			GeeArrayList* _tmp16_;
#line 103 "../src/Objects/Section.vala"
			_tmp16_ = self->priv->_items;
#line 103 "../src/Objects/Section.vala"
			g_rec_mutex_unlock (&self->priv->__lock__items);
#line 726 "Section.c"
		}
#line 103 "../src/Objects/Section.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 103 "../src/Objects/Section.vala"
			_g_object_unref0 (return_value);
#line 103 "../src/Objects/Section.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 103 "../src/Objects/Section.vala"
			g_clear_error (&_inner_error0_);
#line 103 "../src/Objects/Section.vala"
			return NULL;
#line 738 "Section.c"
		}
	}
#line 111 "../src/Objects/Section.vala"
	result = return_value;
#line 111 "../src/Objects/Section.vala"
	return result;
#line 745 "Section.c"
}

void
objects_section_add_item (ObjectsSection* self,
                          ObjectsItem* item)
{
	GeeArrayList* _tmp0_;
#line 114 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 114 "../src/Objects/Section.vala"
	g_return_if_fail (item != NULL);
#line 115 "../src/Objects/Section.vala"
	_tmp0_ = self->priv->_items;
#line 115 "../src/Objects/Section.vala"
	gee_abstract_collection_add ((GeeAbstractCollection*) _tmp0_, item);
#line 761 "Section.c"
}

static Block48Data*
block48_data_ref (Block48Data* _data48_)
{
#line 118 "../src/Objects/Section.vala"
	g_atomic_int_inc (&_data48_->_ref_count_);
#line 118 "../src/Objects/Section.vala"
	return _data48_;
#line 771 "Section.c"
}

static void
block48_data_unref (void * _userdata_)
{
	Block48Data* _data48_;
	_data48_ = (Block48Data*) _userdata_;
#line 118 "../src/Objects/Section.vala"
	if (g_atomic_int_dec_and_test (&_data48_->_ref_count_)) {
#line 781 "Section.c"
		ObjectsSection* self;
#line 118 "../src/Objects/Section.vala"
		self = _data48_->self;
#line 118 "../src/Objects/Section.vala"
		_g_object_unref0 (self);
#line 118 "../src/Objects/Section.vala"
		g_slice_free (Block48Data, _data48_);
#line 789 "Section.c"
	}
}

static void
___lambda28_ (ObjectsSection* self,
              GObject* obj,
              GAsyncResult* res)
{
	ServicesTodoist* _tmp0_;
#line 128 "../src/Objects/Section.vala"
	g_return_if_fail (res != NULL);
#line 129 "../src/Objects/Section.vala"
	_tmp0_ = planner_todoist;
#line 129 "../src/Objects/Section.vala"
	services_todoist_update_finish (_tmp0_, res);
#line 805 "Section.c"
}

static void
____lambda28__gasync_ready_callback (GObject* source_object,
                                     GAsyncResult* res,
                                     gpointer self)
{
#line 128 "../src/Objects/Section.vala"
	___lambda28_ ((ObjectsSection*) self, source_object, res);
#line 128 "../src/Objects/Section.vala"
	g_object_unref (self);
#line 817 "Section.c"
}

static gboolean
__lambda27_ (Block48Data* _data48_)
{
	ObjectsSection* self;
	ServicesDatabase* _tmp0_;
	gboolean _tmp1_ = FALSE;
	ObjectsProject* _tmp2_;
	ObjectsProject* _tmp3_;
	gboolean _tmp4_;
	gboolean _tmp5_;
	gboolean result = FALSE;
#line 123 "../src/Objects/Section.vala"
	self = _data48_->self;
#line 124 "../src/Objects/Section.vala"
	objects_base_object_set_update_timeout_id ((ObjectsBaseObject*) self, (guint) 0);
#line 126 "../src/Objects/Section.vala"
	_tmp0_ = planner_database;
#line 126 "../src/Objects/Section.vala"
	services_database_update_section (_tmp0_, self);
#line 127 "../src/Objects/Section.vala"
	_tmp2_ = objects_section_get_project (self);
#line 127 "../src/Objects/Section.vala"
	_tmp3_ = _tmp2_;
#line 127 "../src/Objects/Section.vala"
	_tmp4_ = objects_project_get_todoist (_tmp3_);
#line 127 "../src/Objects/Section.vala"
	_tmp5_ = _tmp4_;
#line 127 "../src/Objects/Section.vala"
	if (_tmp5_) {
#line 127 "../src/Objects/Section.vala"
		_tmp1_ = _data48_->cloud;
#line 851 "Section.c"
	} else {
#line 127 "../src/Objects/Section.vala"
		_tmp1_ = FALSE;
#line 855 "Section.c"
	}
#line 127 "../src/Objects/Section.vala"
	if (_tmp1_) {
#line 859 "Section.c"
		ServicesTodoist* _tmp6_;
#line 128 "../src/Objects/Section.vala"
		_tmp6_ = planner_todoist;
#line 128 "../src/Objects/Section.vala"
		services_todoist_update (_tmp6_, (ObjectsBaseObject*) self, ____lambda28__gasync_ready_callback, g_object_ref (self));
#line 865 "Section.c"
	}
#line 133 "../src/Objects/Section.vala"
	result = G_SOURCE_REMOVE;
#line 133 "../src/Objects/Section.vala"
	return result;
#line 871 "Section.c"
}

static gboolean
___lambda27__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda27_ (self);
#line 123 "../src/Objects/Section.vala"
	return result;
#line 881 "Section.c"
}

void
objects_section_update (ObjectsSection* self,
                        gboolean cloud)
{
	Block48Data* _data48_;
	guint _tmp0_;
	guint _tmp1_;
#line 118 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 118 "../src/Objects/Section.vala"
	_data48_ = g_slice_new0 (Block48Data);
#line 118 "../src/Objects/Section.vala"
	_data48_->_ref_count_ = 1;
#line 118 "../src/Objects/Section.vala"
	_data48_->self = g_object_ref (self);
#line 118 "../src/Objects/Section.vala"
	_data48_->cloud = cloud;
#line 119 "../src/Objects/Section.vala"
	_tmp0_ = objects_base_object_get_update_timeout_id ((ObjectsBaseObject*) self);
#line 119 "../src/Objects/Section.vala"
	_tmp1_ = _tmp0_;
#line 119 "../src/Objects/Section.vala"
	if (_tmp1_ != ((guint) 0)) {
#line 907 "Section.c"
		guint _tmp2_;
		guint _tmp3_;
#line 120 "../src/Objects/Section.vala"
		_tmp2_ = objects_base_object_get_update_timeout_id ((ObjectsBaseObject*) self);
#line 120 "../src/Objects/Section.vala"
		_tmp3_ = _tmp2_;
#line 120 "../src/Objects/Section.vala"
		g_source_remove (_tmp3_);
#line 916 "Section.c"
	}
#line 123 "../src/Objects/Section.vala"
	objects_base_object_set_update_timeout_id ((ObjectsBaseObject*) self, g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) CONSTANTS_UPDATE_TIMEOUT, ___lambda27__gsource_func, block48_data_ref (_data48_), block48_data_unref));
#line 118 "../src/Objects/Section.vala"
	block48_data_unref (_data48_);
#line 118 "../src/Objects/Section.vala"
	_data48_ = NULL;
#line 924 "Section.c"
}

static void
_vala_JsonNode_free (JsonNode* self)
{
#line 174 "../src/Objects/Section.vala"
	g_boxed_free (json_node_get_type (), self);
#line 932 "Section.c"
}

static gchar*
objects_section_real_get_update_json (ObjectsBaseObject* base,
                                      const gchar* uuid,
                                      const gchar* temp_id)
{
	ObjectsSection * self;
	JsonBuilder* builder = NULL;
	JsonBuilder* _tmp0_;
	JsonBuilder* _tmp1_;
	JsonBuilder* _tmp2_;
	JsonBuilder* _tmp3_;
	const gchar* _tmp4_ = NULL;
	JsonBuilder* _tmp5_;
	JsonBuilder* _tmp6_;
	JsonBuilder* _tmp7_;
	JsonBuilder* _tmp10_;
	JsonBuilder* _tmp11_;
	JsonBuilder* _tmp16_;
	JsonBuilder* _tmp17_;
	Util* _tmp18_;
	Util* _tmp19_;
	const gchar* _tmp20_;
	gchar* _tmp21_;
	gchar* _tmp22_;
	JsonBuilder* _tmp23_;
	JsonBuilder* _tmp24_;
	JsonBuilder* _tmp25_;
	JsonGenerator* generator = NULL;
	JsonGenerator* _tmp26_;
	JsonNode* root = NULL;
	JsonBuilder* _tmp27_;
	JsonNode* _tmp28_;
	gchar* _tmp29_;
	gchar* result = NULL;
#line 137 "../src/Objects/Section.vala"
	self = (ObjectsSection*) base;
#line 137 "../src/Objects/Section.vala"
	g_return_val_if_fail (uuid != NULL, NULL);
#line 138 "../src/Objects/Section.vala"
	_tmp0_ = json_builder_new ();
#line 138 "../src/Objects/Section.vala"
	builder = _tmp0_;
#line 139 "../src/Objects/Section.vala"
	_tmp1_ = builder;
#line 139 "../src/Objects/Section.vala"
	json_builder_begin_array (_tmp1_);
#line 140 "../src/Objects/Section.vala"
	_tmp2_ = builder;
#line 140 "../src/Objects/Section.vala"
	json_builder_begin_object (_tmp2_);
#line 143 "../src/Objects/Section.vala"
	_tmp3_ = builder;
#line 143 "../src/Objects/Section.vala"
	json_builder_set_member_name (_tmp3_, "type");
#line 144 "../src/Objects/Section.vala"
	if (temp_id == NULL) {
#line 144 "../src/Objects/Section.vala"
		_tmp4_ = "section_update";
#line 993 "Section.c"
	} else {
#line 144 "../src/Objects/Section.vala"
		_tmp4_ = "section_add";
#line 997 "Section.c"
	}
#line 144 "../src/Objects/Section.vala"
	_tmp5_ = builder;
#line 144 "../src/Objects/Section.vala"
	json_builder_add_string_value (_tmp5_, _tmp4_);
#line 146 "../src/Objects/Section.vala"
	_tmp6_ = builder;
#line 146 "../src/Objects/Section.vala"
	json_builder_set_member_name (_tmp6_, "uuid");
#line 147 "../src/Objects/Section.vala"
	_tmp7_ = builder;
#line 147 "../src/Objects/Section.vala"
	json_builder_add_string_value (_tmp7_, uuid);
#line 149 "../src/Objects/Section.vala"
	if (temp_id != NULL) {
#line 1013 "Section.c"
		JsonBuilder* _tmp8_;
		JsonBuilder* _tmp9_;
#line 150 "../src/Objects/Section.vala"
		_tmp8_ = builder;
#line 150 "../src/Objects/Section.vala"
		json_builder_set_member_name (_tmp8_, "temp_id");
#line 151 "../src/Objects/Section.vala"
		_tmp9_ = builder;
#line 151 "../src/Objects/Section.vala"
		json_builder_add_string_value (_tmp9_, temp_id);
#line 1024 "Section.c"
	}
#line 154 "../src/Objects/Section.vala"
	_tmp10_ = builder;
#line 154 "../src/Objects/Section.vala"
	json_builder_set_member_name (_tmp10_, "args");
#line 155 "../src/Objects/Section.vala"
	_tmp11_ = builder;
#line 155 "../src/Objects/Section.vala"
	json_builder_begin_object (_tmp11_);
#line 157 "../src/Objects/Section.vala"
	if (temp_id == NULL) {
#line 1036 "Section.c"
		JsonBuilder* _tmp12_;
		JsonBuilder* _tmp13_;
		gint64 _tmp14_;
		gint64 _tmp15_;
#line 158 "../src/Objects/Section.vala"
		_tmp12_ = builder;
#line 158 "../src/Objects/Section.vala"
		json_builder_set_member_name (_tmp12_, "id");
#line 159 "../src/Objects/Section.vala"
		_tmp13_ = builder;
#line 159 "../src/Objects/Section.vala"
		_tmp14_ = objects_base_object_get_id ((ObjectsBaseObject*) self);
#line 159 "../src/Objects/Section.vala"
		_tmp15_ = _tmp14_;
#line 159 "../src/Objects/Section.vala"
		json_builder_add_int_value (_tmp13_, _tmp15_);
#line 1053 "Section.c"
	}
#line 162 "../src/Objects/Section.vala"
	_tmp16_ = builder;
#line 162 "../src/Objects/Section.vala"
	json_builder_set_member_name (_tmp16_, "name");
#line 163 "../src/Objects/Section.vala"
	_tmp17_ = builder;
#line 163 "../src/Objects/Section.vala"
	_tmp18_ = util_get_default ();
#line 163 "../src/Objects/Section.vala"
	_tmp19_ = _tmp18_;
#line 163 "../src/Objects/Section.vala"
	_tmp20_ = self->priv->_name;
#line 163 "../src/Objects/Section.vala"
	_tmp21_ = util_get_encode_text (_tmp19_, _tmp20_);
#line 163 "../src/Objects/Section.vala"
	_tmp22_ = _tmp21_;
#line 163 "../src/Objects/Section.vala"
	json_builder_add_string_value (_tmp17_, _tmp22_);
#line 163 "../src/Objects/Section.vala"
	_g_free0 (_tmp22_);
#line 163 "../src/Objects/Section.vala"
	_g_object_unref0 (_tmp19_);
#line 165 "../src/Objects/Section.vala"
	_tmp23_ = builder;
#line 165 "../src/Objects/Section.vala"
	json_builder_end_object (_tmp23_);
#line 167 "../src/Objects/Section.vala"
	_tmp24_ = builder;
#line 167 "../src/Objects/Section.vala"
	json_builder_end_object (_tmp24_);
#line 168 "../src/Objects/Section.vala"
	_tmp25_ = builder;
#line 168 "../src/Objects/Section.vala"
	json_builder_end_array (_tmp25_);
#line 170 "../src/Objects/Section.vala"
	_tmp26_ = json_generator_new ();
#line 170 "../src/Objects/Section.vala"
	generator = _tmp26_;
#line 171 "../src/Objects/Section.vala"
	_tmp27_ = builder;
#line 171 "../src/Objects/Section.vala"
	_tmp28_ = json_builder_get_root (_tmp27_);
#line 171 "../src/Objects/Section.vala"
	root = _tmp28_;
#line 172 "../src/Objects/Section.vala"
	json_generator_set_root (generator, root);
#line 174 "../src/Objects/Section.vala"
	_tmp29_ = json_generator_to_data (generator, NULL);
#line 174 "../src/Objects/Section.vala"
	result = _tmp29_;
#line 174 "../src/Objects/Section.vala"
	__vala_JsonNode_free0 (root);
#line 174 "../src/Objects/Section.vala"
	_g_object_unref0 (generator);
#line 174 "../src/Objects/Section.vala"
	_g_object_unref0 (builder);
#line 174 "../src/Objects/Section.vala"
	return result;
#line 1113 "Section.c"
}

static gchar*
objects_section_real_get_add_json (ObjectsBaseObject* base,
                                   const gchar* temp_id,
                                   const gchar* uuid)
{
	ObjectsSection * self;
	gchar* _tmp0_;
	gchar* result = NULL;
#line 177 "../src/Objects/Section.vala"
	self = (ObjectsSection*) base;
#line 177 "../src/Objects/Section.vala"
	g_return_val_if_fail (temp_id != NULL, NULL);
#line 177 "../src/Objects/Section.vala"
	g_return_val_if_fail (uuid != NULL, NULL);
#line 178 "../src/Objects/Section.vala"
	_tmp0_ = objects_base_object_get_update_json ((ObjectsBaseObject*) self, uuid, temp_id);
#line 178 "../src/Objects/Section.vala"
	result = _tmp0_;
#line 178 "../src/Objects/Section.vala"
	return result;
#line 1136 "Section.c"
}

static Block49Data*
block49_data_ref (Block49Data* _data49_)
{
#line 181 "../src/Objects/Section.vala"
	g_atomic_int_inc (&_data49_->_ref_count_);
#line 181 "../src/Objects/Section.vala"
	return _data49_;
#line 1146 "Section.c"
}

static void
block49_data_unref (void * _userdata_)
{
	Block49Data* _data49_;
	_data49_ = (Block49Data*) _userdata_;
#line 181 "../src/Objects/Section.vala"
	if (g_atomic_int_dec_and_test (&_data49_->_ref_count_)) {
#line 1156 "Section.c"
		ObjectsSection* self;
#line 181 "../src/Objects/Section.vala"
		self = _data49_->self;
#line 181 "../src/Objects/Section.vala"
		_g_object_unref0 (_data49_->remove_button);
#line 181 "../src/Objects/Section.vala"
		_g_object_unref0 (_data49_->message_dialog);
#line 181 "../src/Objects/Section.vala"
		_g_object_unref0 (self);
#line 181 "../src/Objects/Section.vala"
		g_slice_free (Block49Data, _data49_);
#line 1168 "Section.c"
	}
}

static void
____lambda29_ (ObjectsSection* self,
               GObject* obj,
               GAsyncResult* res)
{
	ServicesTodoist* _tmp0_;
	ServicesDatabase* _tmp1_;
#line 184 "../src/Objects/Section.vala"
	g_return_if_fail (res != NULL);
#line 185 "../src/Objects/Section.vala"
	_tmp0_ = planner_todoist;
#line 185 "../src/Objects/Section.vala"
	services_todoist_delete_finish (_tmp0_, res);
#line 186 "../src/Objects/Section.vala"
	_tmp1_ = planner_database;
#line 186 "../src/Objects/Section.vala"
	services_database_delete_section (_tmp1_, self);
#line 1189 "Section.c"
}

static void
_____lambda29__gasync_ready_callback (GObject* source_object,
                                      GAsyncResult* res,
                                      gpointer self)
{
#line 184 "../src/Objects/Section.vala"
	____lambda29_ ((ObjectsSection*) self, source_object, res);
#line 184 "../src/Objects/Section.vala"
	g_object_unref (self);
#line 1201 "Section.c"
}

static void
____lambda30_ (Block49Data* _data49_,
               GObject* obj,
               GAsyncResult* res)
{
	ObjectsSection* self;
	ServicesTodoist* _tmp0_;
	ServicesDatabase* _tmp1_;
	WidgetsLoadingButton* _tmp2_;
	GraniteMessageDialog* _tmp3_;
#line 216 "../src/Objects/Section.vala"
	self = _data49_->self;
#line 216 "../src/Objects/Section.vala"
	g_return_if_fail (res != NULL);
#line 217 "../src/Objects/Section.vala"
	_tmp0_ = planner_todoist;
#line 217 "../src/Objects/Section.vala"
	services_todoist_delete_finish (_tmp0_, res);
#line 218 "../src/Objects/Section.vala"
	_tmp1_ = planner_database;
#line 218 "../src/Objects/Section.vala"
	services_database_delete_section (_tmp1_, self);
#line 219 "../src/Objects/Section.vala"
	_tmp2_ = _data49_->remove_button;
#line 219 "../src/Objects/Section.vala"
	widgets_loading_button_set_is_loading (_tmp2_, FALSE);
#line 220 "../src/Objects/Section.vala"
	_tmp3_ = _data49_->message_dialog;
#line 220 "../src/Objects/Section.vala"
	gtk_widget_destroy ((GtkWidget*) _tmp3_);
#line 1234 "Section.c"
}

static void
_____lambda30__gasync_ready_callback (GObject* source_object,
                                      GAsyncResult* res,
                                      gpointer self)
{
#line 216 "../src/Objects/Section.vala"
	____lambda30_ (self, source_object, res);
#line 216 "../src/Objects/Section.vala"
	block49_data_unref (self);
#line 1246 "Section.c"
}

void
objects_section_delete (ObjectsSection* self,
                        gboolean confirm)
{
	Block49Data* _data49_;
	gint tasks = 0;
	GeeArrayList* _tmp6_;
	GeeArrayList* _tmp7_;
	gint _tmp8_;
	gint _tmp9_;
	gchar* message = NULL;
	Util* _tmp10_;
	Util* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	const gchar* _tmp27_;
	GraniteMessageDialog* _tmp28_;
	WidgetsLoadingButton* _tmp29_;
	WidgetsLoadingButton* _tmp30_;
	GtkStyleContext* _tmp31_;
	GraniteMessageDialog* _tmp32_;
	WidgetsLoadingButton* _tmp33_;
	GraniteMessageDialog* _tmp34_;
	GraniteMessageDialog* _tmp35_;
#line 181 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 181 "../src/Objects/Section.vala"
	_data49_ = g_slice_new0 (Block49Data);
#line 181 "../src/Objects/Section.vala"
	_data49_->_ref_count_ = 1;
#line 181 "../src/Objects/Section.vala"
	_data49_->self = g_object_ref (self);
#line 182 "../src/Objects/Section.vala"
	if (!confirm) {
#line 1288 "Section.c"
		ObjectsProject* _tmp0_;
		ObjectsProject* _tmp1_;
		gboolean _tmp2_;
		gboolean _tmp3_;
#line 183 "../src/Objects/Section.vala"
		_tmp0_ = objects_section_get_project (self);
#line 183 "../src/Objects/Section.vala"
		_tmp1_ = _tmp0_;
#line 183 "../src/Objects/Section.vala"
		_tmp2_ = objects_project_get_todoist (_tmp1_);
#line 183 "../src/Objects/Section.vala"
		_tmp3_ = _tmp2_;
#line 183 "../src/Objects/Section.vala"
		if (_tmp3_) {
#line 1303 "Section.c"
			ServicesTodoist* _tmp4_;
#line 184 "../src/Objects/Section.vala"
			_tmp4_ = planner_todoist;
#line 184 "../src/Objects/Section.vala"
			services_todoist_delete (_tmp4_, (ObjectsBaseObject*) self, _____lambda29__gasync_ready_callback, g_object_ref (self));
#line 1309 "Section.c"
		} else {
			ServicesDatabase* _tmp5_;
#line 189 "../src/Objects/Section.vala"
			_tmp5_ = planner_database;
#line 189 "../src/Objects/Section.vala"
			services_database_delete_section (_tmp5_, self);
#line 1316 "Section.c"
		}
#line 192 "../src/Objects/Section.vala"
		block49_data_unref (_data49_);
#line 192 "../src/Objects/Section.vala"
		_data49_ = NULL;
#line 192 "../src/Objects/Section.vala"
		return;
#line 1324 "Section.c"
	}
#line 195 "../src/Objects/Section.vala"
	_tmp6_ = objects_section_get_items (self);
#line 195 "../src/Objects/Section.vala"
	_tmp7_ = _tmp6_;
#line 195 "../src/Objects/Section.vala"
	_tmp8_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp7_);
#line 195 "../src/Objects/Section.vala"
	_tmp9_ = _tmp8_;
#line 195 "../src/Objects/Section.vala"
	tasks = _tmp9_;
#line 196 "../src/Objects/Section.vala"
	_tmp10_ = util_get_default ();
#line 196 "../src/Objects/Section.vala"
	_tmp11_ = _tmp10_;
#line 196 "../src/Objects/Section.vala"
	_tmp12_ = self->priv->_name;
#line 196 "../src/Objects/Section.vala"
	_tmp13_ = util_get_dialog_text (_tmp11_, _tmp12_);
#line 196 "../src/Objects/Section.vala"
	_tmp14_ = _tmp13_;
#line 196 "../src/Objects/Section.vala"
	_tmp15_ = g_strdup_printf ("Are you sure you want to delete %s?", _tmp14_);
#line 196 "../src/Objects/Section.vala"
	_tmp16_ = _tmp15_;
#line 196 "../src/Objects/Section.vala"
	_tmp17_ = g_strdup (_ (_tmp16_));
#line 196 "../src/Objects/Section.vala"
	_tmp18_ = _tmp17_;
#line 196 "../src/Objects/Section.vala"
	_g_free0 (_tmp16_);
#line 196 "../src/Objects/Section.vala"
	_g_free0 (_tmp14_);
#line 196 "../src/Objects/Section.vala"
	_g_object_unref0 (_tmp11_);
#line 196 "../src/Objects/Section.vala"
	message = _tmp18_;
#line 197 "../src/Objects/Section.vala"
	if (tasks > 0) {
#line 1364 "Section.c"
		Util* _tmp19_;
		Util* _tmp20_;
		const gchar* _tmp21_;
		gchar* _tmp22_;
		gchar* _tmp23_;
		gchar* _tmp24_;
		gchar* _tmp25_;
		gchar* _tmp26_;
#line 198 "../src/Objects/Section.vala"
		_tmp19_ = util_get_default ();
#line 198 "../src/Objects/Section.vala"
		_tmp20_ = _tmp19_;
#line 198 "../src/Objects/Section.vala"
		_tmp21_ = self->priv->_name;
#line 198 "../src/Objects/Section.vala"
		_tmp22_ = util_get_dialog_text (_tmp20_, _tmp21_);
#line 198 "../src/Objects/Section.vala"
		_tmp23_ = _tmp22_;
#line 198 "../src/Objects/Section.vala"
		_tmp24_ = g_strdup_printf ("Delete %s with its %d tasks?", _tmp23_, tasks);
#line 198 "../src/Objects/Section.vala"
		_tmp25_ = _tmp24_;
#line 198 "../src/Objects/Section.vala"
		_tmp26_ = g_strdup (_ (_tmp25_));
#line 198 "../src/Objects/Section.vala"
		_g_free0 (message);
#line 198 "../src/Objects/Section.vala"
		message = _tmp26_;
#line 198 "../src/Objects/Section.vala"
		_g_free0 (_tmp25_);
#line 198 "../src/Objects/Section.vala"
		_g_free0 (_tmp23_);
#line 198 "../src/Objects/Section.vala"
		_g_object_unref0 (_tmp20_);
#line 1399 "Section.c"
	}
#line 201 "../src/Objects/Section.vala"
	_tmp27_ = message;
#line 201 "../src/Objects/Section.vala"
	_tmp28_ = granite_message_dialog_new_with_image_from_icon_name (_ ("Delete section"), _tmp27_, "dialog-warning", GTK_BUTTONS_CANCEL);
#line 201 "../src/Objects/Section.vala"
	g_object_ref_sink (_tmp28_);
#line 201 "../src/Objects/Section.vala"
	_data49_->message_dialog = _tmp28_;
#line 207 "../src/Objects/Section.vala"
	_tmp29_ = widgets_loading_button_new (LOADING_BUTTON_TYPE_LABEL, _ ("Delete"));
#line 207 "../src/Objects/Section.vala"
	g_object_ref_sink (_tmp29_);
#line 207 "../src/Objects/Section.vala"
	_data49_->remove_button = _tmp29_;
#line 208 "../src/Objects/Section.vala"
	_tmp30_ = _data49_->remove_button;
#line 208 "../src/Objects/Section.vala"
	_tmp31_ = gtk_widget_get_style_context ((GtkWidget*) _tmp30_);
#line 208 "../src/Objects/Section.vala"
	gtk_style_context_add_class (_tmp31_, GTK_STYLE_CLASS_DESTRUCTIVE_ACTION);
#line 209 "../src/Objects/Section.vala"
	_tmp32_ = _data49_->message_dialog;
#line 209 "../src/Objects/Section.vala"
	_tmp33_ = _data49_->remove_button;
#line 209 "../src/Objects/Section.vala"
	gtk_dialog_add_action_widget ((GtkDialog*) _tmp32_, (GtkWidget*) _tmp33_, (gint) GTK_RESPONSE_ACCEPT);
#line 211 "../src/Objects/Section.vala"
	_tmp34_ = _data49_->message_dialog;
#line 211 "../src/Objects/Section.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp34_);
#line 213 "../src/Objects/Section.vala"
	_tmp35_ = _data49_->message_dialog;
#line 213 "../src/Objects/Section.vala"
	if (gtk_dialog_run ((GtkDialog*) _tmp35_) == ((gint) GTK_RESPONSE_ACCEPT)) {
#line 1435 "Section.c"
		ObjectsProject* _tmp36_;
		ObjectsProject* _tmp37_;
		gboolean _tmp38_;
		gboolean _tmp39_;
#line 214 "../src/Objects/Section.vala"
		_tmp36_ = objects_section_get_project (self);
#line 214 "../src/Objects/Section.vala"
		_tmp37_ = _tmp36_;
#line 214 "../src/Objects/Section.vala"
		_tmp38_ = objects_project_get_todoist (_tmp37_);
#line 214 "../src/Objects/Section.vala"
		_tmp39_ = _tmp38_;
#line 214 "../src/Objects/Section.vala"
		if (_tmp39_) {
#line 1450 "Section.c"
			WidgetsLoadingButton* _tmp40_;
			ServicesTodoist* _tmp41_;
#line 215 "../src/Objects/Section.vala"
			_tmp40_ = _data49_->remove_button;
#line 215 "../src/Objects/Section.vala"
			widgets_loading_button_set_is_loading (_tmp40_, TRUE);
#line 216 "../src/Objects/Section.vala"
			_tmp41_ = planner_todoist;
#line 216 "../src/Objects/Section.vala"
			services_todoist_delete (_tmp41_, (ObjectsBaseObject*) self, _____lambda30__gasync_ready_callback, block49_data_ref (_data49_));
#line 1461 "Section.c"
		} else {
			ServicesDatabase* _tmp42_;
			GraniteMessageDialog* _tmp43_;
#line 223 "../src/Objects/Section.vala"
			_tmp42_ = planner_database;
#line 223 "../src/Objects/Section.vala"
			services_database_delete_section (_tmp42_, self);
#line 224 "../src/Objects/Section.vala"
			_tmp43_ = _data49_->message_dialog;
#line 224 "../src/Objects/Section.vala"
			gtk_widget_destroy ((GtkWidget*) _tmp43_);
#line 1473 "Section.c"
		}
	} else {
		GraniteMessageDialog* _tmp44_;
#line 227 "../src/Objects/Section.vala"
		_tmp44_ = _data49_->message_dialog;
#line 227 "../src/Objects/Section.vala"
		gtk_widget_destroy ((GtkWidget*) _tmp44_);
#line 1481 "Section.c"
	}
#line 181 "../src/Objects/Section.vala"
	_g_free0 (message);
#line 181 "../src/Objects/Section.vala"
	block49_data_unref (_data49_);
#line 181 "../src/Objects/Section.vala"
	_data49_ = NULL;
#line 1489 "Section.c"
}

ObjectsSection*
objects_section_construct (GType object_type)
{
	ObjectsSection * self = NULL;
#line 22 "../src/Objects/Section.vala"
	self = (ObjectsSection*) objects_base_object_construct (object_type);
#line 22 "../src/Objects/Section.vala"
	return self;
#line 1500 "Section.c"
}

ObjectsSection*
objects_section_new (void)
{
#line 22 "../src/Objects/Section.vala"
	return objects_section_construct (OBJECTS_TYPE_SECTION);
#line 1508 "Section.c"
}

gint64
objects_section_get_project_id (ObjectsSection* self)
{
	gint64 result;
#line 23 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, 0LL);
#line 23 "../src/Objects/Section.vala"
	result = self->priv->_project_id;
#line 23 "../src/Objects/Section.vala"
	return result;
#line 1521 "Section.c"
}

void
objects_section_set_project_id (ObjectsSection* self,
                                gint64 value)
{
	gint64 old_value;
#line 23 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/Objects/Section.vala"
	old_value = objects_section_get_project_id (self);
#line 23 "../src/Objects/Section.vala"
	if (old_value != value) {
#line 23 "../src/Objects/Section.vala"
		self->priv->_project_id = value;
#line 23 "../src/Objects/Section.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_section_properties[OBJECTS_SECTION_PROJECT_ID_PROPERTY]);
#line 1539 "Section.c"
	}
}

const gchar*
objects_section_get_name (ObjectsSection* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 24 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 24 "../src/Objects/Section.vala"
	_tmp0_ = self->priv->_name;
#line 24 "../src/Objects/Section.vala"
	result = _tmp0_;
#line 24 "../src/Objects/Section.vala"
	return result;
#line 1556 "Section.c"
}

void
objects_section_set_name (ObjectsSection* self,
                          const gchar* value)
{
	gchar* old_value;
#line 24 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 24 "../src/Objects/Section.vala"
	old_value = objects_section_get_name (self);
#line 24 "../src/Objects/Section.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 1570 "Section.c"
		gchar* _tmp0_;
#line 24 "../src/Objects/Section.vala"
		_tmp0_ = g_strdup (value);
#line 24 "../src/Objects/Section.vala"
		_g_free0 (self->priv->_name);
#line 24 "../src/Objects/Section.vala"
		self->priv->_name = _tmp0_;
#line 24 "../src/Objects/Section.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_section_properties[OBJECTS_SECTION_NAME_PROPERTY]);
#line 1580 "Section.c"
	}
}

const gchar*
objects_section_get_archived_at (ObjectsSection* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 25 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 25 "../src/Objects/Section.vala"
	_tmp0_ = self->priv->_archived_at;
#line 25 "../src/Objects/Section.vala"
	result = _tmp0_;
#line 25 "../src/Objects/Section.vala"
	return result;
#line 1597 "Section.c"
}

void
objects_section_set_archived_at (ObjectsSection* self,
                                 const gchar* value)
{
	gchar* old_value;
#line 25 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 25 "../src/Objects/Section.vala"
	old_value = objects_section_get_archived_at (self);
#line 25 "../src/Objects/Section.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 1611 "Section.c"
		gchar* _tmp0_;
#line 25 "../src/Objects/Section.vala"
		_tmp0_ = g_strdup (value);
#line 25 "../src/Objects/Section.vala"
		_g_free0 (self->priv->_archived_at);
#line 25 "../src/Objects/Section.vala"
		self->priv->_archived_at = _tmp0_;
#line 25 "../src/Objects/Section.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_section_properties[OBJECTS_SECTION_ARCHIVED_AT_PROPERTY]);
#line 1621 "Section.c"
	}
}

const gchar*
objects_section_get_added_at (ObjectsSection* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 26 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 26 "../src/Objects/Section.vala"
	_tmp0_ = self->priv->_added_at;
#line 26 "../src/Objects/Section.vala"
	result = _tmp0_;
#line 26 "../src/Objects/Section.vala"
	return result;
#line 1638 "Section.c"
}

void
objects_section_set_added_at (ObjectsSection* self,
                              const gchar* value)
{
	gchar* old_value;
#line 26 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 26 "../src/Objects/Section.vala"
	old_value = objects_section_get_added_at (self);
#line 26 "../src/Objects/Section.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 1652 "Section.c"
		gchar* _tmp0_;
#line 26 "../src/Objects/Section.vala"
		_tmp0_ = g_strdup (value);
#line 26 "../src/Objects/Section.vala"
		_g_free0 (self->priv->_added_at);
#line 26 "../src/Objects/Section.vala"
		self->priv->_added_at = _tmp0_;
#line 26 "../src/Objects/Section.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_section_properties[OBJECTS_SECTION_ADDED_AT_PROPERTY]);
#line 1662 "Section.c"
	}
}

gint
objects_section_get_section_order (ObjectsSection* self)
{
	gint result;
#line 27 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 27 "../src/Objects/Section.vala"
	result = self->priv->_section_order;
#line 27 "../src/Objects/Section.vala"
	return result;
#line 1676 "Section.c"
}

void
objects_section_set_section_order (ObjectsSection* self,
                                   gint value)
{
	gint old_value;
#line 27 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 27 "../src/Objects/Section.vala"
	old_value = objects_section_get_section_order (self);
#line 27 "../src/Objects/Section.vala"
	if (old_value != value) {
#line 27 "../src/Objects/Section.vala"
		self->priv->_section_order = value;
#line 27 "../src/Objects/Section.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_section_properties[OBJECTS_SECTION_SECTION_ORDER_PROPERTY]);
#line 1694 "Section.c"
	}
}

gboolean
objects_section_get_collapsed (ObjectsSection* self)
{
	gboolean result;
#line 28 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 28 "../src/Objects/Section.vala"
	result = self->priv->_collapsed;
#line 28 "../src/Objects/Section.vala"
	return result;
#line 1708 "Section.c"
}

void
objects_section_set_collapsed (ObjectsSection* self,
                               gboolean value)
{
	gboolean old_value;
#line 28 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 28 "../src/Objects/Section.vala"
	old_value = objects_section_get_collapsed (self);
#line 28 "../src/Objects/Section.vala"
	if (old_value != value) {
#line 28 "../src/Objects/Section.vala"
		self->priv->_collapsed = value;
#line 28 "../src/Objects/Section.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_section_properties[OBJECTS_SECTION_COLLAPSED_PROPERTY]);
#line 1726 "Section.c"
	}
}

gboolean
objects_section_get_is_deleted (ObjectsSection* self)
{
	gboolean result;
#line 29 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 29 "../src/Objects/Section.vala"
	result = self->priv->_is_deleted;
#line 29 "../src/Objects/Section.vala"
	return result;
#line 1740 "Section.c"
}

void
objects_section_set_is_deleted (ObjectsSection* self,
                                gboolean value)
{
	gboolean old_value;
#line 29 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 29 "../src/Objects/Section.vala"
	old_value = objects_section_get_is_deleted (self);
#line 29 "../src/Objects/Section.vala"
	if (old_value != value) {
#line 29 "../src/Objects/Section.vala"
		self->priv->_is_deleted = value;
#line 29 "../src/Objects/Section.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_section_properties[OBJECTS_SECTION_IS_DELETED_PROPERTY]);
#line 1758 "Section.c"
	}
}

gboolean
objects_section_get_is_archived (ObjectsSection* self)
{
	gboolean result;
#line 30 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 30 "../src/Objects/Section.vala"
	result = self->priv->_is_archived;
#line 30 "../src/Objects/Section.vala"
	return result;
#line 1772 "Section.c"
}

void
objects_section_set_is_archived (ObjectsSection* self,
                                 gboolean value)
{
	gboolean old_value;
#line 30 "../src/Objects/Section.vala"
	g_return_if_fail (self != NULL);
#line 30 "../src/Objects/Section.vala"
	old_value = objects_section_get_is_archived (self);
#line 30 "../src/Objects/Section.vala"
	if (old_value != value) {
#line 30 "../src/Objects/Section.vala"
		self->priv->_is_archived = value;
#line 30 "../src/Objects/Section.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_section_properties[OBJECTS_SECTION_IS_ARCHIVED_PROPERTY]);
#line 1790 "Section.c"
	}
}

const gchar*
objects_section_get_short_name (ObjectsSection* self)
{
	const gchar* result;
	Util* _tmp0_;
	Util* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	const gchar* _tmp4_;
#line 34 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 35 "../src/Objects/Section.vala"
	_tmp0_ = util_get_default ();
#line 35 "../src/Objects/Section.vala"
	_tmp1_ = _tmp0_;
#line 35 "../src/Objects/Section.vala"
	_tmp2_ = self->priv->_name;
#line 35 "../src/Objects/Section.vala"
	_tmp3_ = util_get_short_name (_tmp1_, _tmp2_, CONSTANTS_SHORT_NAME_SIZE);
#line 35 "../src/Objects/Section.vala"
	_g_free0 (self->priv->_short_name);
#line 35 "../src/Objects/Section.vala"
	self->priv->_short_name = _tmp3_;
#line 35 "../src/Objects/Section.vala"
	_g_object_unref0 (_tmp1_);
#line 36 "../src/Objects/Section.vala"
	_tmp4_ = self->priv->_short_name;
#line 36 "../src/Objects/Section.vala"
	result = _tmp4_;
#line 36 "../src/Objects/Section.vala"
	return result;
#line 1825 "Section.c"
}

ObjectsProject*
objects_section_get_project (ObjectsSection* self)
{
	ObjectsProject* result;
	ServicesDatabase* _tmp0_;
	gint64 _tmp1_;
	ObjectsProject* _tmp2_;
	ObjectsProject* _tmp3_;
#line 42 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 43 "../src/Objects/Section.vala"
	_tmp0_ = planner_database;
#line 43 "../src/Objects/Section.vala"
	_tmp1_ = self->priv->_project_id;
#line 43 "../src/Objects/Section.vala"
	_tmp2_ = services_database_get_project (_tmp0_, _tmp1_);
#line 43 "../src/Objects/Section.vala"
	_g_object_unref0 (self->priv->_project);
#line 43 "../src/Objects/Section.vala"
	self->priv->_project = _tmp2_;
#line 44 "../src/Objects/Section.vala"
	_tmp3_ = self->priv->_project;
#line 44 "../src/Objects/Section.vala"
	result = _tmp3_;
#line 44 "../src/Objects/Section.vala"
	return result;
#line 1854 "Section.c"
}

GeeArrayList*
objects_section_get_items (ObjectsSection* self)
{
	GeeArrayList* result;
	ServicesDatabase* _tmp0_;
	GeeArrayList* _tmp1_;
	GeeArrayList* _tmp2_;
#line 50 "../src/Objects/Section.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 51 "../src/Objects/Section.vala"
	_tmp0_ = planner_database;
#line 51 "../src/Objects/Section.vala"
	_tmp1_ = services_database_get_item_by_baseobject (_tmp0_, (ObjectsBaseObject*) self);
#line 51 "../src/Objects/Section.vala"
	_g_object_unref0 (self->priv->_items);
#line 51 "../src/Objects/Section.vala"
	self->priv->_items = _tmp1_;
#line 52 "../src/Objects/Section.vala"
	_tmp2_ = self->priv->_items;
#line 52 "../src/Objects/Section.vala"
	result = _tmp2_;
#line 52 "../src/Objects/Section.vala"
	return result;
#line 1880 "Section.c"
}

static void
_objects_section___lambda31_ (ObjectsSection* self)
{
	ServicesDatabase* _tmp0_;
#line 60 "../src/Objects/Section.vala"
	_tmp0_ = planner_database;
#line 60 "../src/Objects/Section.vala"
	g_signal_emit_by_name (_tmp0_, "section-deleted", self);
#line 1891 "Section.c"
}

static void
__objects_section___lambda31__objects_base_object_deleted (ObjectsBaseObject* _sender,
                                                           gpointer self)
{
#line 59 "../src/Objects/Section.vala"
	_objects_section___lambda31_ ((ObjectsSection*) self);
#line 1900 "Section.c"
}

static GObject *
objects_section_constructor (GType type,
                             guint n_construct_properties,
                             GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ObjectsSection * self;
#line 58 "../src/Objects/Section.vala"
	parent_class = G_OBJECT_CLASS (objects_section_parent_class);
#line 58 "../src/Objects/Section.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 58 "../src/Objects/Section.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_SECTION, ObjectsSection);
#line 59 "../src/Objects/Section.vala"
	g_signal_connect_object ((ObjectsBaseObject*) self, "deleted", (GCallback) __objects_section___lambda31__objects_base_object_deleted, self, 0);
#line 58 "../src/Objects/Section.vala"
	return obj;
#line 1921 "Section.c"
}

static void
objects_section_class_init (ObjectsSectionClass * klass,
                            gpointer klass_data)
{
#line 22 "../src/Objects/Section.vala"
	objects_section_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Objects/Section.vala"
	g_type_class_adjust_private_offset (klass, &ObjectsSection_private_offset);
#line 22 "../src/Objects/Section.vala"
	((ObjectsBaseObjectClass *) klass)->get_update_json = (gchar* (*) (ObjectsBaseObject*, const gchar*, const gchar*)) objects_section_real_get_update_json;
#line 22 "../src/Objects/Section.vala"
	((ObjectsBaseObjectClass *) klass)->get_add_json = (gchar* (*) (ObjectsBaseObject*, const gchar*, const gchar*)) objects_section_real_get_add_json;
#line 22 "../src/Objects/Section.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_objects_section_get_property;
#line 22 "../src/Objects/Section.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_objects_section_set_property;
#line 22 "../src/Objects/Section.vala"
	G_OBJECT_CLASS (klass)->constructor = objects_section_constructor;
#line 22 "../src/Objects/Section.vala"
	G_OBJECT_CLASS (klass)->finalize = objects_section_finalize;
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_PROJECT_ID_PROPERTY, objects_section_properties[OBJECTS_SECTION_PROJECT_ID_PROPERTY] = g_param_spec_int64 ("project-id", "project-id", "project-id", G_MININT64, G_MAXINT64, (gint64) 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_NAME_PROPERTY, objects_section_properties[OBJECTS_SECTION_NAME_PROPERTY] = g_param_spec_string ("name", "name", "name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_ARCHIVED_AT_PROPERTY, objects_section_properties[OBJECTS_SECTION_ARCHIVED_AT_PROPERTY] = g_param_spec_string ("archived-at", "archived-at", "archived-at", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_ADDED_AT_PROPERTY, objects_section_properties[OBJECTS_SECTION_ADDED_AT_PROPERTY] = g_param_spec_string ("added-at", "added-at", "added-at", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_SECTION_ORDER_PROPERTY, objects_section_properties[OBJECTS_SECTION_SECTION_ORDER_PROPERTY] = g_param_spec_int ("section-order", "section-order", "section-order", G_MININT, G_MAXINT, -1, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_COLLAPSED_PROPERTY, objects_section_properties[OBJECTS_SECTION_COLLAPSED_PROPERTY] = g_param_spec_boolean ("collapsed", "collapsed", "collapsed", TRUE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_IS_DELETED_PROPERTY, objects_section_properties[OBJECTS_SECTION_IS_DELETED_PROPERTY] = g_param_spec_boolean ("is-deleted", "is-deleted", "is-deleted", TRUE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_IS_ARCHIVED_PROPERTY, objects_section_properties[OBJECTS_SECTION_IS_ARCHIVED_PROPERTY] = g_param_spec_boolean ("is-archived", "is-archived", "is-archived", TRUE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_SHORT_NAME_PROPERTY, objects_section_properties[OBJECTS_SECTION_SHORT_NAME_PROPERTY] = g_param_spec_string ("short-name", "short-name", "short-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_PROJECT_PROPERTY, objects_section_properties[OBJECTS_SECTION_PROJECT_PROPERTY] = g_param_spec_object ("project", "project", "project", OBJECTS_TYPE_PROJECT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "../src/Objects/Section.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_SECTION_ITEMS_PROPERTY, objects_section_properties[OBJECTS_SECTION_ITEMS_PROPERTY] = g_param_spec_object ("items", "items", "items", GEE_TYPE_ARRAY_LIST, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "../src/Objects/Section.vala"
	objects_section_signals[OBJECTS_SECTION_ITEM_ADDED_SIGNAL] = g_signal_new ("item-added", OBJECTS_TYPE_SECTION, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, OBJECTS_TYPE_ITEM);
#line 1968 "Section.c"
}

static void
objects_section_instance_init (ObjectsSection * self,
                               gpointer klass)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
#line 22 "../src/Objects/Section.vala"
	self->priv = objects_section_get_instance_private (self);
#line 23 "../src/Objects/Section.vala"
	self->priv->_project_id = (gint64) 0;
#line 24 "../src/Objects/Section.vala"
	_tmp0_ = g_strdup ("");
#line 24 "../src/Objects/Section.vala"
	self->priv->_name = _tmp0_;
#line 25 "../src/Objects/Section.vala"
	_tmp1_ = g_strdup ("");
#line 25 "../src/Objects/Section.vala"
	self->priv->_archived_at = _tmp1_;
#line 26 "../src/Objects/Section.vala"
	_tmp2_ = g_strdup ("");
#line 26 "../src/Objects/Section.vala"
	self->priv->_added_at = _tmp2_;
#line 27 "../src/Objects/Section.vala"
	self->priv->_section_order = -1;
#line 28 "../src/Objects/Section.vala"
	self->priv->_collapsed = TRUE;
#line 29 "../src/Objects/Section.vala"
	self->priv->_is_deleted = TRUE;
#line 30 "../src/Objects/Section.vala"
	self->priv->_is_archived = TRUE;
#line 48 "../src/Objects/Section.vala"
	g_rec_mutex_init (&self->priv->__lock__items);
#line 2004 "Section.c"
}

static void
objects_section_finalize (GObject * obj)
{
	ObjectsSection * self;
#line 22 "../src/Objects/Section.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_SECTION, ObjectsSection);
#line 24 "../src/Objects/Section.vala"
	_g_free0 (self->priv->_name);
#line 25 "../src/Objects/Section.vala"
	_g_free0 (self->priv->_archived_at);
#line 26 "../src/Objects/Section.vala"
	_g_free0 (self->priv->_added_at);
#line 32 "../src/Objects/Section.vala"
	_g_free0 (self->priv->_short_name);
#line 40 "../src/Objects/Section.vala"
	_g_object_unref0 (self->priv->_project);
#line 48 "../src/Objects/Section.vala"
	g_rec_mutex_clear (&self->priv->__lock__items);
#line 48 "../src/Objects/Section.vala"
	_g_object_unref0 (self->priv->_items);
#line 22 "../src/Objects/Section.vala"
	G_OBJECT_CLASS (objects_section_parent_class)->finalize (obj);
#line 2029 "Section.c"
}

static GType
objects_section_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ObjectsSectionClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_section_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsSection), 0, (GInstanceInitFunc) objects_section_instance_init, NULL };
	GType objects_section_type_id;
	objects_section_type_id = g_type_register_static (OBJECTS_TYPE_BASE_OBJECT, "ObjectsSection", &g_define_type_info, 0);
	ObjectsSection_private_offset = g_type_add_instance_private (objects_section_type_id, sizeof (ObjectsSectionPrivate));
	return objects_section_type_id;
}

GType
objects_section_get_type (void)
{
	static volatile gsize objects_section_type_id__volatile = 0;
	if (g_once_init_enter (&objects_section_type_id__volatile)) {
		GType objects_section_type_id;
		objects_section_type_id = objects_section_get_type_once ();
		g_once_init_leave (&objects_section_type_id__volatile, objects_section_type_id);
	}
	return objects_section_type_id__volatile;
}

static void
_vala_objects_section_get_property (GObject * object,
                                    guint property_id,
                                    GValue * value,
                                    GParamSpec * pspec)
{
	ObjectsSection * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_SECTION, ObjectsSection);
#line 22 "../src/Objects/Section.vala"
	switch (property_id) {
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_PROJECT_ID_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_int64 (value, objects_section_get_project_id (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_NAME_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_string (value, objects_section_get_name (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_ARCHIVED_AT_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_string (value, objects_section_get_archived_at (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_ADDED_AT_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_string (value, objects_section_get_added_at (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_SECTION_ORDER_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_int (value, objects_section_get_section_order (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_COLLAPSED_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_boolean (value, objects_section_get_collapsed (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_IS_DELETED_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_boolean (value, objects_section_get_is_deleted (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_IS_ARCHIVED_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_boolean (value, objects_section_get_is_archived (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_SHORT_NAME_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_string (value, objects_section_get_short_name (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_PROJECT_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_object (value, objects_section_get_project (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_ITEMS_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		g_value_set_object (value, objects_section_get_items (self));
#line 22 "../src/Objects/Section.vala"
		break;
#line 2130 "Section.c"
		default:
#line 22 "../src/Objects/Section.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Objects/Section.vala"
		break;
#line 2136 "Section.c"
	}
}

static void
_vala_objects_section_set_property (GObject * object,
                                    guint property_id,
                                    const GValue * value,
                                    GParamSpec * pspec)
{
	ObjectsSection * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_SECTION, ObjectsSection);
#line 22 "../src/Objects/Section.vala"
	switch (property_id) {
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_PROJECT_ID_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		objects_section_set_project_id (self, g_value_get_int64 (value));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_NAME_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		objects_section_set_name (self, g_value_get_string (value));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_ARCHIVED_AT_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		objects_section_set_archived_at (self, g_value_get_string (value));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_ADDED_AT_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		objects_section_set_added_at (self, g_value_get_string (value));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_SECTION_ORDER_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		objects_section_set_section_order (self, g_value_get_int (value));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_COLLAPSED_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		objects_section_set_collapsed (self, g_value_get_boolean (value));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_IS_DELETED_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		objects_section_set_is_deleted (self, g_value_get_boolean (value));
#line 22 "../src/Objects/Section.vala"
		break;
#line 22 "../src/Objects/Section.vala"
		case OBJECTS_SECTION_IS_ARCHIVED_PROPERTY:
#line 22 "../src/Objects/Section.vala"
		objects_section_set_is_archived (self, g_value_get_boolean (value));
#line 22 "../src/Objects/Section.vala"
		break;
#line 2198 "Section.c"
		default:
#line 22 "../src/Objects/Section.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Objects/Section.vala"
		break;
#line 2204 "Section.c"
	}
}

