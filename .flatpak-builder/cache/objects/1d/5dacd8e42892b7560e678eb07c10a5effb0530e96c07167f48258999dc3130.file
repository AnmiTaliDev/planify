/* ScheduleButton.c generated by valac 0.50.10, the Vala compiler
 * generated from ScheduleButton.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <glib/gi18n-lib.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>
#include <handy.h>

#define WIDGETS_TYPE_SCHEDULE_BUTTON (widgets_schedule_button_get_type ())
#define WIDGETS_SCHEDULE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_SCHEDULE_BUTTON, WidgetsScheduleButton))
#define WIDGETS_SCHEDULE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_SCHEDULE_BUTTON, WidgetsScheduleButtonClass))
#define WIDGETS_IS_SCHEDULE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_SCHEDULE_BUTTON))
#define WIDGETS_IS_SCHEDULE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_SCHEDULE_BUTTON))
#define WIDGETS_SCHEDULE_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_SCHEDULE_BUTTON, WidgetsScheduleButtonClass))

typedef struct _WidgetsScheduleButton WidgetsScheduleButton;
typedef struct _WidgetsScheduleButtonClass WidgetsScheduleButtonClass;
typedef struct _WidgetsScheduleButtonPrivate WidgetsScheduleButtonPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;
enum  {
	WIDGETS_SCHEDULE_BUTTON_0_PROPERTY,
	WIDGETS_SCHEDULE_BUTTON_ITEM_PROPERTY,
	WIDGETS_SCHEDULE_BUTTON_NUM_PROPERTIES
};
static GParamSpec* widgets_schedule_button_properties[WIDGETS_SCHEDULE_BUTTON_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;

#define OBJECTS_TYPE_DUE_DATE (objects_due_date_get_type ())
#define OBJECTS_DUE_DATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_DUE_DATE, ObjectsDueDate))
#define OBJECTS_DUE_DATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_DUE_DATE, ObjectsDueDateClass))
#define OBJECTS_IS_DUE_DATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_DUE_DATE))
#define OBJECTS_IS_DUE_DATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_DUE_DATE))
#define OBJECTS_DUE_DATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_DUE_DATE, ObjectsDueDateClass))

typedef struct _ObjectsDueDate ObjectsDueDate;
typedef struct _ObjectsDueDateClass ObjectsDueDateClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define DIALOGS_DATE_TIME_PICKER_TYPE_DATE_TIME_PICKER (dialogs_date_time_picker_date_time_picker_get_type ())
#define DIALOGS_DATE_TIME_PICKER_DATE_TIME_PICKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_DATE_TIME_PICKER_TYPE_DATE_TIME_PICKER, DialogsDateTimePickerDateTimePicker))
#define DIALOGS_DATE_TIME_PICKER_DATE_TIME_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_DATE_TIME_PICKER_TYPE_DATE_TIME_PICKER, DialogsDateTimePickerDateTimePickerClass))
#define DIALOGS_DATE_TIME_PICKER_IS_DATE_TIME_PICKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_DATE_TIME_PICKER_TYPE_DATE_TIME_PICKER))
#define DIALOGS_DATE_TIME_PICKER_IS_DATE_TIME_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_DATE_TIME_PICKER_TYPE_DATE_TIME_PICKER))
#define DIALOGS_DATE_TIME_PICKER_DATE_TIME_PICKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_DATE_TIME_PICKER_TYPE_DATE_TIME_PICKER, DialogsDateTimePickerDateTimePickerClass))

typedef struct _DialogsDateTimePickerDateTimePicker DialogsDateTimePickerDateTimePicker;
typedef struct _DialogsDateTimePickerDateTimePickerClass DialogsDateTimePickerDateTimePickerClass;
typedef struct _Block24Data Block24Data;
enum  {
	WIDGETS_SCHEDULE_BUTTON_DATE_CHANGED_SIGNAL,
	WIDGETS_SCHEDULE_BUTTON_DIALOG_OPEN_SIGNAL,
	WIDGETS_SCHEDULE_BUTTON_NUM_SIGNALS
};
static guint widgets_schedule_button_signals[WIDGETS_SCHEDULE_BUTTON_NUM_SIGNALS] = {0};

struct _WidgetsScheduleButton {
	GtkButton parent_instance;
	WidgetsScheduleButtonPrivate * priv;
};

struct _WidgetsScheduleButtonClass {
	GtkButtonClass parent_class;
};

struct _WidgetsScheduleButtonPrivate {
	ObjectsItem* _item;
	GtkLabel* due_label;
	GtkGrid* schedule_grid;
	WidgetsDynamicIcon* due_image;
};

struct _Block24Data {
	int _ref_count_;
	WidgetsScheduleButton* self;
	DialogsDateTimePickerDateTimePicker* datetime_picker;
};

static gint WidgetsScheduleButton_private_offset;
static gpointer widgets_schedule_button_parent_class = NULL;

GType widgets_schedule_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsScheduleButton, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
WidgetsScheduleButton* widgets_schedule_button_new (ObjectsItem* item);
WidgetsScheduleButton* widgets_schedule_button_construct (GType object_type,
                                                          ObjectsItem* item);
void widgets_schedule_button_update_request (WidgetsScheduleButton* self);
void widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                            const gchar* icon_name);
ObjectsItem* widgets_schedule_button_get_item (WidgetsScheduleButton* self);
gboolean objects_item_get_has_due (ObjectsItem* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gchar* util_get_relative_date_from_date (Util* self,
                                         GDateTime* datetime);
GType objects_due_date_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsDueDate, g_object_unref)
ObjectsDueDate* objects_item_get_due (ObjectsItem* self);
GDateTime* objects_due_date_get_datetime (ObjectsDueDate* self);
gboolean util_is_today (Util* self,
                        GDateTime* date);
gboolean util_is_overdue (Util* self,
                          GDateTime* date);
static void widgets_schedule_button_set_item (WidgetsScheduleButton* self,
                                       ObjectsItem* value);
static GObject * widgets_schedule_button_constructor (GType type,
                                               guint n_construct_properties,
                                               GObjectConstructParam * construct_properties);
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
static void _widgets_schedule_button___lambda74_ (WidgetsScheduleButton* self);
GType dialogs_date_time_picker_date_time_picker_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsDateTimePickerDateTimePicker, g_object_unref)
static Block24Data* block24_data_ref (Block24Data* _data24_);
static void block24_data_unref (void * _userdata_);
DialogsDateTimePickerDateTimePicker* dialogs_date_time_picker_date_time_picker_new (void);
DialogsDateTimePickerDateTimePicker* dialogs_date_time_picker_date_time_picker_construct (GType object_type);
void dialogs_date_time_picker_date_time_picker_popup (DialogsDateTimePickerDateTimePicker* self);
void dialogs_date_time_picker_date_time_picker_set_datetime (DialogsDateTimePickerDateTimePicker* self,
                                                             GDateTime* value);
static void __lambda102_ (Block24Data* _data24_);
GDateTime* dialogs_date_time_picker_date_time_picker_get_datetime (DialogsDateTimePickerDateTimePicker* self);
static void ___lambda102__dialogs_date_time_picker_date_time_picker_date_changed (DialogsDateTimePickerDateTimePicker* _sender,
                                                                           gpointer self);
static void __lambda103_ (WidgetsScheduleButton* self);
static void ___lambda103__gtk_widget_destroy (GtkWidget* _sender,
                                       gpointer self);
static void __widgets_schedule_button___lambda74__gtk_button_clicked (GtkButton* _sender,
                                                               gpointer self);
static void widgets_schedule_button_finalize (GObject * obj);
static GType widgets_schedule_button_get_type_once (void);
static void _vala_widgets_schedule_button_get_property (GObject * object,
                                                 guint property_id,
                                                 GValue * value,
                                                 GParamSpec * pspec);
static void _vala_widgets_schedule_button_set_property (GObject * object,
                                                 guint property_id,
                                                 const GValue * value,
                                                 GParamSpec * pspec);

static inline gpointer
widgets_schedule_button_get_instance_private (WidgetsScheduleButton* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsScheduleButton_private_offset);
}

WidgetsScheduleButton*
widgets_schedule_button_construct (GType object_type,
                                   ObjectsItem* item)
{
	WidgetsScheduleButton * self = NULL;
#line 11 "../src/Widgets/ScheduleButton.vala"
	g_return_val_if_fail (item != NULL, NULL);
#line 12 "../src/Widgets/ScheduleButton.vala"
	self = (WidgetsScheduleButton*) g_object_new (object_type, "item", item, "can-focus", FALSE, "valign", GTK_ALIGN_CENTER, "halign", GTK_ALIGN_CENTER, NULL);
#line 11 "../src/Widgets/ScheduleButton.vala"
	return self;
#line 211 "ScheduleButton.c"
}

WidgetsScheduleButton*
widgets_schedule_button_new (ObjectsItem* item)
{
#line 11 "../src/Widgets/ScheduleButton.vala"
	return widgets_schedule_button_construct (WIDGETS_TYPE_SCHEDULE_BUTTON, item);
#line 219 "ScheduleButton.c"
}

void
widgets_schedule_button_update_request (WidgetsScheduleButton* self)
{
	GtkGrid* _tmp0_;
	GtkStyleContext* _tmp1_;
	GtkGrid* _tmp2_;
	GtkStyleContext* _tmp3_;
	GtkLabel* _tmp4_;
	WidgetsDynamicIcon* _tmp5_;
	ObjectsItem* _tmp6_;
	gboolean _tmp7_;
	gboolean _tmp8_;
#line 59 "../src/Widgets/ScheduleButton.vala"
	g_return_if_fail (self != NULL);
#line 60 "../src/Widgets/ScheduleButton.vala"
	_tmp0_ = self->priv->schedule_grid;
#line 60 "../src/Widgets/ScheduleButton.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) _tmp0_);
#line 60 "../src/Widgets/ScheduleButton.vala"
	gtk_style_context_remove_class (_tmp1_, "today-label");
#line 61 "../src/Widgets/ScheduleButton.vala"
	_tmp2_ = self->priv->schedule_grid;
#line 61 "../src/Widgets/ScheduleButton.vala"
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
#line 61 "../src/Widgets/ScheduleButton.vala"
	gtk_style_context_remove_class (_tmp3_, "overdue-label");
#line 62 "../src/Widgets/ScheduleButton.vala"
	_tmp4_ = self->priv->due_label;
#line 62 "../src/Widgets/ScheduleButton.vala"
	gtk_label_set_label (_tmp4_, _ ("Schedule"));
#line 63 "../src/Widgets/ScheduleButton.vala"
	_tmp5_ = self->priv->due_image;
#line 63 "../src/Widgets/ScheduleButton.vala"
	widgets_dynamic_icon_update_icon_name (_tmp5_, "planner-calendar");
#line 65 "../src/Widgets/ScheduleButton.vala"
	_tmp6_ = self->priv->_item;
#line 65 "../src/Widgets/ScheduleButton.vala"
	_tmp7_ = objects_item_get_has_due (_tmp6_);
#line 65 "../src/Widgets/ScheduleButton.vala"
	_tmp8_ = _tmp7_;
#line 65 "../src/Widgets/ScheduleButton.vala"
	if (_tmp8_) {
#line 264 "ScheduleButton.c"
		GtkLabel* _tmp9_;
		Util* _tmp10_;
		Util* _tmp11_;
		ObjectsItem* _tmp12_;
		ObjectsDueDate* _tmp13_;
		ObjectsDueDate* _tmp14_;
		GDateTime* _tmp15_;
		GDateTime* _tmp16_;
		gchar* _tmp17_;
		gchar* _tmp18_;
		Util* _tmp19_;
		Util* _tmp20_;
		ObjectsItem* _tmp21_;
		ObjectsDueDate* _tmp22_;
		ObjectsDueDate* _tmp23_;
		GDateTime* _tmp24_;
		GDateTime* _tmp25_;
		gboolean _tmp26_;
#line 66 "../src/Widgets/ScheduleButton.vala"
		_tmp9_ = self->priv->due_label;
#line 66 "../src/Widgets/ScheduleButton.vala"
		_tmp10_ = util_get_default ();
#line 66 "../src/Widgets/ScheduleButton.vala"
		_tmp11_ = _tmp10_;
#line 66 "../src/Widgets/ScheduleButton.vala"
		_tmp12_ = self->priv->_item;
#line 66 "../src/Widgets/ScheduleButton.vala"
		_tmp13_ = objects_item_get_due (_tmp12_);
#line 66 "../src/Widgets/ScheduleButton.vala"
		_tmp14_ = _tmp13_;
#line 66 "../src/Widgets/ScheduleButton.vala"
		_tmp15_ = objects_due_date_get_datetime (_tmp14_);
#line 66 "../src/Widgets/ScheduleButton.vala"
		_tmp16_ = _tmp15_;
#line 66 "../src/Widgets/ScheduleButton.vala"
		_tmp17_ = util_get_relative_date_from_date (_tmp11_, _tmp16_);
#line 66 "../src/Widgets/ScheduleButton.vala"
		_tmp18_ = _tmp17_;
#line 66 "../src/Widgets/ScheduleButton.vala"
		gtk_label_set_label (_tmp9_, _tmp18_);
#line 66 "../src/Widgets/ScheduleButton.vala"
		_g_free0 (_tmp18_);
#line 66 "../src/Widgets/ScheduleButton.vala"
		_g_object_unref0 (_tmp11_);
#line 68 "../src/Widgets/ScheduleButton.vala"
		_tmp19_ = util_get_default ();
#line 68 "../src/Widgets/ScheduleButton.vala"
		_tmp20_ = _tmp19_;
#line 68 "../src/Widgets/ScheduleButton.vala"
		_tmp21_ = self->priv->_item;
#line 68 "../src/Widgets/ScheduleButton.vala"
		_tmp22_ = objects_item_get_due (_tmp21_);
#line 68 "../src/Widgets/ScheduleButton.vala"
		_tmp23_ = _tmp22_;
#line 68 "../src/Widgets/ScheduleButton.vala"
		_tmp24_ = objects_due_date_get_datetime (_tmp23_);
#line 68 "../src/Widgets/ScheduleButton.vala"
		_tmp25_ = _tmp24_;
#line 68 "../src/Widgets/ScheduleButton.vala"
		_tmp26_ = util_is_today (_tmp20_, _tmp25_);
#line 68 "../src/Widgets/ScheduleButton.vala"
		_g_object_unref0 (_tmp20_);
#line 68 "../src/Widgets/ScheduleButton.vala"
		if (_tmp26_) {
#line 329 "ScheduleButton.c"
			WidgetsDynamicIcon* _tmp27_;
			GtkGrid* _tmp28_;
			GtkStyleContext* _tmp29_;
#line 69 "../src/Widgets/ScheduleButton.vala"
			_tmp27_ = self->priv->due_image;
#line 69 "../src/Widgets/ScheduleButton.vala"
			widgets_dynamic_icon_update_icon_name (_tmp27_, "planner-today");
#line 70 "../src/Widgets/ScheduleButton.vala"
			_tmp28_ = self->priv->schedule_grid;
#line 70 "../src/Widgets/ScheduleButton.vala"
			_tmp29_ = gtk_widget_get_style_context ((GtkWidget*) _tmp28_);
#line 70 "../src/Widgets/ScheduleButton.vala"
			gtk_style_context_add_class (_tmp29_, "today-label");
#line 343 "ScheduleButton.c"
		} else {
			Util* _tmp30_;
			Util* _tmp31_;
			ObjectsItem* _tmp32_;
			ObjectsDueDate* _tmp33_;
			ObjectsDueDate* _tmp34_;
			GDateTime* _tmp35_;
			GDateTime* _tmp36_;
			gboolean _tmp37_;
#line 71 "../src/Widgets/ScheduleButton.vala"
			_tmp30_ = util_get_default ();
#line 71 "../src/Widgets/ScheduleButton.vala"
			_tmp31_ = _tmp30_;
#line 71 "../src/Widgets/ScheduleButton.vala"
			_tmp32_ = self->priv->_item;
#line 71 "../src/Widgets/ScheduleButton.vala"
			_tmp33_ = objects_item_get_due (_tmp32_);
#line 71 "../src/Widgets/ScheduleButton.vala"
			_tmp34_ = _tmp33_;
#line 71 "../src/Widgets/ScheduleButton.vala"
			_tmp35_ = objects_due_date_get_datetime (_tmp34_);
#line 71 "../src/Widgets/ScheduleButton.vala"
			_tmp36_ = _tmp35_;
#line 71 "../src/Widgets/ScheduleButton.vala"
			_tmp37_ = util_is_overdue (_tmp31_, _tmp36_);
#line 71 "../src/Widgets/ScheduleButton.vala"
			_g_object_unref0 (_tmp31_);
#line 71 "../src/Widgets/ScheduleButton.vala"
			if (_tmp37_) {
#line 373 "ScheduleButton.c"
				GtkGrid* _tmp38_;
				GtkStyleContext* _tmp39_;
#line 72 "../src/Widgets/ScheduleButton.vala"
				_tmp38_ = self->priv->schedule_grid;
#line 72 "../src/Widgets/ScheduleButton.vala"
				_tmp39_ = gtk_widget_get_style_context ((GtkWidget*) _tmp38_);
#line 72 "../src/Widgets/ScheduleButton.vala"
				gtk_style_context_add_class (_tmp39_, "overdue-label");
#line 382 "ScheduleButton.c"
			} else {
				WidgetsDynamicIcon* _tmp40_;
#line 74 "../src/Widgets/ScheduleButton.vala"
				_tmp40_ = self->priv->due_image;
#line 74 "../src/Widgets/ScheduleButton.vala"
				widgets_dynamic_icon_update_icon_name (_tmp40_, "planner-scheduled");
#line 389 "ScheduleButton.c"
			}
		}
	}
}

ObjectsItem*
widgets_schedule_button_get_item (WidgetsScheduleButton* self)
{
	ObjectsItem* result;
	ObjectsItem* _tmp0_;
#line 2 "../src/Widgets/ScheduleButton.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Widgets/ScheduleButton.vala"
	_tmp0_ = self->priv->_item;
#line 2 "../src/Widgets/ScheduleButton.vala"
	result = _tmp0_;
#line 2 "../src/Widgets/ScheduleButton.vala"
	return result;
#line 408 "ScheduleButton.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 2 "../src/Widgets/ScheduleButton.vala"
	return self ? g_object_ref (self) : NULL;
#line 416 "ScheduleButton.c"
}

static void
widgets_schedule_button_set_item (WidgetsScheduleButton* self,
                                  ObjectsItem* value)
{
	ObjectsItem* old_value;
#line 2 "../src/Widgets/ScheduleButton.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Widgets/ScheduleButton.vala"
	old_value = widgets_schedule_button_get_item (self);
#line 2 "../src/Widgets/ScheduleButton.vala"
	if (old_value != value) {
#line 430 "ScheduleButton.c"
		ObjectsItem* _tmp0_;
#line 2 "../src/Widgets/ScheduleButton.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 2 "../src/Widgets/ScheduleButton.vala"
		_g_object_unref0 (self->priv->_item);
#line 2 "../src/Widgets/ScheduleButton.vala"
		self->priv->_item = _tmp0_;
#line 2 "../src/Widgets/ScheduleButton.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_schedule_button_properties[WIDGETS_SCHEDULE_BUTTON_ITEM_PROPERTY]);
#line 440 "ScheduleButton.c"
	}
}

static Block24Data*
block24_data_ref (Block24Data* _data24_)
{
#line 39 "../src/Widgets/ScheduleButton.vala"
	g_atomic_int_inc (&_data24_->_ref_count_);
#line 39 "../src/Widgets/ScheduleButton.vala"
	return _data24_;
#line 451 "ScheduleButton.c"
}

static void
block24_data_unref (void * _userdata_)
{
	Block24Data* _data24_;
	_data24_ = (Block24Data*) _userdata_;
#line 39 "../src/Widgets/ScheduleButton.vala"
	if (g_atomic_int_dec_and_test (&_data24_->_ref_count_)) {
#line 461 "ScheduleButton.c"
		WidgetsScheduleButton* self;
#line 39 "../src/Widgets/ScheduleButton.vala"
		self = _data24_->self;
#line 39 "../src/Widgets/ScheduleButton.vala"
		_g_object_unref0 (_data24_->datetime_picker);
#line 39 "../src/Widgets/ScheduleButton.vala"
		_g_object_unref0 (self);
#line 39 "../src/Widgets/ScheduleButton.vala"
		g_slice_free (Block24Data, _data24_);
#line 471 "ScheduleButton.c"
	}
}

static void
__lambda102_ (Block24Data* _data24_)
{
	WidgetsScheduleButton* self;
	DialogsDateTimePickerDateTimePicker* _tmp0_;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
#line 49 "../src/Widgets/ScheduleButton.vala"
	self = _data24_->self;
#line 50 "../src/Widgets/ScheduleButton.vala"
	_tmp0_ = _data24_->datetime_picker;
#line 50 "../src/Widgets/ScheduleButton.vala"
	_tmp1_ = dialogs_date_time_picker_date_time_picker_get_datetime (_tmp0_);
#line 50 "../src/Widgets/ScheduleButton.vala"
	_tmp2_ = _tmp1_;
#line 50 "../src/Widgets/ScheduleButton.vala"
	g_signal_emit (self, widgets_schedule_button_signals[WIDGETS_SCHEDULE_BUTTON_DATE_CHANGED_SIGNAL], 0, _tmp2_);
#line 492 "ScheduleButton.c"
}

static void
___lambda102__dialogs_date_time_picker_date_time_picker_date_changed (DialogsDateTimePickerDateTimePicker* _sender,
                                                                      gpointer self)
{
#line 49 "../src/Widgets/ScheduleButton.vala"
	__lambda102_ (self);
#line 501 "ScheduleButton.c"
}

static void
__lambda103_ (WidgetsScheduleButton* self)
{
#line 54 "../src/Widgets/ScheduleButton.vala"
	g_signal_emit (self, widgets_schedule_button_signals[WIDGETS_SCHEDULE_BUTTON_DIALOG_OPEN_SIGNAL], 0, FALSE);
#line 509 "ScheduleButton.c"
}

static void
___lambda103__gtk_widget_destroy (GtkWidget* _sender,
                                  gpointer self)
{
#line 53 "../src/Widgets/ScheduleButton.vala"
	__lambda103_ ((WidgetsScheduleButton*) self);
#line 518 "ScheduleButton.c"
}

static void
_widgets_schedule_button___lambda74_ (WidgetsScheduleButton* self)
{
	Block24Data* _data24_;
	DialogsDateTimePickerDateTimePicker* _tmp0_;
	DialogsDateTimePickerDateTimePicker* _tmp1_;
	ObjectsItem* _tmp2_;
	gboolean _tmp3_;
	gboolean _tmp4_;
	DialogsDateTimePickerDateTimePicker* _tmp11_;
	DialogsDateTimePickerDateTimePicker* _tmp12_;
#line 39 "../src/Widgets/ScheduleButton.vala"
	_data24_ = g_slice_new0 (Block24Data);
#line 39 "../src/Widgets/ScheduleButton.vala"
	_data24_->_ref_count_ = 1;
#line 39 "../src/Widgets/ScheduleButton.vala"
	_data24_->self = g_object_ref (self);
#line 40 "../src/Widgets/ScheduleButton.vala"
	_tmp0_ = dialogs_date_time_picker_date_time_picker_new ();
#line 40 "../src/Widgets/ScheduleButton.vala"
	g_object_ref_sink (_tmp0_);
#line 40 "../src/Widgets/ScheduleButton.vala"
	_data24_->datetime_picker = _tmp0_;
#line 42 "../src/Widgets/ScheduleButton.vala"
	g_signal_emit (self, widgets_schedule_button_signals[WIDGETS_SCHEDULE_BUTTON_DIALOG_OPEN_SIGNAL], 0, TRUE);
#line 43 "../src/Widgets/ScheduleButton.vala"
	_tmp1_ = _data24_->datetime_picker;
#line 43 "../src/Widgets/ScheduleButton.vala"
	dialogs_date_time_picker_date_time_picker_popup (_tmp1_);
#line 45 "../src/Widgets/ScheduleButton.vala"
	_tmp2_ = self->priv->_item;
#line 45 "../src/Widgets/ScheduleButton.vala"
	_tmp3_ = objects_item_get_has_due (_tmp2_);
#line 45 "../src/Widgets/ScheduleButton.vala"
	_tmp4_ = _tmp3_;
#line 45 "../src/Widgets/ScheduleButton.vala"
	if (_tmp4_) {
#line 558 "ScheduleButton.c"
		DialogsDateTimePickerDateTimePicker* _tmp5_;
		ObjectsItem* _tmp6_;
		ObjectsDueDate* _tmp7_;
		ObjectsDueDate* _tmp8_;
		GDateTime* _tmp9_;
		GDateTime* _tmp10_;
#line 46 "../src/Widgets/ScheduleButton.vala"
		_tmp5_ = _data24_->datetime_picker;
#line 46 "../src/Widgets/ScheduleButton.vala"
		_tmp6_ = self->priv->_item;
#line 46 "../src/Widgets/ScheduleButton.vala"
		_tmp7_ = objects_item_get_due (_tmp6_);
#line 46 "../src/Widgets/ScheduleButton.vala"
		_tmp8_ = _tmp7_;
#line 46 "../src/Widgets/ScheduleButton.vala"
		_tmp9_ = objects_due_date_get_datetime (_tmp8_);
#line 46 "../src/Widgets/ScheduleButton.vala"
		_tmp10_ = _tmp9_;
#line 46 "../src/Widgets/ScheduleButton.vala"
		dialogs_date_time_picker_date_time_picker_set_datetime (_tmp5_, _tmp10_);
#line 579 "ScheduleButton.c"
	}
#line 49 "../src/Widgets/ScheduleButton.vala"
	_tmp11_ = _data24_->datetime_picker;
#line 49 "../src/Widgets/ScheduleButton.vala"
	g_signal_connect_data (_tmp11_, "date-changed", (GCallback) ___lambda102__dialogs_date_time_picker_date_time_picker_date_changed, block24_data_ref (_data24_), (GClosureNotify) block24_data_unref, 0);
#line 53 "../src/Widgets/ScheduleButton.vala"
	_tmp12_ = _data24_->datetime_picker;
#line 53 "../src/Widgets/ScheduleButton.vala"
	g_signal_connect_object ((GtkWidget*) _tmp12_, "destroy", (GCallback) ___lambda103__gtk_widget_destroy, self, 0);
#line 39 "../src/Widgets/ScheduleButton.vala"
	block24_data_unref (_data24_);
#line 39 "../src/Widgets/ScheduleButton.vala"
	_data24_ = NULL;
#line 593 "ScheduleButton.c"
}

static void
__widgets_schedule_button___lambda74__gtk_button_clicked (GtkButton* _sender,
                                                          gpointer self)
{
#line 39 "../src/Widgets/ScheduleButton.vala"
	_widgets_schedule_button___lambda74_ ((WidgetsScheduleButton*) self);
#line 602 "ScheduleButton.c"
}

static GObject *
widgets_schedule_button_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsScheduleButton * self;
	GtkStyleContext* _tmp0_;
	WidgetsDynamicIcon* _tmp1_;
	WidgetsDynamicIcon* _tmp2_;
	WidgetsDynamicIcon* _tmp3_;
	GtkLabel* _tmp4_ = NULL;
	GtkGrid* _tmp5_ = NULL;
	GtkGrid* _tmp6_;
	WidgetsDynamicIcon* _tmp7_;
	GtkGrid* _tmp8_;
	GtkLabel* _tmp9_;
	GtkGrid* _tmp10_;
#line 20 "../src/Widgets/ScheduleButton.vala"
	parent_class = G_OBJECT_CLASS (widgets_schedule_button_parent_class);
#line 20 "../src/Widgets/ScheduleButton.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 20 "../src/Widgets/ScheduleButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_SCHEDULE_BUTTON, WidgetsScheduleButton);
#line 21 "../src/Widgets/ScheduleButton.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 21 "../src/Widgets/ScheduleButton.vala"
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_FLAT);
#line 23 "../src/Widgets/ScheduleButton.vala"
	_tmp1_ = widgets_dynamic_icon_new ();
#line 23 "../src/Widgets/ScheduleButton.vala"
	g_object_ref_sink (_tmp1_);
#line 23 "../src/Widgets/ScheduleButton.vala"
	_g_object_unref0 (self->priv->due_image);
#line 23 "../src/Widgets/ScheduleButton.vala"
	self->priv->due_image = _tmp1_;
#line 24 "../src/Widgets/ScheduleButton.vala"
	_tmp2_ = self->priv->due_image;
#line 24 "../src/Widgets/ScheduleButton.vala"
	widgets_dynamic_icon_update_icon_name (_tmp2_, "planner-calendar");
#line 25 "../src/Widgets/ScheduleButton.vala"
	_tmp3_ = self->priv->due_image;
#line 25 "../src/Widgets/ScheduleButton.vala"
	widgets_dynamic_icon_set_size (_tmp3_, 19);
#line 27 "../src/Widgets/ScheduleButton.vala"
	_tmp4_ = (GtkLabel*) gtk_label_new (_ ("Schedule"));
#line 27 "../src/Widgets/ScheduleButton.vala"
	gtk_label_set_xalign (_tmp4_, (gfloat) 0);
#line 27 "../src/Widgets/ScheduleButton.vala"
	g_object_ref_sink (_tmp4_);
#line 27 "../src/Widgets/ScheduleButton.vala"
	_g_object_unref0 (self->priv->due_label);
#line 27 "../src/Widgets/ScheduleButton.vala"
	self->priv->due_label = _tmp4_;
#line 31 "../src/Widgets/ScheduleButton.vala"
	_tmp5_ = (GtkGrid*) gtk_grid_new ();
#line 31 "../src/Widgets/ScheduleButton.vala"
	gtk_grid_set_column_spacing (_tmp5_, 3);
#line 31 "../src/Widgets/ScheduleButton.vala"
	g_object_ref_sink (_tmp5_);
#line 31 "../src/Widgets/ScheduleButton.vala"
	_g_object_unref0 (self->priv->schedule_grid);
#line 31 "../src/Widgets/ScheduleButton.vala"
	self->priv->schedule_grid = _tmp5_;
#line 34 "../src/Widgets/ScheduleButton.vala"
	_tmp6_ = self->priv->schedule_grid;
#line 34 "../src/Widgets/ScheduleButton.vala"
	_tmp7_ = self->priv->due_image;
#line 34 "../src/Widgets/ScheduleButton.vala"
	gtk_container_add ((GtkContainer*) _tmp6_, (GtkWidget*) _tmp7_);
#line 35 "../src/Widgets/ScheduleButton.vala"
	_tmp8_ = self->priv->schedule_grid;
#line 35 "../src/Widgets/ScheduleButton.vala"
	_tmp9_ = self->priv->due_label;
#line 35 "../src/Widgets/ScheduleButton.vala"
	gtk_container_add ((GtkContainer*) _tmp8_, (GtkWidget*) _tmp9_);
#line 37 "../src/Widgets/ScheduleButton.vala"
	_tmp10_ = self->priv->schedule_grid;
#line 37 "../src/Widgets/ScheduleButton.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp10_);
#line 39 "../src/Widgets/ScheduleButton.vala"
	g_signal_connect_object ((GtkButton*) self, "clicked", (GCallback) __widgets_schedule_button___lambda74__gtk_button_clicked, self, 0);
#line 20 "../src/Widgets/ScheduleButton.vala"
	return obj;
#line 690 "ScheduleButton.c"
}

static void
widgets_schedule_button_class_init (WidgetsScheduleButtonClass * klass,
                                    gpointer klass_data)
{
#line 1 "../src/Widgets/ScheduleButton.vala"
	widgets_schedule_button_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Widgets/ScheduleButton.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsScheduleButton_private_offset);
#line 1 "../src/Widgets/ScheduleButton.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_schedule_button_get_property;
#line 1 "../src/Widgets/ScheduleButton.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_schedule_button_set_property;
#line 1 "../src/Widgets/ScheduleButton.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_schedule_button_constructor;
#line 1 "../src/Widgets/ScheduleButton.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_schedule_button_finalize;
#line 1 "../src/Widgets/ScheduleButton.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_SCHEDULE_BUTTON_ITEM_PROPERTY, widgets_schedule_button_properties[WIDGETS_SCHEDULE_BUTTON_ITEM_PROPERTY] = g_param_spec_object ("item", "item", "item", OBJECTS_TYPE_ITEM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Widgets/ScheduleButton.vala"
	widgets_schedule_button_signals[WIDGETS_SCHEDULE_BUTTON_DATE_CHANGED_SIGNAL] = g_signal_new ("date-changed", WIDGETS_TYPE_SCHEDULE_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOXED, G_TYPE_NONE, 1, G_TYPE_DATE_TIME);
#line 1 "../src/Widgets/ScheduleButton.vala"
	widgets_schedule_button_signals[WIDGETS_SCHEDULE_BUTTON_DIALOG_OPEN_SIGNAL] = g_signal_new ("dialog-open", WIDGETS_TYPE_SCHEDULE_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOOLEAN, G_TYPE_NONE, 1, G_TYPE_BOOLEAN);
#line 715 "ScheduleButton.c"
}

static void
widgets_schedule_button_instance_init (WidgetsScheduleButton * self,
                                       gpointer klass)
{
#line 1 "../src/Widgets/ScheduleButton.vala"
	self->priv = widgets_schedule_button_get_instance_private (self);
#line 724 "ScheduleButton.c"
}

static void
widgets_schedule_button_finalize (GObject * obj)
{
	WidgetsScheduleButton * self;
#line 1 "../src/Widgets/ScheduleButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_SCHEDULE_BUTTON, WidgetsScheduleButton);
#line 2 "../src/Widgets/ScheduleButton.vala"
	_g_object_unref0 (self->priv->_item);
#line 4 "../src/Widgets/ScheduleButton.vala"
	_g_object_unref0 (self->priv->due_label);
#line 5 "../src/Widgets/ScheduleButton.vala"
	_g_object_unref0 (self->priv->schedule_grid);
#line 6 "../src/Widgets/ScheduleButton.vala"
	_g_object_unref0 (self->priv->due_image);
#line 1 "../src/Widgets/ScheduleButton.vala"
	G_OBJECT_CLASS (widgets_schedule_button_parent_class)->finalize (obj);
#line 743 "ScheduleButton.c"
}

static GType
widgets_schedule_button_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsScheduleButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_schedule_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsScheduleButton), 0, (GInstanceInitFunc) widgets_schedule_button_instance_init, NULL };
	GType widgets_schedule_button_type_id;
	widgets_schedule_button_type_id = g_type_register_static (gtk_button_get_type (), "WidgetsScheduleButton", &g_define_type_info, 0);
	WidgetsScheduleButton_private_offset = g_type_add_instance_private (widgets_schedule_button_type_id, sizeof (WidgetsScheduleButtonPrivate));
	return widgets_schedule_button_type_id;
}

GType
widgets_schedule_button_get_type (void)
{
	static volatile gsize widgets_schedule_button_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_schedule_button_type_id__volatile)) {
		GType widgets_schedule_button_type_id;
		widgets_schedule_button_type_id = widgets_schedule_button_get_type_once ();
		g_once_init_leave (&widgets_schedule_button_type_id__volatile, widgets_schedule_button_type_id);
	}
	return widgets_schedule_button_type_id__volatile;
}

static void
_vala_widgets_schedule_button_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec)
{
	WidgetsScheduleButton * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_SCHEDULE_BUTTON, WidgetsScheduleButton);
#line 1 "../src/Widgets/ScheduleButton.vala"
	switch (property_id) {
#line 1 "../src/Widgets/ScheduleButton.vala"
		case WIDGETS_SCHEDULE_BUTTON_ITEM_PROPERTY:
#line 1 "../src/Widgets/ScheduleButton.vala"
		g_value_set_object (value, widgets_schedule_button_get_item (self));
#line 1 "../src/Widgets/ScheduleButton.vala"
		break;
#line 784 "ScheduleButton.c"
		default:
#line 1 "../src/Widgets/ScheduleButton.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/ScheduleButton.vala"
		break;
#line 790 "ScheduleButton.c"
	}
}

static void
_vala_widgets_schedule_button_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec)
{
	WidgetsScheduleButton * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_SCHEDULE_BUTTON, WidgetsScheduleButton);
#line 1 "../src/Widgets/ScheduleButton.vala"
	switch (property_id) {
#line 1 "../src/Widgets/ScheduleButton.vala"
		case WIDGETS_SCHEDULE_BUTTON_ITEM_PROPERTY:
#line 1 "../src/Widgets/ScheduleButton.vala"
		widgets_schedule_button_set_item (self, g_value_get_object (value));
#line 1 "../src/Widgets/ScheduleButton.vala"
		break;
#line 810 "ScheduleButton.c"
		default:
#line 1 "../src/Widgets/ScheduleButton.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/ScheduleButton.vala"
		break;
#line 816 "ScheduleButton.c"
	}
}

