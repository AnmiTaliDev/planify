/* EventBus.c generated by valac 0.50.10, the Vala compiler
 * generated from EventBus.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gtk/gtk.h>

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;
typedef struct _ServicesEventBusPrivate ServicesEventBusPrivate;
enum  {
	SERVICES_EVENT_BUS_0_PROPERTY,
	SERVICES_EVENT_BUS_NUM_PROPERTIES
};
static GParamSpec* services_event_bus_properties[SERVICES_EVENT_BUS_NUM_PROPERTIES];

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;
typedef enum  {
	PANE_TYPE_FILTER,
	PANE_TYPE_FAVORITE,
	PANE_TYPE_PROJECT,
	PANE_TYPE_LABEL,
	PANE_TYPE_TASKLIST
} PaneType;

#define TYPE_PANE_TYPE (pane_type_get_type ())

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define LAYOUTS_TYPE_ITEM_ROW (layouts_item_row_get_type ())
#define LAYOUTS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRow))
#define LAYOUTS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRowClass))
#define LAYOUTS_IS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_ITEM_ROW))
#define LAYOUTS_IS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_ITEM_ROW))
#define LAYOUTS_ITEM_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRowClass))

typedef struct _LayoutsItemRow LayoutsItemRow;
typedef struct _LayoutsItemRowClass LayoutsItemRowClass;

#define OBJECTS_TYPE_SECTION (objects_section_get_type ())
#define OBJECTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_SECTION, ObjectsSection))
#define OBJECTS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_SECTION, ObjectsSectionClass))
#define OBJECTS_IS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_SECTION))
#define OBJECTS_IS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_SECTION))
#define OBJECTS_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_SECTION, ObjectsSectionClass))

typedef struct _ObjectsSection ObjectsSection;
typedef struct _ObjectsSectionClass ObjectsSectionClass;
enum  {
	SERVICES_EVENT_BUS_THEME_CHANGED_SIGNAL,
	SERVICES_EVENT_BUS_DELETE_ROW_PROJECT_SIGNAL,
	SERVICES_EVENT_BUS_PANE_SELECTED_SIGNAL,
	SERVICES_EVENT_BUS_ITEM_SELECTED_SIGNAL,
	SERVICES_EVENT_BUS_AVATAR_DOWNLOADED_SIGNAL,
	SERVICES_EVENT_BUS_VIEW_HEADER_SIGNAL,
	SERVICES_EVENT_BUS_MAGIC_BUTTON_ACTIVATED_SIGNAL,
	SERVICES_EVENT_BUS_PROJECT_PICKER_CHANGED_SIGNAL,
	SERVICES_EVENT_BUS_PROJECT_PARENT_CHANGED_SIGNAL,
	SERVICES_EVENT_BUS_CHECKED_TOGGLED_SIGNAL,
	SERVICES_EVENT_BUS_FAVORITE_TOGGLED_SIGNAL,
	SERVICES_EVENT_BUS_ITEM_MOVED_SIGNAL,
	SERVICES_EVENT_BUS_UPDATE_ITEMS_POSITION_SIGNAL,
	SERVICES_EVENT_BUS_UPDATE_INSERTED_ITEM_MAP_SIGNAL,
	SERVICES_EVENT_BUS_ACTIVATE_NAME_EDITABLE_SECTION_SIGNAL,
	SERVICES_EVENT_BUS_NUM_SIGNALS
};
static guint services_event_bus_signals[SERVICES_EVENT_BUS_NUM_SIGNALS] = {0};

struct _ServicesEventBus {
	GObject parent_instance;
	ServicesEventBusPrivate * priv;
};

struct _ServicesEventBusClass {
	GObjectClass parent_class;
};

static gpointer services_event_bus_parent_class = NULL;

GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
ServicesEventBus* services_event_bus_new (void);
ServicesEventBus* services_event_bus_construct (GType object_type);
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
GType pane_type_get_type (void) G_GNUC_CONST;
static void g_cclosure_user_marshal_VOID__ENUM_STRING (GClosure * closure,
                                                GValue * return_value,
                                                guint n_param_values,
                                                const GValue * param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__INT64_INT64 (GClosure * closure,
                                                GValue * return_value,
                                                guint n_param_values,
                                                const GValue * param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__OBJECT_INT64 (GClosure * closure,
                                                 GValue * return_value,
                                                 guint n_param_values,
                                                 const GValue * param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
static void g_cclosure_user_marshal_VOID__OBJECT_BOOLEAN (GClosure * closure,
                                                   GValue * return_value,
                                                   guint n_param_values,
                                                   const GValue * param_values,
                                                   gpointer invocation_hint,
                                                   gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__OBJECT_INT64_INT64_BOOLEAN (GClosure * closure,
                                                               GValue * return_value,
                                                               guint n_param_values,
                                                               const GValue * param_values,
                                                               gpointer invocation_hint,
                                                               gpointer marshal_data);
GType layouts_item_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsItemRow, g_object_unref)
GType objects_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsSection, g_object_unref)
static GType services_event_bus_get_type_once (void);

ServicesEventBus*
services_event_bus_construct (GType object_type)
{
	ServicesEventBus * self = NULL;
#line 1 "../src/Services/EventBus.vala"
	self = (ServicesEventBus*) g_object_new (object_type, NULL);
#line 1 "../src/Services/EventBus.vala"
	return self;
#line 171 "EventBus.c"
}

ServicesEventBus*
services_event_bus_new (void)
{
#line 1 "../src/Services/EventBus.vala"
	return services_event_bus_construct (SERVICES_TYPE_EVENT_BUS);
#line 179 "EventBus.c"
}

static void
g_cclosure_user_marshal_VOID__ENUM_STRING (GClosure * closure,
                                           GValue * return_value,
                                           guint n_param_values,
                                           const GValue * param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__ENUM_STRING) (gpointer data1, gint arg_1, const char* arg_2, gpointer data2);
	register GMarshalFunc_VOID__ENUM_STRING callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 1 "../src/Services/EventBus.vala"
	g_return_if_fail (n_param_values == 3);
#line 1 "../src/Services/EventBus.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 1 "../src/Services/EventBus.vala"
		data1 = closure->data;
#line 1 "../src/Services/EventBus.vala"
		data2 = param_values->data[0].v_pointer;
#line 204 "EventBus.c"
	} else {
#line 1 "../src/Services/EventBus.vala"
		data1 = param_values->data[0].v_pointer;
#line 1 "../src/Services/EventBus.vala"
		data2 = closure->data;
#line 210 "EventBus.c"
	}
#line 1 "../src/Services/EventBus.vala"
	callback = (GMarshalFunc_VOID__ENUM_STRING) (marshal_data ? marshal_data : cc->callback);
#line 1 "../src/Services/EventBus.vala"
	callback (data1, g_value_get_enum (param_values + 1), g_value_get_string (param_values + 2), data2);
#line 216 "EventBus.c"
}

static void
g_cclosure_user_marshal_VOID__INT64_INT64 (GClosure * closure,
                                           GValue * return_value,
                                           guint n_param_values,
                                           const GValue * param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__INT64_INT64) (gpointer data1, gint64 arg_1, gint64 arg_2, gpointer data2);
	register GMarshalFunc_VOID__INT64_INT64 callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 1 "../src/Services/EventBus.vala"
	g_return_if_fail (n_param_values == 3);
#line 1 "../src/Services/EventBus.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 1 "../src/Services/EventBus.vala"
		data1 = closure->data;
#line 1 "../src/Services/EventBus.vala"
		data2 = param_values->data[0].v_pointer;
#line 241 "EventBus.c"
	} else {
#line 1 "../src/Services/EventBus.vala"
		data1 = param_values->data[0].v_pointer;
#line 1 "../src/Services/EventBus.vala"
		data2 = closure->data;
#line 247 "EventBus.c"
	}
#line 1 "../src/Services/EventBus.vala"
	callback = (GMarshalFunc_VOID__INT64_INT64) (marshal_data ? marshal_data : cc->callback);
#line 1 "../src/Services/EventBus.vala"
	callback (data1, g_value_get_int64 (param_values + 1), g_value_get_int64 (param_values + 2), data2);
#line 253 "EventBus.c"
}

static void
g_cclosure_user_marshal_VOID__OBJECT_INT64 (GClosure * closure,
                                            GValue * return_value,
                                            guint n_param_values,
                                            const GValue * param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECT_INT64) (gpointer data1, gpointer arg_1, gint64 arg_2, gpointer data2);
	register GMarshalFunc_VOID__OBJECT_INT64 callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 1 "../src/Services/EventBus.vala"
	g_return_if_fail (n_param_values == 3);
#line 1 "../src/Services/EventBus.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 1 "../src/Services/EventBus.vala"
		data1 = closure->data;
#line 1 "../src/Services/EventBus.vala"
		data2 = param_values->data[0].v_pointer;
#line 278 "EventBus.c"
	} else {
#line 1 "../src/Services/EventBus.vala"
		data1 = param_values->data[0].v_pointer;
#line 1 "../src/Services/EventBus.vala"
		data2 = closure->data;
#line 284 "EventBus.c"
	}
#line 1 "../src/Services/EventBus.vala"
	callback = (GMarshalFunc_VOID__OBJECT_INT64) (marshal_data ? marshal_data : cc->callback);
#line 1 "../src/Services/EventBus.vala"
	callback (data1, g_value_get_object (param_values + 1), g_value_get_int64 (param_values + 2), data2);
#line 290 "EventBus.c"
}

static void
g_cclosure_user_marshal_VOID__OBJECT_BOOLEAN (GClosure * closure,
                                              GValue * return_value,
                                              guint n_param_values,
                                              const GValue * param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECT_BOOLEAN) (gpointer data1, gpointer arg_1, gboolean arg_2, gpointer data2);
	register GMarshalFunc_VOID__OBJECT_BOOLEAN callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 1 "../src/Services/EventBus.vala"
	g_return_if_fail (n_param_values == 3);
#line 1 "../src/Services/EventBus.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 1 "../src/Services/EventBus.vala"
		data1 = closure->data;
#line 1 "../src/Services/EventBus.vala"
		data2 = param_values->data[0].v_pointer;
#line 315 "EventBus.c"
	} else {
#line 1 "../src/Services/EventBus.vala"
		data1 = param_values->data[0].v_pointer;
#line 1 "../src/Services/EventBus.vala"
		data2 = closure->data;
#line 321 "EventBus.c"
	}
#line 1 "../src/Services/EventBus.vala"
	callback = (GMarshalFunc_VOID__OBJECT_BOOLEAN) (marshal_data ? marshal_data : cc->callback);
#line 1 "../src/Services/EventBus.vala"
	callback (data1, g_value_get_object (param_values + 1), g_value_get_boolean (param_values + 2), data2);
#line 327 "EventBus.c"
}

static void
g_cclosure_user_marshal_VOID__OBJECT_INT64_INT64_BOOLEAN (GClosure * closure,
                                                          GValue * return_value,
                                                          guint n_param_values,
                                                          const GValue * param_values,
                                                          gpointer invocation_hint,
                                                          gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECT_INT64_INT64_BOOLEAN) (gpointer data1, gpointer arg_1, gint64 arg_2, gint64 arg_3, gboolean arg_4, gpointer data2);
	register GMarshalFunc_VOID__OBJECT_INT64_INT64_BOOLEAN callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 1 "../src/Services/EventBus.vala"
	g_return_if_fail (n_param_values == 5);
#line 1 "../src/Services/EventBus.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 1 "../src/Services/EventBus.vala"
		data1 = closure->data;
#line 1 "../src/Services/EventBus.vala"
		data2 = param_values->data[0].v_pointer;
#line 352 "EventBus.c"
	} else {
#line 1 "../src/Services/EventBus.vala"
		data1 = param_values->data[0].v_pointer;
#line 1 "../src/Services/EventBus.vala"
		data2 = closure->data;
#line 358 "EventBus.c"
	}
#line 1 "../src/Services/EventBus.vala"
	callback = (GMarshalFunc_VOID__OBJECT_INT64_INT64_BOOLEAN) (marshal_data ? marshal_data : cc->callback);
#line 1 "../src/Services/EventBus.vala"
	callback (data1, g_value_get_object (param_values + 1), g_value_get_int64 (param_values + 2), g_value_get_int64 (param_values + 3), g_value_get_boolean (param_values + 4), data2);
#line 364 "EventBus.c"
}

static void
services_event_bus_class_init (ServicesEventBusClass * klass,
                               gpointer klass_data)
{
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_THEME_CHANGED_SIGNAL] = g_signal_new ("theme-changed", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_DELETE_ROW_PROJECT_SIGNAL] = g_signal_new ("delete-row-project", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, OBJECTS_TYPE_PROJECT);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_PANE_SELECTED_SIGNAL] = g_signal_new ("pane-selected", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__ENUM_STRING, G_TYPE_NONE, 2, TYPE_PANE_TYPE, G_TYPE_STRING);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_ITEM_SELECTED_SIGNAL] = g_signal_new ("item-selected", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__POINTER, G_TYPE_NONE, 1, G_TYPE_POINTER);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_AVATAR_DOWNLOADED_SIGNAL] = g_signal_new ("avatar-downloaded", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_VIEW_HEADER_SIGNAL] = g_signal_new ("view-header", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOOLEAN, G_TYPE_NONE, 1, G_TYPE_BOOLEAN);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_MAGIC_BUTTON_ACTIVATED_SIGNAL] = g_signal_new ("magic-button-activated", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOOLEAN, G_TYPE_NONE, 1, G_TYPE_BOOLEAN);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_PROJECT_PICKER_CHANGED_SIGNAL] = g_signal_new ("project-picker-changed", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__INT64_INT64, G_TYPE_NONE, 2, G_TYPE_INT64, G_TYPE_INT64);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_PROJECT_PARENT_CHANGED_SIGNAL] = g_signal_new ("project-parent-changed", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECT_INT64, G_TYPE_NONE, 2, OBJECTS_TYPE_PROJECT, G_TYPE_INT64);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_CHECKED_TOGGLED_SIGNAL] = g_signal_new ("checked-toggled", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECT_BOOLEAN, G_TYPE_NONE, 2, OBJECTS_TYPE_ITEM, G_TYPE_BOOLEAN);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_FAVORITE_TOGGLED_SIGNAL] = g_signal_new ("favorite-toggled", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, OBJECTS_TYPE_PROJECT);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_ITEM_MOVED_SIGNAL] = g_signal_new ("item-moved", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECT_INT64_INT64_BOOLEAN, G_TYPE_NONE, 4, OBJECTS_TYPE_ITEM, G_TYPE_INT64, G_TYPE_INT64, G_TYPE_BOOLEAN);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_UPDATE_ITEMS_POSITION_SIGNAL] = g_signal_new ("update-items-position", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__INT64_INT64, G_TYPE_NONE, 2, G_TYPE_INT64, G_TYPE_INT64);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_UPDATE_INSERTED_ITEM_MAP_SIGNAL] = g_signal_new ("update-inserted-item-map", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, LAYOUTS_TYPE_ITEM_ROW);
#line 1 "../src/Services/EventBus.vala"
	services_event_bus_signals[SERVICES_EVENT_BUS_ACTIVATE_NAME_EDITABLE_SECTION_SIGNAL] = g_signal_new ("activate-name-editable-section", SERVICES_TYPE_EVENT_BUS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, OBJECTS_TYPE_SECTION);
#line 403 "EventBus.c"
}

static void
services_event_bus_instance_init (ServicesEventBus * self,
                                  gpointer klass)
{
}

static GType
services_event_bus_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ServicesEventBusClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) services_event_bus_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ServicesEventBus), 0, (GInstanceInitFunc) services_event_bus_instance_init, NULL };
	GType services_event_bus_type_id;
	services_event_bus_type_id = g_type_register_static (G_TYPE_OBJECT, "ServicesEventBus", &g_define_type_info, 0);
	return services_event_bus_type_id;
}

GType
services_event_bus_get_type (void)
{
	static volatile gsize services_event_bus_type_id__volatile = 0;
	if (g_once_init_enter (&services_event_bus_type_id__volatile)) {
		GType services_event_bus_type_id;
		services_event_bus_type_id = services_event_bus_get_type_once ();
		g_once_init_leave (&services_event_bus_type_id__volatile, services_event_bus_type_id);
	}
	return services_event_bus_type_id__volatile;
}

