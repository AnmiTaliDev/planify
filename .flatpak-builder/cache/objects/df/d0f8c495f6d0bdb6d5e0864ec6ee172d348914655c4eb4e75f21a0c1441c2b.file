/* ItemLabels.c generated by valac 0.50.10, the Vala compiler
 * generated from ItemLabels.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <gdk/gdk.h>
#include <handy.h>

#define WIDGETS_TYPE_ITEM_LABELS (widgets_item_labels_get_type ())
#define WIDGETS_ITEM_LABELS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ITEM_LABELS, WidgetsItemLabels))
#define WIDGETS_ITEM_LABELS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ITEM_LABELS, WidgetsItemLabelsClass))
#define WIDGETS_IS_ITEM_LABELS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ITEM_LABELS))
#define WIDGETS_IS_ITEM_LABELS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ITEM_LABELS))
#define WIDGETS_ITEM_LABELS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ITEM_LABELS, WidgetsItemLabelsClass))

typedef struct _WidgetsItemLabels WidgetsItemLabels;
typedef struct _WidgetsItemLabelsClass WidgetsItemLabelsClass;
typedef struct _WidgetsItemLabelsPrivate WidgetsItemLabelsPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;
enum  {
	WIDGETS_ITEM_LABELS_0_PROPERTY,
	WIDGETS_ITEM_LABELS_ITEM_PROPERTY,
	WIDGETS_ITEM_LABELS_NUM_PROPERTIES
};
static GParamSpec* widgets_item_labels_properties[WIDGETS_ITEM_LABELS_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_ITEM_LABEL (objects_item_label_get_type ())
#define OBJECTS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabel))
#define OBJECTS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))
#define OBJECTS_IS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_IS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_ITEM_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))

typedef struct _ObjectsItemLabel ObjectsItemLabel;
typedef struct _ObjectsItemLabelClass ObjectsItemLabelClass;

#define WIDGETS_TYPE_ITEM_LABEL_CHILD (widgets_item_label_child_get_type ())
#define WIDGETS_ITEM_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ITEM_LABEL_CHILD, WidgetsItemLabelChild))
#define WIDGETS_ITEM_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ITEM_LABEL_CHILD, WidgetsItemLabelChildClass))
#define WIDGETS_IS_ITEM_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ITEM_LABEL_CHILD))
#define WIDGETS_IS_ITEM_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ITEM_LABEL_CHILD))
#define WIDGETS_ITEM_LABEL_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ITEM_LABEL_CHILD, WidgetsItemLabelChildClass))

typedef struct _WidgetsItemLabelChild WidgetsItemLabelChild;
typedef struct _WidgetsItemLabelChildClass WidgetsItemLabelChildClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;

#define DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER (dialogs_label_picker_label_picker_get_type ())
#define DIALOGS_LABEL_PICKER_LABEL_PICKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPicker))
#define DIALOGS_LABEL_PICKER_LABEL_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPickerClass))
#define DIALOGS_LABEL_PICKER_IS_LABEL_PICKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER))
#define DIALOGS_LABEL_PICKER_IS_LABEL_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER))
#define DIALOGS_LABEL_PICKER_LABEL_PICKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPickerClass))

typedef struct _DialogsLabelPickerLabelPicker DialogsLabelPickerLabelPicker;
typedef struct _DialogsLabelPickerLabelPickerClass DialogsLabelPickerLabelPickerClass;
enum  {
	WIDGETS_ITEM_LABELS_LABELS_CHANGED_SIGNAL,
	WIDGETS_ITEM_LABELS_DIALOG_OPEN_SIGNAL,
	WIDGETS_ITEM_LABELS_NUM_SIGNALS
};
static guint widgets_item_labels_signals[WIDGETS_ITEM_LABELS_NUM_SIGNALS] = {0};

struct _WidgetsItemLabels {
	GtkEventBox parent_instance;
	WidgetsItemLabelsPrivate * priv;
};

struct _WidgetsItemLabelsClass {
	GtkEventBoxClass parent_class;
};

struct _WidgetsItemLabelsPrivate {
	ObjectsItem* _item;
	GtkFlowBox* flowbox;
	GtkRevealer* main_revealer;
};

static gint WidgetsItemLabels_private_offset;
static gpointer widgets_item_labels_parent_class = NULL;

GType widgets_item_labels_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsItemLabels, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
WidgetsItemLabels* widgets_item_labels_new (ObjectsItem* item);
WidgetsItemLabels* widgets_item_labels_construct (GType object_type,
                                                  ObjectsItem* item);
void widgets_item_labels_add_labels (WidgetsItemLabels* self);
GType objects_item_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItemLabel, g_object_unref)
ObjectsItem* widgets_item_labels_get_item (WidgetsItemLabels* self);
GeeHashMap* objects_item_get_labels (ObjectsItem* self);
WidgetsItemLabelChild* widgets_item_label_child_new (ObjectsItemLabel* item_label);
WidgetsItemLabelChild* widgets_item_label_child_construct (GType object_type,
                                                           ObjectsItemLabel* item_label);
GType widgets_item_label_child_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsItemLabelChild, g_object_unref)
void widgets_item_labels_update_labels (WidgetsItemLabels* self);
static void widgets_item_labels_set_item (WidgetsItemLabels* self,
                                   ObjectsItem* value);
static gboolean widgets_item_labels_get_has_items (WidgetsItemLabels* self);
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
static GObject * widgets_item_labels_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties);
static gboolean _widgets_item_labels___lambda60_ (WidgetsItemLabels* self);
static gboolean __widgets_item_labels___lambda60__gsource_func (gpointer self);
static gboolean _widgets_item_labels___lambda61_ (WidgetsItemLabels* self,
                                           GtkWidget* sender,
                                           GdkEventButton* evt);
GType dialogs_label_picker_label_picker_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsLabelPickerLabelPicker, g_object_unref)
DialogsLabelPickerLabelPicker* dialogs_label_picker_label_picker_new (ObjectsItem* item);
DialogsLabelPickerLabelPicker* dialogs_label_picker_label_picker_construct (GType object_type,
                                                                            ObjectsItem* item);
static void ___lambda69_ (WidgetsItemLabels* self,
                   GeeHashMap* labels);
static void ____lambda69__dialogs_label_picker_label_picker_labels_changed (DialogsLabelPickerLabelPicker* _sender,
                                                                     GeeHashMap* labels_map,
                                                                     gpointer self);
void dialogs_label_picker_label_picker_popup (DialogsLabelPickerLabelPicker* self);
static void ___lambda70_ (WidgetsItemLabels* self);
static void ____lambda70__gtk_widget_destroy (GtkWidget* _sender,
                                       gpointer self);
static gboolean __widgets_item_labels___lambda61__gtk_widget_button_press_event (GtkWidget* _sender,
                                                                          GdkEventButton* event,
                                                                          gpointer self);
static void _widgets_item_labels___lambda71_ (WidgetsItemLabels* self,
                                       ObjectsItemLabel* item_label);
static void __widgets_item_labels___lambda71__objects_item_item_label_added (ObjectsItem* _sender,
                                                                      ObjectsItemLabel* item_label,
                                                                      gpointer self);
static void _widgets_item_labels___lambda72_ (WidgetsItemLabels* self);
static void __widgets_item_labels___lambda72__gtk_container_add (GtkContainer* _sender,
                                                          GtkWidget* widget,
                                                          gpointer self);
static void _widgets_item_labels___lambda73_ (WidgetsItemLabels* self);
static void __widgets_item_labels___lambda73__gtk_container_remove (GtkContainer* _sender,
                                                             GtkWidget* widget,
                                                             gpointer self);
static void widgets_item_labels_finalize (GObject * obj);
static GType widgets_item_labels_get_type_once (void);
static void _vala_widgets_item_labels_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_widgets_item_labels_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);

static inline gpointer
widgets_item_labels_get_instance_private (WidgetsItemLabels* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsItemLabels_private_offset);
}

WidgetsItemLabels*
widgets_item_labels_construct (GType object_type,
                               ObjectsItem* item)
{
	WidgetsItemLabels * self = NULL;
#line 16 "../src/Widgets/ItemLabels.vala"
	g_return_val_if_fail (item != NULL, NULL);
#line 17 "../src/Widgets/ItemLabels.vala"
	self = (WidgetsItemLabels*) g_object_new (object_type, "item", item, NULL);
#line 16 "../src/Widgets/ItemLabels.vala"
	return self;
#line 207 "ItemLabels.c"
}

WidgetsItemLabels*
widgets_item_labels_new (ObjectsItem* item)
{
#line 16 "../src/Widgets/ItemLabels.vala"
	return widgets_item_labels_construct (WIDGETS_TYPE_ITEM_LABELS, item);
#line 215 "ItemLabels.c"
}

void
widgets_item_labels_add_labels (WidgetsItemLabels* self)
{
#line 80 "../src/Widgets/ItemLabels.vala"
	g_return_if_fail (self != NULL);
#line 223 "ItemLabels.c"
	{
		GeeIterator* _item_label_it = NULL;
		ObjectsItem* _tmp0_;
		GeeHashMap* _tmp1_;
		GeeHashMap* _tmp2_;
		GeeCollection* _tmp3_;
		GeeCollection* _tmp4_;
		GeeCollection* _tmp5_;
		GeeIterator* _tmp6_;
		GeeIterator* _tmp7_;
#line 81 "../src/Widgets/ItemLabels.vala"
		_tmp0_ = self->priv->_item;
#line 81 "../src/Widgets/ItemLabels.vala"
		_tmp1_ = objects_item_get_labels (_tmp0_);
#line 81 "../src/Widgets/ItemLabels.vala"
		_tmp2_ = _tmp1_;
#line 81 "../src/Widgets/ItemLabels.vala"
		_tmp3_ = gee_abstract_map_get_values ((GeeAbstractMap*) _tmp2_);
#line 81 "../src/Widgets/ItemLabels.vala"
		_tmp4_ = _tmp3_;
#line 81 "../src/Widgets/ItemLabels.vala"
		_tmp5_ = _tmp4_;
#line 81 "../src/Widgets/ItemLabels.vala"
		_tmp6_ = gee_iterable_iterator ((GeeIterable*) _tmp5_);
#line 81 "../src/Widgets/ItemLabels.vala"
		_tmp7_ = _tmp6_;
#line 81 "../src/Widgets/ItemLabels.vala"
		_g_object_unref0 (_tmp5_);
#line 81 "../src/Widgets/ItemLabels.vala"
		_item_label_it = _tmp7_;
#line 81 "../src/Widgets/ItemLabels.vala"
		while (TRUE) {
#line 256 "ItemLabels.c"
			GeeIterator* _tmp8_;
			ObjectsItemLabel* item_label = NULL;
			GeeIterator* _tmp9_;
			gpointer _tmp10_;
			GtkFlowBox* _tmp11_;
			ObjectsItemLabel* _tmp12_;
			WidgetsItemLabelChild* _tmp13_;
			WidgetsItemLabelChild* _tmp14_;
			GtkFlowBox* _tmp15_;
#line 81 "../src/Widgets/ItemLabels.vala"
			_tmp8_ = _item_label_it;
#line 81 "../src/Widgets/ItemLabels.vala"
			if (!gee_iterator_next (_tmp8_)) {
#line 81 "../src/Widgets/ItemLabels.vala"
				break;
#line 272 "ItemLabels.c"
			}
#line 81 "../src/Widgets/ItemLabels.vala"
			_tmp9_ = _item_label_it;
#line 81 "../src/Widgets/ItemLabels.vala"
			_tmp10_ = gee_iterator_get (_tmp9_);
#line 81 "../src/Widgets/ItemLabels.vala"
			item_label = (ObjectsItemLabel*) _tmp10_;
#line 82 "../src/Widgets/ItemLabels.vala"
			_tmp11_ = self->priv->flowbox;
#line 82 "../src/Widgets/ItemLabels.vala"
			_tmp12_ = item_label;
#line 82 "../src/Widgets/ItemLabels.vala"
			_tmp13_ = widgets_item_label_child_new (_tmp12_);
#line 82 "../src/Widgets/ItemLabels.vala"
			g_object_ref_sink (_tmp13_);
#line 82 "../src/Widgets/ItemLabels.vala"
			_tmp14_ = _tmp13_;
#line 82 "../src/Widgets/ItemLabels.vala"
			gtk_container_add ((GtkContainer*) _tmp11_, (GtkWidget*) _tmp14_);
#line 82 "../src/Widgets/ItemLabels.vala"
			_g_object_unref0 (_tmp14_);
#line 83 "../src/Widgets/ItemLabels.vala"
			_tmp15_ = self->priv->flowbox;
#line 83 "../src/Widgets/ItemLabels.vala"
			gtk_widget_show_all ((GtkWidget*) _tmp15_);
#line 81 "../src/Widgets/ItemLabels.vala"
			_g_object_unref0 (item_label);
#line 300 "ItemLabels.c"
		}
#line 81 "../src/Widgets/ItemLabels.vala"
		_g_object_unref0 (_item_label_it);
#line 304 "ItemLabels.c"
	}
}

void
widgets_item_labels_update_labels (WidgetsItemLabels* self)
{
	GtkFlowBox* _tmp0_;
	GList* _tmp1_;
#line 87 "../src/Widgets/ItemLabels.vala"
	g_return_if_fail (self != NULL);
#line 88 "../src/Widgets/ItemLabels.vala"
	_tmp0_ = self->priv->flowbox;
#line 88 "../src/Widgets/ItemLabels.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 319 "ItemLabels.c"
	{
		GList* child_collection = NULL;
		GList* child_it = NULL;
#line 88 "../src/Widgets/ItemLabels.vala"
		child_collection = _tmp1_;
#line 88 "../src/Widgets/ItemLabels.vala"
		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
#line 327 "ItemLabels.c"
			GtkWidget* child = NULL;
#line 88 "../src/Widgets/ItemLabels.vala"
			child = (GtkWidget*) child_it->data;
#line 331 "ItemLabels.c"
			{
				GtkWidget* _tmp2_;
#line 89 "../src/Widgets/ItemLabels.vala"
				_tmp2_ = child;
#line 89 "../src/Widgets/ItemLabels.vala"
				gtk_widget_destroy (_tmp2_);
#line 338 "ItemLabels.c"
			}
		}
#line 88 "../src/Widgets/ItemLabels.vala"
		(child_collection == NULL) ? NULL : (child_collection = (g_list_free (child_collection), NULL));
#line 343 "ItemLabels.c"
	}
#line 92 "../src/Widgets/ItemLabels.vala"
	widgets_item_labels_add_labels (self);
#line 347 "ItemLabels.c"
}

ObjectsItem*
widgets_item_labels_get_item (WidgetsItemLabels* self)
{
	ObjectsItem* result;
	ObjectsItem* _tmp0_;
#line 2 "../src/Widgets/ItemLabels.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Widgets/ItemLabels.vala"
	_tmp0_ = self->priv->_item;
#line 2 "../src/Widgets/ItemLabels.vala"
	result = _tmp0_;
#line 2 "../src/Widgets/ItemLabels.vala"
	return result;
#line 363 "ItemLabels.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 2 "../src/Widgets/ItemLabels.vala"
	return self ? g_object_ref (self) : NULL;
#line 371 "ItemLabels.c"
}

static void
widgets_item_labels_set_item (WidgetsItemLabels* self,
                              ObjectsItem* value)
{
	ObjectsItem* old_value;
#line 2 "../src/Widgets/ItemLabels.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Widgets/ItemLabels.vala"
	old_value = widgets_item_labels_get_item (self);
#line 2 "../src/Widgets/ItemLabels.vala"
	if (old_value != value) {
#line 385 "ItemLabels.c"
		ObjectsItem* _tmp0_;
#line 2 "../src/Widgets/ItemLabels.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 2 "../src/Widgets/ItemLabels.vala"
		_g_object_unref0 (self->priv->_item);
#line 2 "../src/Widgets/ItemLabels.vala"
		self->priv->_item = _tmp0_;
#line 2 "../src/Widgets/ItemLabels.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_item_labels_properties[WIDGETS_ITEM_LABELS_ITEM_PROPERTY]);
#line 395 "ItemLabels.c"
	}
}

static gboolean
widgets_item_labels_get_has_items (WidgetsItemLabels* self)
{
	gboolean result;
	GtkFlowBox* _tmp0_;
	GList* _tmp1_;
	GList* _tmp2_;
	gboolean _tmp3_;
#line 11 "../src/Widgets/ItemLabels.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 12 "../src/Widgets/ItemLabels.vala"
	_tmp0_ = self->priv->flowbox;
#line 12 "../src/Widgets/ItemLabels.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 12 "../src/Widgets/ItemLabels.vala"
	_tmp2_ = _tmp1_;
#line 12 "../src/Widgets/ItemLabels.vala"
	_tmp3_ = g_list_length (_tmp2_) > ((guint) 0);
#line 12 "../src/Widgets/ItemLabels.vala"
	(_tmp2_ == NULL) ? NULL : (_tmp2_ = (g_list_free (_tmp2_), NULL));
#line 12 "../src/Widgets/ItemLabels.vala"
	result = _tmp3_;
#line 12 "../src/Widgets/ItemLabels.vala"
	return result;
#line 423 "ItemLabels.c"
}

static gboolean
_widgets_item_labels___lambda60_ (WidgetsItemLabels* self)
{
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	gboolean result = FALSE;
#line 43 "../src/Widgets/ItemLabels.vala"
	_tmp0_ = self->priv->main_revealer;
#line 43 "../src/Widgets/ItemLabels.vala"
	_tmp1_ = widgets_item_labels_get_has_items (self);
#line 43 "../src/Widgets/ItemLabels.vala"
	_tmp2_ = _tmp1_;
#line 43 "../src/Widgets/ItemLabels.vala"
	gtk_revealer_set_reveal_child (_tmp0_, _tmp2_);
#line 44 "../src/Widgets/ItemLabels.vala"
	result = G_SOURCE_REMOVE;
#line 44 "../src/Widgets/ItemLabels.vala"
	return result;
#line 445 "ItemLabels.c"
}

static gboolean
__widgets_item_labels___lambda60__gsource_func (gpointer self)
{
	gboolean result;
	result = _widgets_item_labels___lambda60_ ((WidgetsItemLabels*) self);
#line 42 "../src/Widgets/ItemLabels.vala"
	return result;
#line 455 "ItemLabels.c"
}

static void
___lambda69_ (WidgetsItemLabels* self,
              GeeHashMap* labels)
{
#line 51 "../src/Widgets/ItemLabels.vala"
	g_return_if_fail (labels != NULL);
#line 52 "../src/Widgets/ItemLabels.vala"
	g_signal_emit (self, widgets_item_labels_signals[WIDGETS_ITEM_LABELS_LABELS_CHANGED_SIGNAL], 0, labels);
#line 466 "ItemLabels.c"
}

static void
____lambda69__dialogs_label_picker_label_picker_labels_changed (DialogsLabelPickerLabelPicker* _sender,
                                                                GeeHashMap* labels_map,
                                                                gpointer self)
{
#line 51 "../src/Widgets/ItemLabels.vala"
	___lambda69_ ((WidgetsItemLabels*) self, labels_map);
#line 476 "ItemLabels.c"
}

static void
___lambda70_ (WidgetsItemLabels* self)
{
#line 59 "../src/Widgets/ItemLabels.vala"
	g_signal_emit (self, widgets_item_labels_signals[WIDGETS_ITEM_LABELS_DIALOG_OPEN_SIGNAL], 0, FALSE);
#line 484 "ItemLabels.c"
}

static void
____lambda70__gtk_widget_destroy (GtkWidget* _sender,
                                  gpointer self)
{
#line 58 "../src/Widgets/ItemLabels.vala"
	___lambda70_ ((WidgetsItemLabels*) self);
#line 493 "ItemLabels.c"
}

static gboolean
_widgets_item_labels___lambda61_ (WidgetsItemLabels* self,
                                  GtkWidget* sender,
                                  GdkEventButton* evt)
{
	gboolean _tmp0_ = FALSE;
	GdkEventType _tmp1_;
	gboolean result = FALSE;
#line 47 "../src/Widgets/ItemLabels.vala"
	g_return_val_if_fail (sender != NULL, FALSE);
#line 47 "../src/Widgets/ItemLabels.vala"
	g_return_val_if_fail (evt != NULL, FALSE);
#line 48 "../src/Widgets/ItemLabels.vala"
	_tmp1_ = evt->type;
#line 48 "../src/Widgets/ItemLabels.vala"
	if (_tmp1_ == GDK_BUTTON_PRESS) {
#line 48 "../src/Widgets/ItemLabels.vala"
		_tmp0_ = evt->button == ((guint) 1);
#line 514 "ItemLabels.c"
	} else {
#line 48 "../src/Widgets/ItemLabels.vala"
		_tmp0_ = FALSE;
#line 518 "ItemLabels.c"
	}
#line 48 "../src/Widgets/ItemLabels.vala"
	if (_tmp0_) {
#line 522 "ItemLabels.c"
		DialogsLabelPickerLabelPicker* dialog = NULL;
		ObjectsItem* _tmp2_;
		DialogsLabelPickerLabelPicker* _tmp3_;
		DialogsLabelPickerLabelPicker* _tmp4_;
		DialogsLabelPickerLabelPicker* _tmp5_;
		DialogsLabelPickerLabelPicker* _tmp6_;
#line 49 "../src/Widgets/ItemLabels.vala"
		_tmp2_ = self->priv->_item;
#line 49 "../src/Widgets/ItemLabels.vala"
		_tmp3_ = dialogs_label_picker_label_picker_new (_tmp2_);
#line 49 "../src/Widgets/ItemLabels.vala"
		g_object_ref_sink (_tmp3_);
#line 49 "../src/Widgets/ItemLabels.vala"
		dialog = _tmp3_;
#line 51 "../src/Widgets/ItemLabels.vala"
		_tmp4_ = dialog;
#line 51 "../src/Widgets/ItemLabels.vala"
		g_signal_connect_object (_tmp4_, "labels-changed", (GCallback) ____lambda69__dialogs_label_picker_label_picker_labels_changed, self, 0);
#line 55 "../src/Widgets/ItemLabels.vala"
		g_signal_emit (self, widgets_item_labels_signals[WIDGETS_ITEM_LABELS_DIALOG_OPEN_SIGNAL], 0, TRUE);
#line 56 "../src/Widgets/ItemLabels.vala"
		_tmp5_ = dialog;
#line 56 "../src/Widgets/ItemLabels.vala"
		dialogs_label_picker_label_picker_popup (_tmp5_);
#line 58 "../src/Widgets/ItemLabels.vala"
		_tmp6_ = dialog;
#line 58 "../src/Widgets/ItemLabels.vala"
		g_signal_connect_object ((GtkWidget*) _tmp6_, "destroy", (GCallback) ____lambda70__gtk_widget_destroy, self, 0);
#line 48 "../src/Widgets/ItemLabels.vala"
		_g_object_unref0 (dialog);
#line 553 "ItemLabels.c"
	}
#line 63 "../src/Widgets/ItemLabels.vala"
	result = GDK_EVENT_PROPAGATE;
#line 63 "../src/Widgets/ItemLabels.vala"
	return result;
#line 559 "ItemLabels.c"
}

static gboolean
__widgets_item_labels___lambda61__gtk_widget_button_press_event (GtkWidget* _sender,
                                                                 GdkEventButton* event,
                                                                 gpointer self)
{
	gboolean result;
	result = _widgets_item_labels___lambda61_ ((WidgetsItemLabels*) self, _sender, event);
#line 47 "../src/Widgets/ItemLabels.vala"
	return result;
#line 571 "ItemLabels.c"
}

static void
_widgets_item_labels___lambda71_ (WidgetsItemLabels* self,
                                  ObjectsItemLabel* item_label)
{
	GtkFlowBox* _tmp0_;
	WidgetsItemLabelChild* _tmp1_;
	WidgetsItemLabelChild* _tmp2_;
	GtkFlowBox* _tmp3_;
#line 66 "../src/Widgets/ItemLabels.vala"
	g_return_if_fail (item_label != NULL);
#line 67 "../src/Widgets/ItemLabels.vala"
	_tmp0_ = self->priv->flowbox;
#line 67 "../src/Widgets/ItemLabels.vala"
	_tmp1_ = widgets_item_label_child_new (item_label);
#line 67 "../src/Widgets/ItemLabels.vala"
	g_object_ref_sink (_tmp1_);
#line 67 "../src/Widgets/ItemLabels.vala"
	_tmp2_ = _tmp1_;
#line 67 "../src/Widgets/ItemLabels.vala"
	gtk_container_add ((GtkContainer*) _tmp0_, (GtkWidget*) _tmp2_);
#line 67 "../src/Widgets/ItemLabels.vala"
	_g_object_unref0 (_tmp2_);
#line 68 "../src/Widgets/ItemLabels.vala"
	_tmp3_ = self->priv->flowbox;
#line 68 "../src/Widgets/ItemLabels.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp3_);
#line 600 "ItemLabels.c"
}

static void
__widgets_item_labels___lambda71__objects_item_item_label_added (ObjectsItem* _sender,
                                                                 ObjectsItemLabel* item_label,
                                                                 gpointer self)
{
#line 66 "../src/Widgets/ItemLabels.vala"
	_widgets_item_labels___lambda71_ ((WidgetsItemLabels*) self, item_label);
#line 610 "ItemLabels.c"
}

static void
_widgets_item_labels___lambda72_ (WidgetsItemLabels* self)
{
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 72 "../src/Widgets/ItemLabels.vala"
	_tmp0_ = self->priv->main_revealer;
#line 72 "../src/Widgets/ItemLabels.vala"
	_tmp1_ = widgets_item_labels_get_has_items (self);
#line 72 "../src/Widgets/ItemLabels.vala"
	_tmp2_ = _tmp1_;
#line 72 "../src/Widgets/ItemLabels.vala"
	gtk_revealer_set_reveal_child (_tmp0_, _tmp2_);
#line 627 "ItemLabels.c"
}

static void
__widgets_item_labels___lambda72__gtk_container_add (GtkContainer* _sender,
                                                     GtkWidget* widget,
                                                     gpointer self)
{
#line 71 "../src/Widgets/ItemLabels.vala"
	_widgets_item_labels___lambda72_ ((WidgetsItemLabels*) self);
#line 637 "ItemLabels.c"
}

static void
_widgets_item_labels___lambda73_ (WidgetsItemLabels* self)
{
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 76 "../src/Widgets/ItemLabels.vala"
	_tmp0_ = self->priv->main_revealer;
#line 76 "../src/Widgets/ItemLabels.vala"
	_tmp1_ = widgets_item_labels_get_has_items (self);
#line 76 "../src/Widgets/ItemLabels.vala"
	_tmp2_ = _tmp1_;
#line 76 "../src/Widgets/ItemLabels.vala"
	gtk_revealer_set_reveal_child (_tmp0_, _tmp2_);
#line 654 "ItemLabels.c"
}

static void
__widgets_item_labels___lambda73__gtk_container_remove (GtkContainer* _sender,
                                                        GtkWidget* widget,
                                                        gpointer self)
{
#line 75 "../src/Widgets/ItemLabels.vala"
	_widgets_item_labels___lambda73_ ((WidgetsItemLabels*) self);
#line 664 "ItemLabels.c"
}

static GObject *
widgets_item_labels_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsItemLabels * self;
	GtkFlowBox* _tmp0_ = NULL;
	GtkRevealer* _tmp1_ = NULL;
	GtkRevealer* _tmp2_;
	GtkFlowBox* _tmp3_;
	GtkRevealer* _tmp4_;
	GtkRevealer* _tmp5_;
	guint _tmp6_;
	guint _tmp7_;
	ObjectsItem* _tmp8_;
	GtkFlowBox* _tmp9_;
	GtkFlowBox* _tmp10_;
#line 22 "../src/Widgets/ItemLabels.vala"
	parent_class = G_OBJECT_CLASS (widgets_item_labels_parent_class);
#line 22 "../src/Widgets/ItemLabels.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 22 "../src/Widgets/ItemLabels.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_ITEM_LABELS, WidgetsItemLabels);
#line 23 "../src/Widgets/ItemLabels.vala"
	_tmp0_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 23 "../src/Widgets/ItemLabels.vala"
	gtk_flow_box_set_column_spacing (_tmp0_, (guint) 6);
#line 23 "../src/Widgets/ItemLabels.vala"
	gtk_flow_box_set_row_spacing (_tmp0_, (guint) 6);
#line 23 "../src/Widgets/ItemLabels.vala"
	gtk_flow_box_set_homogeneous (_tmp0_, FALSE);
#line 23 "../src/Widgets/ItemLabels.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp0_, TRUE);
#line 23 "../src/Widgets/ItemLabels.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp0_, GTK_ALIGN_START);
#line 23 "../src/Widgets/ItemLabels.vala"
	gtk_flow_box_set_min_children_per_line (_tmp0_, (guint) 3);
#line 23 "../src/Widgets/ItemLabels.vala"
	gtk_flow_box_set_max_children_per_line (_tmp0_, (guint) 20);
#line 23 "../src/Widgets/ItemLabels.vala"
	g_object_ref_sink (_tmp0_);
#line 23 "../src/Widgets/ItemLabels.vala"
	_g_object_unref0 (self->priv->flowbox);
#line 23 "../src/Widgets/ItemLabels.vala"
	self->priv->flowbox = _tmp0_;
#line 33 "../src/Widgets/ItemLabels.vala"
	_tmp1_ = (GtkRevealer*) gtk_revealer_new ();
#line 33 "../src/Widgets/ItemLabels.vala"
	gtk_revealer_set_transition_type (_tmp1_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 33 "../src/Widgets/ItemLabels.vala"
	g_object_ref_sink (_tmp1_);
#line 33 "../src/Widgets/ItemLabels.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 33 "../src/Widgets/ItemLabels.vala"
	self->priv->main_revealer = _tmp1_;
#line 36 "../src/Widgets/ItemLabels.vala"
	_tmp2_ = self->priv->main_revealer;
#line 36 "../src/Widgets/ItemLabels.vala"
	_tmp3_ = self->priv->flowbox;
#line 36 "../src/Widgets/ItemLabels.vala"
	gtk_container_add ((GtkContainer*) _tmp2_, (GtkWidget*) _tmp3_);
#line 38 "../src/Widgets/ItemLabels.vala"
	_tmp4_ = self->priv->main_revealer;
#line 38 "../src/Widgets/ItemLabels.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp4_);
#line 40 "../src/Widgets/ItemLabels.vala"
	widgets_item_labels_add_labels (self);
#line 42 "../src/Widgets/ItemLabels.vala"
	_tmp5_ = self->priv->main_revealer;
#line 42 "../src/Widgets/ItemLabels.vala"
	_tmp6_ = gtk_revealer_get_transition_duration (_tmp5_);
#line 42 "../src/Widgets/ItemLabels.vala"
	_tmp7_ = _tmp6_;
#line 42 "../src/Widgets/ItemLabels.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp7_, __widgets_item_labels___lambda60__gsource_func, g_object_ref (self), g_object_unref);
#line 47 "../src/Widgets/ItemLabels.vala"
	g_signal_connect_object ((GtkWidget*) self, "button-press-event", (GCallback) __widgets_item_labels___lambda61__gtk_widget_button_press_event, self, 0);
#line 66 "../src/Widgets/ItemLabels.vala"
	_tmp8_ = self->priv->_item;
#line 66 "../src/Widgets/ItemLabels.vala"
	g_signal_connect_object (_tmp8_, "item-label-added", (GCallback) __widgets_item_labels___lambda71__objects_item_item_label_added, self, 0);
#line 71 "../src/Widgets/ItemLabels.vala"
	_tmp9_ = self->priv->flowbox;
#line 71 "../src/Widgets/ItemLabels.vala"
	g_signal_connect_object ((GtkContainer*) _tmp9_, "add", (GCallback) __widgets_item_labels___lambda72__gtk_container_add, self, 0);
#line 75 "../src/Widgets/ItemLabels.vala"
	_tmp10_ = self->priv->flowbox;
#line 75 "../src/Widgets/ItemLabels.vala"
	g_signal_connect_object ((GtkContainer*) _tmp10_, "remove", (GCallback) __widgets_item_labels___lambda73__gtk_container_remove, self, 0);
#line 22 "../src/Widgets/ItemLabels.vala"
	return obj;
#line 760 "ItemLabels.c"
}

static void
widgets_item_labels_class_init (WidgetsItemLabelsClass * klass,
                                gpointer klass_data)
{
#line 1 "../src/Widgets/ItemLabels.vala"
	widgets_item_labels_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Widgets/ItemLabels.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsItemLabels_private_offset);
#line 1 "../src/Widgets/ItemLabels.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_item_labels_get_property;
#line 1 "../src/Widgets/ItemLabels.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_item_labels_set_property;
#line 1 "../src/Widgets/ItemLabels.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_item_labels_constructor;
#line 1 "../src/Widgets/ItemLabels.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_item_labels_finalize;
#line 1 "../src/Widgets/ItemLabels.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ITEM_LABELS_ITEM_PROPERTY, widgets_item_labels_properties[WIDGETS_ITEM_LABELS_ITEM_PROPERTY] = g_param_spec_object ("item", "item", "item", OBJECTS_TYPE_ITEM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Widgets/ItemLabels.vala"
	widgets_item_labels_signals[WIDGETS_ITEM_LABELS_LABELS_CHANGED_SIGNAL] = g_signal_new ("labels-changed", WIDGETS_TYPE_ITEM_LABELS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, GEE_TYPE_HASH_MAP);
#line 1 "../src/Widgets/ItemLabels.vala"
	widgets_item_labels_signals[WIDGETS_ITEM_LABELS_DIALOG_OPEN_SIGNAL] = g_signal_new ("dialog-open", WIDGETS_TYPE_ITEM_LABELS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOOLEAN, G_TYPE_NONE, 1, G_TYPE_BOOLEAN);
#line 785 "ItemLabels.c"
}

static void
widgets_item_labels_instance_init (WidgetsItemLabels * self,
                                   gpointer klass)
{
#line 1 "../src/Widgets/ItemLabels.vala"
	self->priv = widgets_item_labels_get_instance_private (self);
#line 794 "ItemLabels.c"
}

static void
widgets_item_labels_finalize (GObject * obj)
{
	WidgetsItemLabels * self;
#line 1 "../src/Widgets/ItemLabels.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_ITEM_LABELS, WidgetsItemLabels);
#line 2 "../src/Widgets/ItemLabels.vala"
	_g_object_unref0 (self->priv->_item);
#line 4 "../src/Widgets/ItemLabels.vala"
	_g_object_unref0 (self->priv->flowbox);
#line 5 "../src/Widgets/ItemLabels.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 1 "../src/Widgets/ItemLabels.vala"
	G_OBJECT_CLASS (widgets_item_labels_parent_class)->finalize (obj);
#line 811 "ItemLabels.c"
}

static GType
widgets_item_labels_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsItemLabelsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_item_labels_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsItemLabels), 0, (GInstanceInitFunc) widgets_item_labels_instance_init, NULL };
	GType widgets_item_labels_type_id;
	widgets_item_labels_type_id = g_type_register_static (gtk_event_box_get_type (), "WidgetsItemLabels", &g_define_type_info, 0);
	WidgetsItemLabels_private_offset = g_type_add_instance_private (widgets_item_labels_type_id, sizeof (WidgetsItemLabelsPrivate));
	return widgets_item_labels_type_id;
}

GType
widgets_item_labels_get_type (void)
{
	static volatile gsize widgets_item_labels_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_item_labels_type_id__volatile)) {
		GType widgets_item_labels_type_id;
		widgets_item_labels_type_id = widgets_item_labels_get_type_once ();
		g_once_init_leave (&widgets_item_labels_type_id__volatile, widgets_item_labels_type_id);
	}
	return widgets_item_labels_type_id__volatile;
}

static void
_vala_widgets_item_labels_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	WidgetsItemLabels * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_ITEM_LABELS, WidgetsItemLabels);
#line 1 "../src/Widgets/ItemLabels.vala"
	switch (property_id) {
#line 1 "../src/Widgets/ItemLabels.vala"
		case WIDGETS_ITEM_LABELS_ITEM_PROPERTY:
#line 1 "../src/Widgets/ItemLabels.vala"
		g_value_set_object (value, widgets_item_labels_get_item (self));
#line 1 "../src/Widgets/ItemLabels.vala"
		break;
#line 852 "ItemLabels.c"
		default:
#line 1 "../src/Widgets/ItemLabels.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/ItemLabels.vala"
		break;
#line 858 "ItemLabels.c"
	}
}

static void
_vala_widgets_item_labels_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	WidgetsItemLabels * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_ITEM_LABELS, WidgetsItemLabels);
#line 1 "../src/Widgets/ItemLabels.vala"
	switch (property_id) {
#line 1 "../src/Widgets/ItemLabels.vala"
		case WIDGETS_ITEM_LABELS_ITEM_PROPERTY:
#line 1 "../src/Widgets/ItemLabels.vala"
		widgets_item_labels_set_item (self, g_value_get_object (value));
#line 1 "../src/Widgets/ItemLabels.vala"
		break;
#line 878 "ItemLabels.c"
		default:
#line 1 "../src/Widgets/ItemLabels.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/ItemLabels.vala"
		break;
#line 884 "ItemLabels.c"
	}
}

