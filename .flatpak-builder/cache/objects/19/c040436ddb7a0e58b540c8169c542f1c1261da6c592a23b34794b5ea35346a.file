/* Date.c generated by valac 0.50.10, the Vala compiler
 * generated from Date.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gio/gio.h>
#include <glib/gi18n-lib.h>

#define VIEWS_TYPE_DATE (views_date_get_type ())
#define VIEWS_DATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_DATE, ViewsDate))
#define VIEWS_DATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_DATE, ViewsDateClass))
#define VIEWS_IS_DATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_DATE))
#define VIEWS_IS_DATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_DATE))
#define VIEWS_DATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_DATE, ViewsDateClass))

typedef struct _ViewsDate ViewsDate;
typedef struct _ViewsDateClass ViewsDateClass;
typedef struct _ViewsDatePrivate ViewsDatePrivate;

#define LAYOUTS_TYPE_ITEM_ROW (layouts_item_row_get_type ())
#define LAYOUTS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRow))
#define LAYOUTS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRowClass))
#define LAYOUTS_IS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_ITEM_ROW))
#define LAYOUTS_IS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_ITEM_ROW))
#define LAYOUTS_ITEM_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRowClass))

typedef struct _LayoutsItemRow LayoutsItemRow;
typedef struct _LayoutsItemRowClass LayoutsItemRowClass;
enum  {
	VIEWS_DATE_0_PROPERTY,
	VIEWS_DATE_DATE_PROPERTY,
	VIEWS_DATE_IS_TODAY_VIEW_PROPERTY,
	VIEWS_DATE_NUM_PROPERTIES
};
static GParamSpec* views_date_properties[VIEWS_DATE_NUM_PROPERTIES];
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;
typedef struct _Block27Data Block27Data;

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;

#define OBJECTS_TYPE_DUE_DATE (objects_due_date_get_type ())
#define OBJECTS_DUE_DATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_DUE_DATE, ObjectsDueDate))
#define OBJECTS_DUE_DATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_DUE_DATE, ObjectsDueDateClass))
#define OBJECTS_IS_DUE_DATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_DUE_DATE))
#define OBJECTS_IS_DUE_DATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_DUE_DATE))
#define OBJECTS_DUE_DATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_DUE_DATE, ObjectsDueDateClass))

typedef struct _ObjectsDueDate ObjectsDueDate;
typedef struct _ObjectsDueDateClass ObjectsDueDateClass;

#define OBJECTS_TYPE_SECTION (objects_section_get_type ())
#define OBJECTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_SECTION, ObjectsSection))
#define OBJECTS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_SECTION, ObjectsSectionClass))
#define OBJECTS_IS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_SECTION))
#define OBJECTS_IS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_SECTION))
#define OBJECTS_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_SECTION, ObjectsSectionClass))

typedef struct _ObjectsSection ObjectsSection;
typedef struct _ObjectsSectionClass ObjectsSectionClass;

struct _ViewsDate {
	GtkEventBox parent_instance;
	ViewsDatePrivate * priv;
	GeeHashMap* overdue_items;
	GeeHashMap* items;
};

struct _ViewsDateClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsDatePrivate {
	GDateTime* _date;
	gboolean _is_today_view;
	GtkListBox* overdue_listbox;
	GtkListBox* listbox;
	GtkRevealer* main_revealer;
	GtkRevealer* overdue_revealer;
	GtkRevealer* today_label_revealer;
};

struct _Block27Data {
	int _ref_count_;
	ViewsDate* self;
	LayoutsItemRow* row;
};

static gint ViewsDate_private_offset;
static gpointer views_date_parent_class = NULL;
extern ServicesDatabase* planner_database;
extern ServicesEventBus* planner_event_bus;
extern GSettings* planner_settings;

GType views_date_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsDate, g_object_unref)
GType layouts_item_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsItemRow, g_object_unref)
ViewsDate* views_date_new (gboolean is_today_view);
ViewsDate* views_date_construct (GType object_type,
                                 gboolean is_today_view);
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
static void views_date_valid_add_item (ViewsDate* self,
                                ObjectsItem* item,
                                gboolean insert);
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
gboolean services_database_valid_item_by_date (ServicesDatabase* self,
                                               ObjectsItem* item,
                                               GDateTime* date,
                                               gboolean checked);
GDateTime* views_date_get_date (ViewsDate* self);
static void views_date_add_item (ViewsDate* self,
                          ObjectsItem* item);
gboolean views_date_get_is_today_view (ViewsDate* self);
gboolean services_database_valid_item_by_overdue (ServicesDatabase* self,
                                                  ObjectsItem* item,
                                                  GDateTime* date,
                                                  gboolean checked);
static void views_date_add_overdue_item (ViewsDate* self,
                                  ObjectsItem* item);
static void views_date_valid_delete_item (ViewsDate* self,
                                   ObjectsItem* item);
void layouts_item_row_hide_destroy (LayoutsItemRow* self);
static void views_date_valid_update_item (ViewsDate* self,
                                   ObjectsItem* item);
gboolean objects_item_get_has_due (ObjectsItem* self);
static void views_date_add_items (ViewsDate* self,
                           GDateTime* date);
GeeArrayList* services_database_get_items_by_date (ServicesDatabase* self,
                                                   GDateTime* date,
                                                   gboolean checked);
static void views_date_add_today_items (ViewsDate* self);
GeeArrayList* services_database_get_items_by_overdeue_view (ServicesDatabase* self,
                                                            gboolean checked);
static void views_date_update_headers (ViewsDate* self);
static gboolean views_date_get_overdue_has_children (ViewsDate* self);
static gboolean views_date_get_today_has_children (ViewsDate* self);
LayoutsItemRow* layouts_item_row_new (ObjectsItem* item);
LayoutsItemRow* layouts_item_row_construct (GType object_type,
                                            ObjectsItem* item);
static GtkWidget* views_date_get_placeholder (ViewsDate* self);
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
void widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                            const gchar* icon_name);
void views_date_prepare_new_item (ViewsDate* self);
static Block27Data* block27_data_ref (Block27Data* _data27_);
static void block27_data_unref (void * _userdata_);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
ObjectsProject* services_database_get_project (ServicesDatabase* self,
                                               gint64 id);
LayoutsItemRow* layouts_item_row_new_for_project (ObjectsProject* project);
LayoutsItemRow* layouts_item_row_construct_for_project (GType object_type,
                                                        ObjectsProject* project);
void layouts_item_row_update_due (LayoutsItemRow* self,
                                  GDateTime* date);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
GDateTime* util_get_format_date (Util* self,
                                 GDateTime* date);
static void __lambda264_ (Block27Data* _data27_);
static void views_date_item_added (ViewsDate* self,
                            LayoutsItemRow* row);
static void ___lambda264__layouts_item_row_item_added (LayoutsItemRow* _sender,
                                                gpointer self);
ObjectsItem* layouts_item_row_get_item (LayoutsItemRow* self);
gboolean util_is_same_day (Util* self,
                           GDateTime* day1,
                           GDateTime* day2);
GType objects_due_date_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsDueDate, g_object_unref)
ObjectsDueDate* objects_item_get_due (ObjectsItem* self);
GDateTime* objects_due_date_get_datetime (ObjectsDueDate* self);
static void views_date_valid_add_itemrow (ViewsDate* self,
                                   LayoutsItemRow* row);
void layouts_item_row_update_inserted_item (LayoutsItemRow* self);
gint64 objects_item_get_section_id (ObjectsItem* self);
#define CONSTANTS_INACTIVE 0
GType objects_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsSection, g_object_unref)
ObjectsSection* services_database_get_section (ServicesDatabase* self,
                                               gint64 id);
ObjectsItem* objects_section_add_item_if_not_exists (ObjectsSection* self,
                                                     ObjectsItem* new_item,
                                                     gboolean insert);
gint64 objects_item_get_project_id (ObjectsItem* self);
ObjectsItem* objects_project_add_item_if_not_exists (ObjectsProject* self,
                                                     ObjectsItem* new_item,
                                                     gboolean insert);
void views_date_set_date (ViewsDate* self,
                          GDateTime* value);
static void views_date_set_is_today_view (ViewsDate* self,
                                   gboolean value);
static GObject * views_date_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties);
static gboolean _views_date___lambda265_ (ViewsDate* self);
static gboolean __views_date___lambda265__gsource_func (gpointer self);
static void _views_date___lambda266_ (ViewsDate* self);
static void __views_date___lambda266__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self);
static void _views_date_update_headers_gtk_container_add (GtkContainer* _sender,
                                                   GtkWidget* widget,
                                                   gpointer self);
static void _views_date_update_headers_gtk_container_remove (GtkContainer* _sender,
                                                      GtkWidget* widget,
                                                      gpointer self);
static void _views_date_valid_add_item_services_database_item_added (ServicesDatabase* _sender,
                                                              ObjectsItem* item,
                                                              gboolean insert,
                                                              gpointer self);
static void _views_date_valid_delete_item_services_database_item_deleted (ServicesDatabase* _sender,
                                                                   ObjectsItem* item,
                                                                   gpointer self);
static void _views_date_valid_update_item_services_database_item_updated (ServicesDatabase* _sender,
                                                                   ObjectsItem* item,
                                                                   gint64 update_id,
                                                                   gpointer self);
static void views_date_finalize (GObject * obj);
static GType views_date_get_type_once (void);
static void _vala_views_date_get_property (GObject * object,
                                    guint property_id,
                                    GValue * value,
                                    GParamSpec * pspec);
static void _vala_views_date_set_property (GObject * object,
                                    guint property_id,
                                    const GValue * value,
                                    GParamSpec * pspec);

static inline gpointer
views_date_get_instance_private (ViewsDate* self)
{
	return G_STRUCT_MEMBER_P (self, ViewsDate_private_offset);
}

ViewsDate*
views_date_construct (GType object_type,
                      gboolean is_today_view)
{
	ViewsDate * self = NULL;
#line 27 "../src/Views/Date.vala"
	self = (ViewsDate*) g_object_new (object_type, "is-today-view", is_today_view, NULL);
#line 26 "../src/Views/Date.vala"
	return self;
#line 332 "Date.c"
}

ViewsDate*
views_date_new (gboolean is_today_view)
{
#line 26 "../src/Views/Date.vala"
	return views_date_construct (VIEWS_TYPE_DATE, is_today_view);
#line 340 "Date.c"
}

static void
views_date_valid_add_item (ViewsDate* self,
                           ObjectsItem* item,
                           gboolean insert)
{
	gboolean _tmp0_ = FALSE;
	GeeHashMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	gboolean _tmp6_ = FALSE;
	gboolean _tmp7_ = FALSE;
	gboolean _tmp8_;
#line 143 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 143 "../src/Views/Date.vala"
	g_return_if_fail (item != NULL);
#line 144 "../src/Views/Date.vala"
	_tmp1_ = self->items;
#line 144 "../src/Views/Date.vala"
	_tmp2_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 144 "../src/Views/Date.vala"
	_tmp3_ = _tmp2_;
#line 144 "../src/Views/Date.vala"
	if (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp1_, _tmp3_)) {
#line 367 "Date.c"
		ServicesDatabase* _tmp4_;
		GDateTime* _tmp5_;
#line 145 "../src/Views/Date.vala"
		_tmp4_ = planner_database;
#line 145 "../src/Views/Date.vala"
		_tmp5_ = self->priv->_date;
#line 145 "../src/Views/Date.vala"
		_tmp0_ = services_database_valid_item_by_date (_tmp4_, item, _tmp5_, FALSE);
#line 376 "Date.c"
	} else {
#line 144 "../src/Views/Date.vala"
		_tmp0_ = FALSE;
#line 380 "Date.c"
	}
#line 144 "../src/Views/Date.vala"
	if (_tmp0_) {
#line 146 "../src/Views/Date.vala"
		views_date_add_item (self, item);
#line 386 "Date.c"
	}
#line 149 "../src/Views/Date.vala"
	_tmp8_ = self->priv->_is_today_view;
#line 149 "../src/Views/Date.vala"
	if (_tmp8_) {
#line 392 "Date.c"
		GeeHashMap* _tmp9_;
		const gchar* _tmp10_;
		const gchar* _tmp11_;
#line 149 "../src/Views/Date.vala"
		_tmp9_ = self->overdue_items;
#line 149 "../src/Views/Date.vala"
		_tmp10_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 149 "../src/Views/Date.vala"
		_tmp11_ = _tmp10_;
#line 149 "../src/Views/Date.vala"
		_tmp7_ = !gee_abstract_map_has_key ((GeeAbstractMap*) _tmp9_, _tmp11_);
#line 404 "Date.c"
	} else {
#line 149 "../src/Views/Date.vala"
		_tmp7_ = FALSE;
#line 408 "Date.c"
	}
#line 149 "../src/Views/Date.vala"
	if (_tmp7_) {
#line 412 "Date.c"
		ServicesDatabase* _tmp12_;
		GDateTime* _tmp13_;
#line 150 "../src/Views/Date.vala"
		_tmp12_ = planner_database;
#line 150 "../src/Views/Date.vala"
		_tmp13_ = self->priv->_date;
#line 150 "../src/Views/Date.vala"
		_tmp6_ = services_database_valid_item_by_overdue (_tmp12_, item, _tmp13_, FALSE);
#line 421 "Date.c"
	} else {
#line 149 "../src/Views/Date.vala"
		_tmp6_ = FALSE;
#line 425 "Date.c"
	}
#line 149 "../src/Views/Date.vala"
	if (_tmp6_) {
#line 151 "../src/Views/Date.vala"
		views_date_add_overdue_item (self, item);
#line 431 "Date.c"
	}
}

static void
views_date_valid_delete_item (ViewsDate* self,
                              ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	GeeHashMap* _tmp11_;
	const gchar* _tmp12_;
	const gchar* _tmp13_;
#line 155 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 155 "../src/Views/Date.vala"
	g_return_if_fail (item != NULL);
#line 156 "../src/Views/Date.vala"
	_tmp0_ = self->items;
#line 156 "../src/Views/Date.vala"
	_tmp1_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 156 "../src/Views/Date.vala"
	_tmp2_ = _tmp1_;
#line 156 "../src/Views/Date.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp0_, _tmp2_)) {
#line 457 "Date.c"
		GeeHashMap* _tmp3_;
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		gpointer _tmp6_;
		LayoutsItemRow* _tmp7_;
		GeeHashMap* _tmp8_;
		const gchar* _tmp9_;
		const gchar* _tmp10_;
#line 157 "../src/Views/Date.vala"
		_tmp3_ = self->items;
#line 157 "../src/Views/Date.vala"
		_tmp4_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 157 "../src/Views/Date.vala"
		_tmp5_ = _tmp4_;
#line 157 "../src/Views/Date.vala"
		_tmp6_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp3_, _tmp5_);
#line 157 "../src/Views/Date.vala"
		_tmp7_ = (LayoutsItemRow*) _tmp6_;
#line 157 "../src/Views/Date.vala"
		layouts_item_row_hide_destroy (_tmp7_);
#line 157 "../src/Views/Date.vala"
		_g_object_unref0 (_tmp7_);
#line 158 "../src/Views/Date.vala"
		_tmp8_ = self->items;
#line 158 "../src/Views/Date.vala"
		_tmp9_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 158 "../src/Views/Date.vala"
		_tmp10_ = _tmp9_;
#line 158 "../src/Views/Date.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp8_, _tmp10_, NULL);
#line 488 "Date.c"
	}
#line 161 "../src/Views/Date.vala"
	_tmp11_ = self->overdue_items;
#line 161 "../src/Views/Date.vala"
	_tmp12_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 161 "../src/Views/Date.vala"
	_tmp13_ = _tmp12_;
#line 161 "../src/Views/Date.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp11_, _tmp13_)) {
#line 498 "Date.c"
		GeeHashMap* _tmp14_;
		const gchar* _tmp15_;
		const gchar* _tmp16_;
		gpointer _tmp17_;
		LayoutsItemRow* _tmp18_;
		GeeHashMap* _tmp19_;
		const gchar* _tmp20_;
		const gchar* _tmp21_;
#line 162 "../src/Views/Date.vala"
		_tmp14_ = self->overdue_items;
#line 162 "../src/Views/Date.vala"
		_tmp15_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 162 "../src/Views/Date.vala"
		_tmp16_ = _tmp15_;
#line 162 "../src/Views/Date.vala"
		_tmp17_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp14_, _tmp16_);
#line 162 "../src/Views/Date.vala"
		_tmp18_ = (LayoutsItemRow*) _tmp17_;
#line 162 "../src/Views/Date.vala"
		layouts_item_row_hide_destroy (_tmp18_);
#line 162 "../src/Views/Date.vala"
		_g_object_unref0 (_tmp18_);
#line 163 "../src/Views/Date.vala"
		_tmp19_ = self->overdue_items;
#line 163 "../src/Views/Date.vala"
		_tmp20_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 163 "../src/Views/Date.vala"
		_tmp21_ = _tmp20_;
#line 163 "../src/Views/Date.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp19_, _tmp21_, NULL);
#line 529 "Date.c"
	}
}

static void
views_date_valid_update_item (ViewsDate* self,
                              ObjectsItem* item)
{
	gboolean _tmp0_ = FALSE;
	GeeHashMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	gboolean _tmp14_ = FALSE;
	GeeHashMap* _tmp15_;
	const gchar* _tmp16_;
	const gchar* _tmp17_;
	gboolean _tmp28_ = FALSE;
	GeeHashMap* _tmp29_;
	const gchar* _tmp30_;
	const gchar* _tmp31_;
	gboolean _tmp44_ = FALSE;
	GeeHashMap* _tmp45_;
	const gchar* _tmp46_;
	const gchar* _tmp47_;
	gboolean _tmp60_;
	gboolean _tmp61_;
#line 167 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 167 "../src/Views/Date.vala"
	g_return_if_fail (item != NULL);
#line 168 "../src/Views/Date.vala"
	_tmp1_ = self->items;
#line 168 "../src/Views/Date.vala"
	_tmp2_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 168 "../src/Views/Date.vala"
	_tmp3_ = _tmp2_;
#line 168 "../src/Views/Date.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp1_, _tmp3_)) {
#line 567 "Date.c"
		gboolean _tmp4_;
		gboolean _tmp5_;
#line 168 "../src/Views/Date.vala"
		_tmp4_ = objects_item_get_has_due (item);
#line 168 "../src/Views/Date.vala"
		_tmp5_ = _tmp4_;
#line 168 "../src/Views/Date.vala"
		_tmp0_ = !_tmp5_;
#line 576 "Date.c"
	} else {
#line 168 "../src/Views/Date.vala"
		_tmp0_ = FALSE;
#line 580 "Date.c"
	}
#line 168 "../src/Views/Date.vala"
	if (_tmp0_) {
#line 584 "Date.c"
		GeeHashMap* _tmp6_;
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		gpointer _tmp9_;
		LayoutsItemRow* _tmp10_;
		GeeHashMap* _tmp11_;
		const gchar* _tmp12_;
		const gchar* _tmp13_;
#line 169 "../src/Views/Date.vala"
		_tmp6_ = self->items;
#line 169 "../src/Views/Date.vala"
		_tmp7_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 169 "../src/Views/Date.vala"
		_tmp8_ = _tmp7_;
#line 169 "../src/Views/Date.vala"
		_tmp9_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp6_, _tmp8_);
#line 169 "../src/Views/Date.vala"
		_tmp10_ = (LayoutsItemRow*) _tmp9_;
#line 169 "../src/Views/Date.vala"
		layouts_item_row_hide_destroy (_tmp10_);
#line 169 "../src/Views/Date.vala"
		_g_object_unref0 (_tmp10_);
#line 170 "../src/Views/Date.vala"
		_tmp11_ = self->items;
#line 170 "../src/Views/Date.vala"
		_tmp12_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 170 "../src/Views/Date.vala"
		_tmp13_ = _tmp12_;
#line 170 "../src/Views/Date.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp11_, _tmp13_, NULL);
#line 615 "Date.c"
	}
#line 173 "../src/Views/Date.vala"
	_tmp15_ = self->overdue_items;
#line 173 "../src/Views/Date.vala"
	_tmp16_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 173 "../src/Views/Date.vala"
	_tmp17_ = _tmp16_;
#line 173 "../src/Views/Date.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp15_, _tmp17_)) {
#line 625 "Date.c"
		gboolean _tmp18_;
		gboolean _tmp19_;
#line 173 "../src/Views/Date.vala"
		_tmp18_ = objects_item_get_has_due (item);
#line 173 "../src/Views/Date.vala"
		_tmp19_ = _tmp18_;
#line 173 "../src/Views/Date.vala"
		_tmp14_ = !_tmp19_;
#line 634 "Date.c"
	} else {
#line 173 "../src/Views/Date.vala"
		_tmp14_ = FALSE;
#line 638 "Date.c"
	}
#line 173 "../src/Views/Date.vala"
	if (_tmp14_) {
#line 642 "Date.c"
		GeeHashMap* _tmp20_;
		const gchar* _tmp21_;
		const gchar* _tmp22_;
		gpointer _tmp23_;
		LayoutsItemRow* _tmp24_;
		GeeHashMap* _tmp25_;
		const gchar* _tmp26_;
		const gchar* _tmp27_;
#line 174 "../src/Views/Date.vala"
		_tmp20_ = self->overdue_items;
#line 174 "../src/Views/Date.vala"
		_tmp21_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 174 "../src/Views/Date.vala"
		_tmp22_ = _tmp21_;
#line 174 "../src/Views/Date.vala"
		_tmp23_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp20_, _tmp22_);
#line 174 "../src/Views/Date.vala"
		_tmp24_ = (LayoutsItemRow*) _tmp23_;
#line 174 "../src/Views/Date.vala"
		layouts_item_row_hide_destroy (_tmp24_);
#line 174 "../src/Views/Date.vala"
		_g_object_unref0 (_tmp24_);
#line 175 "../src/Views/Date.vala"
		_tmp25_ = self->overdue_items;
#line 175 "../src/Views/Date.vala"
		_tmp26_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 175 "../src/Views/Date.vala"
		_tmp27_ = _tmp26_;
#line 175 "../src/Views/Date.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp25_, _tmp27_, NULL);
#line 673 "Date.c"
	}
#line 178 "../src/Views/Date.vala"
	_tmp29_ = self->items;
#line 178 "../src/Views/Date.vala"
	_tmp30_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 178 "../src/Views/Date.vala"
	_tmp31_ = _tmp30_;
#line 178 "../src/Views/Date.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp29_, _tmp31_)) {
#line 683 "Date.c"
		gboolean _tmp32_;
		gboolean _tmp33_;
#line 178 "../src/Views/Date.vala"
		_tmp32_ = objects_item_get_has_due (item);
#line 178 "../src/Views/Date.vala"
		_tmp33_ = _tmp32_;
#line 178 "../src/Views/Date.vala"
		_tmp28_ = _tmp33_;
#line 692 "Date.c"
	} else {
#line 178 "../src/Views/Date.vala"
		_tmp28_ = FALSE;
#line 696 "Date.c"
	}
#line 178 "../src/Views/Date.vala"
	if (_tmp28_) {
#line 700 "Date.c"
		ServicesDatabase* _tmp34_;
		GDateTime* _tmp35_;
#line 179 "../src/Views/Date.vala"
		_tmp34_ = planner_database;
#line 179 "../src/Views/Date.vala"
		_tmp35_ = self->priv->_date;
#line 179 "../src/Views/Date.vala"
		if (!services_database_valid_item_by_date (_tmp34_, item, _tmp35_, FALSE)) {
#line 709 "Date.c"
			GeeHashMap* _tmp36_;
			const gchar* _tmp37_;
			const gchar* _tmp38_;
			gpointer _tmp39_;
			LayoutsItemRow* _tmp40_;
			GeeHashMap* _tmp41_;
			const gchar* _tmp42_;
			const gchar* _tmp43_;
#line 180 "../src/Views/Date.vala"
			_tmp36_ = self->items;
#line 180 "../src/Views/Date.vala"
			_tmp37_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 180 "../src/Views/Date.vala"
			_tmp38_ = _tmp37_;
#line 180 "../src/Views/Date.vala"
			_tmp39_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp36_, _tmp38_);
#line 180 "../src/Views/Date.vala"
			_tmp40_ = (LayoutsItemRow*) _tmp39_;
#line 180 "../src/Views/Date.vala"
			layouts_item_row_hide_destroy (_tmp40_);
#line 180 "../src/Views/Date.vala"
			_g_object_unref0 (_tmp40_);
#line 181 "../src/Views/Date.vala"
			_tmp41_ = self->items;
#line 181 "../src/Views/Date.vala"
			_tmp42_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 181 "../src/Views/Date.vala"
			_tmp43_ = _tmp42_;
#line 181 "../src/Views/Date.vala"
			gee_abstract_map_unset ((GeeAbstractMap*) _tmp41_, _tmp43_, NULL);
#line 740 "Date.c"
		}
	}
#line 185 "../src/Views/Date.vala"
	_tmp45_ = self->overdue_items;
#line 185 "../src/Views/Date.vala"
	_tmp46_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 185 "../src/Views/Date.vala"
	_tmp47_ = _tmp46_;
#line 185 "../src/Views/Date.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp45_, _tmp47_)) {
#line 751 "Date.c"
		gboolean _tmp48_;
		gboolean _tmp49_;
#line 185 "../src/Views/Date.vala"
		_tmp48_ = objects_item_get_has_due (item);
#line 185 "../src/Views/Date.vala"
		_tmp49_ = _tmp48_;
#line 185 "../src/Views/Date.vala"
		_tmp44_ = _tmp49_;
#line 760 "Date.c"
	} else {
#line 185 "../src/Views/Date.vala"
		_tmp44_ = FALSE;
#line 764 "Date.c"
	}
#line 185 "../src/Views/Date.vala"
	if (_tmp44_) {
#line 768 "Date.c"
		ServicesDatabase* _tmp50_;
		GDateTime* _tmp51_;
#line 186 "../src/Views/Date.vala"
		_tmp50_ = planner_database;
#line 186 "../src/Views/Date.vala"
		_tmp51_ = self->priv->_date;
#line 186 "../src/Views/Date.vala"
		if (!services_database_valid_item_by_overdue (_tmp50_, item, _tmp51_, FALSE)) {
#line 777 "Date.c"
			GeeHashMap* _tmp52_;
			const gchar* _tmp53_;
			const gchar* _tmp54_;
			gpointer _tmp55_;
			LayoutsItemRow* _tmp56_;
			GeeHashMap* _tmp57_;
			const gchar* _tmp58_;
			const gchar* _tmp59_;
#line 187 "../src/Views/Date.vala"
			_tmp52_ = self->overdue_items;
#line 187 "../src/Views/Date.vala"
			_tmp53_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 187 "../src/Views/Date.vala"
			_tmp54_ = _tmp53_;
#line 187 "../src/Views/Date.vala"
			_tmp55_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp52_, _tmp54_);
#line 187 "../src/Views/Date.vala"
			_tmp56_ = (LayoutsItemRow*) _tmp55_;
#line 187 "../src/Views/Date.vala"
			layouts_item_row_hide_destroy (_tmp56_);
#line 187 "../src/Views/Date.vala"
			_g_object_unref0 (_tmp56_);
#line 188 "../src/Views/Date.vala"
			_tmp57_ = self->overdue_items;
#line 188 "../src/Views/Date.vala"
			_tmp58_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 188 "../src/Views/Date.vala"
			_tmp59_ = _tmp58_;
#line 188 "../src/Views/Date.vala"
			gee_abstract_map_unset ((GeeAbstractMap*) _tmp57_, _tmp59_, NULL);
#line 808 "Date.c"
		}
	}
#line 192 "../src/Views/Date.vala"
	_tmp60_ = objects_item_get_has_due (item);
#line 192 "../src/Views/Date.vala"
	_tmp61_ = _tmp60_;
#line 192 "../src/Views/Date.vala"
	if (_tmp61_) {
#line 193 "../src/Views/Date.vala"
		views_date_valid_add_item (self, item, TRUE);
#line 819 "Date.c"
	}
}

static void
views_date_add_items (ViewsDate* self,
                      GDateTime* date)
{
	GeeHashMap* _tmp0_;
	GtkListBox* _tmp1_;
	GList* _tmp2_;
#line 197 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 197 "../src/Views/Date.vala"
	g_return_if_fail (date != NULL);
#line 198 "../src/Views/Date.vala"
	_tmp0_ = self->items;
#line 198 "../src/Views/Date.vala"
	gee_abstract_map_clear ((GeeAbstractMap*) _tmp0_);
#line 200 "../src/Views/Date.vala"
	_tmp1_ = self->priv->listbox;
#line 200 "../src/Views/Date.vala"
	_tmp2_ = gtk_container_get_children ((GtkContainer*) _tmp1_);
#line 842 "Date.c"
	{
		GList* child_collection = NULL;
		GList* child_it = NULL;
#line 200 "../src/Views/Date.vala"
		child_collection = _tmp2_;
#line 200 "../src/Views/Date.vala"
		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
#line 850 "Date.c"
			GtkWidget* child = NULL;
#line 200 "../src/Views/Date.vala"
			child = (GtkWidget*) child_it->data;
#line 854 "Date.c"
			{
				GtkWidget* _tmp3_;
#line 201 "../src/Views/Date.vala"
				_tmp3_ = child;
#line 201 "../src/Views/Date.vala"
				gtk_widget_destroy (_tmp3_);
#line 861 "Date.c"
			}
		}
#line 200 "../src/Views/Date.vala"
		(child_collection == NULL) ? NULL : (child_collection = (g_list_free (child_collection), NULL));
#line 866 "Date.c"
	}
	{
		GeeArrayList* _item_list = NULL;
		ServicesDatabase* _tmp4_;
		GeeArrayList* _tmp5_;
		gint _item_size = 0;
		GeeArrayList* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
		gint _item_index = 0;
#line 204 "../src/Views/Date.vala"
		_tmp4_ = planner_database;
#line 204 "../src/Views/Date.vala"
		_tmp5_ = services_database_get_items_by_date (_tmp4_, date, FALSE);
#line 204 "../src/Views/Date.vala"
		_item_list = _tmp5_;
#line 204 "../src/Views/Date.vala"
		_tmp6_ = _item_list;
#line 204 "../src/Views/Date.vala"
		_tmp7_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp6_);
#line 204 "../src/Views/Date.vala"
		_tmp8_ = _tmp7_;
#line 204 "../src/Views/Date.vala"
		_item_size = _tmp8_;
#line 204 "../src/Views/Date.vala"
		_item_index = -1;
#line 204 "../src/Views/Date.vala"
		while (TRUE) {
#line 895 "Date.c"
			gint _tmp9_;
			gint _tmp10_;
			ObjectsItem* item = NULL;
			GeeArrayList* _tmp11_;
			gpointer _tmp12_;
			ObjectsItem* _tmp13_;
#line 204 "../src/Views/Date.vala"
			_item_index = _item_index + 1;
#line 204 "../src/Views/Date.vala"
			_tmp9_ = _item_index;
#line 204 "../src/Views/Date.vala"
			_tmp10_ = _item_size;
#line 204 "../src/Views/Date.vala"
			if (!(_tmp9_ < _tmp10_)) {
#line 204 "../src/Views/Date.vala"
				break;
#line 912 "Date.c"
			}
#line 204 "../src/Views/Date.vala"
			_tmp11_ = _item_list;
#line 204 "../src/Views/Date.vala"
			_tmp12_ = gee_abstract_list_get ((GeeAbstractList*) _tmp11_, _item_index);
#line 204 "../src/Views/Date.vala"
			item = (ObjectsItem*) _tmp12_;
#line 205 "../src/Views/Date.vala"
			_tmp13_ = item;
#line 205 "../src/Views/Date.vala"
			views_date_add_item (self, _tmp13_);
#line 204 "../src/Views/Date.vala"
			_g_object_unref0 (item);
#line 926 "Date.c"
		}
#line 204 "../src/Views/Date.vala"
		_g_object_unref0 (_item_list);
#line 930 "Date.c"
	}
}

static void
views_date_add_today_items (ViewsDate* self)
{
	GeeHashMap* _tmp0_;
	GtkListBox* _tmp1_;
	GList* _tmp2_;
	GeeHashMap* _tmp15_;
	GtkListBox* _tmp16_;
	GList* _tmp17_;
#line 209 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 210 "../src/Views/Date.vala"
	_tmp0_ = self->items;
#line 210 "../src/Views/Date.vala"
	gee_abstract_map_clear ((GeeAbstractMap*) _tmp0_);
#line 212 "../src/Views/Date.vala"
	_tmp1_ = self->priv->listbox;
#line 212 "../src/Views/Date.vala"
	_tmp2_ = gtk_container_get_children ((GtkContainer*) _tmp1_);
#line 953 "Date.c"
	{
		GList* child_collection = NULL;
		GList* child_it = NULL;
#line 212 "../src/Views/Date.vala"
		child_collection = _tmp2_;
#line 212 "../src/Views/Date.vala"
		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
#line 961 "Date.c"
			GtkWidget* child = NULL;
#line 212 "../src/Views/Date.vala"
			child = (GtkWidget*) child_it->data;
#line 965 "Date.c"
			{
				GtkWidget* _tmp3_;
#line 213 "../src/Views/Date.vala"
				_tmp3_ = child;
#line 213 "../src/Views/Date.vala"
				gtk_widget_destroy (_tmp3_);
#line 972 "Date.c"
			}
		}
#line 212 "../src/Views/Date.vala"
		(child_collection == NULL) ? NULL : (child_collection = (g_list_free (child_collection), NULL));
#line 977 "Date.c"
	}
	{
		GeeArrayList* _item_list = NULL;
		ServicesDatabase* _tmp4_;
		GDateTime* _tmp5_;
		GeeArrayList* _tmp6_;
		gint _item_size = 0;
		GeeArrayList* _tmp7_;
		gint _tmp8_;
		gint _tmp9_;
		gint _item_index = 0;
#line 216 "../src/Views/Date.vala"
		_tmp4_ = planner_database;
#line 216 "../src/Views/Date.vala"
		_tmp5_ = self->priv->_date;
#line 216 "../src/Views/Date.vala"
		_tmp6_ = services_database_get_items_by_date (_tmp4_, _tmp5_, FALSE);
#line 216 "../src/Views/Date.vala"
		_item_list = _tmp6_;
#line 216 "../src/Views/Date.vala"
		_tmp7_ = _item_list;
#line 216 "../src/Views/Date.vala"
		_tmp8_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp7_);
#line 216 "../src/Views/Date.vala"
		_tmp9_ = _tmp8_;
#line 216 "../src/Views/Date.vala"
		_item_size = _tmp9_;
#line 216 "../src/Views/Date.vala"
		_item_index = -1;
#line 216 "../src/Views/Date.vala"
		while (TRUE) {
#line 1009 "Date.c"
			gint _tmp10_;
			gint _tmp11_;
			ObjectsItem* item = NULL;
			GeeArrayList* _tmp12_;
			gpointer _tmp13_;
			ObjectsItem* _tmp14_;
#line 216 "../src/Views/Date.vala"
			_item_index = _item_index + 1;
#line 216 "../src/Views/Date.vala"
			_tmp10_ = _item_index;
#line 216 "../src/Views/Date.vala"
			_tmp11_ = _item_size;
#line 216 "../src/Views/Date.vala"
			if (!(_tmp10_ < _tmp11_)) {
#line 216 "../src/Views/Date.vala"
				break;
#line 1026 "Date.c"
			}
#line 216 "../src/Views/Date.vala"
			_tmp12_ = _item_list;
#line 216 "../src/Views/Date.vala"
			_tmp13_ = gee_abstract_list_get ((GeeAbstractList*) _tmp12_, _item_index);
#line 216 "../src/Views/Date.vala"
			item = (ObjectsItem*) _tmp13_;
#line 217 "../src/Views/Date.vala"
			_tmp14_ = item;
#line 217 "../src/Views/Date.vala"
			views_date_add_item (self, _tmp14_);
#line 216 "../src/Views/Date.vala"
			_g_object_unref0 (item);
#line 1040 "Date.c"
		}
#line 216 "../src/Views/Date.vala"
		_g_object_unref0 (_item_list);
#line 1044 "Date.c"
	}
#line 220 "../src/Views/Date.vala"
	_tmp15_ = self->overdue_items;
#line 220 "../src/Views/Date.vala"
	gee_abstract_map_clear ((GeeAbstractMap*) _tmp15_);
#line 222 "../src/Views/Date.vala"
	_tmp16_ = self->priv->overdue_listbox;
#line 222 "../src/Views/Date.vala"
	_tmp17_ = gtk_container_get_children ((GtkContainer*) _tmp16_);
#line 1054 "Date.c"
	{
		GList* child_collection = NULL;
		GList* child_it = NULL;
#line 222 "../src/Views/Date.vala"
		child_collection = _tmp17_;
#line 222 "../src/Views/Date.vala"
		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
#line 1062 "Date.c"
			GtkWidget* child = NULL;
#line 222 "../src/Views/Date.vala"
			child = (GtkWidget*) child_it->data;
#line 1066 "Date.c"
			{
				GtkWidget* _tmp18_;
#line 223 "../src/Views/Date.vala"
				_tmp18_ = child;
#line 223 "../src/Views/Date.vala"
				gtk_widget_destroy (_tmp18_);
#line 1073 "Date.c"
			}
		}
#line 222 "../src/Views/Date.vala"
		(child_collection == NULL) ? NULL : (child_collection = (g_list_free (child_collection), NULL));
#line 1078 "Date.c"
	}
	{
		GeeArrayList* _item_list = NULL;
		ServicesDatabase* _tmp19_;
		GeeArrayList* _tmp20_;
		gint _item_size = 0;
		GeeArrayList* _tmp21_;
		gint _tmp22_;
		gint _tmp23_;
		gint _item_index = 0;
#line 226 "../src/Views/Date.vala"
		_tmp19_ = planner_database;
#line 226 "../src/Views/Date.vala"
		_tmp20_ = services_database_get_items_by_overdeue_view (_tmp19_, FALSE);
#line 226 "../src/Views/Date.vala"
		_item_list = _tmp20_;
#line 226 "../src/Views/Date.vala"
		_tmp21_ = _item_list;
#line 226 "../src/Views/Date.vala"
		_tmp22_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp21_);
#line 226 "../src/Views/Date.vala"
		_tmp23_ = _tmp22_;
#line 226 "../src/Views/Date.vala"
		_item_size = _tmp23_;
#line 226 "../src/Views/Date.vala"
		_item_index = -1;
#line 226 "../src/Views/Date.vala"
		while (TRUE) {
#line 1107 "Date.c"
			gint _tmp24_;
			gint _tmp25_;
			ObjectsItem* item = NULL;
			GeeArrayList* _tmp26_;
			gpointer _tmp27_;
			ObjectsItem* _tmp28_;
#line 226 "../src/Views/Date.vala"
			_item_index = _item_index + 1;
#line 226 "../src/Views/Date.vala"
			_tmp24_ = _item_index;
#line 226 "../src/Views/Date.vala"
			_tmp25_ = _item_size;
#line 226 "../src/Views/Date.vala"
			if (!(_tmp24_ < _tmp25_)) {
#line 226 "../src/Views/Date.vala"
				break;
#line 1124 "Date.c"
			}
#line 226 "../src/Views/Date.vala"
			_tmp26_ = _item_list;
#line 226 "../src/Views/Date.vala"
			_tmp27_ = gee_abstract_list_get ((GeeAbstractList*) _tmp26_, _item_index);
#line 226 "../src/Views/Date.vala"
			item = (ObjectsItem*) _tmp27_;
#line 227 "../src/Views/Date.vala"
			_tmp28_ = item;
#line 227 "../src/Views/Date.vala"
			views_date_add_overdue_item (self, _tmp28_);
#line 226 "../src/Views/Date.vala"
			_g_object_unref0 (item);
#line 1138 "Date.c"
		}
#line 226 "../src/Views/Date.vala"
		_g_object_unref0 (_item_list);
#line 1142 "Date.c"
	}
#line 230 "../src/Views/Date.vala"
	views_date_update_headers (self);
#line 1146 "Date.c"
}

static void
views_date_update_headers (ViewsDate* self)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_;
	GtkRevealer* _tmp4_;
	gboolean _tmp5_ = FALSE;
	GtkRevealer* _tmp6_;
	gboolean _tmp7_;
	gboolean _tmp8_;
	GtkRevealer* _tmp11_;
#line 233 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 234 "../src/Views/Date.vala"
	_tmp1_ = self->priv->_is_today_view;
#line 234 "../src/Views/Date.vala"
	if (_tmp1_) {
#line 1166 "Date.c"
		gboolean _tmp2_;
		gboolean _tmp3_;
#line 234 "../src/Views/Date.vala"
		_tmp2_ = views_date_get_overdue_has_children (self);
#line 234 "../src/Views/Date.vala"
		_tmp3_ = _tmp2_;
#line 234 "../src/Views/Date.vala"
		_tmp0_ = _tmp3_;
#line 1175 "Date.c"
	} else {
#line 234 "../src/Views/Date.vala"
		_tmp0_ = FALSE;
#line 1179 "Date.c"
	}
#line 234 "../src/Views/Date.vala"
	_tmp4_ = self->priv->overdue_revealer;
#line 234 "../src/Views/Date.vala"
	gtk_revealer_set_reveal_child (_tmp4_, _tmp0_);
#line 235 "../src/Views/Date.vala"
	_tmp6_ = self->priv->overdue_revealer;
#line 235 "../src/Views/Date.vala"
	_tmp7_ = gtk_revealer_get_reveal_child (_tmp6_);
#line 235 "../src/Views/Date.vala"
	_tmp8_ = _tmp7_;
#line 235 "../src/Views/Date.vala"
	if (_tmp8_) {
#line 1193 "Date.c"
		gboolean _tmp9_;
		gboolean _tmp10_;
#line 235 "../src/Views/Date.vala"
		_tmp9_ = views_date_get_today_has_children (self);
#line 235 "../src/Views/Date.vala"
		_tmp10_ = _tmp9_;
#line 235 "../src/Views/Date.vala"
		_tmp5_ = _tmp10_;
#line 1202 "Date.c"
	} else {
#line 235 "../src/Views/Date.vala"
		_tmp5_ = FALSE;
#line 1206 "Date.c"
	}
#line 235 "../src/Views/Date.vala"
	_tmp11_ = self->priv->today_label_revealer;
#line 235 "../src/Views/Date.vala"
	gtk_revealer_set_reveal_child (_tmp11_, _tmp5_);
#line 1212 "Date.c"
}

static void
views_date_add_item (ViewsDate* self,
                     ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	LayoutsItemRow* _tmp3_;
	LayoutsItemRow* _tmp4_;
	GtkListBox* _tmp5_;
	GeeHashMap* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	gpointer _tmp9_;
	LayoutsItemRow* _tmp10_;
	GtkListBox* _tmp11_;
#line 238 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 238 "../src/Views/Date.vala"
	g_return_if_fail (item != NULL);
#line 239 "../src/Views/Date.vala"
	_tmp0_ = self->items;
#line 239 "../src/Views/Date.vala"
	_tmp1_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 239 "../src/Views/Date.vala"
	_tmp2_ = _tmp1_;
#line 239 "../src/Views/Date.vala"
	_tmp3_ = layouts_item_row_new (item);
#line 239 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp3_);
#line 239 "../src/Views/Date.vala"
	_tmp4_ = _tmp3_;
#line 239 "../src/Views/Date.vala"
	gee_abstract_map_set ((GeeAbstractMap*) _tmp0_, _tmp2_, _tmp4_);
#line 239 "../src/Views/Date.vala"
	_g_object_unref0 (_tmp4_);
#line 240 "../src/Views/Date.vala"
	_tmp5_ = self->priv->listbox;
#line 240 "../src/Views/Date.vala"
	_tmp6_ = self->items;
#line 240 "../src/Views/Date.vala"
	_tmp7_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 240 "../src/Views/Date.vala"
	_tmp8_ = _tmp7_;
#line 240 "../src/Views/Date.vala"
	_tmp9_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp6_, _tmp8_);
#line 240 "../src/Views/Date.vala"
	_tmp10_ = (LayoutsItemRow*) _tmp9_;
#line 240 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp5_, (GtkWidget*) _tmp10_);
#line 240 "../src/Views/Date.vala"
	_g_object_unref0 (_tmp10_);
#line 241 "../src/Views/Date.vala"
	_tmp11_ = self->priv->listbox;
#line 241 "../src/Views/Date.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp11_);
#line 1271 "Date.c"
}

static void
views_date_add_overdue_item (ViewsDate* self,
                             ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	LayoutsItemRow* _tmp3_;
	LayoutsItemRow* _tmp4_;
	GtkListBox* _tmp5_;
	GeeHashMap* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	gpointer _tmp9_;
	LayoutsItemRow* _tmp10_;
	GtkListBox* _tmp11_;
#line 244 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 244 "../src/Views/Date.vala"
	g_return_if_fail (item != NULL);
#line 245 "../src/Views/Date.vala"
	_tmp0_ = self->overdue_items;
#line 245 "../src/Views/Date.vala"
	_tmp1_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 245 "../src/Views/Date.vala"
	_tmp2_ = _tmp1_;
#line 245 "../src/Views/Date.vala"
	_tmp3_ = layouts_item_row_new (item);
#line 245 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp3_);
#line 245 "../src/Views/Date.vala"
	_tmp4_ = _tmp3_;
#line 245 "../src/Views/Date.vala"
	gee_abstract_map_set ((GeeAbstractMap*) _tmp0_, _tmp2_, _tmp4_);
#line 245 "../src/Views/Date.vala"
	_g_object_unref0 (_tmp4_);
#line 246 "../src/Views/Date.vala"
	_tmp5_ = self->priv->overdue_listbox;
#line 246 "../src/Views/Date.vala"
	_tmp6_ = self->overdue_items;
#line 246 "../src/Views/Date.vala"
	_tmp7_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 246 "../src/Views/Date.vala"
	_tmp8_ = _tmp7_;
#line 246 "../src/Views/Date.vala"
	_tmp9_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp6_, _tmp8_);
#line 246 "../src/Views/Date.vala"
	_tmp10_ = (LayoutsItemRow*) _tmp9_;
#line 246 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp5_, (GtkWidget*) _tmp10_);
#line 246 "../src/Views/Date.vala"
	_g_object_unref0 (_tmp10_);
#line 247 "../src/Views/Date.vala"
	_tmp11_ = self->priv->overdue_listbox;
#line 247 "../src/Views/Date.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp11_);
#line 1330 "Date.c"
}

static GtkWidget*
views_date_get_placeholder (ViewsDate* self)
{
	WidgetsDynamicIcon* calendar_image = NULL;
	WidgetsDynamicIcon* _tmp0_ = NULL;
	WidgetsDynamicIcon* _tmp1_;
	WidgetsDynamicIcon* _tmp2_;
	gboolean _tmp3_;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp5_ = NULL;
	WidgetsDynamicIcon* _tmp6_;
	GtkWidget* result = NULL;
#line 250 "../src/Views/Date.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 251 "../src/Views/Date.vala"
	_tmp0_ = widgets_dynamic_icon_new ();
#line 251 "../src/Views/Date.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp0_, 0.1);
#line 251 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp0_);
#line 251 "../src/Views/Date.vala"
	calendar_image = _tmp0_;
#line 254 "../src/Views/Date.vala"
	_tmp1_ = calendar_image;
#line 254 "../src/Views/Date.vala"
	widgets_dynamic_icon_set_size (_tmp1_, 96);
#line 256 "../src/Views/Date.vala"
	_tmp2_ = calendar_image;
#line 256 "../src/Views/Date.vala"
	widgets_dynamic_icon_update_icon_name (_tmp2_, "planner-calendar");
#line 257 "../src/Views/Date.vala"
	_tmp3_ = self->priv->_is_today_view;
#line 257 "../src/Views/Date.vala"
	if (_tmp3_) {
#line 1367 "Date.c"
		WidgetsDynamicIcon* _tmp4_;
#line 258 "../src/Views/Date.vala"
		_tmp4_ = calendar_image;
#line 258 "../src/Views/Date.vala"
		widgets_dynamic_icon_update_icon_name (_tmp4_, "planner-star");
#line 1373 "Date.c"
	}
#line 261 "../src/Views/Date.vala"
	_tmp5_ = (GtkGrid*) gtk_grid_new ();
#line 261 "../src/Views/Date.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp5_, 128);
#line 261 "../src/Views/Date.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp5_, GTK_ALIGN_CENTER);
#line 261 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp5_);
#line 261 "../src/Views/Date.vala"
	grid = _tmp5_;
#line 265 "../src/Views/Date.vala"
	_tmp6_ = calendar_image;
#line 265 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) grid, (GtkWidget*) _tmp6_);
#line 266 "../src/Views/Date.vala"
	gtk_widget_show_all ((GtkWidget*) grid);
#line 268 "../src/Views/Date.vala"
	result = (GtkWidget*) grid;
#line 268 "../src/Views/Date.vala"
	_g_object_unref0 (calendar_image);
#line 268 "../src/Views/Date.vala"
	return result;
#line 1397 "Date.c"
}

static Block27Data*
block27_data_ref (Block27Data* _data27_)
{
#line 271 "../src/Views/Date.vala"
	g_atomic_int_inc (&_data27_->_ref_count_);
#line 271 "../src/Views/Date.vala"
	return _data27_;
#line 1407 "Date.c"
}

static void
block27_data_unref (void * _userdata_)
{
	Block27Data* _data27_;
	_data27_ = (Block27Data*) _userdata_;
#line 271 "../src/Views/Date.vala"
	if (g_atomic_int_dec_and_test (&_data27_->_ref_count_)) {
#line 1417 "Date.c"
		ViewsDate* self;
#line 271 "../src/Views/Date.vala"
		self = _data27_->self;
#line 271 "../src/Views/Date.vala"
		_g_object_unref0 (_data27_->row);
#line 271 "../src/Views/Date.vala"
		_g_object_unref0 (self);
#line 271 "../src/Views/Date.vala"
		g_slice_free (Block27Data, _data27_);
#line 1427 "Date.c"
	}
}

static void
__lambda264_ (Block27Data* _data27_)
{
	ViewsDate* self;
#line 278 "../src/Views/Date.vala"
	self = _data27_->self;
#line 279 "../src/Views/Date.vala"
	views_date_item_added (self, _data27_->row);
#line 1439 "Date.c"
}

static void
___lambda264__layouts_item_row_item_added (LayoutsItemRow* _sender,
                                           gpointer self)
{
#line 278 "../src/Views/Date.vala"
	__lambda264_ (self);
#line 1448 "Date.c"
}

void
views_date_prepare_new_item (ViewsDate* self)
{
	Block27Data* _data27_;
	ServicesEventBus* _tmp0_;
	ServicesDatabase* _tmp1_;
	GSettings* _tmp2_;
	ObjectsProject* _tmp3_;
	ObjectsProject* _tmp4_;
	LayoutsItemRow* _tmp5_;
	LayoutsItemRow* _tmp6_;
	Util* _tmp7_;
	Util* _tmp8_;
	GDateTime* _tmp9_;
	GDateTime* _tmp10_;
	GDateTime* _tmp11_;
	GtkListBox* _tmp12_;
	GtkListBox* _tmp13_;
#line 271 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 271 "../src/Views/Date.vala"
	_data27_ = g_slice_new0 (Block27Data);
#line 271 "../src/Views/Date.vala"
	_data27_->_ref_count_ = 1;
#line 271 "../src/Views/Date.vala"
	_data27_->self = g_object_ref (self);
#line 272 "../src/Views/Date.vala"
	_tmp0_ = planner_event_bus;
#line 272 "../src/Views/Date.vala"
	g_signal_emit_by_name (_tmp0_, "item-selected", NULL);
#line 274 "../src/Views/Date.vala"
	_tmp1_ = planner_database;
#line 274 "../src/Views/Date.vala"
	_tmp2_ = planner_settings;
#line 274 "../src/Views/Date.vala"
	_tmp3_ = services_database_get_project (_tmp1_, g_settings_get_int64 (_tmp2_, "inbox-project-id"));
#line 274 "../src/Views/Date.vala"
	_tmp4_ = _tmp3_;
#line 274 "../src/Views/Date.vala"
	_tmp5_ = layouts_item_row_new_for_project (_tmp4_);
#line 274 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp5_);
#line 274 "../src/Views/Date.vala"
	_tmp6_ = _tmp5_;
#line 274 "../src/Views/Date.vala"
	_g_object_unref0 (_tmp4_);
#line 274 "../src/Views/Date.vala"
	_data27_->row = _tmp6_;
#line 277 "../src/Views/Date.vala"
	_tmp7_ = util_get_default ();
#line 277 "../src/Views/Date.vala"
	_tmp8_ = _tmp7_;
#line 277 "../src/Views/Date.vala"
	_tmp9_ = self->priv->_date;
#line 277 "../src/Views/Date.vala"
	_tmp10_ = util_get_format_date (_tmp8_, _tmp9_);
#line 277 "../src/Views/Date.vala"
	_tmp11_ = _tmp10_;
#line 277 "../src/Views/Date.vala"
	layouts_item_row_update_due (_data27_->row, _tmp11_);
#line 277 "../src/Views/Date.vala"
	_g_date_time_unref0 (_tmp11_);
#line 277 "../src/Views/Date.vala"
	_g_object_unref0 (_tmp8_);
#line 278 "../src/Views/Date.vala"
	g_signal_connect_data (_data27_->row, "item-added", (GCallback) ___lambda264__layouts_item_row_item_added, block27_data_ref (_data27_), (GClosureNotify) block27_data_unref, 0);
#line 282 "../src/Views/Date.vala"
	_tmp12_ = self->priv->listbox;
#line 282 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp12_, (GtkWidget*) _data27_->row);
#line 283 "../src/Views/Date.vala"
	_tmp13_ = self->priv->listbox;
#line 283 "../src/Views/Date.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp13_);
#line 271 "../src/Views/Date.vala"
	block27_data_unref (_data27_);
#line 271 "../src/Views/Date.vala"
	_data27_ = NULL;
#line 1529 "Date.c"
}

static void
views_date_item_added (ViewsDate* self,
                       LayoutsItemRow* row)
{
	gboolean insert = FALSE;
	ObjectsItem* _tmp0_;
	ObjectsItem* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	ObjectsItem* _tmp13_;
	ObjectsItem* _tmp14_;
	gint64 _tmp15_;
	gint64 _tmp16_;
#line 286 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 286 "../src/Views/Date.vala"
	g_return_if_fail (row != NULL);
#line 287 "../src/Views/Date.vala"
	insert = TRUE;
#line 288 "../src/Views/Date.vala"
	_tmp0_ = layouts_item_row_get_item (row);
#line 288 "../src/Views/Date.vala"
	_tmp1_ = _tmp0_;
#line 288 "../src/Views/Date.vala"
	_tmp2_ = objects_item_get_has_due (_tmp1_);
#line 288 "../src/Views/Date.vala"
	_tmp3_ = _tmp2_;
#line 288 "../src/Views/Date.vala"
	if (_tmp3_) {
#line 1561 "Date.c"
		Util* _tmp4_;
		Util* _tmp5_;
		GDateTime* _tmp6_;
		ObjectsItem* _tmp7_;
		ObjectsItem* _tmp8_;
		ObjectsDueDate* _tmp9_;
		ObjectsDueDate* _tmp10_;
		GDateTime* _tmp11_;
		GDateTime* _tmp12_;
#line 289 "../src/Views/Date.vala"
		_tmp4_ = util_get_default ();
#line 289 "../src/Views/Date.vala"
		_tmp5_ = _tmp4_;
#line 289 "../src/Views/Date.vala"
		_tmp6_ = self->priv->_date;
#line 289 "../src/Views/Date.vala"
		_tmp7_ = layouts_item_row_get_item (row);
#line 289 "../src/Views/Date.vala"
		_tmp8_ = _tmp7_;
#line 289 "../src/Views/Date.vala"
		_tmp9_ = objects_item_get_due (_tmp8_);
#line 289 "../src/Views/Date.vala"
		_tmp10_ = _tmp9_;
#line 289 "../src/Views/Date.vala"
		_tmp11_ = objects_due_date_get_datetime (_tmp10_);
#line 289 "../src/Views/Date.vala"
		_tmp12_ = _tmp11_;
#line 289 "../src/Views/Date.vala"
		insert = !util_is_same_day (_tmp5_, _tmp6_, _tmp12_);
#line 289 "../src/Views/Date.vala"
		_g_object_unref0 (_tmp5_);
#line 1593 "Date.c"
	}
#line 292 "../src/Views/Date.vala"
	if (!insert) {
#line 293 "../src/Views/Date.vala"
		views_date_valid_add_itemrow (self, row);
#line 294 "../src/Views/Date.vala"
		layouts_item_row_update_inserted_item (row);
#line 1601 "Date.c"
	}
#line 297 "../src/Views/Date.vala"
	_tmp13_ = layouts_item_row_get_item (row);
#line 297 "../src/Views/Date.vala"
	_tmp14_ = _tmp13_;
#line 297 "../src/Views/Date.vala"
	_tmp15_ = objects_item_get_section_id (_tmp14_);
#line 297 "../src/Views/Date.vala"
	_tmp16_ = _tmp15_;
#line 297 "../src/Views/Date.vala"
	if (_tmp16_ != ((gint64) CONSTANTS_INACTIVE)) {
#line 1613 "Date.c"
		ServicesDatabase* _tmp17_;
		ObjectsItem* _tmp18_;
		ObjectsItem* _tmp19_;
		gint64 _tmp20_;
		gint64 _tmp21_;
		ObjectsSection* _tmp22_;
		ObjectsSection* _tmp23_;
		ObjectsItem* _tmp24_;
		ObjectsItem* _tmp25_;
		ObjectsItem* _tmp26_;
		ObjectsItem* _tmp27_;
#line 298 "../src/Views/Date.vala"
		_tmp17_ = planner_database;
#line 298 "../src/Views/Date.vala"
		_tmp18_ = layouts_item_row_get_item (row);
#line 298 "../src/Views/Date.vala"
		_tmp19_ = _tmp18_;
#line 298 "../src/Views/Date.vala"
		_tmp20_ = objects_item_get_section_id (_tmp19_);
#line 298 "../src/Views/Date.vala"
		_tmp21_ = _tmp20_;
#line 298 "../src/Views/Date.vala"
		_tmp22_ = services_database_get_section (_tmp17_, _tmp21_);
#line 298 "../src/Views/Date.vala"
		_tmp23_ = _tmp22_;
#line 298 "../src/Views/Date.vala"
		_tmp24_ = layouts_item_row_get_item (row);
#line 298 "../src/Views/Date.vala"
		_tmp25_ = _tmp24_;
#line 298 "../src/Views/Date.vala"
		_tmp26_ = objects_section_add_item_if_not_exists (_tmp23_, _tmp25_, TRUE);
#line 298 "../src/Views/Date.vala"
		_tmp27_ = _tmp26_;
#line 298 "../src/Views/Date.vala"
		_g_object_unref0 (_tmp27_);
#line 298 "../src/Views/Date.vala"
		_g_object_unref0 (_tmp23_);
#line 1651 "Date.c"
	} else {
		ServicesDatabase* _tmp28_;
		ObjectsItem* _tmp29_;
		ObjectsItem* _tmp30_;
		gint64 _tmp31_;
		gint64 _tmp32_;
		ObjectsProject* _tmp33_;
		ObjectsProject* _tmp34_;
		ObjectsItem* _tmp35_;
		ObjectsItem* _tmp36_;
		ObjectsItem* _tmp37_;
		ObjectsItem* _tmp38_;
#line 301 "../src/Views/Date.vala"
		_tmp28_ = planner_database;
#line 301 "../src/Views/Date.vala"
		_tmp29_ = layouts_item_row_get_item (row);
#line 301 "../src/Views/Date.vala"
		_tmp30_ = _tmp29_;
#line 301 "../src/Views/Date.vala"
		_tmp31_ = objects_item_get_project_id (_tmp30_);
#line 301 "../src/Views/Date.vala"
		_tmp32_ = _tmp31_;
#line 301 "../src/Views/Date.vala"
		_tmp33_ = services_database_get_project (_tmp28_, _tmp32_);
#line 301 "../src/Views/Date.vala"
		_tmp34_ = _tmp33_;
#line 301 "../src/Views/Date.vala"
		_tmp35_ = layouts_item_row_get_item (row);
#line 301 "../src/Views/Date.vala"
		_tmp36_ = _tmp35_;
#line 301 "../src/Views/Date.vala"
		_tmp37_ = objects_project_add_item_if_not_exists (_tmp34_, _tmp36_, TRUE);
#line 301 "../src/Views/Date.vala"
		_tmp38_ = _tmp37_;
#line 301 "../src/Views/Date.vala"
		_g_object_unref0 (_tmp38_);
#line 301 "../src/Views/Date.vala"
		_g_object_unref0 (_tmp34_);
#line 1690 "Date.c"
	}
#line 305 "../src/Views/Date.vala"
	if (insert) {
#line 306 "../src/Views/Date.vala"
		layouts_item_row_hide_destroy (row);
#line 1696 "Date.c"
	}
}

static void
views_date_valid_add_itemrow (ViewsDate* self,
                              LayoutsItemRow* row)
{
	gboolean _tmp0_;
#line 310 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 310 "../src/Views/Date.vala"
	g_return_if_fail (row != NULL);
#line 311 "../src/Views/Date.vala"
	_tmp0_ = self->priv->_is_today_view;
#line 311 "../src/Views/Date.vala"
	if (_tmp0_) {
#line 1713 "Date.c"
		gboolean _tmp1_ = FALSE;
		GeeHashMap* _tmp2_;
		ObjectsItem* _tmp3_;
		ObjectsItem* _tmp4_;
		const gchar* _tmp5_;
		const gchar* _tmp6_;
		gboolean _tmp25_ = FALSE;
		gboolean _tmp26_ = FALSE;
		gboolean _tmp27_;
#line 312 "../src/Views/Date.vala"
		_tmp2_ = self->items;
#line 312 "../src/Views/Date.vala"
		_tmp3_ = layouts_item_row_get_item (row);
#line 312 "../src/Views/Date.vala"
		_tmp4_ = _tmp3_;
#line 312 "../src/Views/Date.vala"
		_tmp5_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp4_);
#line 312 "../src/Views/Date.vala"
		_tmp6_ = _tmp5_;
#line 312 "../src/Views/Date.vala"
		if (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp2_, _tmp6_)) {
#line 1735 "Date.c"
			ServicesDatabase* _tmp7_;
			ObjectsItem* _tmp8_;
			ObjectsItem* _tmp9_;
			GDateTime* _tmp10_;
#line 313 "../src/Views/Date.vala"
			_tmp7_ = planner_database;
#line 313 "../src/Views/Date.vala"
			_tmp8_ = layouts_item_row_get_item (row);
#line 313 "../src/Views/Date.vala"
			_tmp9_ = _tmp8_;
#line 313 "../src/Views/Date.vala"
			_tmp10_ = self->priv->_date;
#line 313 "../src/Views/Date.vala"
			_tmp1_ = services_database_valid_item_by_date (_tmp7_, _tmp9_, _tmp10_, FALSE);
#line 1750 "Date.c"
		} else {
#line 312 "../src/Views/Date.vala"
			_tmp1_ = FALSE;
#line 1754 "Date.c"
		}
#line 312 "../src/Views/Date.vala"
		if (_tmp1_) {
#line 1758 "Date.c"
			GeeHashMap* _tmp11_;
			ObjectsItem* _tmp12_;
			ObjectsItem* _tmp13_;
			const gchar* _tmp14_;
			const gchar* _tmp15_;
			GtkListBox* _tmp16_;
			GeeHashMap* _tmp17_;
			ObjectsItem* _tmp18_;
			ObjectsItem* _tmp19_;
			const gchar* _tmp20_;
			const gchar* _tmp21_;
			gpointer _tmp22_;
			LayoutsItemRow* _tmp23_;
			GtkListBox* _tmp24_;
#line 314 "../src/Views/Date.vala"
			_tmp11_ = self->items;
#line 314 "../src/Views/Date.vala"
			_tmp12_ = layouts_item_row_get_item (row);
#line 314 "../src/Views/Date.vala"
			_tmp13_ = _tmp12_;
#line 314 "../src/Views/Date.vala"
			_tmp14_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp13_);
#line 314 "../src/Views/Date.vala"
			_tmp15_ = _tmp14_;
#line 314 "../src/Views/Date.vala"
			gee_abstract_map_set ((GeeAbstractMap*) _tmp11_, _tmp15_, row);
#line 315 "../src/Views/Date.vala"
			_tmp16_ = self->priv->listbox;
#line 315 "../src/Views/Date.vala"
			_tmp17_ = self->items;
#line 315 "../src/Views/Date.vala"
			_tmp18_ = layouts_item_row_get_item (row);
#line 315 "../src/Views/Date.vala"
			_tmp19_ = _tmp18_;
#line 315 "../src/Views/Date.vala"
			_tmp20_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp19_);
#line 315 "../src/Views/Date.vala"
			_tmp21_ = _tmp20_;
#line 315 "../src/Views/Date.vala"
			_tmp22_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp17_, _tmp21_);
#line 315 "../src/Views/Date.vala"
			_tmp23_ = (LayoutsItemRow*) _tmp22_;
#line 315 "../src/Views/Date.vala"
			gtk_container_add ((GtkContainer*) _tmp16_, (GtkWidget*) _tmp23_);
#line 315 "../src/Views/Date.vala"
			_g_object_unref0 (_tmp23_);
#line 316 "../src/Views/Date.vala"
			_tmp24_ = self->priv->listbox;
#line 316 "../src/Views/Date.vala"
			gtk_widget_show_all ((GtkWidget*) _tmp24_);
#line 1809 "Date.c"
		}
#line 319 "../src/Views/Date.vala"
		_tmp27_ = self->priv->_is_today_view;
#line 319 "../src/Views/Date.vala"
		if (_tmp27_) {
#line 1815 "Date.c"
			GeeHashMap* _tmp28_;
			ObjectsItem* _tmp29_;
			ObjectsItem* _tmp30_;
			const gchar* _tmp31_;
			const gchar* _tmp32_;
#line 319 "../src/Views/Date.vala"
			_tmp28_ = self->overdue_items;
#line 319 "../src/Views/Date.vala"
			_tmp29_ = layouts_item_row_get_item (row);
#line 319 "../src/Views/Date.vala"
			_tmp30_ = _tmp29_;
#line 319 "../src/Views/Date.vala"
			_tmp31_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp30_);
#line 319 "../src/Views/Date.vala"
			_tmp32_ = _tmp31_;
#line 319 "../src/Views/Date.vala"
			_tmp26_ = !gee_abstract_map_has_key ((GeeAbstractMap*) _tmp28_, _tmp32_);
#line 1833 "Date.c"
		} else {
#line 319 "../src/Views/Date.vala"
			_tmp26_ = FALSE;
#line 1837 "Date.c"
		}
#line 319 "../src/Views/Date.vala"
		if (_tmp26_) {
#line 1841 "Date.c"
			ServicesDatabase* _tmp33_;
			ObjectsItem* _tmp34_;
			ObjectsItem* _tmp35_;
			GDateTime* _tmp36_;
#line 320 "../src/Views/Date.vala"
			_tmp33_ = planner_database;
#line 320 "../src/Views/Date.vala"
			_tmp34_ = layouts_item_row_get_item (row);
#line 320 "../src/Views/Date.vala"
			_tmp35_ = _tmp34_;
#line 320 "../src/Views/Date.vala"
			_tmp36_ = self->priv->_date;
#line 320 "../src/Views/Date.vala"
			_tmp25_ = services_database_valid_item_by_overdue (_tmp33_, _tmp35_, _tmp36_, FALSE);
#line 1856 "Date.c"
		} else {
#line 319 "../src/Views/Date.vala"
			_tmp25_ = FALSE;
#line 1860 "Date.c"
		}
#line 319 "../src/Views/Date.vala"
		if (_tmp25_) {
#line 1864 "Date.c"
			GeeHashMap* _tmp37_;
			ObjectsItem* _tmp38_;
			ObjectsItem* _tmp39_;
			const gchar* _tmp40_;
			const gchar* _tmp41_;
			GtkListBox* _tmp42_;
			GeeHashMap* _tmp43_;
			ObjectsItem* _tmp44_;
			ObjectsItem* _tmp45_;
			const gchar* _tmp46_;
			const gchar* _tmp47_;
			gpointer _tmp48_;
			LayoutsItemRow* _tmp49_;
			GtkListBox* _tmp50_;
#line 321 "../src/Views/Date.vala"
			_tmp37_ = self->overdue_items;
#line 321 "../src/Views/Date.vala"
			_tmp38_ = layouts_item_row_get_item (row);
#line 321 "../src/Views/Date.vala"
			_tmp39_ = _tmp38_;
#line 321 "../src/Views/Date.vala"
			_tmp40_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp39_);
#line 321 "../src/Views/Date.vala"
			_tmp41_ = _tmp40_;
#line 321 "../src/Views/Date.vala"
			gee_abstract_map_set ((GeeAbstractMap*) _tmp37_, _tmp41_, row);
#line 322 "../src/Views/Date.vala"
			_tmp42_ = self->priv->overdue_listbox;
#line 322 "../src/Views/Date.vala"
			_tmp43_ = self->overdue_items;
#line 322 "../src/Views/Date.vala"
			_tmp44_ = layouts_item_row_get_item (row);
#line 322 "../src/Views/Date.vala"
			_tmp45_ = _tmp44_;
#line 322 "../src/Views/Date.vala"
			_tmp46_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp45_);
#line 322 "../src/Views/Date.vala"
			_tmp47_ = _tmp46_;
#line 322 "../src/Views/Date.vala"
			_tmp48_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp43_, _tmp47_);
#line 322 "../src/Views/Date.vala"
			_tmp49_ = (LayoutsItemRow*) _tmp48_;
#line 322 "../src/Views/Date.vala"
			gtk_container_add ((GtkContainer*) _tmp42_, (GtkWidget*) _tmp49_);
#line 322 "../src/Views/Date.vala"
			_g_object_unref0 (_tmp49_);
#line 323 "../src/Views/Date.vala"
			_tmp50_ = self->priv->overdue_listbox;
#line 323 "../src/Views/Date.vala"
			gtk_widget_show_all ((GtkWidget*) _tmp50_);
#line 1915 "Date.c"
		}
	} else {
		GeeHashMap* _tmp51_;
		ObjectsItem* _tmp52_;
		ObjectsItem* _tmp53_;
		const gchar* _tmp54_;
		const gchar* _tmp55_;
#line 326 "../src/Views/Date.vala"
		_tmp51_ = self->items;
#line 326 "../src/Views/Date.vala"
		_tmp52_ = layouts_item_row_get_item (row);
#line 326 "../src/Views/Date.vala"
		_tmp53_ = _tmp52_;
#line 326 "../src/Views/Date.vala"
		_tmp54_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp53_);
#line 326 "../src/Views/Date.vala"
		_tmp55_ = _tmp54_;
#line 326 "../src/Views/Date.vala"
		if (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp51_, _tmp55_)) {
#line 1935 "Date.c"
			GeeHashMap* _tmp56_;
			ObjectsItem* _tmp57_;
			ObjectsItem* _tmp58_;
			const gchar* _tmp59_;
			const gchar* _tmp60_;
			GtkListBox* _tmp61_;
			GeeHashMap* _tmp62_;
			ObjectsItem* _tmp63_;
			ObjectsItem* _tmp64_;
			const gchar* _tmp65_;
			const gchar* _tmp66_;
			gpointer _tmp67_;
			LayoutsItemRow* _tmp68_;
			GtkListBox* _tmp69_;
#line 327 "../src/Views/Date.vala"
			_tmp56_ = self->items;
#line 327 "../src/Views/Date.vala"
			_tmp57_ = layouts_item_row_get_item (row);
#line 327 "../src/Views/Date.vala"
			_tmp58_ = _tmp57_;
#line 327 "../src/Views/Date.vala"
			_tmp59_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp58_);
#line 327 "../src/Views/Date.vala"
			_tmp60_ = _tmp59_;
#line 327 "../src/Views/Date.vala"
			gee_abstract_map_set ((GeeAbstractMap*) _tmp56_, _tmp60_, row);
#line 328 "../src/Views/Date.vala"
			_tmp61_ = self->priv->listbox;
#line 328 "../src/Views/Date.vala"
			_tmp62_ = self->items;
#line 328 "../src/Views/Date.vala"
			_tmp63_ = layouts_item_row_get_item (row);
#line 328 "../src/Views/Date.vala"
			_tmp64_ = _tmp63_;
#line 328 "../src/Views/Date.vala"
			_tmp65_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp64_);
#line 328 "../src/Views/Date.vala"
			_tmp66_ = _tmp65_;
#line 328 "../src/Views/Date.vala"
			_tmp67_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp62_, _tmp66_);
#line 328 "../src/Views/Date.vala"
			_tmp68_ = (LayoutsItemRow*) _tmp67_;
#line 328 "../src/Views/Date.vala"
			gtk_container_add ((GtkContainer*) _tmp61_, (GtkWidget*) _tmp68_);
#line 328 "../src/Views/Date.vala"
			_g_object_unref0 (_tmp68_);
#line 329 "../src/Views/Date.vala"
			_tmp69_ = self->priv->listbox;
#line 329 "../src/Views/Date.vala"
			gtk_widget_show_all ((GtkWidget*) _tmp69_);
#line 1986 "Date.c"
		}
	}
}

GDateTime*
views_date_get_date (ViewsDate* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
#line 2 "../src/Views/Date.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Views/Date.vala"
	_tmp0_ = self->priv->_date;
#line 2 "../src/Views/Date.vala"
	result = _tmp0_;
#line 2 "../src/Views/Date.vala"
	return result;
#line 2004 "Date.c"
}

static gpointer
_g_date_time_ref0 (gpointer self)
{
#line 2 "../src/Views/Date.vala"
	return self ? g_date_time_ref (self) : NULL;
#line 2012 "Date.c"
}

void
views_date_set_date (ViewsDate* self,
                     GDateTime* value)
{
	GDateTime* old_value;
#line 2 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Views/Date.vala"
	old_value = views_date_get_date (self);
#line 2 "../src/Views/Date.vala"
	if (old_value != value) {
#line 2026 "Date.c"
		GDateTime* _tmp0_;
#line 2 "../src/Views/Date.vala"
		_tmp0_ = _g_date_time_ref0 (value);
#line 2 "../src/Views/Date.vala"
		_g_date_time_unref0 (self->priv->_date);
#line 2 "../src/Views/Date.vala"
		self->priv->_date = _tmp0_;
#line 2 "../src/Views/Date.vala"
		g_object_notify_by_pspec ((GObject *) self, views_date_properties[VIEWS_DATE_DATE_PROPERTY]);
#line 2036 "Date.c"
	}
}

gboolean
views_date_get_is_today_view (ViewsDate* self)
{
	gboolean result;
#line 3 "../src/Views/Date.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 3 "../src/Views/Date.vala"
	result = self->priv->_is_today_view;
#line 3 "../src/Views/Date.vala"
	return result;
#line 2050 "Date.c"
}

static void
views_date_set_is_today_view (ViewsDate* self,
                              gboolean value)
{
	gboolean old_value;
#line 3 "../src/Views/Date.vala"
	g_return_if_fail (self != NULL);
#line 3 "../src/Views/Date.vala"
	old_value = views_date_get_is_today_view (self);
#line 3 "../src/Views/Date.vala"
	if (old_value != value) {
#line 3 "../src/Views/Date.vala"
		self->priv->_is_today_view = value;
#line 3 "../src/Views/Date.vala"
		g_object_notify_by_pspec ((GObject *) self, views_date_properties[VIEWS_DATE_IS_TODAY_VIEW_PROPERTY]);
#line 2068 "Date.c"
	}
}

static gboolean
views_date_get_overdue_has_children (ViewsDate* self)
{
	gboolean result;
	GtkListBox* _tmp0_;
	GList* _tmp1_;
	GList* _tmp2_;
	gboolean _tmp3_;
#line 15 "../src/Views/Date.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 16 "../src/Views/Date.vala"
	_tmp0_ = self->priv->overdue_listbox;
#line 16 "../src/Views/Date.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 16 "../src/Views/Date.vala"
	_tmp2_ = _tmp1_;
#line 16 "../src/Views/Date.vala"
	_tmp3_ = g_list_length (_tmp2_) > ((guint) 0);
#line 16 "../src/Views/Date.vala"
	(_tmp2_ == NULL) ? NULL : (_tmp2_ = (g_list_free (_tmp2_), NULL));
#line 16 "../src/Views/Date.vala"
	result = _tmp3_;
#line 16 "../src/Views/Date.vala"
	return result;
#line 2096 "Date.c"
}

static gboolean
views_date_get_today_has_children (ViewsDate* self)
{
	gboolean result;
	GtkListBox* _tmp0_;
	GList* _tmp1_;
	GList* _tmp2_;
	gboolean _tmp3_;
#line 21 "../src/Views/Date.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 22 "../src/Views/Date.vala"
	_tmp0_ = self->priv->listbox;
#line 22 "../src/Views/Date.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 22 "../src/Views/Date.vala"
	_tmp2_ = _tmp1_;
#line 22 "../src/Views/Date.vala"
	_tmp3_ = g_list_length (_tmp2_) > ((guint) 0);
#line 22 "../src/Views/Date.vala"
	(_tmp2_ == NULL) ? NULL : (_tmp2_ = (g_list_free (_tmp2_), NULL));
#line 22 "../src/Views/Date.vala"
	result = _tmp3_;
#line 22 "../src/Views/Date.vala"
	return result;
#line 2123 "Date.c"
}

static gboolean
_views_date___lambda265_ (ViewsDate* self)
{
	GtkRevealer* _tmp0_;
	gboolean result = FALSE;
#line 115 "../src/Views/Date.vala"
	_tmp0_ = self->priv->main_revealer;
#line 115 "../src/Views/Date.vala"
	gtk_revealer_set_reveal_child (_tmp0_, TRUE);
#line 116 "../src/Views/Date.vala"
	result = G_SOURCE_REMOVE;
#line 116 "../src/Views/Date.vala"
	return result;
#line 2139 "Date.c"
}

static gboolean
__views_date___lambda265__gsource_func (gpointer self)
{
	gboolean result;
	result = _views_date___lambda265_ ((ViewsDate*) self);
#line 114 "../src/Views/Date.vala"
	return result;
#line 2149 "Date.c"
}

static void
_views_date___lambda266_ (ViewsDate* self)
{
	GDateTime* _tmp0_;
#line 120 "../src/Views/Date.vala"
	_tmp0_ = self->priv->_date;
#line 120 "../src/Views/Date.vala"
	if (_tmp0_ != NULL) {
#line 2160 "Date.c"
		gboolean _tmp1_;
#line 121 "../src/Views/Date.vala"
		_tmp1_ = self->priv->_is_today_view;
#line 121 "../src/Views/Date.vala"
		if (_tmp1_) {
#line 122 "../src/Views/Date.vala"
			views_date_add_today_items (self);
#line 2168 "Date.c"
		} else {
			GDateTime* _tmp2_;
#line 124 "../src/Views/Date.vala"
			_tmp2_ = self->priv->_date;
#line 124 "../src/Views/Date.vala"
			views_date_add_items (self, _tmp2_);
#line 2175 "Date.c"
		}
	}
}

static void
__views_date___lambda266__g_object_notify (GObject* _sender,
                                           GParamSpec* pspec,
                                           gpointer self)
{
#line 119 "../src/Views/Date.vala"
	_views_date___lambda266_ ((ViewsDate*) self);
#line 2187 "Date.c"
}

static void
_views_date_update_headers_gtk_container_add (GtkContainer* _sender,
                                              GtkWidget* widget,
                                              gpointer self)
{
#line 133 "../src/Views/Date.vala"
	views_date_update_headers ((ViewsDate*) self);
#line 2197 "Date.c"
}

static void
_views_date_update_headers_gtk_container_remove (GtkContainer* _sender,
                                                 GtkWidget* widget,
                                                 gpointer self)
{
#line 134 "../src/Views/Date.vala"
	views_date_update_headers ((ViewsDate*) self);
#line 2207 "Date.c"
}

static void
_views_date_valid_add_item_services_database_item_added (ServicesDatabase* _sender,
                                                         ObjectsItem* item,
                                                         gboolean insert,
                                                         gpointer self)
{
#line 138 "../src/Views/Date.vala"
	views_date_valid_add_item ((ViewsDate*) self, item, insert);
#line 2218 "Date.c"
}

static void
_views_date_valid_delete_item_services_database_item_deleted (ServicesDatabase* _sender,
                                                              ObjectsItem* item,
                                                              gpointer self)
{
#line 139 "../src/Views/Date.vala"
	views_date_valid_delete_item ((ViewsDate*) self, item);
#line 2228 "Date.c"
}

static void
_views_date_valid_update_item_services_database_item_updated (ServicesDatabase* _sender,
                                                              ObjectsItem* item,
                                                              gint64 update_id,
                                                              gpointer self)
{
#line 140 "../src/Views/Date.vala"
	views_date_valid_update_item ((ViewsDate*) self, item);
#line 2239 "Date.c"
}

static GObject *
views_date_constructor (GType type,
                        guint n_construct_properties,
                        GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsDate * self;
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp1_;
	GtkLabel* overdue_label = NULL;
	GtkLabel* _tmp2_ = NULL;
	GtkLabel* _tmp3_;
	GtkStyleContext* _tmp4_;
	GtkListBox* _tmp5_ = NULL;
	GtkStyleContext* overdue_listbox_context = NULL;
	GtkListBox* _tmp6_;
	GtkStyleContext* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkGrid* overdue_grid = NULL;
	GtkGrid* _tmp9_ = NULL;
	GtkGrid* _tmp10_;
	GtkLabel* _tmp11_;
	GtkGrid* _tmp12_;
	GtkListBox* _tmp13_;
	GtkRevealer* _tmp14_ = NULL;
	GtkRevealer* _tmp15_;
	GtkGrid* _tmp16_;
	GtkLabel* today_label = NULL;
	GtkLabel* _tmp17_ = NULL;
	GtkLabel* _tmp18_;
	GtkStyleContext* _tmp19_;
	GtkRevealer* _tmp20_ = NULL;
	GtkRevealer* _tmp21_;
	GtkLabel* _tmp22_;
	GtkListBox* _tmp23_ = NULL;
	gboolean _tmp24_;
	GtkStyleContext* listbox_context = NULL;
	GtkListBox* _tmp28_;
	GtkStyleContext* _tmp29_;
	GtkStyleContext* _tmp30_;
	GtkGrid* listbox_grid = NULL;
	GtkGrid* _tmp31_;
	GtkGrid* _tmp32_;
	GtkListBox* _tmp33_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp34_ = NULL;
	GtkGrid* _tmp35_;
	GtkRevealer* _tmp36_;
	GtkGrid* _tmp37_;
	GtkRevealer* _tmp38_;
	GtkGrid* _tmp39_;
	GtkGrid* _tmp40_;
	GtkRevealer* _tmp41_ = NULL;
	GtkRevealer* _tmp42_;
	GtkGrid* _tmp43_;
	GtkRevealer* _tmp44_;
	GtkRevealer* _tmp45_;
	guint _tmp46_;
	guint _tmp47_;
	gboolean _tmp48_;
	GtkListBox* _tmp51_;
	GtkListBox* _tmp52_;
	GtkListBox* _tmp53_;
	GtkListBox* _tmp54_;
	ServicesDatabase* _tmp55_;
	ServicesDatabase* _tmp56_;
	ServicesDatabase* _tmp57_;
#line 32 "../src/Views/Date.vala"
	parent_class = G_OBJECT_CLASS (views_date_parent_class);
#line 32 "../src/Views/Date.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 32 "../src/Views/Date.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_DATE, ViewsDate);
#line 33 "../src/Views/Date.vala"
	_tmp0_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, LAYOUTS_TYPE_ITEM_ROW, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 33 "../src/Views/Date.vala"
	_g_object_unref0 (self->overdue_items);
#line 33 "../src/Views/Date.vala"
	self->overdue_items = _tmp0_;
#line 34 "../src/Views/Date.vala"
	_tmp1_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, LAYOUTS_TYPE_ITEM_ROW, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 34 "../src/Views/Date.vala"
	_g_object_unref0 (self->items);
#line 34 "../src/Views/Date.vala"
	self->items = _tmp1_;
#line 36 "../src/Views/Date.vala"
	_tmp2_ = (GtkLabel*) gtk_label_new (_ ("Overdue"));
#line 36 "../src/Views/Date.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp2_, GTK_ALIGN_START);
#line 36 "../src/Views/Date.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp2_, GTK_ALIGN_CENTER);
#line 36 "../src/Views/Date.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp2_, TRUE);
#line 36 "../src/Views/Date.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp2_, 6);
#line 36 "../src/Views/Date.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp2_, 6);
#line 36 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp2_);
#line 36 "../src/Views/Date.vala"
	overdue_label = _tmp2_;
#line 43 "../src/Views/Date.vala"
	_tmp3_ = overdue_label;
#line 43 "../src/Views/Date.vala"
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
#line 43 "../src/Views/Date.vala"
	gtk_style_context_add_class (_tmp4_, "font-bold");
#line 45 "../src/Views/Date.vala"
	_tmp5_ = (GtkListBox*) gtk_list_box_new ();
#line 45 "../src/Views/Date.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp5_, GTK_ALIGN_START);
#line 45 "../src/Views/Date.vala"
	gtk_list_box_set_activate_on_single_click (_tmp5_, TRUE);
#line 45 "../src/Views/Date.vala"
	gtk_list_box_set_selection_mode (_tmp5_, GTK_SELECTION_SINGLE);
#line 45 "../src/Views/Date.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp5_, TRUE);
#line 45 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp5_);
#line 45 "../src/Views/Date.vala"
	_g_object_unref0 (self->priv->overdue_listbox);
#line 45 "../src/Views/Date.vala"
	self->priv->overdue_listbox = _tmp5_;
#line 52 "../src/Views/Date.vala"
	_tmp6_ = self->priv->overdue_listbox;
#line 52 "../src/Views/Date.vala"
	_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) _tmp6_);
#line 52 "../src/Views/Date.vala"
	overdue_listbox_context = _tmp7_;
#line 53 "../src/Views/Date.vala"
	_tmp8_ = overdue_listbox_context;
#line 53 "../src/Views/Date.vala"
	gtk_style_context_add_class (_tmp8_, "listbox-background");
#line 55 "../src/Views/Date.vala"
	_tmp9_ = (GtkGrid*) gtk_grid_new ();
#line 55 "../src/Views/Date.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp9_, GTK_ORIENTATION_VERTICAL);
#line 55 "../src/Views/Date.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp9_, 12);
#line 55 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp9_);
#line 55 "../src/Views/Date.vala"
	overdue_grid = _tmp9_;
#line 59 "../src/Views/Date.vala"
	_tmp10_ = overdue_grid;
#line 59 "../src/Views/Date.vala"
	_tmp11_ = overdue_label;
#line 59 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp10_, (GtkWidget*) _tmp11_);
#line 60 "../src/Views/Date.vala"
	_tmp12_ = overdue_grid;
#line 60 "../src/Views/Date.vala"
	_tmp13_ = self->priv->overdue_listbox;
#line 60 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp12_, (GtkWidget*) _tmp13_);
#line 62 "../src/Views/Date.vala"
	_tmp14_ = (GtkRevealer*) gtk_revealer_new ();
#line 62 "../src/Views/Date.vala"
	gtk_revealer_set_transition_type (_tmp14_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 62 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp14_);
#line 62 "../src/Views/Date.vala"
	_g_object_unref0 (self->priv->overdue_revealer);
#line 62 "../src/Views/Date.vala"
	self->priv->overdue_revealer = _tmp14_;
#line 65 "../src/Views/Date.vala"
	_tmp15_ = self->priv->overdue_revealer;
#line 65 "../src/Views/Date.vala"
	_tmp16_ = overdue_grid;
#line 65 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp15_, (GtkWidget*) _tmp16_);
#line 67 "../src/Views/Date.vala"
	_tmp17_ = (GtkLabel*) gtk_label_new (_ ("Today"));
#line 67 "../src/Views/Date.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp17_, GTK_ALIGN_START);
#line 67 "../src/Views/Date.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp17_, GTK_ALIGN_CENTER);
#line 67 "../src/Views/Date.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp17_, TRUE);
#line 67 "../src/Views/Date.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp17_, 6);
#line 67 "../src/Views/Date.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp17_, 6);
#line 67 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp17_);
#line 67 "../src/Views/Date.vala"
	today_label = _tmp17_;
#line 74 "../src/Views/Date.vala"
	_tmp18_ = today_label;
#line 74 "../src/Views/Date.vala"
	_tmp19_ = gtk_widget_get_style_context ((GtkWidget*) _tmp18_);
#line 74 "../src/Views/Date.vala"
	gtk_style_context_add_class (_tmp19_, "font-bold");
#line 76 "../src/Views/Date.vala"
	_tmp20_ = (GtkRevealer*) gtk_revealer_new ();
#line 76 "../src/Views/Date.vala"
	gtk_revealer_set_transition_type (_tmp20_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 76 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp20_);
#line 76 "../src/Views/Date.vala"
	_g_object_unref0 (self->priv->today_label_revealer);
#line 76 "../src/Views/Date.vala"
	self->priv->today_label_revealer = _tmp20_;
#line 79 "../src/Views/Date.vala"
	_tmp21_ = self->priv->today_label_revealer;
#line 79 "../src/Views/Date.vala"
	_tmp22_ = today_label;
#line 79 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp21_, (GtkWidget*) _tmp22_);
#line 81 "../src/Views/Date.vala"
	_tmp23_ = (GtkListBox*) gtk_list_box_new ();
#line 81 "../src/Views/Date.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp23_, GTK_ALIGN_START);
#line 81 "../src/Views/Date.vala"
	gtk_list_box_set_activate_on_single_click (_tmp23_, TRUE);
#line 81 "../src/Views/Date.vala"
	gtk_list_box_set_selection_mode (_tmp23_, GTK_SELECTION_SINGLE);
#line 81 "../src/Views/Date.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp23_, TRUE);
#line 81 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp23_);
#line 81 "../src/Views/Date.vala"
	_g_object_unref0 (self->priv->listbox);
#line 81 "../src/Views/Date.vala"
	self->priv->listbox = _tmp23_;
#line 88 "../src/Views/Date.vala"
	_tmp24_ = self->priv->_is_today_view;
#line 88 "../src/Views/Date.vala"
	if (!_tmp24_) {
#line 2472 "Date.c"
		GtkListBox* _tmp25_;
		GtkWidget* _tmp26_;
		GtkWidget* _tmp27_;
#line 89 "../src/Views/Date.vala"
		_tmp25_ = self->priv->listbox;
#line 89 "../src/Views/Date.vala"
		_tmp26_ = views_date_get_placeholder (self);
#line 89 "../src/Views/Date.vala"
		_tmp27_ = _tmp26_;
#line 89 "../src/Views/Date.vala"
		gtk_list_box_set_placeholder (_tmp25_, _tmp27_);
#line 89 "../src/Views/Date.vala"
		_g_object_unref0 (_tmp27_);
#line 2486 "Date.c"
	}
#line 92 "../src/Views/Date.vala"
	_tmp28_ = self->priv->listbox;
#line 92 "../src/Views/Date.vala"
	_tmp29_ = gtk_widget_get_style_context ((GtkWidget*) _tmp28_);
#line 92 "../src/Views/Date.vala"
	listbox_context = _tmp29_;
#line 93 "../src/Views/Date.vala"
	_tmp30_ = listbox_context;
#line 93 "../src/Views/Date.vala"
	gtk_style_context_add_class (_tmp30_, "listbox-background");
#line 95 "../src/Views/Date.vala"
	_tmp31_ = (GtkGrid*) gtk_grid_new ();
#line 95 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp31_);
#line 95 "../src/Views/Date.vala"
	listbox_grid = _tmp31_;
#line 96 "../src/Views/Date.vala"
	_tmp32_ = listbox_grid;
#line 96 "../src/Views/Date.vala"
	_tmp33_ = self->priv->listbox;
#line 96 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp32_, (GtkWidget*) _tmp33_);
#line 98 "../src/Views/Date.vala"
	_tmp34_ = (GtkGrid*) gtk_grid_new ();
#line 98 "../src/Views/Date.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp34_, GTK_ORIENTATION_VERTICAL);
#line 98 "../src/Views/Date.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp34_, TRUE);
#line 98 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp34_);
#line 98 "../src/Views/Date.vala"
	main_grid = _tmp34_;
#line 103 "../src/Views/Date.vala"
	_tmp35_ = main_grid;
#line 103 "../src/Views/Date.vala"
	_tmp36_ = self->priv->overdue_revealer;
#line 103 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp35_, (GtkWidget*) _tmp36_);
#line 104 "../src/Views/Date.vala"
	_tmp37_ = main_grid;
#line 104 "../src/Views/Date.vala"
	_tmp38_ = self->priv->today_label_revealer;
#line 104 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp37_, (GtkWidget*) _tmp38_);
#line 105 "../src/Views/Date.vala"
	_tmp39_ = main_grid;
#line 105 "../src/Views/Date.vala"
	_tmp40_ = listbox_grid;
#line 105 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp39_, (GtkWidget*) _tmp40_);
#line 107 "../src/Views/Date.vala"
	_tmp41_ = (GtkRevealer*) gtk_revealer_new ();
#line 107 "../src/Views/Date.vala"
	gtk_revealer_set_transition_type (_tmp41_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 107 "../src/Views/Date.vala"
	g_object_ref_sink (_tmp41_);
#line 107 "../src/Views/Date.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 107 "../src/Views/Date.vala"
	self->priv->main_revealer = _tmp41_;
#line 110 "../src/Views/Date.vala"
	_tmp42_ = self->priv->main_revealer;
#line 110 "../src/Views/Date.vala"
	_tmp43_ = main_grid;
#line 110 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) _tmp42_, (GtkWidget*) _tmp43_);
#line 112 "../src/Views/Date.vala"
	_tmp44_ = self->priv->main_revealer;
#line 112 "../src/Views/Date.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp44_);
#line 114 "../src/Views/Date.vala"
	_tmp45_ = self->priv->main_revealer;
#line 114 "../src/Views/Date.vala"
	_tmp46_ = gtk_revealer_get_transition_duration (_tmp45_);
#line 114 "../src/Views/Date.vala"
	_tmp47_ = _tmp46_;
#line 114 "../src/Views/Date.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp47_, __views_date___lambda265__gsource_func, g_object_ref (self), g_object_unref);
#line 119 "../src/Views/Date.vala"
	g_signal_connect_object ((GObject*) self, "notify::date", (GCallback) __views_date___lambda266__g_object_notify, self, 0);
#line 129 "../src/Views/Date.vala"
	_tmp48_ = self->priv->_is_today_view;
#line 129 "../src/Views/Date.vala"
	if (_tmp48_) {
#line 2572 "Date.c"
		GDateTime* _tmp49_;
		GDateTime* _tmp50_;
#line 130 "../src/Views/Date.vala"
		_tmp49_ = g_date_time_new_now_local ();
#line 130 "../src/Views/Date.vala"
		_tmp50_ = _tmp49_;
#line 130 "../src/Views/Date.vala"
		views_date_set_date (self, _tmp50_);
#line 130 "../src/Views/Date.vala"
		_g_date_time_unref0 (_tmp50_);
#line 2583 "Date.c"
	}
#line 133 "../src/Views/Date.vala"
	_tmp51_ = self->priv->overdue_listbox;
#line 133 "../src/Views/Date.vala"
	g_signal_connect_object ((GtkContainer*) _tmp51_, "add", (GCallback) _views_date_update_headers_gtk_container_add, self, 0);
#line 134 "../src/Views/Date.vala"
	_tmp52_ = self->priv->overdue_listbox;
#line 134 "../src/Views/Date.vala"
	g_signal_connect_object ((GtkContainer*) _tmp52_, "remove", (GCallback) _views_date_update_headers_gtk_container_remove, self, 0);
#line 135 "../src/Views/Date.vala"
	_tmp53_ = self->priv->listbox;
#line 135 "../src/Views/Date.vala"
	g_signal_connect_object ((GtkContainer*) _tmp53_, "add", (GCallback) _views_date_update_headers_gtk_container_add, self, 0);
#line 136 "../src/Views/Date.vala"
	_tmp54_ = self->priv->listbox;
#line 136 "../src/Views/Date.vala"
	g_signal_connect_object ((GtkContainer*) _tmp54_, "remove", (GCallback) _views_date_update_headers_gtk_container_remove, self, 0);
#line 138 "../src/Views/Date.vala"
	_tmp55_ = planner_database;
#line 138 "../src/Views/Date.vala"
	g_signal_connect_object (_tmp55_, "item-added", (GCallback) _views_date_valid_add_item_services_database_item_added, self, 0);
#line 139 "../src/Views/Date.vala"
	_tmp56_ = planner_database;
#line 139 "../src/Views/Date.vala"
	g_signal_connect_object (_tmp56_, "item-deleted", (GCallback) _views_date_valid_delete_item_services_database_item_deleted, self, 0);
#line 140 "../src/Views/Date.vala"
	_tmp57_ = planner_database;
#line 140 "../src/Views/Date.vala"
	g_signal_connect_object (_tmp57_, "item-updated", (GCallback) _views_date_valid_update_item_services_database_item_updated, self, 0);
#line 32 "../src/Views/Date.vala"
	_g_object_unref0 (main_grid);
#line 32 "../src/Views/Date.vala"
	_g_object_unref0 (listbox_grid);
#line 32 "../src/Views/Date.vala"
	_g_object_unref0 (today_label);
#line 32 "../src/Views/Date.vala"
	_g_object_unref0 (overdue_grid);
#line 32 "../src/Views/Date.vala"
	_g_object_unref0 (overdue_label);
#line 32 "../src/Views/Date.vala"
	return obj;
#line 2625 "Date.c"
}

static void
views_date_class_init (ViewsDateClass * klass,
                       gpointer klass_data)
{
#line 1 "../src/Views/Date.vala"
	views_date_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Views/Date.vala"
	g_type_class_adjust_private_offset (klass, &ViewsDate_private_offset);
#line 1 "../src/Views/Date.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_views_date_get_property;
#line 1 "../src/Views/Date.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_views_date_set_property;
#line 1 "../src/Views/Date.vala"
	G_OBJECT_CLASS (klass)->constructor = views_date_constructor;
#line 1 "../src/Views/Date.vala"
	G_OBJECT_CLASS (klass)->finalize = views_date_finalize;
#line 1 "../src/Views/Date.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_DATE_DATE_PROPERTY, views_date_properties[VIEWS_DATE_DATE_PROPERTY] = g_param_spec_boxed ("date", "date", "date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1 "../src/Views/Date.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_DATE_IS_TODAY_VIEW_PROPERTY, views_date_properties[VIEWS_DATE_IS_TODAY_VIEW_PROPERTY] = g_param_spec_boolean ("is-today-view", "is-today-view", "is-today-view", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 2648 "Date.c"
}

static void
views_date_instance_init (ViewsDate * self,
                          gpointer klass)
{
#line 1 "../src/Views/Date.vala"
	self->priv = views_date_get_instance_private (self);
#line 2657 "Date.c"
}

static void
views_date_finalize (GObject * obj)
{
	ViewsDate * self;
#line 1 "../src/Views/Date.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_DATE, ViewsDate);
#line 2 "../src/Views/Date.vala"
	_g_date_time_unref0 (self->priv->_date);
#line 5 "../src/Views/Date.vala"
	_g_object_unref0 (self->priv->overdue_listbox);
#line 6 "../src/Views/Date.vala"
	_g_object_unref0 (self->priv->listbox);
#line 7 "../src/Views/Date.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 8 "../src/Views/Date.vala"
	_g_object_unref0 (self->priv->overdue_revealer);
#line 9 "../src/Views/Date.vala"
	_g_object_unref0 (self->priv->today_label_revealer);
#line 11 "../src/Views/Date.vala"
	_g_object_unref0 (self->overdue_items);
#line 12 "../src/Views/Date.vala"
	_g_object_unref0 (self->items);
#line 1 "../src/Views/Date.vala"
	G_OBJECT_CLASS (views_date_parent_class)->finalize (obj);
#line 2684 "Date.c"
}

static GType
views_date_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ViewsDateClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_date_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsDate), 0, (GInstanceInitFunc) views_date_instance_init, NULL };
	GType views_date_type_id;
	views_date_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsDate", &g_define_type_info, 0);
	ViewsDate_private_offset = g_type_add_instance_private (views_date_type_id, sizeof (ViewsDatePrivate));
	return views_date_type_id;
}

GType
views_date_get_type (void)
{
	static volatile gsize views_date_type_id__volatile = 0;
	if (g_once_init_enter (&views_date_type_id__volatile)) {
		GType views_date_type_id;
		views_date_type_id = views_date_get_type_once ();
		g_once_init_leave (&views_date_type_id__volatile, views_date_type_id);
	}
	return views_date_type_id__volatile;
}

static void
_vala_views_date_get_property (GObject * object,
                               guint property_id,
                               GValue * value,
                               GParamSpec * pspec)
{
	ViewsDate * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_DATE, ViewsDate);
#line 1 "../src/Views/Date.vala"
	switch (property_id) {
#line 1 "../src/Views/Date.vala"
		case VIEWS_DATE_DATE_PROPERTY:
#line 1 "../src/Views/Date.vala"
		g_value_set_boxed (value, views_date_get_date (self));
#line 1 "../src/Views/Date.vala"
		break;
#line 1 "../src/Views/Date.vala"
		case VIEWS_DATE_IS_TODAY_VIEW_PROPERTY:
#line 1 "../src/Views/Date.vala"
		g_value_set_boolean (value, views_date_get_is_today_view (self));
#line 1 "../src/Views/Date.vala"
		break;
#line 2731 "Date.c"
		default:
#line 1 "../src/Views/Date.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/Date.vala"
		break;
#line 2737 "Date.c"
	}
}

static void
_vala_views_date_set_property (GObject * object,
                               guint property_id,
                               const GValue * value,
                               GParamSpec * pspec)
{
	ViewsDate * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_DATE, ViewsDate);
#line 1 "../src/Views/Date.vala"
	switch (property_id) {
#line 1 "../src/Views/Date.vala"
		case VIEWS_DATE_DATE_PROPERTY:
#line 1 "../src/Views/Date.vala"
		views_date_set_date (self, g_value_get_boxed (value));
#line 1 "../src/Views/Date.vala"
		break;
#line 1 "../src/Views/Date.vala"
		case VIEWS_DATE_IS_TODAY_VIEW_PROPERTY:
#line 1 "../src/Views/Date.vala"
		views_date_set_is_today_view (self, g_value_get_boolean (value));
#line 1 "../src/Views/Date.vala"
		break;
#line 2763 "Date.c"
		default:
#line 1 "../src/Views/Date.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/Date.vala"
		break;
#line 2769 "Date.c"
	}
}

