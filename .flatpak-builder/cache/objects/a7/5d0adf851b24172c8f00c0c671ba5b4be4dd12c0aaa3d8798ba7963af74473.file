/* Color.c generated by valac 0.50.10, the Vala compiler
 * generated from Color.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#define OBJECTS_TYPE_COLOR (objects_color_get_type ())
#define OBJECTS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_COLOR, ObjectsColor))
#define OBJECTS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_COLOR, ObjectsColorClass))
#define OBJECTS_IS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_COLOR))
#define OBJECTS_IS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_COLOR))
#define OBJECTS_COLOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_COLOR, ObjectsColorClass))

typedef struct _ObjectsColor ObjectsColor;
typedef struct _ObjectsColorClass ObjectsColorClass;
typedef struct _ObjectsColorPrivate ObjectsColorPrivate;
enum  {
	OBJECTS_COLOR_0_PROPERTY,
	OBJECTS_COLOR_ID_PROPERTY,
	OBJECTS_COLOR_NAME_PROPERTY,
	OBJECTS_COLOR_HEXADECIMAL_PROPERTY,
	OBJECTS_COLOR_NUM_PROPERTIES
};
static GParamSpec* objects_color_properties[OBJECTS_COLOR_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

struct _ObjectsColor {
	GObject parent_instance;
	ObjectsColorPrivate * priv;
};

struct _ObjectsColorClass {
	GObjectClass parent_class;
};

struct _ObjectsColorPrivate {
	gint _id;
	gchar* _name;
	gchar* _hexadecimal;
};

static gint ObjectsColor_private_offset;
static gpointer objects_color_parent_class = NULL;

GType objects_color_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsColor, g_object_unref)
ObjectsColor* objects_color_new (gint id,
                                 const gchar* name,
                                 const gchar* hexadecimal);
ObjectsColor* objects_color_construct (GType object_type,
                                       gint id,
                                       const gchar* name,
                                       const gchar* hexadecimal);
gint objects_color_get_id (ObjectsColor* self);
static void objects_color_set_id (ObjectsColor* self,
                           gint value);
const gchar* objects_color_get_name (ObjectsColor* self);
static void objects_color_set_name (ObjectsColor* self,
                             const gchar* value);
const gchar* objects_color_get_hexadecimal (ObjectsColor* self);
static void objects_color_set_hexadecimal (ObjectsColor* self,
                                    const gchar* value);
static void objects_color_finalize (GObject * obj);
static GType objects_color_get_type_once (void);
static void _vala_objects_color_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec);
static void _vala_objects_color_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec);

static inline gpointer
objects_color_get_instance_private (ObjectsColor* self)
{
	return G_STRUCT_MEMBER_P (self, ObjectsColor_private_offset);
}

ObjectsColor*
objects_color_construct (GType object_type,
                         gint id,
                         const gchar* name,
                         const gchar* hexadecimal)
{
	ObjectsColor * self = NULL;
#line 6 "../src/Objects/Color.vala"
	g_return_val_if_fail (name != NULL, NULL);
#line 6 "../src/Objects/Color.vala"
	g_return_val_if_fail (hexadecimal != NULL, NULL);
#line 7 "../src/Objects/Color.vala"
	self = (ObjectsColor*) g_object_new (object_type, "id", id, "name", name, "hexadecimal", hexadecimal, NULL);
#line 6 "../src/Objects/Color.vala"
	return self;
#line 98 "Color.c"
}

ObjectsColor*
objects_color_new (gint id,
                   const gchar* name,
                   const gchar* hexadecimal)
{
#line 6 "../src/Objects/Color.vala"
	return objects_color_construct (OBJECTS_TYPE_COLOR, id, name, hexadecimal);
#line 108 "Color.c"
}

gint
objects_color_get_id (ObjectsColor* self)
{
	gint result;
#line 2 "../src/Objects/Color.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 2 "../src/Objects/Color.vala"
	result = self->priv->_id;
#line 2 "../src/Objects/Color.vala"
	return result;
#line 121 "Color.c"
}

static void
objects_color_set_id (ObjectsColor* self,
                      gint value)
{
	gint old_value;
#line 2 "../src/Objects/Color.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Objects/Color.vala"
	old_value = objects_color_get_id (self);
#line 2 "../src/Objects/Color.vala"
	if (old_value != value) {
#line 2 "../src/Objects/Color.vala"
		self->priv->_id = value;
#line 2 "../src/Objects/Color.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_color_properties[OBJECTS_COLOR_ID_PROPERTY]);
#line 139 "Color.c"
	}
}

const gchar*
objects_color_get_name (ObjectsColor* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 3 "../src/Objects/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 3 "../src/Objects/Color.vala"
	_tmp0_ = self->priv->_name;
#line 3 "../src/Objects/Color.vala"
	result = _tmp0_;
#line 3 "../src/Objects/Color.vala"
	return result;
#line 156 "Color.c"
}

static void
objects_color_set_name (ObjectsColor* self,
                        const gchar* value)
{
	gchar* old_value;
#line 3 "../src/Objects/Color.vala"
	g_return_if_fail (self != NULL);
#line 3 "../src/Objects/Color.vala"
	old_value = objects_color_get_name (self);
#line 3 "../src/Objects/Color.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 170 "Color.c"
		gchar* _tmp0_;
#line 3 "../src/Objects/Color.vala"
		_tmp0_ = g_strdup (value);
#line 3 "../src/Objects/Color.vala"
		_g_free0 (self->priv->_name);
#line 3 "../src/Objects/Color.vala"
		self->priv->_name = _tmp0_;
#line 3 "../src/Objects/Color.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_color_properties[OBJECTS_COLOR_NAME_PROPERTY]);
#line 180 "Color.c"
	}
}

const gchar*
objects_color_get_hexadecimal (ObjectsColor* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 4 "../src/Objects/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 4 "../src/Objects/Color.vala"
	_tmp0_ = self->priv->_hexadecimal;
#line 4 "../src/Objects/Color.vala"
	result = _tmp0_;
#line 4 "../src/Objects/Color.vala"
	return result;
#line 197 "Color.c"
}

static void
objects_color_set_hexadecimal (ObjectsColor* self,
                               const gchar* value)
{
	gchar* old_value;
#line 4 "../src/Objects/Color.vala"
	g_return_if_fail (self != NULL);
#line 4 "../src/Objects/Color.vala"
	old_value = objects_color_get_hexadecimal (self);
#line 4 "../src/Objects/Color.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 211 "Color.c"
		gchar* _tmp0_;
#line 4 "../src/Objects/Color.vala"
		_tmp0_ = g_strdup (value);
#line 4 "../src/Objects/Color.vala"
		_g_free0 (self->priv->_hexadecimal);
#line 4 "../src/Objects/Color.vala"
		self->priv->_hexadecimal = _tmp0_;
#line 4 "../src/Objects/Color.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_color_properties[OBJECTS_COLOR_HEXADECIMAL_PROPERTY]);
#line 221 "Color.c"
	}
}

static void
objects_color_class_init (ObjectsColorClass * klass,
                          gpointer klass_data)
{
#line 1 "../src/Objects/Color.vala"
	objects_color_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Objects/Color.vala"
	g_type_class_adjust_private_offset (klass, &ObjectsColor_private_offset);
#line 1 "../src/Objects/Color.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_objects_color_get_property;
#line 1 "../src/Objects/Color.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_objects_color_set_property;
#line 1 "../src/Objects/Color.vala"
	G_OBJECT_CLASS (klass)->finalize = objects_color_finalize;
#line 1 "../src/Objects/Color.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_COLOR_ID_PROPERTY, objects_color_properties[OBJECTS_COLOR_ID_PROPERTY] = g_param_spec_int ("id", "id", "id", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Objects/Color.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_COLOR_NAME_PROPERTY, objects_color_properties[OBJECTS_COLOR_NAME_PROPERTY] = g_param_spec_string ("name", "name", "name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Objects/Color.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_COLOR_HEXADECIMAL_PROPERTY, objects_color_properties[OBJECTS_COLOR_HEXADECIMAL_PROPERTY] = g_param_spec_string ("hexadecimal", "hexadecimal", "hexadecimal", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 245 "Color.c"
}

static void
objects_color_instance_init (ObjectsColor * self,
                             gpointer klass)
{
#line 1 "../src/Objects/Color.vala"
	self->priv = objects_color_get_instance_private (self);
#line 254 "Color.c"
}

static void
objects_color_finalize (GObject * obj)
{
	ObjectsColor * self;
#line 1 "../src/Objects/Color.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_COLOR, ObjectsColor);
#line 3 "../src/Objects/Color.vala"
	_g_free0 (self->priv->_name);
#line 4 "../src/Objects/Color.vala"
	_g_free0 (self->priv->_hexadecimal);
#line 1 "../src/Objects/Color.vala"
	G_OBJECT_CLASS (objects_color_parent_class)->finalize (obj);
#line 269 "Color.c"
}

static GType
objects_color_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ObjectsColorClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_color_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsColor), 0, (GInstanceInitFunc) objects_color_instance_init, NULL };
	GType objects_color_type_id;
	objects_color_type_id = g_type_register_static (G_TYPE_OBJECT, "ObjectsColor", &g_define_type_info, 0);
	ObjectsColor_private_offset = g_type_add_instance_private (objects_color_type_id, sizeof (ObjectsColorPrivate));
	return objects_color_type_id;
}

GType
objects_color_get_type (void)
{
	static volatile gsize objects_color_type_id__volatile = 0;
	if (g_once_init_enter (&objects_color_type_id__volatile)) {
		GType objects_color_type_id;
		objects_color_type_id = objects_color_get_type_once ();
		g_once_init_leave (&objects_color_type_id__volatile, objects_color_type_id);
	}
	return objects_color_type_id__volatile;
}

static void
_vala_objects_color_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec)
{
	ObjectsColor * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_COLOR, ObjectsColor);
#line 1 "../src/Objects/Color.vala"
	switch (property_id) {
#line 1 "../src/Objects/Color.vala"
		case OBJECTS_COLOR_ID_PROPERTY:
#line 1 "../src/Objects/Color.vala"
		g_value_set_int (value, objects_color_get_id (self));
#line 1 "../src/Objects/Color.vala"
		break;
#line 1 "../src/Objects/Color.vala"
		case OBJECTS_COLOR_NAME_PROPERTY:
#line 1 "../src/Objects/Color.vala"
		g_value_set_string (value, objects_color_get_name (self));
#line 1 "../src/Objects/Color.vala"
		break;
#line 1 "../src/Objects/Color.vala"
		case OBJECTS_COLOR_HEXADECIMAL_PROPERTY:
#line 1 "../src/Objects/Color.vala"
		g_value_set_string (value, objects_color_get_hexadecimal (self));
#line 1 "../src/Objects/Color.vala"
		break;
#line 322 "Color.c"
		default:
#line 1 "../src/Objects/Color.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Objects/Color.vala"
		break;
#line 328 "Color.c"
	}
}

static void
_vala_objects_color_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec)
{
	ObjectsColor * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_COLOR, ObjectsColor);
#line 1 "../src/Objects/Color.vala"
	switch (property_id) {
#line 1 "../src/Objects/Color.vala"
		case OBJECTS_COLOR_ID_PROPERTY:
#line 1 "../src/Objects/Color.vala"
		objects_color_set_id (self, g_value_get_int (value));
#line 1 "../src/Objects/Color.vala"
		break;
#line 1 "../src/Objects/Color.vala"
		case OBJECTS_COLOR_NAME_PROPERTY:
#line 1 "../src/Objects/Color.vala"
		objects_color_set_name (self, g_value_get_string (value));
#line 1 "../src/Objects/Color.vala"
		break;
#line 1 "../src/Objects/Color.vala"
		case OBJECTS_COLOR_HEXADECIMAL_PROPERTY:
#line 1 "../src/Objects/Color.vala"
		objects_color_set_hexadecimal (self, g_value_get_string (value));
#line 1 "../src/Objects/Color.vala"
		break;
#line 360 "Color.c"
		default:
#line 1 "../src/Objects/Color.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Objects/Color.vala"
		break;
#line 366 "Color.c"
	}
}

