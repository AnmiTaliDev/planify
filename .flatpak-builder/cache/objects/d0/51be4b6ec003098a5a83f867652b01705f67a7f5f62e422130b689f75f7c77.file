/* LabelChild.c generated by valac 0.50.10, the Vala compiler
 * generated from LabelChild.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gdk/gdk.h>

#define LAYOUTS_TYPE_LABEL_CHILD (layouts_label_child_get_type ())
#define LAYOUTS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_LABEL_CHILD, LayoutsLabelChild))
#define LAYOUTS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_LABEL_CHILD, LayoutsLabelChildClass))
#define LAYOUTS_IS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_LABEL_CHILD))
#define LAYOUTS_IS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_LABEL_CHILD))
#define LAYOUTS_LABEL_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_LABEL_CHILD, LayoutsLabelChildClass))

typedef struct _LayoutsLabelChild LayoutsLabelChild;
typedef struct _LayoutsLabelChildClass LayoutsLabelChildClass;
typedef struct _LayoutsLabelChildPrivate LayoutsLabelChildPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
enum  {
	LAYOUTS_LABEL_CHILD_0_PROPERTY,
	LAYOUTS_LABEL_CHILD_LABEL_PROPERTY,
	LAYOUTS_LABEL_CHILD_NUM_PROPERTIES
};
static GParamSpec* layouts_label_child_properties[LAYOUTS_LABEL_CHILD_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;
typedef enum  {
	PANE_TYPE_FILTER,
	PANE_TYPE_FAVORITE,
	PANE_TYPE_PROJECT,
	PANE_TYPE_LABEL,
	PANE_TYPE_TASKLIST
} PaneType;

#define TYPE_PANE_TYPE (pane_type_get_type ())

struct _LayoutsLabelChild {
	GtkFlowBoxChild parent_instance;
	LayoutsLabelChildPrivate * priv;
};

struct _LayoutsLabelChildClass {
	GtkFlowBoxChildClass parent_class;
};

struct _LayoutsLabelChildPrivate {
	ObjectsLabel* _label;
	GtkLabel* name_label;
	GtkRevealer* main_revealer;
	GtkGrid* widget_color;
	GtkGrid* handle_grid;
	GtkEventBox* labelrow_eventbox;
};

static gint LayoutsLabelChild_private_offset;
static gpointer layouts_label_child_parent_class = NULL;
extern ServicesEventBus* planner_event_bus;

GType layouts_label_child_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsLabelChild, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
LayoutsLabelChild* layouts_label_child_new (ObjectsLabel* label);
LayoutsLabelChild* layouts_label_child_construct (GType object_type,
                                                  ObjectsLabel* label);
void layouts_label_child_update_request (LayoutsLabelChild* self);
ObjectsLabel* layouts_label_child_get_label (LayoutsLabelChild* self);
const gchar* objects_label_get_name (ObjectsLabel* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
void util_set_widget_color (Util* self,
                            const gchar* color,
                            GtkWidget* widget);
gchar* util_get_color (Util* self,
                       const gchar* key);
const gchar* objects_label_get_color (ObjectsLabel* self);
void layouts_label_child_hide_destroy (LayoutsLabelChild* self);
static gboolean __lambda345_ (LayoutsLabelChild* self);
static gboolean ___lambda345__gsource_func (gpointer self);
static void layouts_label_child_set_label (LayoutsLabelChild* self,
                                    ObjectsLabel* value);
static GObject * layouts_label_child_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties);
static gboolean _layouts_label_child___lambda346_ (LayoutsLabelChild* self);
static gboolean __layouts_label_child___lambda346__gsource_func (gpointer self);
static void _layouts_label_child___lambda347_ (LayoutsLabelChild* self);
static void __layouts_label_child___lambda347__objects_base_object_updated (ObjectsBaseObject* _sender,
                                                                     gpointer self);
static gboolean _layouts_label_child___lambda348_ (LayoutsLabelChild* self,
                                            GtkWidget* sender,
                                            GdkEventButton* evt);
static gboolean ___lambda349_ (LayoutsLabelChild* self);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
GType pane_type_get_type (void) G_GNUC_CONST;
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
static gboolean ____lambda349__gsource_func (gpointer self);
static gboolean __layouts_label_child___lambda348__gtk_widget_button_press_event (GtkWidget* _sender,
                                                                           GdkEventButton* event,
                                                                           gpointer self);
static void _layouts_label_child___lambda350_ (LayoutsLabelChild* self,
                                        PaneType pane_type,
                                        const gchar* id);
static void __layouts_label_child___lambda350__services_event_bus_pane_selected (ServicesEventBus* _sender,
                                                                          PaneType panel_type,
                                                                          const gchar* id,
                                                                          gpointer self);
static void layouts_label_child_finalize (GObject * obj);
static GType layouts_label_child_get_type_once (void);
static void _vala_layouts_label_child_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_layouts_label_child_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);

static inline gpointer
layouts_label_child_get_instance_private (LayoutsLabelChild* self)
{
	return G_STRUCT_MEMBER_P (self, LayoutsLabelChild_private_offset);
}

LayoutsLabelChild*
layouts_label_child_construct (GType object_type,
                               ObjectsLabel* label)
{
	LayoutsLabelChild * self = NULL;
#line 31 "../src/Layouts/LabelChild.vala"
	g_return_val_if_fail (label != NULL, NULL);
#line 32 "../src/Layouts/LabelChild.vala"
	self = (LayoutsLabelChild*) g_object_new (object_type, "label", label, NULL);
#line 31 "../src/Layouts/LabelChild.vala"
	return self;
#line 204 "LabelChild.c"
}

LayoutsLabelChild*
layouts_label_child_new (ObjectsLabel* label)
{
#line 31 "../src/Layouts/LabelChild.vala"
	return layouts_label_child_construct (LAYOUTS_TYPE_LABEL_CHILD, label);
#line 212 "LabelChild.c"
}

void
layouts_label_child_update_request (LayoutsLabelChild* self)
{
	GtkLabel* _tmp0_;
	ObjectsLabel* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	Util* _tmp4_;
	Util* _tmp5_;
	Util* _tmp6_;
	Util* _tmp7_;
	ObjectsLabel* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	GtkGrid* _tmp13_;
#line 107 "../src/Layouts/LabelChild.vala"
	g_return_if_fail (self != NULL);
#line 108 "../src/Layouts/LabelChild.vala"
	_tmp0_ = self->priv->name_label;
#line 108 "../src/Layouts/LabelChild.vala"
	_tmp1_ = self->priv->_label;
#line 108 "../src/Layouts/LabelChild.vala"
	_tmp2_ = objects_label_get_name (_tmp1_);
#line 108 "../src/Layouts/LabelChild.vala"
	_tmp3_ = _tmp2_;
#line 108 "../src/Layouts/LabelChild.vala"
	gtk_label_set_label (_tmp0_, _tmp3_);
#line 109 "../src/Layouts/LabelChild.vala"
	_tmp4_ = util_get_default ();
#line 109 "../src/Layouts/LabelChild.vala"
	_tmp5_ = _tmp4_;
#line 109 "../src/Layouts/LabelChild.vala"
	_tmp6_ = util_get_default ();
#line 109 "../src/Layouts/LabelChild.vala"
	_tmp7_ = _tmp6_;
#line 109 "../src/Layouts/LabelChild.vala"
	_tmp8_ = self->priv->_label;
#line 109 "../src/Layouts/LabelChild.vala"
	_tmp9_ = objects_label_get_color (_tmp8_);
#line 109 "../src/Layouts/LabelChild.vala"
	_tmp10_ = _tmp9_;
#line 109 "../src/Layouts/LabelChild.vala"
	_tmp11_ = util_get_color (_tmp7_, _tmp10_);
#line 109 "../src/Layouts/LabelChild.vala"
	_tmp12_ = _tmp11_;
#line 109 "../src/Layouts/LabelChild.vala"
	_tmp13_ = self->priv->widget_color;
#line 109 "../src/Layouts/LabelChild.vala"
	util_set_widget_color (_tmp5_, _tmp12_, (GtkWidget*) _tmp13_);
#line 109 "../src/Layouts/LabelChild.vala"
	_g_free0 (_tmp12_);
#line 109 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (_tmp7_);
#line 109 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (_tmp5_);
#line 272 "LabelChild.c"
}

static gboolean
__lambda345_ (LayoutsLabelChild* self)
{
	gboolean result = FALSE;
#line 115 "../src/Layouts/LabelChild.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 116 "../src/Layouts/LabelChild.vala"
	result = G_SOURCE_REMOVE;
#line 116 "../src/Layouts/LabelChild.vala"
	return result;
#line 285 "LabelChild.c"
}

static gboolean
___lambda345__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda345_ ((LayoutsLabelChild*) self);
#line 114 "../src/Layouts/LabelChild.vala"
	return result;
#line 295 "LabelChild.c"
}

void
layouts_label_child_hide_destroy (LayoutsLabelChild* self)
{
	GtkRevealer* _tmp0_;
	GtkRevealer* _tmp1_;
	guint _tmp2_;
	guint _tmp3_;
#line 112 "../src/Layouts/LabelChild.vala"
	g_return_if_fail (self != NULL);
#line 113 "../src/Layouts/LabelChild.vala"
	_tmp0_ = self->priv->main_revealer;
#line 113 "../src/Layouts/LabelChild.vala"
	gtk_revealer_set_reveal_child (_tmp0_, FALSE);
#line 114 "../src/Layouts/LabelChild.vala"
	_tmp1_ = self->priv->main_revealer;
#line 114 "../src/Layouts/LabelChild.vala"
	_tmp2_ = gtk_revealer_get_transition_duration (_tmp1_);
#line 114 "../src/Layouts/LabelChild.vala"
	_tmp3_ = _tmp2_;
#line 114 "../src/Layouts/LabelChild.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp3_, ___lambda345__gsource_func, g_object_ref (self), g_object_unref);
#line 319 "LabelChild.c"
}

ObjectsLabel*
layouts_label_child_get_label (LayoutsLabelChild* self)
{
	ObjectsLabel* result;
	ObjectsLabel* _tmp0_;
#line 23 "../src/Layouts/LabelChild.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "../src/Layouts/LabelChild.vala"
	_tmp0_ = self->priv->_label;
#line 23 "../src/Layouts/LabelChild.vala"
	result = _tmp0_;
#line 23 "../src/Layouts/LabelChild.vala"
	return result;
#line 335 "LabelChild.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 23 "../src/Layouts/LabelChild.vala"
	return self ? g_object_ref (self) : NULL;
#line 343 "LabelChild.c"
}

static void
layouts_label_child_set_label (LayoutsLabelChild* self,
                               ObjectsLabel* value)
{
	ObjectsLabel* old_value;
#line 23 "../src/Layouts/LabelChild.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/Layouts/LabelChild.vala"
	old_value = layouts_label_child_get_label (self);
#line 23 "../src/Layouts/LabelChild.vala"
	if (old_value != value) {
#line 357 "LabelChild.c"
		ObjectsLabel* _tmp0_;
#line 23 "../src/Layouts/LabelChild.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 23 "../src/Layouts/LabelChild.vala"
		_g_object_unref0 (self->priv->_label);
#line 23 "../src/Layouts/LabelChild.vala"
		self->priv->_label = _tmp0_;
#line 23 "../src/Layouts/LabelChild.vala"
		g_object_notify_by_pspec ((GObject *) self, layouts_label_child_properties[LAYOUTS_LABEL_CHILD_LABEL_PROPERTY]);
#line 367 "LabelChild.c"
	}
}

static gboolean
_layouts_label_child___lambda346_ (LayoutsLabelChild* self)
{
	GtkRevealer* _tmp0_;
	gboolean result = FALSE;
#line 73 "../src/Layouts/LabelChild.vala"
	_tmp0_ = self->priv->main_revealer;
#line 73 "../src/Layouts/LabelChild.vala"
	gtk_revealer_set_reveal_child (_tmp0_, TRUE);
#line 74 "../src/Layouts/LabelChild.vala"
	result = G_SOURCE_REMOVE;
#line 74 "../src/Layouts/LabelChild.vala"
	return result;
#line 384 "LabelChild.c"
}

static gboolean
__layouts_label_child___lambda346__gsource_func (gpointer self)
{
	gboolean result;
	result = _layouts_label_child___lambda346_ ((LayoutsLabelChild*) self);
#line 72 "../src/Layouts/LabelChild.vala"
	return result;
#line 394 "LabelChild.c"
}

static void
_layouts_label_child___lambda347_ (LayoutsLabelChild* self)
{
#line 78 "../src/Layouts/LabelChild.vala"
	layouts_label_child_update_request (self);
#line 402 "LabelChild.c"
}

static void
__layouts_label_child___lambda347__objects_base_object_updated (ObjectsBaseObject* _sender,
                                                                gpointer self)
{
#line 77 "../src/Layouts/LabelChild.vala"
	_layouts_label_child___lambda347_ ((LayoutsLabelChild*) self);
#line 411 "LabelChild.c"
}

static gboolean
___lambda349_ (LayoutsLabelChild* self)
{
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	gboolean result = FALSE;
#line 84 "../src/Layouts/LabelChild.vala"
	_tmp0_ = self->priv->main_revealer;
#line 84 "../src/Layouts/LabelChild.vala"
	_tmp1_ = gtk_revealer_get_reveal_child (_tmp0_);
#line 84 "../src/Layouts/LabelChild.vala"
	_tmp2_ = _tmp1_;
#line 84 "../src/Layouts/LabelChild.vala"
	if (_tmp2_) {
#line 429 "LabelChild.c"
		ServicesEventBus* _tmp3_;
		ObjectsLabel* _tmp4_;
		const gchar* _tmp5_;
		const gchar* _tmp6_;
#line 85 "../src/Layouts/LabelChild.vala"
		_tmp3_ = planner_event_bus;
#line 85 "../src/Layouts/LabelChild.vala"
		_tmp4_ = self->priv->_label;
#line 85 "../src/Layouts/LabelChild.vala"
		_tmp5_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp4_);
#line 85 "../src/Layouts/LabelChild.vala"
		_tmp6_ = _tmp5_;
#line 85 "../src/Layouts/LabelChild.vala"
		g_signal_emit_by_name (_tmp3_, "pane-selected", PANE_TYPE_LABEL, _tmp6_);
#line 444 "LabelChild.c"
	}
#line 87 "../src/Layouts/LabelChild.vala"
	result = G_SOURCE_REMOVE;
#line 87 "../src/Layouts/LabelChild.vala"
	return result;
#line 450 "LabelChild.c"
}

static gboolean
____lambda349__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda349_ ((LayoutsLabelChild*) self);
#line 83 "../src/Layouts/LabelChild.vala"
	return result;
#line 460 "LabelChild.c"
}

static gboolean
_layouts_label_child___lambda348_ (LayoutsLabelChild* self,
                                   GtkWidget* sender,
                                   GdkEventButton* evt)
{
	gboolean _tmp0_ = FALSE;
	GdkEventType _tmp1_;
	gboolean result = FALSE;
#line 81 "../src/Layouts/LabelChild.vala"
	g_return_val_if_fail (sender != NULL, FALSE);
#line 81 "../src/Layouts/LabelChild.vala"
	g_return_val_if_fail (evt != NULL, FALSE);
#line 82 "../src/Layouts/LabelChild.vala"
	_tmp1_ = evt->type;
#line 82 "../src/Layouts/LabelChild.vala"
	if (_tmp1_ == GDK_BUTTON_PRESS) {
#line 82 "../src/Layouts/LabelChild.vala"
		_tmp0_ = evt->button == ((guint) 1);
#line 481 "LabelChild.c"
	} else {
#line 82 "../src/Layouts/LabelChild.vala"
		_tmp0_ = FALSE;
#line 485 "LabelChild.c"
	}
#line 82 "../src/Layouts/LabelChild.vala"
	if (_tmp0_) {
#line 83 "../src/Layouts/LabelChild.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 120, ____lambda349__gsource_func, g_object_ref (self), g_object_unref);
#line 89 "../src/Layouts/LabelChild.vala"
		result = FALSE;
#line 89 "../src/Layouts/LabelChild.vala"
		return result;
#line 495 "LabelChild.c"
	} else {
		gboolean _tmp2_ = FALSE;
		GdkEventType _tmp3_;
#line 90 "../src/Layouts/LabelChild.vala"
		_tmp3_ = evt->type;
#line 90 "../src/Layouts/LabelChild.vala"
		if (_tmp3_ == GDK_BUTTON_PRESS) {
#line 90 "../src/Layouts/LabelChild.vala"
			_tmp2_ = evt->button == ((guint) 3);
#line 505 "LabelChild.c"
		} else {
#line 90 "../src/Layouts/LabelChild.vala"
			_tmp2_ = FALSE;
#line 509 "LabelChild.c"
		}
#line 90 "../src/Layouts/LabelChild.vala"
		if (_tmp2_) {
#line 92 "../src/Layouts/LabelChild.vala"
			result = FALSE;
#line 92 "../src/Layouts/LabelChild.vala"
			return result;
#line 517 "LabelChild.c"
		}
	}
#line 95 "../src/Layouts/LabelChild.vala"
	result = FALSE;
#line 95 "../src/Layouts/LabelChild.vala"
	return result;
#line 524 "LabelChild.c"
}

static gboolean
__layouts_label_child___lambda348__gtk_widget_button_press_event (GtkWidget* _sender,
                                                                  GdkEventButton* event,
                                                                  gpointer self)
{
	gboolean result;
	result = _layouts_label_child___lambda348_ ((LayoutsLabelChild*) self, _sender, event);
#line 81 "../src/Layouts/LabelChild.vala"
	return result;
#line 536 "LabelChild.c"
}

static void
_layouts_label_child___lambda350_ (LayoutsLabelChild* self,
                                   PaneType pane_type,
                                   const gchar* id)
{
	gboolean _tmp0_ = FALSE;
#line 98 "../src/Layouts/LabelChild.vala"
	g_return_if_fail (id != NULL);
#line 99 "../src/Layouts/LabelChild.vala"
	if (pane_type == PANE_TYPE_LABEL) {
#line 549 "LabelChild.c"
		ObjectsLabel* _tmp1_;
		const gchar* _tmp2_;
		const gchar* _tmp3_;
#line 99 "../src/Layouts/LabelChild.vala"
		_tmp1_ = self->priv->_label;
#line 99 "../src/Layouts/LabelChild.vala"
		_tmp2_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp1_);
#line 99 "../src/Layouts/LabelChild.vala"
		_tmp3_ = _tmp2_;
#line 99 "../src/Layouts/LabelChild.vala"
		_tmp0_ = g_strcmp0 (_tmp3_, id) == 0;
#line 561 "LabelChild.c"
	} else {
#line 99 "../src/Layouts/LabelChild.vala"
		_tmp0_ = FALSE;
#line 565 "LabelChild.c"
	}
#line 99 "../src/Layouts/LabelChild.vala"
	if (_tmp0_) {
#line 569 "LabelChild.c"
		GtkEventBox* _tmp4_;
		GtkStyleContext* _tmp5_;
#line 100 "../src/Layouts/LabelChild.vala"
		_tmp4_ = self->priv->labelrow_eventbox;
#line 100 "../src/Layouts/LabelChild.vala"
		_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) _tmp4_);
#line 100 "../src/Layouts/LabelChild.vala"
		gtk_style_context_add_class (_tmp5_, "selectable-item-selected");
#line 578 "LabelChild.c"
	} else {
		GtkEventBox* _tmp6_;
		GtkStyleContext* _tmp7_;
#line 102 "../src/Layouts/LabelChild.vala"
		_tmp6_ = self->priv->labelrow_eventbox;
#line 102 "../src/Layouts/LabelChild.vala"
		_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) _tmp6_);
#line 102 "../src/Layouts/LabelChild.vala"
		gtk_style_context_remove_class (_tmp7_, "selectable-item-selected");
#line 588 "LabelChild.c"
	}
}

static void
__layouts_label_child___lambda350__services_event_bus_pane_selected (ServicesEventBus* _sender,
                                                                     PaneType panel_type,
                                                                     const gchar* id,
                                                                     gpointer self)
{
#line 98 "../src/Layouts/LabelChild.vala"
	_layouts_label_child___lambda350_ ((LayoutsLabelChild*) self, panel_type, id);
#line 600 "LabelChild.c"
}

static GObject *
layouts_label_child_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	LayoutsLabelChild * self;
	GtkGrid* _tmp0_ = NULL;
	GtkStyleContext* widget_color_context = NULL;
	GtkGrid* _tmp1_;
	GtkStyleContext* _tmp2_;
	GtkStyleContext* _tmp3_;
	ObjectsLabel* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	GtkLabel* _tmp7_;
	GtkLabel* _tmp8_;
	GtkGrid* labelrow_grid = NULL;
	GtkGrid* _tmp9_ = NULL;
	GtkGrid* _tmp10_;
	GtkLabel* _tmp11_;
	GtkGrid* _tmp12_;
	GtkGrid* _tmp13_;
	GtkGrid* _tmp14_;
	GtkEventBox* _tmp15_;
	GtkEventBox* _tmp16_;
	GtkStyleContext* _tmp17_;
	GtkEventBox* _tmp18_;
	GtkGrid* _tmp19_;
	GtkRevealer* _tmp20_ = NULL;
	GtkRevealer* _tmp21_;
	GtkEventBox* _tmp22_;
	GtkRevealer* _tmp23_;
	GtkRevealer* _tmp24_;
	guint _tmp25_;
	guint _tmp26_;
	ObjectsLabel* _tmp27_;
	GtkEventBox* _tmp28_;
	ServicesEventBus* _tmp29_;
#line 37 "../src/Layouts/LabelChild.vala"
	parent_class = G_OBJECT_CLASS (layouts_label_child_parent_class);
#line 37 "../src/Layouts/LabelChild.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 37 "../src/Layouts/LabelChild.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, LAYOUTS_TYPE_LABEL_CHILD, LayoutsLabelChild);
#line 38 "../src/Layouts/LabelChild.vala"
	_tmp0_ = (GtkGrid*) gtk_grid_new ();
#line 38 "../src/Layouts/LabelChild.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp0_, GTK_ALIGN_CENTER);
#line 38 "../src/Layouts/LabelChild.vala"
	g_object_set ((GtkWidget*) _tmp0_, "height-request", 12, NULL);
#line 38 "../src/Layouts/LabelChild.vala"
	g_object_set ((GtkWidget*) _tmp0_, "width-request", 12, NULL);
#line 38 "../src/Layouts/LabelChild.vala"
	g_object_ref_sink (_tmp0_);
#line 38 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->widget_color);
#line 38 "../src/Layouts/LabelChild.vala"
	self->priv->widget_color = _tmp0_;
#line 44 "../src/Layouts/LabelChild.vala"
	_tmp1_ = self->priv->widget_color;
#line 44 "../src/Layouts/LabelChild.vala"
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) _tmp1_);
#line 44 "../src/Layouts/LabelChild.vala"
	widget_color_context = _tmp2_;
#line 45 "../src/Layouts/LabelChild.vala"
	_tmp3_ = widget_color_context;
#line 45 "../src/Layouts/LabelChild.vala"
	gtk_style_context_add_class (_tmp3_, "label-color");
#line 47 "../src/Layouts/LabelChild.vala"
	_tmp4_ = self->priv->_label;
#line 47 "../src/Layouts/LabelChild.vala"
	_tmp5_ = objects_label_get_name (_tmp4_);
#line 47 "../src/Layouts/LabelChild.vala"
	_tmp6_ = _tmp5_;
#line 47 "../src/Layouts/LabelChild.vala"
	_tmp7_ = (GtkLabel*) gtk_label_new (_tmp6_);
#line 47 "../src/Layouts/LabelChild.vala"
	g_object_ref_sink (_tmp7_);
#line 47 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->name_label);
#line 47 "../src/Layouts/LabelChild.vala"
	self->priv->name_label = _tmp7_;
#line 48 "../src/Layouts/LabelChild.vala"
	_tmp8_ = self->priv->name_label;
#line 48 "../src/Layouts/LabelChild.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp8_, GTK_ALIGN_CENTER);
#line 50 "../src/Layouts/LabelChild.vala"
	_tmp9_ = (GtkGrid*) gtk_grid_new ();
#line 50 "../src/Layouts/LabelChild.vala"
	gtk_grid_set_column_spacing (_tmp9_, 6);
#line 50 "../src/Layouts/LabelChild.vala"
	g_object_set ((GtkWidget*) _tmp9_, "margin", 3, NULL);
#line 50 "../src/Layouts/LabelChild.vala"
	g_object_ref_sink (_tmp9_);
#line 50 "../src/Layouts/LabelChild.vala"
	labelrow_grid = _tmp9_;
#line 54 "../src/Layouts/LabelChild.vala"
	_tmp10_ = labelrow_grid;
#line 54 "../src/Layouts/LabelChild.vala"
	_tmp11_ = self->priv->name_label;
#line 54 "../src/Layouts/LabelChild.vala"
	gtk_container_add ((GtkContainer*) _tmp10_, (GtkWidget*) _tmp11_);
#line 56 "../src/Layouts/LabelChild.vala"
	_tmp12_ = (GtkGrid*) gtk_grid_new ();
#line 56 "../src/Layouts/LabelChild.vala"
	g_object_ref_sink (_tmp12_);
#line 56 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->handle_grid);
#line 56 "../src/Layouts/LabelChild.vala"
	self->priv->handle_grid = _tmp12_;
#line 57 "../src/Layouts/LabelChild.vala"
	_tmp13_ = self->priv->handle_grid;
#line 57 "../src/Layouts/LabelChild.vala"
	_tmp14_ = labelrow_grid;
#line 57 "../src/Layouts/LabelChild.vala"
	gtk_container_add ((GtkContainer*) _tmp13_, (GtkWidget*) _tmp14_);
#line 59 "../src/Layouts/LabelChild.vala"
	_tmp15_ = (GtkEventBox*) gtk_event_box_new ();
#line 59 "../src/Layouts/LabelChild.vala"
	g_object_ref_sink (_tmp15_);
#line 59 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->labelrow_eventbox);
#line 59 "../src/Layouts/LabelChild.vala"
	self->priv->labelrow_eventbox = _tmp15_;
#line 60 "../src/Layouts/LabelChild.vala"
	_tmp16_ = self->priv->labelrow_eventbox;
#line 60 "../src/Layouts/LabelChild.vala"
	_tmp17_ = gtk_widget_get_style_context ((GtkWidget*) _tmp16_);
#line 60 "../src/Layouts/LabelChild.vala"
	gtk_style_context_add_class (_tmp17_, "transition");
#line 61 "../src/Layouts/LabelChild.vala"
	_tmp18_ = self->priv->labelrow_eventbox;
#line 61 "../src/Layouts/LabelChild.vala"
	_tmp19_ = self->priv->handle_grid;
#line 61 "../src/Layouts/LabelChild.vala"
	gtk_container_add ((GtkContainer*) _tmp18_, (GtkWidget*) _tmp19_);
#line 63 "../src/Layouts/LabelChild.vala"
	_tmp20_ = (GtkRevealer*) gtk_revealer_new ();
#line 63 "../src/Layouts/LabelChild.vala"
	gtk_revealer_set_transition_type (_tmp20_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 63 "../src/Layouts/LabelChild.vala"
	g_object_ref_sink (_tmp20_);
#line 63 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 63 "../src/Layouts/LabelChild.vala"
	self->priv->main_revealer = _tmp20_;
#line 66 "../src/Layouts/LabelChild.vala"
	_tmp21_ = self->priv->main_revealer;
#line 66 "../src/Layouts/LabelChild.vala"
	_tmp22_ = self->priv->labelrow_eventbox;
#line 66 "../src/Layouts/LabelChild.vala"
	gtk_container_add ((GtkContainer*) _tmp21_, (GtkWidget*) _tmp22_);
#line 68 "../src/Layouts/LabelChild.vala"
	_tmp23_ = self->priv->main_revealer;
#line 68 "../src/Layouts/LabelChild.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp23_);
#line 70 "../src/Layouts/LabelChild.vala"
	layouts_label_child_update_request (self);
#line 72 "../src/Layouts/LabelChild.vala"
	_tmp24_ = self->priv->main_revealer;
#line 72 "../src/Layouts/LabelChild.vala"
	_tmp25_ = gtk_revealer_get_transition_duration (_tmp24_);
#line 72 "../src/Layouts/LabelChild.vala"
	_tmp26_ = _tmp25_;
#line 72 "../src/Layouts/LabelChild.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp26_, __layouts_label_child___lambda346__gsource_func, g_object_ref (self), g_object_unref);
#line 77 "../src/Layouts/LabelChild.vala"
	_tmp27_ = self->priv->_label;
#line 77 "../src/Layouts/LabelChild.vala"
	g_signal_connect_object ((ObjectsBaseObject*) _tmp27_, "updated", (GCallback) __layouts_label_child___lambda347__objects_base_object_updated, self, 0);
#line 81 "../src/Layouts/LabelChild.vala"
	_tmp28_ = self->priv->labelrow_eventbox;
#line 81 "../src/Layouts/LabelChild.vala"
	g_signal_connect_object ((GtkWidget*) _tmp28_, "button-press-event", (GCallback) __layouts_label_child___lambda348__gtk_widget_button_press_event, self, 0);
#line 98 "../src/Layouts/LabelChild.vala"
	_tmp29_ = planner_event_bus;
#line 98 "../src/Layouts/LabelChild.vala"
	g_signal_connect_object (_tmp29_, "pane-selected", (GCallback) __layouts_label_child___lambda350__services_event_bus_pane_selected, self, 0);
#line 37 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (labelrow_grid);
#line 37 "../src/Layouts/LabelChild.vala"
	return obj;
#line 787 "LabelChild.c"
}

static void
layouts_label_child_class_init (LayoutsLabelChildClass * klass,
                                gpointer klass_data)
{
#line 22 "../src/Layouts/LabelChild.vala"
	layouts_label_child_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Layouts/LabelChild.vala"
	g_type_class_adjust_private_offset (klass, &LayoutsLabelChild_private_offset);
#line 22 "../src/Layouts/LabelChild.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_layouts_label_child_get_property;
#line 22 "../src/Layouts/LabelChild.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_layouts_label_child_set_property;
#line 22 "../src/Layouts/LabelChild.vala"
	G_OBJECT_CLASS (klass)->constructor = layouts_label_child_constructor;
#line 22 "../src/Layouts/LabelChild.vala"
	G_OBJECT_CLASS (klass)->finalize = layouts_label_child_finalize;
#line 22 "../src/Layouts/LabelChild.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), LAYOUTS_LABEL_CHILD_LABEL_PROPERTY, layouts_label_child_properties[LAYOUTS_LABEL_CHILD_LABEL_PROPERTY] = g_param_spec_object ("label", "label", "label", OBJECTS_TYPE_LABEL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 808 "LabelChild.c"
}

static void
layouts_label_child_instance_init (LayoutsLabelChild * self,
                                   gpointer klass)
{
#line 22 "../src/Layouts/LabelChild.vala"
	self->priv = layouts_label_child_get_instance_private (self);
#line 817 "LabelChild.c"
}

static void
layouts_label_child_finalize (GObject * obj)
{
	LayoutsLabelChild * self;
#line 22 "../src/Layouts/LabelChild.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, LAYOUTS_TYPE_LABEL_CHILD, LayoutsLabelChild);
#line 23 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->_label);
#line 25 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->name_label);
#line 26 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 27 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->widget_color);
#line 28 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->handle_grid);
#line 29 "../src/Layouts/LabelChild.vala"
	_g_object_unref0 (self->priv->labelrow_eventbox);
#line 22 "../src/Layouts/LabelChild.vala"
	G_OBJECT_CLASS (layouts_label_child_parent_class)->finalize (obj);
#line 840 "LabelChild.c"
}

static GType
layouts_label_child_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (LayoutsLabelChildClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) layouts_label_child_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (LayoutsLabelChild), 0, (GInstanceInitFunc) layouts_label_child_instance_init, NULL };
	GType layouts_label_child_type_id;
	layouts_label_child_type_id = g_type_register_static (gtk_flow_box_child_get_type (), "LayoutsLabelChild", &g_define_type_info, 0);
	LayoutsLabelChild_private_offset = g_type_add_instance_private (layouts_label_child_type_id, sizeof (LayoutsLabelChildPrivate));
	return layouts_label_child_type_id;
}

GType
layouts_label_child_get_type (void)
{
	static volatile gsize layouts_label_child_type_id__volatile = 0;
	if (g_once_init_enter (&layouts_label_child_type_id__volatile)) {
		GType layouts_label_child_type_id;
		layouts_label_child_type_id = layouts_label_child_get_type_once ();
		g_once_init_leave (&layouts_label_child_type_id__volatile, layouts_label_child_type_id);
	}
	return layouts_label_child_type_id__volatile;
}

static void
_vala_layouts_label_child_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	LayoutsLabelChild * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, LAYOUTS_TYPE_LABEL_CHILD, LayoutsLabelChild);
#line 22 "../src/Layouts/LabelChild.vala"
	switch (property_id) {
#line 22 "../src/Layouts/LabelChild.vala"
		case LAYOUTS_LABEL_CHILD_LABEL_PROPERTY:
#line 22 "../src/Layouts/LabelChild.vala"
		g_value_set_object (value, layouts_label_child_get_label (self));
#line 22 "../src/Layouts/LabelChild.vala"
		break;
#line 881 "LabelChild.c"
		default:
#line 22 "../src/Layouts/LabelChild.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Layouts/LabelChild.vala"
		break;
#line 887 "LabelChild.c"
	}
}

static void
_vala_layouts_label_child_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	LayoutsLabelChild * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, LAYOUTS_TYPE_LABEL_CHILD, LayoutsLabelChild);
#line 22 "../src/Layouts/LabelChild.vala"
	switch (property_id) {
#line 22 "../src/Layouts/LabelChild.vala"
		case LAYOUTS_LABEL_CHILD_LABEL_PROPERTY:
#line 22 "../src/Layouts/LabelChild.vala"
		layouts_label_child_set_label (self, g_value_get_object (value));
#line 22 "../src/Layouts/LabelChild.vala"
		break;
#line 907 "LabelChild.c"
		default:
#line 22 "../src/Layouts/LabelChild.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Layouts/LabelChild.vala"
		break;
#line 913 "LabelChild.c"
	}
}

