/* TodoistSync.c generated by valac 0.50.10, the Vala compiler
 * generated from TodoistSync.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <handy.h>
#include <glib.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

#define WIDGETS_TYPE_TODOIST_SYNC (widgets_todoist_sync_get_type ())
#define WIDGETS_TODOIST_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TODOIST_SYNC, WidgetsTodoistSync))
#define WIDGETS_TODOIST_SYNC_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TODOIST_SYNC, WidgetsTodoistSyncClass))
#define WIDGETS_IS_TODOIST_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TODOIST_SYNC))
#define WIDGETS_IS_TODOIST_SYNC_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TODOIST_SYNC))
#define WIDGETS_TODOIST_SYNC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TODOIST_SYNC, WidgetsTodoistSyncClass))

typedef struct _WidgetsTodoistSync WidgetsTodoistSync;
typedef struct _WidgetsTodoistSyncClass WidgetsTodoistSyncClass;
typedef struct _WidgetsTodoistSyncPrivate WidgetsTodoistSyncPrivate;

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;
enum  {
	WIDGETS_TODOIST_SYNC_0_PROPERTY,
	WIDGETS_TODOIST_SYNC_REVEAL_CHILD_PROPERTY,
	WIDGETS_TODOIST_SYNC_NUM_PROPERTIES
};
static GParamSpec* widgets_todoist_sync_properties[WIDGETS_TODOIST_SYNC_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef enum  {
	BACKEND_TYPE_NONE = 0,
	BACKEND_TYPE_LOCAL = 1,
	BACKEND_TYPE_TODOIST = 2,
	BACKEND_TYPE_CALDAV = 3
} BackendType;

#define TYPE_BACKEND_TYPE (backend_type_get_type ())

#define SERVICES_TYPE_TODOIST (services_todoist_get_type ())
#define SERVICES_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_TODOIST, ServicesTodoist))
#define SERVICES_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_TODOIST, ServicesTodoistClass))
#define SERVICES_IS_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_TODOIST))
#define SERVICES_IS_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_TODOIST))
#define SERVICES_TODOIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_TODOIST, ServicesTodoistClass))

typedef struct _ServicesTodoist ServicesTodoist;
typedef struct _ServicesTodoistClass ServicesTodoistClass;

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;

struct _WidgetsTodoistSync {
	GtkEventBox parent_instance;
	WidgetsTodoistSyncPrivate * priv;
};

struct _WidgetsTodoistSyncClass {
	GtkEventBoxClass parent_class;
};

struct _WidgetsTodoistSyncPrivate {
	GtkRevealer* main_revealer;
	WidgetsDynamicIcon* sync_icon;
	HdyAvatar* avatar;
};

static gint WidgetsTodoistSync_private_offset;
static gpointer widgets_todoist_sync_parent_class = NULL;
extern GSettings* planner_settings;
extern ServicesEventBus* planner_event_bus;

GType widgets_todoist_sync_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsTodoistSync, g_object_unref)
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
void widgets_todoist_sync_sync_started (WidgetsTodoistSync* self);
void widgets_todoist_sync_sync_finished (WidgetsTodoistSync* self);
static void widgets_todoist_sync_update (WidgetsTodoistSync* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gchar* util_get_todoist_avatar_path (Util* self);
WidgetsTodoistSync* widgets_todoist_sync_new (void);
WidgetsTodoistSync* widgets_todoist_sync_construct (GType object_type);
void widgets_todoist_sync_set_reveal_child (WidgetsTodoistSync* self,
                                            gboolean value);
static GObject * widgets_todoist_sync_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
void widgets_dynamic_icon_set_icon_name (WidgetsDynamicIcon* self,
                                         const gchar* value);
GType backend_type_get_type (void) G_GNUC_CONST;
static void _widgets_todoist_sync___lambda181_ (WidgetsTodoistSync* self);
GType services_todoist_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesTodoist, g_object_unref)
ServicesTodoist* services_todoist_get_default (void);
void services_todoist_sync_async (ServicesTodoist* self);
static void __widgets_todoist_sync___lambda181__gtk_button_clicked (GtkButton* _sender,
                                                             gpointer self);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
static void _widgets_todoist_sync___lambda182_ (WidgetsTodoistSync* self);
static void __widgets_todoist_sync___lambda182__services_event_bus_avatar_downloaded (ServicesEventBus* _sender,
                                                                               gpointer self);
static void _widgets_todoist_sync___lambda183_ (WidgetsTodoistSync* self,
                                         const gchar* key);
static void __widgets_todoist_sync___lambda183__g_settings_changed (GSettings* _sender,
                                                             const gchar* key,
                                                             gpointer self);
static void widgets_todoist_sync_finalize (GObject * obj);
static GType widgets_todoist_sync_get_type_once (void);
static void _vala_widgets_todoist_sync_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);

static inline gpointer
widgets_todoist_sync_get_instance_private (WidgetsTodoistSync* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsTodoistSync_private_offset);
}

void
widgets_todoist_sync_sync_started (WidgetsTodoistSync* self)
{
	GtkStyleContext* sync_icon_context = NULL;
	WidgetsDynamicIcon* _tmp0_;
	GtkStyleContext* _tmp1_;
#line 95 "../src/Widgets/TodoistSync.vala"
	g_return_if_fail (self != NULL);
#line 96 "../src/Widgets/TodoistSync.vala"
	_tmp0_ = self->priv->sync_icon;
#line 96 "../src/Widgets/TodoistSync.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) _tmp0_);
#line 96 "../src/Widgets/TodoistSync.vala"
	sync_icon_context = _tmp1_;
#line 97 "../src/Widgets/TodoistSync.vala"
	gtk_style_context_add_class (sync_icon_context, "is_loading");
#line 171 "TodoistSync.c"
}

void
widgets_todoist_sync_sync_finished (WidgetsTodoistSync* self)
{
	GtkStyleContext* sync_icon_context = NULL;
	WidgetsDynamicIcon* _tmp0_;
	GtkStyleContext* _tmp1_;
#line 100 "../src/Widgets/TodoistSync.vala"
	g_return_if_fail (self != NULL);
#line 101 "../src/Widgets/TodoistSync.vala"
	_tmp0_ = self->priv->sync_icon;
#line 101 "../src/Widgets/TodoistSync.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) _tmp0_);
#line 101 "../src/Widgets/TodoistSync.vala"
	sync_icon_context = _tmp1_;
#line 102 "../src/Widgets/TodoistSync.vala"
	gtk_style_context_remove_class (sync_icon_context, "is_loading");
#line 190 "TodoistSync.c"
}

static void
widgets_todoist_sync_update (WidgetsTodoistSync* self)
{
	GFile* file = NULL;
	Util* _tmp0_;
	Util* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GFile* _tmp4_;
	GFile* _tmp5_;
	GFile* _tmp6_;
	HdyAvatar* _tmp11_;
	GSettings* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
#line 105 "../src/Widgets/TodoistSync.vala"
	g_return_if_fail (self != NULL);
#line 106 "../src/Widgets/TodoistSync.vala"
	_tmp0_ = util_get_default ();
#line 106 "../src/Widgets/TodoistSync.vala"
	_tmp1_ = _tmp0_;
#line 106 "../src/Widgets/TodoistSync.vala"
	_tmp2_ = util_get_todoist_avatar_path (_tmp1_);
#line 106 "../src/Widgets/TodoistSync.vala"
	_tmp3_ = _tmp2_;
#line 106 "../src/Widgets/TodoistSync.vala"
	_tmp4_ = g_file_new_for_path (_tmp3_);
#line 106 "../src/Widgets/TodoistSync.vala"
	_tmp5_ = _tmp4_;
#line 106 "../src/Widgets/TodoistSync.vala"
	_g_free0 (_tmp3_);
#line 106 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (_tmp1_);
#line 106 "../src/Widgets/TodoistSync.vala"
	file = _tmp5_;
#line 107 "../src/Widgets/TodoistSync.vala"
	_tmp6_ = file;
#line 107 "../src/Widgets/TodoistSync.vala"
	if (g_file_query_exists (_tmp6_, NULL)) {
#line 232 "TodoistSync.c"
		HdyAvatar* _tmp7_;
		GFile* _tmp8_;
		GFileIcon* _tmp9_;
		GFileIcon* _tmp10_;
#line 108 "../src/Widgets/TodoistSync.vala"
		_tmp7_ = self->priv->avatar;
#line 108 "../src/Widgets/TodoistSync.vala"
		_tmp8_ = file;
#line 108 "../src/Widgets/TodoistSync.vala"
		_tmp9_ = (GFileIcon*) g_file_icon_new (_tmp8_);
#line 108 "../src/Widgets/TodoistSync.vala"
		_tmp10_ = _tmp9_;
#line 108 "../src/Widgets/TodoistSync.vala"
		hdy_avatar_set_loadable_icon (_tmp7_, (GLoadableIcon*) _tmp10_);
#line 108 "../src/Widgets/TodoistSync.vala"
		_g_object_unref0 (_tmp10_);
#line 249 "TodoistSync.c"
	}
#line 111 "../src/Widgets/TodoistSync.vala"
	_tmp11_ = self->priv->avatar;
#line 111 "../src/Widgets/TodoistSync.vala"
	_tmp12_ = planner_settings;
#line 111 "../src/Widgets/TodoistSync.vala"
	_tmp13_ = g_settings_get_string (_tmp12_, "todoist-user-name");
#line 111 "../src/Widgets/TodoistSync.vala"
	_tmp14_ = _tmp13_;
#line 111 "../src/Widgets/TodoistSync.vala"
	hdy_avatar_set_text (_tmp11_, _tmp14_);
#line 111 "../src/Widgets/TodoistSync.vala"
	_g_free0 (_tmp14_);
#line 105 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (file);
#line 265 "TodoistSync.c"
}

WidgetsTodoistSync*
widgets_todoist_sync_construct (GType object_type)
{
	WidgetsTodoistSync * self = NULL;
#line 1 "../src/Widgets/TodoistSync.vala"
	self = (WidgetsTodoistSync*) g_object_new (object_type, NULL);
#line 1 "../src/Widgets/TodoistSync.vala"
	return self;
#line 276 "TodoistSync.c"
}

WidgetsTodoistSync*
widgets_todoist_sync_new (void)
{
#line 1 "../src/Widgets/TodoistSync.vala"
	return widgets_todoist_sync_construct (WIDGETS_TYPE_TODOIST_SYNC);
#line 284 "TodoistSync.c"
}

void
widgets_todoist_sync_set_reveal_child (WidgetsTodoistSync* self,
                                       gboolean value)
{
	GtkRevealer* _tmp0_;
#line 7 "../src/Widgets/TodoistSync.vala"
	g_return_if_fail (self != NULL);
#line 8 "../src/Widgets/TodoistSync.vala"
	_tmp0_ = self->priv->main_revealer;
#line 8 "../src/Widgets/TodoistSync.vala"
	gtk_revealer_set_reveal_child (_tmp0_, value);
#line 7 "../src/Widgets/TodoistSync.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_todoist_sync_properties[WIDGETS_TODOIST_SYNC_REVEAL_CHILD_PROPERTY]);
#line 300 "TodoistSync.c"
}

static void
_widgets_todoist_sync___lambda181_ (WidgetsTodoistSync* self)
{
	ServicesTodoist* _tmp0_;
	ServicesTodoist* _tmp1_;
#line 81 "../src/Widgets/TodoistSync.vala"
	_tmp0_ = services_todoist_get_default ();
#line 81 "../src/Widgets/TodoistSync.vala"
	_tmp1_ = _tmp0_;
#line 81 "../src/Widgets/TodoistSync.vala"
	services_todoist_sync_async (_tmp1_);
#line 81 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (_tmp1_);
#line 316 "TodoistSync.c"
}

static void
__widgets_todoist_sync___lambda181__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self)
{
#line 80 "../src/Widgets/TodoistSync.vala"
	_widgets_todoist_sync___lambda181_ ((WidgetsTodoistSync*) self);
#line 325 "TodoistSync.c"
}

static void
_widgets_todoist_sync___lambda182_ (WidgetsTodoistSync* self)
{
#line 85 "../src/Widgets/TodoistSync.vala"
	widgets_todoist_sync_update (self);
#line 333 "TodoistSync.c"
}

static void
__widgets_todoist_sync___lambda182__services_event_bus_avatar_downloaded (ServicesEventBus* _sender,
                                                                          gpointer self)
{
#line 84 "../src/Widgets/TodoistSync.vala"
	_widgets_todoist_sync___lambda182_ ((WidgetsTodoistSync*) self);
#line 342 "TodoistSync.c"
}

static void
_widgets_todoist_sync___lambda183_ (WidgetsTodoistSync* self,
                                    const gchar* key)
{
#line 88 "../src/Widgets/TodoistSync.vala"
	g_return_if_fail (key != NULL);
#line 89 "../src/Widgets/TodoistSync.vala"
	if (g_strcmp0 (key, "backend-type") == 0) {
#line 353 "TodoistSync.c"
		GtkRevealer* _tmp0_;
		GSettings* _tmp1_;
#line 90 "../src/Widgets/TodoistSync.vala"
		_tmp0_ = self->priv->main_revealer;
#line 90 "../src/Widgets/TodoistSync.vala"
		_tmp1_ = planner_settings;
#line 90 "../src/Widgets/TodoistSync.vala"
		gtk_revealer_set_reveal_child (_tmp0_, ((BackendType) g_settings_get_enum (_tmp1_, "backend-type")) == BACKEND_TYPE_TODOIST);
#line 362 "TodoistSync.c"
	}
}

static void
__widgets_todoist_sync___lambda183__g_settings_changed (GSettings* _sender,
                                                        const gchar* key,
                                                        gpointer self)
{
#line 88 "../src/Widgets/TodoistSync.vala"
	_widgets_todoist_sync___lambda183_ ((WidgetsTodoistSync*) self, key);
#line 373 "TodoistSync.c"
}

static GObject *
widgets_todoist_sync_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsTodoistSync * self;
	GtkImage* available_icon = NULL;
	GThemedIcon* _tmp0_;
	GtkImage* _tmp1_ = NULL;
	GSettings* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	HdyAvatar* _tmp5_ = NULL;
	GtkOverlay* todoist_overlay = NULL;
	GtkOverlay* _tmp6_;
	GtkOverlay* _tmp7_;
	GtkImage* _tmp8_;
	GtkOverlay* _tmp9_;
	HdyAvatar* _tmp10_;
	GtkLabel* username_label = NULL;
	GSettings* _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	GtkLabel* _tmp14_;
	GtkLabel* _tmp15_;
	WidgetsDynamicIcon* _tmp16_;
	WidgetsDynamicIcon* _tmp17_;
	WidgetsDynamicIcon* _tmp18_;
	GtkButton* sync_button = NULL;
	GtkButton* _tmp19_ = NULL;
	GtkButton* _tmp20_;
	WidgetsDynamicIcon* _tmp21_;
	GtkStyleContext* sync_button_context = NULL;
	GtkButton* _tmp22_;
	GtkStyleContext* _tmp23_;
	GtkStyleContext* _tmp24_;
	GtkStyleContext* _tmp25_;
	GtkBox* todoist_box = NULL;
	GtkBox* _tmp26_ = NULL;
	GtkBox* _tmp27_;
	GtkOverlay* _tmp28_;
	GtkBox* _tmp29_;
	GtkLabel* _tmp30_;
	GtkBox* _tmp31_;
	GtkButton* _tmp32_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp33_ = NULL;
	GtkStyleContext* main_grid_context = NULL;
	GtkGrid* _tmp34_;
	GtkStyleContext* _tmp35_;
	GtkStyleContext* _tmp36_;
	GtkStyleContext* _tmp37_;
	GtkGrid* _tmp38_;
	GtkBox* _tmp39_;
	GSettings* _tmp40_;
	GtkRevealer* _tmp41_ = NULL;
	GtkRevealer* _tmp42_;
	GtkGrid* _tmp43_;
	GtkRevealer* _tmp44_;
	GSettings* _tmp45_;
	GtkLabel* _tmp46_;
	GtkButton* _tmp47_;
	ServicesEventBus* _tmp48_;
	GSettings* _tmp49_;
#line 12 "../src/Widgets/TodoistSync.vala"
	parent_class = G_OBJECT_CLASS (widgets_todoist_sync_parent_class);
#line 12 "../src/Widgets/TodoistSync.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 12 "../src/Widgets/TodoistSync.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_TODOIST_SYNC, WidgetsTodoistSync);
#line 13 "../src/Widgets/TodoistSync.vala"
	_tmp0_ = (GThemedIcon*) g_themed_icon_new ("user-available");
#line 13 "../src/Widgets/TodoistSync.vala"
	_tmp1_ = (GtkImage*) gtk_image_new ();
#line 13 "../src/Widgets/TodoistSync.vala"
	g_object_set (_tmp1_, "gicon", (GIcon*) _tmp0_, NULL);
#line 13 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (_tmp0_);
#line 13 "../src/Widgets/TodoistSync.vala"
	gtk_image_set_pixel_size (_tmp1_, 13);
#line 13 "../src/Widgets/TodoistSync.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp1_, GTK_ALIGN_END);
#line 13 "../src/Widgets/TodoistSync.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp1_, GTK_ALIGN_END);
#line 13 "../src/Widgets/TodoistSync.vala"
	g_object_ref_sink (_tmp1_);
#line 13 "../src/Widgets/TodoistSync.vala"
	available_icon = _tmp1_;
#line 20 "../src/Widgets/TodoistSync.vala"
	_tmp2_ = planner_settings;
#line 20 "../src/Widgets/TodoistSync.vala"
	_tmp3_ = g_settings_get_string (_tmp2_, "todoist-user-name");
#line 20 "../src/Widgets/TodoistSync.vala"
	_tmp4_ = _tmp3_;
#line 20 "../src/Widgets/TodoistSync.vala"
	_tmp5_ = (HdyAvatar*) hdy_avatar_new (24, _tmp4_, TRUE);
#line 20 "../src/Widgets/TodoistSync.vala"
	g_object_set ((GtkWidget*) _tmp5_, "margin", 3, NULL);
#line 20 "../src/Widgets/TodoistSync.vala"
	g_object_ref_sink (_tmp5_);
#line 20 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (self->priv->avatar);
#line 20 "../src/Widgets/TodoistSync.vala"
	self->priv->avatar = _tmp5_;
#line 20 "../src/Widgets/TodoistSync.vala"
	_g_free0 (_tmp4_);
#line 24 "../src/Widgets/TodoistSync.vala"
	_tmp6_ = (GtkOverlay*) gtk_overlay_new ();
#line 24 "../src/Widgets/TodoistSync.vala"
	g_object_ref_sink (_tmp6_);
#line 24 "../src/Widgets/TodoistSync.vala"
	todoist_overlay = _tmp6_;
#line 26 "../src/Widgets/TodoistSync.vala"
	_tmp7_ = todoist_overlay;
#line 26 "../src/Widgets/TodoistSync.vala"
	_tmp8_ = available_icon;
#line 26 "../src/Widgets/TodoistSync.vala"
	gtk_overlay_add_overlay (_tmp7_, (GtkWidget*) _tmp8_);
#line 27 "../src/Widgets/TodoistSync.vala"
	_tmp9_ = todoist_overlay;
#line 27 "../src/Widgets/TodoistSync.vala"
	_tmp10_ = self->priv->avatar;
#line 27 "../src/Widgets/TodoistSync.vala"
	gtk_container_add ((GtkContainer*) _tmp9_, (GtkWidget*) _tmp10_);
#line 29 "../src/Widgets/TodoistSync.vala"
	_tmp11_ = planner_settings;
#line 29 "../src/Widgets/TodoistSync.vala"
	_tmp12_ = g_settings_get_string (_tmp11_, "todoist-user-name");
#line 29 "../src/Widgets/TodoistSync.vala"
	_tmp13_ = _tmp12_;
#line 29 "../src/Widgets/TodoistSync.vala"
	_tmp14_ = (GtkLabel*) gtk_label_new (_tmp13_);
#line 29 "../src/Widgets/TodoistSync.vala"
	g_object_ref_sink (_tmp14_);
#line 29 "../src/Widgets/TodoistSync.vala"
	_tmp15_ = _tmp14_;
#line 29 "../src/Widgets/TodoistSync.vala"
	_g_free0 (_tmp13_);
#line 29 "../src/Widgets/TodoistSync.vala"
	username_label = _tmp15_;
#line 32 "../src/Widgets/TodoistSync.vala"
	_tmp16_ = widgets_dynamic_icon_new ();
#line 32 "../src/Widgets/TodoistSync.vala"
	g_object_ref_sink (_tmp16_);
#line 32 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (self->priv->sync_icon);
#line 32 "../src/Widgets/TodoistSync.vala"
	self->priv->sync_icon = _tmp16_;
#line 33 "../src/Widgets/TodoistSync.vala"
	_tmp17_ = self->priv->sync_icon;
#line 33 "../src/Widgets/TodoistSync.vala"
	widgets_dynamic_icon_set_size (_tmp17_, 16);
#line 34 "../src/Widgets/TodoistSync.vala"
	_tmp18_ = self->priv->sync_icon;
#line 34 "../src/Widgets/TodoistSync.vala"
	widgets_dynamic_icon_set_icon_name (_tmp18_, "planner-refresh");
#line 36 "../src/Widgets/TodoistSync.vala"
	_tmp19_ = (GtkButton*) gtk_button_new ();
#line 36 "../src/Widgets/TodoistSync.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp19_, GTK_ALIGN_CENTER);
#line 36 "../src/Widgets/TodoistSync.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp19_, FALSE);
#line 36 "../src/Widgets/TodoistSync.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp19_, 6);
#line 36 "../src/Widgets/TodoistSync.vala"
	g_object_ref_sink (_tmp19_);
#line 36 "../src/Widgets/TodoistSync.vala"
	sync_button = _tmp19_;
#line 43 "../src/Widgets/TodoistSync.vala"
	_tmp20_ = sync_button;
#line 43 "../src/Widgets/TodoistSync.vala"
	_tmp21_ = self->priv->sync_icon;
#line 43 "../src/Widgets/TodoistSync.vala"
	gtk_container_add ((GtkContainer*) _tmp20_, (GtkWidget*) _tmp21_);
#line 45 "../src/Widgets/TodoistSync.vala"
	_tmp22_ = sync_button;
#line 45 "../src/Widgets/TodoistSync.vala"
	_tmp23_ = gtk_widget_get_style_context ((GtkWidget*) _tmp22_);
#line 45 "../src/Widgets/TodoistSync.vala"
	sync_button_context = _tmp23_;
#line 46 "../src/Widgets/TodoistSync.vala"
	_tmp24_ = sync_button_context;
#line 46 "../src/Widgets/TodoistSync.vala"
	gtk_style_context_add_class (_tmp24_, GTK_STYLE_CLASS_FLAT);
#line 47 "../src/Widgets/TodoistSync.vala"
	_tmp25_ = sync_button_context;
#line 47 "../src/Widgets/TodoistSync.vala"
	gtk_style_context_add_class (_tmp25_, "no-padding");
#line 49 "../src/Widgets/TodoistSync.vala"
	_tmp26_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 49 "../src/Widgets/TodoistSync.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp26_, TRUE);
#line 49 "../src/Widgets/TodoistSync.vala"
	g_object_ref_sink (_tmp26_);
#line 49 "../src/Widgets/TodoistSync.vala"
	todoist_box = _tmp26_;
#line 53 "../src/Widgets/TodoistSync.vala"
	_tmp27_ = todoist_box;
#line 53 "../src/Widgets/TodoistSync.vala"
	_tmp28_ = todoist_overlay;
#line 53 "../src/Widgets/TodoistSync.vala"
	gtk_box_pack_start (_tmp27_, (GtkWidget*) _tmp28_, FALSE, FALSE, (guint) 0);
#line 54 "../src/Widgets/TodoistSync.vala"
	_tmp29_ = todoist_box;
#line 54 "../src/Widgets/TodoistSync.vala"
	_tmp30_ = username_label;
#line 54 "../src/Widgets/TodoistSync.vala"
	gtk_box_pack_start (_tmp29_, (GtkWidget*) _tmp30_, FALSE, FALSE, (guint) 3);
#line 55 "../src/Widgets/TodoistSync.vala"
	_tmp31_ = todoist_box;
#line 55 "../src/Widgets/TodoistSync.vala"
	_tmp32_ = sync_button;
#line 55 "../src/Widgets/TodoistSync.vala"
	gtk_box_pack_end (_tmp31_, (GtkWidget*) _tmp32_, FALSE, TRUE, (guint) 0);
#line 57 "../src/Widgets/TodoistSync.vala"
	_tmp33_ = (GtkGrid*) gtk_grid_new ();
#line 57 "../src/Widgets/TodoistSync.vala"
	g_object_set ((GtkWidget*) _tmp33_, "margin", 9, NULL);
#line 57 "../src/Widgets/TodoistSync.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp33_, 0);
#line 57 "../src/Widgets/TodoistSync.vala"
	g_object_ref_sink (_tmp33_);
#line 57 "../src/Widgets/TodoistSync.vala"
	main_grid = _tmp33_;
#line 62 "../src/Widgets/TodoistSync.vala"
	_tmp34_ = main_grid;
#line 62 "../src/Widgets/TodoistSync.vala"
	_tmp35_ = gtk_widget_get_style_context ((GtkWidget*) _tmp34_);
#line 62 "../src/Widgets/TodoistSync.vala"
	main_grid_context = _tmp35_;
#line 63 "../src/Widgets/TodoistSync.vala"
	_tmp36_ = main_grid_context;
#line 63 "../src/Widgets/TodoistSync.vala"
	gtk_style_context_add_class (_tmp36_, "pane-content");
#line 64 "../src/Widgets/TodoistSync.vala"
	_tmp37_ = main_grid_context;
#line 64 "../src/Widgets/TodoistSync.vala"
	gtk_style_context_add_class (_tmp37_, "todoist-sync-button");
#line 66 "../src/Widgets/TodoistSync.vala"
	_tmp38_ = main_grid;
#line 66 "../src/Widgets/TodoistSync.vala"
	_tmp39_ = todoist_box;
#line 66 "../src/Widgets/TodoistSync.vala"
	gtk_container_add ((GtkContainer*) _tmp38_, (GtkWidget*) _tmp39_);
#line 68 "../src/Widgets/TodoistSync.vala"
	_tmp40_ = planner_settings;
#line 68 "../src/Widgets/TodoistSync.vala"
	_tmp41_ = (GtkRevealer*) gtk_revealer_new ();
#line 68 "../src/Widgets/TodoistSync.vala"
	gtk_revealer_set_transition_type (_tmp41_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 68 "../src/Widgets/TodoistSync.vala"
	gtk_revealer_set_reveal_child (_tmp41_, ((BackendType) g_settings_get_enum (_tmp40_, "backend-type")) == BACKEND_TYPE_TODOIST);
#line 68 "../src/Widgets/TodoistSync.vala"
	g_object_ref_sink (_tmp41_);
#line 68 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 68 "../src/Widgets/TodoistSync.vala"
	self->priv->main_revealer = _tmp41_;
#line 72 "../src/Widgets/TodoistSync.vala"
	_tmp42_ = self->priv->main_revealer;
#line 72 "../src/Widgets/TodoistSync.vala"
	_tmp43_ = main_grid;
#line 72 "../src/Widgets/TodoistSync.vala"
	gtk_container_add ((GtkContainer*) _tmp42_, (GtkWidget*) _tmp43_);
#line 74 "../src/Widgets/TodoistSync.vala"
	_tmp44_ = self->priv->main_revealer;
#line 74 "../src/Widgets/TodoistSync.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp44_);
#line 76 "../src/Widgets/TodoistSync.vala"
	widgets_todoist_sync_update (self);
#line 78 "../src/Widgets/TodoistSync.vala"
	_tmp45_ = planner_settings;
#line 78 "../src/Widgets/TodoistSync.vala"
	_tmp46_ = username_label;
#line 78 "../src/Widgets/TodoistSync.vala"
	g_settings_bind (_tmp45_, "todoist-user-email", (GObject*) _tmp46_, "label", G_SETTINGS_BIND_DEFAULT);
#line 80 "../src/Widgets/TodoistSync.vala"
	_tmp47_ = sync_button;
#line 80 "../src/Widgets/TodoistSync.vala"
	g_signal_connect_object (_tmp47_, "clicked", (GCallback) __widgets_todoist_sync___lambda181__gtk_button_clicked, self, 0);
#line 84 "../src/Widgets/TodoistSync.vala"
	_tmp48_ = planner_event_bus;
#line 84 "../src/Widgets/TodoistSync.vala"
	g_signal_connect_object (_tmp48_, "avatar-downloaded", (GCallback) __widgets_todoist_sync___lambda182__services_event_bus_avatar_downloaded, self, 0);
#line 88 "../src/Widgets/TodoistSync.vala"
	_tmp49_ = planner_settings;
#line 88 "../src/Widgets/TodoistSync.vala"
	g_signal_connect_object (_tmp49_, "changed", (GCallback) __widgets_todoist_sync___lambda183__g_settings_changed, self, 0);
#line 12 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (main_grid);
#line 12 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (todoist_box);
#line 12 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (sync_button);
#line 12 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (username_label);
#line 12 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (todoist_overlay);
#line 12 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (available_icon);
#line 12 "../src/Widgets/TodoistSync.vala"
	return obj;
#line 680 "TodoistSync.c"
}

static void
widgets_todoist_sync_class_init (WidgetsTodoistSyncClass * klass,
                                 gpointer klass_data)
{
#line 1 "../src/Widgets/TodoistSync.vala"
	widgets_todoist_sync_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Widgets/TodoistSync.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsTodoistSync_private_offset);
#line 1 "../src/Widgets/TodoistSync.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_todoist_sync_set_property;
#line 1 "../src/Widgets/TodoistSync.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_todoist_sync_constructor;
#line 1 "../src/Widgets/TodoistSync.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_todoist_sync_finalize;
#line 1 "../src/Widgets/TodoistSync.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_TODOIST_SYNC_REVEAL_CHILD_PROPERTY, widgets_todoist_sync_properties[WIDGETS_TODOIST_SYNC_REVEAL_CHILD_PROPERTY] = g_param_spec_boolean ("reveal-child", "reveal-child", "reveal-child", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE));
#line 699 "TodoistSync.c"
}

static void
widgets_todoist_sync_instance_init (WidgetsTodoistSync * self,
                                    gpointer klass)
{
#line 1 "../src/Widgets/TodoistSync.vala"
	self->priv = widgets_todoist_sync_get_instance_private (self);
#line 708 "TodoistSync.c"
}

static void
widgets_todoist_sync_finalize (GObject * obj)
{
	WidgetsTodoistSync * self;
#line 1 "../src/Widgets/TodoistSync.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_TODOIST_SYNC, WidgetsTodoistSync);
#line 2 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 3 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (self->priv->sync_icon);
#line 4 "../src/Widgets/TodoistSync.vala"
	_g_object_unref0 (self->priv->avatar);
#line 1 "../src/Widgets/TodoistSync.vala"
	G_OBJECT_CLASS (widgets_todoist_sync_parent_class)->finalize (obj);
#line 725 "TodoistSync.c"
}

static GType
widgets_todoist_sync_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsTodoistSyncClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_todoist_sync_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsTodoistSync), 0, (GInstanceInitFunc) widgets_todoist_sync_instance_init, NULL };
	GType widgets_todoist_sync_type_id;
	widgets_todoist_sync_type_id = g_type_register_static (gtk_event_box_get_type (), "WidgetsTodoistSync", &g_define_type_info, 0);
	WidgetsTodoistSync_private_offset = g_type_add_instance_private (widgets_todoist_sync_type_id, sizeof (WidgetsTodoistSyncPrivate));
	return widgets_todoist_sync_type_id;
}

GType
widgets_todoist_sync_get_type (void)
{
	static volatile gsize widgets_todoist_sync_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_todoist_sync_type_id__volatile)) {
		GType widgets_todoist_sync_type_id;
		widgets_todoist_sync_type_id = widgets_todoist_sync_get_type_once ();
		g_once_init_leave (&widgets_todoist_sync_type_id__volatile, widgets_todoist_sync_type_id);
	}
	return widgets_todoist_sync_type_id__volatile;
}

static void
_vala_widgets_todoist_sync_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	WidgetsTodoistSync * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_TODOIST_SYNC, WidgetsTodoistSync);
#line 1 "../src/Widgets/TodoistSync.vala"
	switch (property_id) {
#line 1 "../src/Widgets/TodoistSync.vala"
		case WIDGETS_TODOIST_SYNC_REVEAL_CHILD_PROPERTY:
#line 1 "../src/Widgets/TodoistSync.vala"
		widgets_todoist_sync_set_reveal_child (self, g_value_get_boolean (value));
#line 1 "../src/Widgets/TodoistSync.vala"
		break;
#line 766 "TodoistSync.c"
		default:
#line 1 "../src/Widgets/TodoistSync.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/TodoistSync.vala"
		break;
#line 772 "TodoistSync.c"
	}
}

