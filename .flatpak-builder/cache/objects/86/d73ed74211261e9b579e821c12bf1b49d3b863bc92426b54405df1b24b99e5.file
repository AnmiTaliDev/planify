/* MagicButton.c generated by valac 0.50.10, the Vala compiler
 * generated from MagicButton.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <granite.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>
#include <cairo-gobject.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>

#define WIDGETS_TYPE_MAGIC_BUTTON (widgets_magic_button_get_type ())
#define WIDGETS_MAGIC_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButton))
#define WIDGETS_MAGIC_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButtonClass))
#define WIDGETS_IS_MAGIC_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_MAGIC_BUTTON))
#define WIDGETS_IS_MAGIC_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_MAGIC_BUTTON))
#define WIDGETS_MAGIC_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButtonClass))

typedef struct _WidgetsMagicButton WidgetsMagicButton;
typedef struct _WidgetsMagicButtonClass WidgetsMagicButtonClass;
typedef struct _WidgetsMagicButtonPrivate WidgetsMagicButtonPrivate;
enum  {
	WIDGETS_MAGIC_BUTTON_0_PROPERTY,
	WIDGETS_MAGIC_BUTTON_NUM_PROPERTIES
};
static GParamSpec* widgets_magic_button_properties[WIDGETS_MAGIC_BUTTON_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;
#define _cairo_destroy0(var) ((var == NULL) ? NULL : (var = (cairo_destroy (var), NULL)))
#define _cairo_surface_destroy0(var) ((var == NULL) ? NULL : (var = (cairo_surface_destroy (var), NULL)))
enum  {
	WIDGETS_MAGIC_BUTTON_CLICKED_SIGNAL,
	WIDGETS_MAGIC_BUTTON_NUM_SIGNALS
};
static guint widgets_magic_button_signals[WIDGETS_MAGIC_BUTTON_NUM_SIGNALS] = {0};

struct _WidgetsMagicButton {
	GtkRevealer parent_instance;
	WidgetsMagicButtonPrivate * priv;
	GtkButton* magic_button;
};

struct _WidgetsMagicButtonClass {
	GtkRevealerClass parent_class;
};

static gpointer widgets_magic_button_parent_class = NULL;
extern ServicesEventBus* planner_event_bus;

GType widgets_magic_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsMagicButton, g_object_unref)
WidgetsMagicButton* widgets_magic_button_new (void);
WidgetsMagicButton* widgets_magic_button_construct (GType object_type);
static void widgets_magic_button_build_drag_and_drop (WidgetsMagicButton* self);
static void widgets_magic_button_on_drag_data_get (WidgetsMagicButton* self,
                                            GtkWidget* widget,
                                            GdkDragContext* context,
                                            GtkSelectionData* selection_data,
                                            guint target_type,
                                            guint time);
static void _widgets_magic_button_on_drag_data_get_gtk_widget_drag_data_get (GtkWidget* _sender,
                                                                      GdkDragContext* context,
                                                                      GtkSelectionData* selection_data,
                                                                      guint info,
                                                                      guint time_,
                                                                      gpointer self);
static void widgets_magic_button_on_drag_begin (WidgetsMagicButton* self,
                                         GtkWidget* widget,
                                         GdkDragContext* context);
static void _widgets_magic_button_on_drag_begin_gtk_widget_drag_begin (GtkWidget* _sender,
                                                                GdkDragContext* context,
                                                                gpointer self);
void widgets_magic_button_on_drag_end (WidgetsMagicButton* self,
                                       GdkDragContext* context);
static void _widgets_magic_button_on_drag_end_gtk_widget_drag_end (GtkWidget* _sender,
                                                            GdkDragContext* context,
                                                            gpointer self);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
static GObject * widgets_magic_button_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
static void _widgets_magic_button___lambda248_ (WidgetsMagicButton* self);
static void __widgets_magic_button___lambda248__gtk_button_clicked (GtkButton* _sender,
                                                             gpointer self);
static void widgets_magic_button_finalize (GObject * obj);
static GType widgets_magic_button_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);

static const GtkTargetEntry WIDGETS_MAGIC_BUTTON_MAGICBUTTON_TARGET_ENTRIES[1] = {{"MAGICBUTTON", (guint) GTK_TARGET_SAME_APP, (guint) 0}};

WidgetsMagicButton*
widgets_magic_button_construct (GType object_type)
{
	WidgetsMagicButton * self = NULL;
	gchar* _tmp0_;
	gchar** _tmp1_;
	gchar** _tmp2_;
	gint _tmp2__length1;
	gchar* _tmp3_;
	gchar* _tmp4_;
#line 32 "../src/Widgets/MagicButton.vala"
	_tmp0_ = g_strdup ("a");
#line 32 "../src/Widgets/MagicButton.vala"
	_tmp1_ = g_new0 (gchar*, 1 + 1);
#line 32 "../src/Widgets/MagicButton.vala"
	_tmp1_[0] = _tmp0_;
#line 32 "../src/Widgets/MagicButton.vala"
	_tmp2_ = _tmp1_;
#line 32 "../src/Widgets/MagicButton.vala"
	_tmp2__length1 = 1;
#line 32 "../src/Widgets/MagicButton.vala"
	_tmp3_ = granite_markup_accel_tooltip (_tmp2_, (gint) 1, _ ("Add Task"));
#line 32 "../src/Widgets/MagicButton.vala"
	_tmp4_ = _tmp3_;
#line 32 "../src/Widgets/MagicButton.vala"
	self = (WidgetsMagicButton*) g_object_new (object_type, "tooltip-markup", _tmp4_, "transition-type", GTK_REVEALER_TRANSITION_TYPE_CROSSFADE, "reveal-child", TRUE, "margin", 24, "valign", GTK_ALIGN_END, "halign", GTK_ALIGN_END, NULL);
#line 32 "../src/Widgets/MagicButton.vala"
	_g_free0 (_tmp4_);
#line 32 "../src/Widgets/MagicButton.vala"
	_tmp2_ = (_vala_array_free (_tmp2_, _tmp2__length1, (GDestroyNotify) g_free), NULL);
#line 31 "../src/Widgets/MagicButton.vala"
	return self;
#line 166 "MagicButton.c"
}

WidgetsMagicButton*
widgets_magic_button_new (void)
{
#line 31 "../src/Widgets/MagicButton.vala"
	return widgets_magic_button_construct (WIDGETS_TYPE_MAGIC_BUTTON);
#line 174 "MagicButton.c"
}

static void
_widgets_magic_button_on_drag_data_get_gtk_widget_drag_data_get (GtkWidget* _sender,
                                                                 GdkDragContext* context,
                                                                 GtkSelectionData* selection_data,
                                                                 guint info,
                                                                 guint time_,
                                                                 gpointer self)
{
#line 72 "../src/Widgets/MagicButton.vala"
	widgets_magic_button_on_drag_data_get ((WidgetsMagicButton*) self, _sender, context, selection_data, info, time_);
#line 187 "MagicButton.c"
}

static void
_widgets_magic_button_on_drag_begin_gtk_widget_drag_begin (GtkWidget* _sender,
                                                           GdkDragContext* context,
                                                           gpointer self)
{
#line 73 "../src/Widgets/MagicButton.vala"
	widgets_magic_button_on_drag_begin ((WidgetsMagicButton*) self, _sender, context);
#line 197 "MagicButton.c"
}

static void
_widgets_magic_button_on_drag_end_gtk_widget_drag_end (GtkWidget* _sender,
                                                       GdkDragContext* context,
                                                       gpointer self)
{
#line 74 "../src/Widgets/MagicButton.vala"
	widgets_magic_button_on_drag_end ((WidgetsMagicButton*) self, context);
#line 207 "MagicButton.c"
}

static void
widgets_magic_button_build_drag_and_drop (WidgetsMagicButton* self)
{
	GtkButton* _tmp0_;
	GtkButton* _tmp1_;
	GtkButton* _tmp2_;
	GtkButton* _tmp3_;
#line 70 "../src/Widgets/MagicButton.vala"
	g_return_if_fail (self != NULL);
#line 71 "../src/Widgets/MagicButton.vala"
	_tmp0_ = self->magic_button;
#line 71 "../src/Widgets/MagicButton.vala"
	gtk_drag_source_set ((GtkWidget*) _tmp0_, GDK_BUTTON1_MASK, WIDGETS_MAGIC_BUTTON_MAGICBUTTON_TARGET_ENTRIES, (gint) G_N_ELEMENTS (WIDGETS_MAGIC_BUTTON_MAGICBUTTON_TARGET_ENTRIES), GDK_ACTION_MOVE);
#line 72 "../src/Widgets/MagicButton.vala"
	_tmp1_ = self->magic_button;
#line 72 "../src/Widgets/MagicButton.vala"
	g_signal_connect_object ((GtkWidget*) _tmp1_, "drag-data-get", (GCallback) _widgets_magic_button_on_drag_data_get_gtk_widget_drag_data_get, self, 0);
#line 73 "../src/Widgets/MagicButton.vala"
	_tmp2_ = self->magic_button;
#line 73 "../src/Widgets/MagicButton.vala"
	g_signal_connect_object ((GtkWidget*) _tmp2_, "drag-begin", (GCallback) _widgets_magic_button_on_drag_begin_gtk_widget_drag_begin, self, 0);
#line 74 "../src/Widgets/MagicButton.vala"
	_tmp3_ = self->magic_button;
#line 74 "../src/Widgets/MagicButton.vala"
	g_signal_connect_object ((GtkWidget*) _tmp3_, "drag-end", (GCallback) _widgets_magic_button_on_drag_end_gtk_widget_drag_end, self, 0);
#line 235 "MagicButton.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 78 "../src/Widgets/MagicButton.vala"
	return self ? g_object_ref (self) : NULL;
#line 243 "MagicButton.c"
}

static void
widgets_magic_button_on_drag_begin (WidgetsMagicButton* self,
                                    GtkWidget* widget,
                                    GdkDragContext* context)
{
	GtkButton* magic_button = NULL;
	GtkButton* _tmp0_;
	GtkAllocation alloc = {0};
	GtkAllocation _tmp1_ = {0};
	cairo_surface_t* surface = NULL;
	GtkAllocation _tmp2_;
	GtkAllocation _tmp3_;
	cairo_surface_t* _tmp4_;
	cairo_t* cr = NULL;
	cairo_t* _tmp5_;
	GtkAllocation _tmp6_;
	GtkAllocation _tmp7_;
	GtkAllocation _tmp8_;
	GtkAllocation _tmp9_;
	GtkAllocation _tmp10_;
	GtkAllocation _tmp11_;
	gboolean _tmp12_ = FALSE;
	ServicesEventBus* _tmp13_;
#line 77 "../src/Widgets/MagicButton.vala"
	g_return_if_fail (self != NULL);
#line 77 "../src/Widgets/MagicButton.vala"
	g_return_if_fail (widget != NULL);
#line 77 "../src/Widgets/MagicButton.vala"
	g_return_if_fail (context != NULL);
#line 78 "../src/Widgets/MagicButton.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (widget, gtk_button_get_type (), GtkButton));
#line 78 "../src/Widgets/MagicButton.vala"
	magic_button = _tmp0_;
#line 81 "../src/Widgets/MagicButton.vala"
	gtk_widget_get_allocation ((GtkWidget*) magic_button, &_tmp1_);
#line 81 "../src/Widgets/MagicButton.vala"
	alloc = _tmp1_;
#line 83 "../src/Widgets/MagicButton.vala"
	_tmp2_ = alloc;
#line 83 "../src/Widgets/MagicButton.vala"
	_tmp3_ = alloc;
#line 83 "../src/Widgets/MagicButton.vala"
	_tmp4_ = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, _tmp2_.width, _tmp3_.height);
#line 83 "../src/Widgets/MagicButton.vala"
	surface = _tmp4_;
#line 84 "../src/Widgets/MagicButton.vala"
	_tmp5_ = cairo_create (surface);
#line 84 "../src/Widgets/MagicButton.vala"
	cr = _tmp5_;
#line 85 "../src/Widgets/MagicButton.vala"
	cairo_set_source_rgba (cr, (gdouble) 255, (gdouble) 255, (gdouble) 255, (gdouble) 0);
#line 86 "../src/Widgets/MagicButton.vala"
	cairo_set_line_width (cr, (gdouble) 1);
#line 88 "../src/Widgets/MagicButton.vala"
	cairo_move_to (cr, (gdouble) 0, (gdouble) 0);
#line 89 "../src/Widgets/MagicButton.vala"
	_tmp6_ = alloc;
#line 89 "../src/Widgets/MagicButton.vala"
	cairo_line_to (cr, (gdouble) _tmp6_.width, (gdouble) 0);
#line 90 "../src/Widgets/MagicButton.vala"
	_tmp7_ = alloc;
#line 90 "../src/Widgets/MagicButton.vala"
	_tmp8_ = alloc;
#line 90 "../src/Widgets/MagicButton.vala"
	cairo_line_to (cr, (gdouble) _tmp7_.width, (gdouble) _tmp8_.height);
#line 91 "../src/Widgets/MagicButton.vala"
	_tmp9_ = alloc;
#line 91 "../src/Widgets/MagicButton.vala"
	cairo_line_to (cr, (gdouble) 0, (gdouble) _tmp9_.height);
#line 92 "../src/Widgets/MagicButton.vala"
	cairo_line_to (cr, (gdouble) 0, (gdouble) 0);
#line 93 "../src/Widgets/MagicButton.vala"
	cairo_stroke (cr);
#line 95 "../src/Widgets/MagicButton.vala"
	cairo_set_source_rgba (cr, (gdouble) 255, (gdouble) 255, (gdouble) 255, (gdouble) 0);
#line 96 "../src/Widgets/MagicButton.vala"
	_tmp10_ = alloc;
#line 96 "../src/Widgets/MagicButton.vala"
	_tmp11_ = alloc;
#line 96 "../src/Widgets/MagicButton.vala"
	cairo_rectangle (cr, (gdouble) 0, (gdouble) 0, (gdouble) _tmp10_.width, (gdouble) _tmp11_.height);
#line 97 "../src/Widgets/MagicButton.vala"
	cairo_fill (cr);
#line 99 "../src/Widgets/MagicButton.vala"
	g_signal_emit_by_name ((GtkWidget*) magic_button, "draw", cr, &_tmp12_);
#line 101 "../src/Widgets/MagicButton.vala"
	gtk_drag_set_icon_surface (context, surface);
#line 102 "../src/Widgets/MagicButton.vala"
	gtk_revealer_set_reveal_child ((GtkRevealer*) self, FALSE);
#line 104 "../src/Widgets/MagicButton.vala"
	_tmp13_ = planner_event_bus;
#line 104 "../src/Widgets/MagicButton.vala"
	g_signal_emit_by_name (_tmp13_, "magic-button-activated", TRUE);
#line 77 "../src/Widgets/MagicButton.vala"
	_cairo_destroy0 (cr);
#line 77 "../src/Widgets/MagicButton.vala"
	_cairo_surface_destroy0 (surface);
#line 77 "../src/Widgets/MagicButton.vala"
	_g_object_unref0 (magic_button);
#line 345 "MagicButton.c"
}

static void
widgets_magic_button_on_drag_data_get (WidgetsMagicButton* self,
                                       GtkWidget* widget,
                                       GdkDragContext* context,
                                       GtkSelectionData* selection_data,
                                       guint target_type,
                                       guint time)
{
	guchar* data = NULL;
	guchar* _tmp0_;
	gint data_length1;
	gint _data_size_;
	GtkWidget* _tmp1_;
#line 107 "../src/Widgets/MagicButton.vala"
	g_return_if_fail (self != NULL);
#line 107 "../src/Widgets/MagicButton.vala"
	g_return_if_fail (widget != NULL);
#line 107 "../src/Widgets/MagicButton.vala"
	g_return_if_fail (context != NULL);
#line 107 "../src/Widgets/MagicButton.vala"
	g_return_if_fail (selection_data != NULL);
#line 109 "../src/Widgets/MagicButton.vala"
	_tmp0_ = g_new0 (guchar, sizeof (GtkButton*));
#line 109 "../src/Widgets/MagicButton.vala"
	data = _tmp0_;
#line 109 "../src/Widgets/MagicButton.vala"
	data_length1 = sizeof (GtkButton*);
#line 109 "../src/Widgets/MagicButton.vala"
	_data_size_ = data_length1;
#line 110 "../src/Widgets/MagicButton.vala"
	_tmp1_ = _g_object_ref0 (widget);
#line 110 "../src/Widgets/MagicButton.vala"
	_g_object_unref0 (((GtkWidget**) data)[0]);
#line 110 "../src/Widgets/MagicButton.vala"
	((GtkWidget**) data)[0] = _tmp1_;
#line 112 "../src/Widgets/MagicButton.vala"
	gtk_selection_data_set (selection_data, gdk_atom_intern_static_string ("MAGICBUTTON"), 32, data, (gint) data_length1);
#line 107 "../src/Widgets/MagicButton.vala"
	data = (g_free (data), NULL);
#line 387 "MagicButton.c"
}

void
widgets_magic_button_on_drag_end (WidgetsMagicButton* self,
                                  GdkDragContext* context)
{
	ServicesEventBus* _tmp0_;
#line 117 "../src/Widgets/MagicButton.vala"
	g_return_if_fail (self != NULL);
#line 117 "../src/Widgets/MagicButton.vala"
	g_return_if_fail (context != NULL);
#line 118 "../src/Widgets/MagicButton.vala"
	gtk_revealer_set_reveal_child ((GtkRevealer*) self, TRUE);
#line 119 "../src/Widgets/MagicButton.vala"
	_tmp0_ = planner_event_bus;
#line 119 "../src/Widgets/MagicButton.vala"
	g_signal_emit_by_name (_tmp0_, "magic-button-activated", FALSE);
#line 405 "MagicButton.c"
}

static void
_widgets_magic_button___lambda248_ (WidgetsMagicButton* self)
{
#line 62 "../src/Widgets/MagicButton.vala"
	g_signal_emit (self, widgets_magic_button_signals[WIDGETS_MAGIC_BUTTON_CLICKED_SIGNAL], 0);
#line 413 "MagicButton.c"
}

static void
__widgets_magic_button___lambda248__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self)
{
#line 61 "../src/Widgets/MagicButton.vala"
	_widgets_magic_button___lambda248_ ((WidgetsMagicButton*) self);
#line 422 "MagicButton.c"
}

static GObject *
widgets_magic_button_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsMagicButton * self;
	GtkImage* add_icon = NULL;
	GThemedIcon* _tmp0_;
	GtkImage* _tmp1_ = NULL;
	GtkButton* _tmp2_ = NULL;
	GtkButton* _tmp3_;
	GtkImage* _tmp4_;
	GtkButton* _tmp5_;
	GtkStyleContext* _tmp6_;
	GtkButton* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkButton* _tmp9_;
	GtkButton* _tmp10_;
#line 42 "../src/Widgets/MagicButton.vala"
	parent_class = G_OBJECT_CLASS (widgets_magic_button_parent_class);
#line 42 "../src/Widgets/MagicButton.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 42 "../src/Widgets/MagicButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButton);
#line 43 "../src/Widgets/MagicButton.vala"
	_tmp0_ = (GThemedIcon*) g_themed_icon_new ("list-add-symbolic");
#line 43 "../src/Widgets/MagicButton.vala"
	_tmp1_ = (GtkImage*) gtk_image_new ();
#line 43 "../src/Widgets/MagicButton.vala"
	g_object_set (_tmp1_, "gicon", (GIcon*) _tmp0_, NULL);
#line 43 "../src/Widgets/MagicButton.vala"
	_g_object_unref0 (_tmp0_);
#line 43 "../src/Widgets/MagicButton.vala"
	gtk_image_set_pixel_size (_tmp1_, 16);
#line 43 "../src/Widgets/MagicButton.vala"
	g_object_ref_sink (_tmp1_);
#line 43 "../src/Widgets/MagicButton.vala"
	add_icon = _tmp1_;
#line 48 "../src/Widgets/MagicButton.vala"
	_tmp2_ = (GtkButton*) gtk_button_new ();
#line 48 "../src/Widgets/MagicButton.vala"
	g_object_set ((GtkWidget*) _tmp2_, "height-request", 38, NULL);
#line 48 "../src/Widgets/MagicButton.vala"
	g_object_set ((GtkWidget*) _tmp2_, "width-request", 38, NULL);
#line 48 "../src/Widgets/MagicButton.vala"
	g_object_ref_sink (_tmp2_);
#line 48 "../src/Widgets/MagicButton.vala"
	_g_object_unref0 (self->magic_button);
#line 48 "../src/Widgets/MagicButton.vala"
	self->magic_button = _tmp2_;
#line 53 "../src/Widgets/MagicButton.vala"
	_tmp3_ = self->magic_button;
#line 53 "../src/Widgets/MagicButton.vala"
	_tmp4_ = add_icon;
#line 53 "../src/Widgets/MagicButton.vala"
	gtk_container_add ((GtkContainer*) _tmp3_, (GtkWidget*) _tmp4_);
#line 55 "../src/Widgets/MagicButton.vala"
	_tmp5_ = self->magic_button;
#line 55 "../src/Widgets/MagicButton.vala"
	_tmp6_ = gtk_widget_get_style_context ((GtkWidget*) _tmp5_);
#line 55 "../src/Widgets/MagicButton.vala"
	gtk_style_context_add_class (_tmp6_, GTK_STYLE_CLASS_SUGGESTED_ACTION);
#line 56 "../src/Widgets/MagicButton.vala"
	_tmp7_ = self->magic_button;
#line 56 "../src/Widgets/MagicButton.vala"
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
#line 56 "../src/Widgets/MagicButton.vala"
	gtk_style_context_add_class (_tmp8_, "magic-button");
#line 58 "../src/Widgets/MagicButton.vala"
	_tmp9_ = self->magic_button;
#line 58 "../src/Widgets/MagicButton.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp9_);
#line 59 "../src/Widgets/MagicButton.vala"
	widgets_magic_button_build_drag_and_drop (self);
#line 61 "../src/Widgets/MagicButton.vala"
	_tmp10_ = self->magic_button;
#line 61 "../src/Widgets/MagicButton.vala"
	g_signal_connect_object (_tmp10_, "clicked", (GCallback) __widgets_magic_button___lambda248__gtk_button_clicked, self, 0);
#line 42 "../src/Widgets/MagicButton.vala"
	_g_object_unref0 (add_icon);
#line 42 "../src/Widgets/MagicButton.vala"
	return obj;
#line 509 "MagicButton.c"
}

static void
widgets_magic_button_class_init (WidgetsMagicButtonClass * klass,
                                 gpointer klass_data)
{
#line 22 "../src/Widgets/MagicButton.vala"
	widgets_magic_button_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Widgets/MagicButton.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_magic_button_constructor;
#line 22 "../src/Widgets/MagicButton.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_magic_button_finalize;
#line 22 "../src/Widgets/MagicButton.vala"
	widgets_magic_button_signals[WIDGETS_MAGIC_BUTTON_CLICKED_SIGNAL] = g_signal_new ("clicked", WIDGETS_TYPE_MAGIC_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 524 "MagicButton.c"
}

static void
widgets_magic_button_instance_init (WidgetsMagicButton * self,
                                    gpointer klass)
{
}

static void
widgets_magic_button_finalize (GObject * obj)
{
	WidgetsMagicButton * self;
#line 22 "../src/Widgets/MagicButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButton);
#line 23 "../src/Widgets/MagicButton.vala"
	_g_object_unref0 (self->magic_button);
#line 22 "../src/Widgets/MagicButton.vala"
	G_OBJECT_CLASS (widgets_magic_button_parent_class)->finalize (obj);
#line 543 "MagicButton.c"
}

static GType
widgets_magic_button_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsMagicButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_magic_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsMagicButton), 0, (GInstanceInitFunc) widgets_magic_button_instance_init, NULL };
	GType widgets_magic_button_type_id;
	widgets_magic_button_type_id = g_type_register_static (gtk_revealer_get_type (), "WidgetsMagicButton", &g_define_type_info, 0);
	return widgets_magic_button_type_id;
}

GType
widgets_magic_button_get_type (void)
{
	static volatile gsize widgets_magic_button_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_magic_button_type_id__volatile)) {
		GType widgets_magic_button_type_id;
		widgets_magic_button_type_id = widgets_magic_button_get_type_once ();
		g_once_init_leave (&widgets_magic_button_type_id__volatile, widgets_magic_button_type_id);
	}
	return widgets_magic_button_type_id__volatile;
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

