/* SettingsHeader.c generated by valac 0.50.10, the Vala compiler
 * generated from SettingsHeader.vala, do not modify */

#include <handy.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gtk/gtk.h>
#include <glib/gi18n-lib.h>

#define DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER (dialogs_settings_settings_header_get_type ())
#define DIALOGS_SETTINGS_SETTINGS_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, DialogsSettingsSettingsHeader))
#define DIALOGS_SETTINGS_SETTINGS_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, DialogsSettingsSettingsHeaderClass))
#define DIALOGS_SETTINGS_IS_SETTINGS_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER))
#define DIALOGS_SETTINGS_IS_SETTINGS_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER))
#define DIALOGS_SETTINGS_SETTINGS_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, DialogsSettingsSettingsHeaderClass))

typedef struct _DialogsSettingsSettingsHeader DialogsSettingsSettingsHeader;
typedef struct _DialogsSettingsSettingsHeaderClass DialogsSettingsSettingsHeaderClass;
typedef struct _DialogsSettingsSettingsHeaderPrivate DialogsSettingsSettingsHeaderPrivate;
enum  {
	DIALOGS_SETTINGS_SETTINGS_HEADER_0_PROPERTY,
	DIALOGS_SETTINGS_SETTINGS_HEADER_TITLE_HEADER_PROPERTY,
	DIALOGS_SETTINGS_SETTINGS_HEADER_SHOW_BACK_BUTTON_PROPERTY,
	DIALOGS_SETTINGS_SETTINGS_HEADER_NUM_PROPERTIES
};
static GParamSpec* dialogs_settings_settings_header_properties[DIALOGS_SETTINGS_SETTINGS_HEADER_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
enum  {
	DIALOGS_SETTINGS_SETTINGS_HEADER_DONE_ACTIVATED_SIGNAL,
	DIALOGS_SETTINGS_SETTINGS_HEADER_BACK_ACTIVATED_SIGNAL,
	DIALOGS_SETTINGS_SETTINGS_HEADER_NUM_SIGNALS
};
static guint dialogs_settings_settings_header_signals[DIALOGS_SETTINGS_SETTINGS_HEADER_NUM_SIGNALS] = {0};

struct _DialogsSettingsSettingsHeader {
	HdyHeaderBar parent_instance;
	DialogsSettingsSettingsHeaderPrivate * priv;
};

struct _DialogsSettingsSettingsHeaderClass {
	HdyHeaderBarClass parent_class;
};

struct _DialogsSettingsSettingsHeaderPrivate {
	gchar* _title_header;
	gboolean _show_back_button;
};

static gint DialogsSettingsSettingsHeader_private_offset;
static gpointer dialogs_settings_settings_header_parent_class = NULL;

GType dialogs_settings_settings_header_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsSettingsSettingsHeader, g_object_unref)
DialogsSettingsSettingsHeader* dialogs_settings_settings_header_new (const gchar* title_header,
                                                                     gboolean show_back_button);
DialogsSettingsSettingsHeader* dialogs_settings_settings_header_construct (GType object_type,
                                                                           const gchar* title_header,
                                                                           gboolean show_back_button);
const gchar* dialogs_settings_settings_header_get_title_header (DialogsSettingsSettingsHeader* self);
static void dialogs_settings_settings_header_set_title_header (DialogsSettingsSettingsHeader* self,
                                                        const gchar* value);
gboolean dialogs_settings_settings_header_get_show_back_button (DialogsSettingsSettingsHeader* self);
static void dialogs_settings_settings_header_set_show_back_button (DialogsSettingsSettingsHeader* self,
                                                            gboolean value);
static GObject * dialogs_settings_settings_header_constructor (GType type,
                                                        guint n_construct_properties,
                                                        GObjectConstructParam * construct_properties);
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
void widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                            const gchar* icon_name);
static void _dialogs_settings_settings_header___lambda241_ (DialogsSettingsSettingsHeader* self);
static void __dialogs_settings_settings_header___lambda241__gtk_button_clicked (GtkButton* _sender,
                                                                         gpointer self);
static void _dialogs_settings_settings_header___lambda242_ (DialogsSettingsSettingsHeader* self);
static void __dialogs_settings_settings_header___lambda242__gtk_button_clicked (GtkButton* _sender,
                                                                         gpointer self);
static void dialogs_settings_settings_header_finalize (GObject * obj);
static GType dialogs_settings_settings_header_get_type_once (void);
static void _vala_dialogs_settings_settings_header_get_property (GObject * object,
                                                          guint property_id,
                                                          GValue * value,
                                                          GParamSpec * pspec);
static void _vala_dialogs_settings_settings_header_set_property (GObject * object,
                                                          guint property_id,
                                                          const GValue * value,
                                                          GParamSpec * pspec);

static inline gpointer
dialogs_settings_settings_header_get_instance_private (DialogsSettingsSettingsHeader* self)
{
	return G_STRUCT_MEMBER_P (self, DialogsSettingsSettingsHeader_private_offset);
}

DialogsSettingsSettingsHeader*
dialogs_settings_settings_header_construct (GType object_type,
                                            const gchar* title_header,
                                            gboolean show_back_button)
{
	DialogsSettingsSettingsHeader * self = NULL;
#line 8 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_return_val_if_fail (title_header != NULL, NULL);
#line 9 "../src/Dialogs/Settings/SettingsHeader.vala"
	self = (DialogsSettingsSettingsHeader*) g_object_new (object_type, "title-header", title_header, "show-back-button", show_back_button, NULL);
#line 8 "../src/Dialogs/Settings/SettingsHeader.vala"
	return self;
#line 125 "SettingsHeader.c"
}

DialogsSettingsSettingsHeader*
dialogs_settings_settings_header_new (const gchar* title_header,
                                      gboolean show_back_button)
{
#line 8 "../src/Dialogs/Settings/SettingsHeader.vala"
	return dialogs_settings_settings_header_construct (DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, title_header, show_back_button);
#line 134 "SettingsHeader.c"
}

const gchar*
dialogs_settings_settings_header_get_title_header (DialogsSettingsSettingsHeader* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp0_ = self->priv->_title_header;
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
	result = _tmp0_;
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
	return result;
#line 150 "SettingsHeader.c"
}

static void
dialogs_settings_settings_header_set_title_header (DialogsSettingsSettingsHeader* self,
                                                   const gchar* value)
{
	gchar* old_value;
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
	old_value = dialogs_settings_settings_header_get_title_header (self);
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 164 "SettingsHeader.c"
		gchar* _tmp0_;
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
		_tmp0_ = g_strdup (value);
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
		_g_free0 (self->priv->_title_header);
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
		self->priv->_title_header = _tmp0_;
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
		g_object_notify_by_pspec ((GObject *) self, dialogs_settings_settings_header_properties[DIALOGS_SETTINGS_SETTINGS_HEADER_TITLE_HEADER_PROPERTY]);
#line 174 "SettingsHeader.c"
	}
}

gboolean
dialogs_settings_settings_header_get_show_back_button (DialogsSettingsSettingsHeader* self)
{
	gboolean result;
#line 3 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 3 "../src/Dialogs/Settings/SettingsHeader.vala"
	result = self->priv->_show_back_button;
#line 3 "../src/Dialogs/Settings/SettingsHeader.vala"
	return result;
#line 188 "SettingsHeader.c"
}

static void
dialogs_settings_settings_header_set_show_back_button (DialogsSettingsSettingsHeader* self,
                                                       gboolean value)
{
	gboolean old_value;
#line 3 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_return_if_fail (self != NULL);
#line 3 "../src/Dialogs/Settings/SettingsHeader.vala"
	old_value = dialogs_settings_settings_header_get_show_back_button (self);
#line 3 "../src/Dialogs/Settings/SettingsHeader.vala"
	if (old_value != value) {
#line 3 "../src/Dialogs/Settings/SettingsHeader.vala"
		self->priv->_show_back_button = value;
#line 3 "../src/Dialogs/Settings/SettingsHeader.vala"
		g_object_notify_by_pspec ((GObject *) self, dialogs_settings_settings_header_properties[DIALOGS_SETTINGS_SETTINGS_HEADER_SHOW_BACK_BUTTON_PROPERTY]);
#line 206 "SettingsHeader.c"
	}
}

static void
_dialogs_settings_settings_header___lambda241_ (DialogsSettingsSettingsHeader* self)
{
#line 62 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_signal_emit (self, dialogs_settings_settings_header_signals[DIALOGS_SETTINGS_SETTINGS_HEADER_DONE_ACTIVATED_SIGNAL], 0);
#line 215 "SettingsHeader.c"
}

static void
__dialogs_settings_settings_header___lambda241__gtk_button_clicked (GtkButton* _sender,
                                                                    gpointer self)
{
#line 61 "../src/Dialogs/Settings/SettingsHeader.vala"
	_dialogs_settings_settings_header___lambda241_ ((DialogsSettingsSettingsHeader*) self);
#line 224 "SettingsHeader.c"
}

static void
_dialogs_settings_settings_header___lambda242_ (DialogsSettingsSettingsHeader* self)
{
#line 66 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_signal_emit (self, dialogs_settings_settings_header_signals[DIALOGS_SETTINGS_SETTINGS_HEADER_BACK_ACTIVATED_SIGNAL], 0);
#line 232 "SettingsHeader.c"
}

static void
__dialogs_settings_settings_header___lambda242__gtk_button_clicked (GtkButton* _sender,
                                                                    gpointer self)
{
#line 65 "../src/Dialogs/Settings/SettingsHeader.vala"
	_dialogs_settings_settings_header___lambda242_ ((DialogsSettingsSettingsHeader*) self);
#line 241 "SettingsHeader.c"
}

static GObject *
dialogs_settings_settings_header_constructor (GType type,
                                              guint n_construct_properties,
                                              GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	DialogsSettingsSettingsHeader * self;
	GtkStyleContext* _tmp0_;
	WidgetsDynamicIcon* back_image = NULL;
	WidgetsDynamicIcon* _tmp1_;
	WidgetsDynamicIcon* _tmp2_;
	WidgetsDynamicIcon* _tmp3_;
	GtkLabel* back_label = NULL;
	GtkLabel* _tmp4_;
	GtkGrid* back_grid = NULL;
	GtkGrid* _tmp5_ = NULL;
	GtkGrid* _tmp6_;
	WidgetsDynamicIcon* _tmp7_;
	GtkGrid* _tmp8_;
	GtkLabel* _tmp9_;
	GtkButton* back_button = NULL;
	GtkButton* _tmp10_ = NULL;
	GtkButton* _tmp11_;
	GtkStyleContext* _tmp12_;
	GtkButton* _tmp13_;
	GtkGrid* _tmp14_;
	GtkLabel* title_label = NULL;
	const gchar* _tmp15_;
	GtkLabel* _tmp16_;
	GtkLabel* _tmp17_;
	GtkStyleContext* _tmp18_;
	GtkButton* done_button = NULL;
	GtkButton* _tmp19_ = NULL;
	GtkButton* _tmp20_;
	GtkStyleContext* _tmp21_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp22_ = NULL;
	gboolean _tmp23_;
	GtkBox* _tmp26_;
	GtkLabel* _tmp27_;
	GtkBox* _tmp28_;
	GtkButton* _tmp29_;
	GtkBox* _tmp30_;
	GtkButton* _tmp31_;
	GtkButton* _tmp32_;
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	parent_class = G_OBJECT_CLASS (dialogs_settings_settings_header_parent_class);
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, DialogsSettingsSettingsHeader);
#line 16 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 16 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_FLAT);
#line 18 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp1_ = widgets_dynamic_icon_new ();
#line 18 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_object_ref_sink (_tmp1_);
#line 18 "../src/Dialogs/Settings/SettingsHeader.vala"
	back_image = _tmp1_;
#line 19 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp2_ = back_image;
#line 19 "../src/Dialogs/Settings/SettingsHeader.vala"
	widgets_dynamic_icon_set_size (_tmp2_, 19);
#line 20 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp3_ = back_image;
#line 20 "../src/Dialogs/Settings/SettingsHeader.vala"
	widgets_dynamic_icon_update_icon_name (_tmp3_, "chevron-left");
#line 22 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp4_ = (GtkLabel*) gtk_label_new (_ ("Back"));
#line 22 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_object_ref_sink (_tmp4_);
#line 22 "../src/Dialogs/Settings/SettingsHeader.vala"
	back_label = _tmp4_;
#line 24 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp5_ = (GtkGrid*) gtk_grid_new ();
#line 24 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_grid_set_column_spacing (_tmp5_, 3);
#line 24 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_object_ref_sink (_tmp5_);
#line 24 "../src/Dialogs/Settings/SettingsHeader.vala"
	back_grid = _tmp5_;
#line 28 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp6_ = back_grid;
#line 28 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp7_ = back_image;
#line 28 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp6_, (GtkWidget*) _tmp7_);
#line 29 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp8_ = back_grid;
#line 29 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp9_ = back_label;
#line 29 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp8_, (GtkWidget*) _tmp9_);
#line 31 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp10_ = (GtkButton*) gtk_button_new ();
#line 31 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp10_, FALSE);
#line 31 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp10_, GTK_ALIGN_CENTER);
#line 31 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_object_ref_sink (_tmp10_);
#line 31 "../src/Dialogs/Settings/SettingsHeader.vala"
	back_button = _tmp10_;
#line 36 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp11_ = back_button;
#line 36 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
#line 36 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_style_context_add_class (_tmp12_, GTK_STYLE_CLASS_FLAT);
#line 37 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp13_ = back_button;
#line 37 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp14_ = back_grid;
#line 37 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp13_, (GtkWidget*) _tmp14_);
#line 39 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp15_ = self->priv->_title_header;
#line 39 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp16_ = (GtkLabel*) gtk_label_new (_tmp15_);
#line 39 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_object_ref_sink (_tmp16_);
#line 39 "../src/Dialogs/Settings/SettingsHeader.vala"
	title_label = _tmp16_;
#line 40 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp17_ = title_label;
#line 40 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp18_ = gtk_widget_get_style_context ((GtkWidget*) _tmp17_);
#line 40 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_style_context_add_class (_tmp18_, GTK_STYLE_CLASS_TITLE);
#line 42 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp19_ = (GtkButton*) gtk_button_new_with_label (_ ("Done"));
#line 42 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp19_, FALSE);
#line 42 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_object_ref_sink (_tmp19_);
#line 42 "../src/Dialogs/Settings/SettingsHeader.vala"
	done_button = _tmp19_;
#line 45 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp20_ = done_button;
#line 45 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp21_ = gtk_widget_get_style_context ((GtkWidget*) _tmp20_);
#line 45 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_style_context_add_class (_tmp21_, GTK_STYLE_CLASS_FLAT);
#line 47 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp22_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 47 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_object_set ((GtkWidget*) _tmp22_, "margin", 3, NULL);
#line 47 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp22_, TRUE);
#line 47 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_object_ref_sink (_tmp22_);
#line 47 "../src/Dialogs/Settings/SettingsHeader.vala"
	header_box = _tmp22_;
#line 52 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp23_ = self->priv->_show_back_button;
#line 52 "../src/Dialogs/Settings/SettingsHeader.vala"
	if (_tmp23_) {
#line 404 "SettingsHeader.c"
		GtkBox* _tmp24_;
		GtkButton* _tmp25_;
#line 53 "../src/Dialogs/Settings/SettingsHeader.vala"
		_tmp24_ = header_box;
#line 53 "../src/Dialogs/Settings/SettingsHeader.vala"
		_tmp25_ = back_button;
#line 53 "../src/Dialogs/Settings/SettingsHeader.vala"
		gtk_box_pack_start (_tmp24_, (GtkWidget*) _tmp25_, FALSE, FALSE, (guint) 0);
#line 413 "SettingsHeader.c"
	}
#line 56 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp26_ = header_box;
#line 56 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp27_ = title_label;
#line 56 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_box_set_center_widget (_tmp26_, (GtkWidget*) _tmp27_);
#line 57 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp28_ = header_box;
#line 57 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp29_ = done_button;
#line 57 "../src/Dialogs/Settings/SettingsHeader.vala"
	gtk_box_pack_end (_tmp28_, (GtkWidget*) _tmp29_, FALSE, FALSE, (guint) 0);
#line 59 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp30_ = header_box;
#line 59 "../src/Dialogs/Settings/SettingsHeader.vala"
	hdy_header_bar_set_custom_title ((HdyHeaderBar*) self, (GtkWidget*) _tmp30_);
#line 61 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp31_ = done_button;
#line 61 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_signal_connect_object (_tmp31_, "clicked", (GCallback) __dialogs_settings_settings_header___lambda241__gtk_button_clicked, self, 0);
#line 65 "../src/Dialogs/Settings/SettingsHeader.vala"
	_tmp32_ = back_button;
#line 65 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_signal_connect_object (_tmp32_, "clicked", (GCallback) __dialogs_settings_settings_header___lambda242__gtk_button_clicked, self, 0);
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	_g_object_unref0 (header_box);
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	_g_object_unref0 (done_button);
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	_g_object_unref0 (title_label);
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	_g_object_unref0 (back_button);
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	_g_object_unref0 (back_grid);
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	_g_object_unref0 (back_label);
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	_g_object_unref0 (back_image);
#line 15 "../src/Dialogs/Settings/SettingsHeader.vala"
	return obj;
#line 455 "SettingsHeader.c"
}

static void
dialogs_settings_settings_header_class_init (DialogsSettingsSettingsHeaderClass * klass,
                                             gpointer klass_data)
{
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	dialogs_settings_settings_header_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_type_class_adjust_private_offset (klass, &DialogsSettingsSettingsHeader_private_offset);
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_dialogs_settings_settings_header_get_property;
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_dialogs_settings_settings_header_set_property;
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	G_OBJECT_CLASS (klass)->constructor = dialogs_settings_settings_header_constructor;
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	G_OBJECT_CLASS (klass)->finalize = dialogs_settings_settings_header_finalize;
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_SETTINGS_SETTINGS_HEADER_TITLE_HEADER_PROPERTY, dialogs_settings_settings_header_properties[DIALOGS_SETTINGS_SETTINGS_HEADER_TITLE_HEADER_PROPERTY] = g_param_spec_string ("title-header", "title-header", "title-header", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_SETTINGS_SETTINGS_HEADER_SHOW_BACK_BUTTON_PROPERTY, dialogs_settings_settings_header_properties[DIALOGS_SETTINGS_SETTINGS_HEADER_SHOW_BACK_BUTTON_PROPERTY] = g_param_spec_boolean ("show-back-button", "show-back-button", "show-back-button", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	dialogs_settings_settings_header_signals[DIALOGS_SETTINGS_SETTINGS_HEADER_DONE_ACTIVATED_SIGNAL] = g_signal_new ("done-activated", DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	dialogs_settings_settings_header_signals[DIALOGS_SETTINGS_SETTINGS_HEADER_BACK_ACTIVATED_SIGNAL] = g_signal_new ("back-activated", DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 482 "SettingsHeader.c"
}

static void
dialogs_settings_settings_header_instance_init (DialogsSettingsSettingsHeader * self,
                                                gpointer klass)
{
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	self->priv = dialogs_settings_settings_header_get_instance_private (self);
#line 491 "SettingsHeader.c"
}

static void
dialogs_settings_settings_header_finalize (GObject * obj)
{
	DialogsSettingsSettingsHeader * self;
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, DialogsSettingsSettingsHeader);
#line 2 "../src/Dialogs/Settings/SettingsHeader.vala"
	_g_free0 (self->priv->_title_header);
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	G_OBJECT_CLASS (dialogs_settings_settings_header_parent_class)->finalize (obj);
#line 504 "SettingsHeader.c"
}

static GType
dialogs_settings_settings_header_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (DialogsSettingsSettingsHeaderClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) dialogs_settings_settings_header_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (DialogsSettingsSettingsHeader), 0, (GInstanceInitFunc) dialogs_settings_settings_header_instance_init, NULL };
	GType dialogs_settings_settings_header_type_id;
	dialogs_settings_settings_header_type_id = g_type_register_static (hdy_header_bar_get_type (), "DialogsSettingsSettingsHeader", &g_define_type_info, 0);
	DialogsSettingsSettingsHeader_private_offset = g_type_add_instance_private (dialogs_settings_settings_header_type_id, sizeof (DialogsSettingsSettingsHeaderPrivate));
	return dialogs_settings_settings_header_type_id;
}

GType
dialogs_settings_settings_header_get_type (void)
{
	static volatile gsize dialogs_settings_settings_header_type_id__volatile = 0;
	if (g_once_init_enter (&dialogs_settings_settings_header_type_id__volatile)) {
		GType dialogs_settings_settings_header_type_id;
		dialogs_settings_settings_header_type_id = dialogs_settings_settings_header_get_type_once ();
		g_once_init_leave (&dialogs_settings_settings_header_type_id__volatile, dialogs_settings_settings_header_type_id);
	}
	return dialogs_settings_settings_header_type_id__volatile;
}

static void
_vala_dialogs_settings_settings_header_get_property (GObject * object,
                                                     guint property_id,
                                                     GValue * value,
                                                     GParamSpec * pspec)
{
	DialogsSettingsSettingsHeader * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, DialogsSettingsSettingsHeader);
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	switch (property_id) {
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		case DIALOGS_SETTINGS_SETTINGS_HEADER_TITLE_HEADER_PROPERTY:
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		g_value_set_string (value, dialogs_settings_settings_header_get_title_header (self));
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		break;
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		case DIALOGS_SETTINGS_SETTINGS_HEADER_SHOW_BACK_BUTTON_PROPERTY:
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		g_value_set_boolean (value, dialogs_settings_settings_header_get_show_back_button (self));
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		break;
#line 551 "SettingsHeader.c"
		default:
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		break;
#line 557 "SettingsHeader.c"
	}
}

static void
_vala_dialogs_settings_settings_header_set_property (GObject * object,
                                                     guint property_id,
                                                     const GValue * value,
                                                     GParamSpec * pspec)
{
	DialogsSettingsSettingsHeader * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, DialogsSettingsSettingsHeader);
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
	switch (property_id) {
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		case DIALOGS_SETTINGS_SETTINGS_HEADER_TITLE_HEADER_PROPERTY:
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		dialogs_settings_settings_header_set_title_header (self, g_value_get_string (value));
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		break;
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		case DIALOGS_SETTINGS_SETTINGS_HEADER_SHOW_BACK_BUTTON_PROPERTY:
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		dialogs_settings_settings_header_set_show_back_button (self, g_value_get_boolean (value));
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		break;
#line 583 "SettingsHeader.c"
		default:
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Dialogs/Settings/SettingsHeader.vala"
		break;
#line 589 "SettingsHeader.c"
	}
}

