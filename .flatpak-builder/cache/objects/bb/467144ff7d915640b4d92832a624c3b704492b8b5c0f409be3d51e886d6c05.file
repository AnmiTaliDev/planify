/* Label.c generated by valac 0.50.10, the Vala compiler
 * generated from Label.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <handy.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib/gi18n-lib.h>
#include <gee.h>
#include <gio/gio.h>

#define DIALOGS_TYPE_LABEL (dialogs_label_get_type ())
#define DIALOGS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_LABEL, DialogsLabel))
#define DIALOGS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_LABEL, DialogsLabelClass))
#define DIALOGS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_LABEL))
#define DIALOGS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_LABEL))
#define DIALOGS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_LABEL, DialogsLabelClass))

typedef struct _DialogsLabel DialogsLabel;
typedef struct _DialogsLabelClass DialogsLabelClass;
typedef struct _DialogsLabelPrivate DialogsLabelPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
enum  {
	DIALOGS_LABEL_0_PROPERTY,
	DIALOGS_LABEL_LABEL_PROPERTY,
	DIALOGS_LABEL_IS_CREATING_PROPERTY,
	DIALOGS_LABEL_COLOR_SELECTED_PROPERTY,
	DIALOGS_LABEL_NUM_PROPERTIES
};
static GParamSpec* dialogs_label_properties[DIALOGS_LABEL_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;

#define WIDGETS_TYPE_LOADING_BUTTON (widgets_loading_button_get_type ())
#define WIDGETS_LOADING_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LOADING_BUTTON, WidgetsLoadingButton))
#define WIDGETS_LOADING_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LOADING_BUTTON, WidgetsLoadingButtonClass))
#define WIDGETS_IS_LOADING_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LOADING_BUTTON))
#define WIDGETS_IS_LOADING_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LOADING_BUTTON))
#define WIDGETS_LOADING_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LOADING_BUTTON, WidgetsLoadingButtonClass))

typedef struct _WidgetsLoadingButton WidgetsLoadingButton;
typedef struct _WidgetsLoadingButtonClass WidgetsLoadingButtonClass;
typedef struct _Block34Data Block34Data;

#define TYPE_PLANNER (planner_get_type ())
#define PLANNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PLANNER, Planner))
#define PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_PLANNER, PlannerClass))
#define IS_PLANNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PLANNER))
#define IS_PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_PLANNER))
#define PLANNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PLANNER, PlannerClass))

typedef struct _Planner Planner;
typedef struct _PlannerClass PlannerClass;
typedef struct _PlannerPrivate PlannerPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;

#define OBJECTS_TYPE_COLOR (objects_color_get_type ())
#define OBJECTS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_COLOR, ObjectsColor))
#define OBJECTS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_COLOR, ObjectsColorClass))
#define OBJECTS_IS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_COLOR))
#define OBJECTS_IS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_COLOR))
#define OBJECTS_COLOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_COLOR, ObjectsColorClass))

typedef struct _ObjectsColor ObjectsColor;
typedef struct _ObjectsColorClass ObjectsColorClass;
typedef struct _Block35Data Block35Data;
typedef enum  {
	LOADING_BUTTON_TYPE_LABEL,
	LOADING_BUTTON_TYPE_ICON
} LoadingButtonType;

#define TYPE_LOADING_BUTTON_TYPE (loading_button_type_get_type ())

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define SERVICES_TYPE_TODOIST (services_todoist_get_type ())
#define SERVICES_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_TODOIST, ServicesTodoist))
#define SERVICES_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_TODOIST, ServicesTodoistClass))
#define SERVICES_IS_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_TODOIST))
#define SERVICES_IS_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_TODOIST))
#define SERVICES_TODOIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_TODOIST, ServicesTodoistClass))

typedef struct _ServicesTodoist ServicesTodoist;
typedef struct _ServicesTodoistClass ServicesTodoistClass;
typedef enum  {
	BACKEND_TYPE_NONE = 0,
	BACKEND_TYPE_LOCAL = 1,
	BACKEND_TYPE_TODOIST = 2,
	BACKEND_TYPE_CALDAV = 3
} BackendType;

#define TYPE_BACKEND_TYPE (backend_type_get_type ())

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;
typedef enum  {
	PANE_TYPE_FILTER,
	PANE_TYPE_FAVORITE,
	PANE_TYPE_PROJECT,
	PANE_TYPE_LABEL,
	PANE_TYPE_TASKLIST
} PaneType;

#define TYPE_PANE_TYPE (pane_type_get_type ())

struct _DialogsLabel {
	HdyWindow parent_instance;
	DialogsLabelPrivate * priv;
};

struct _DialogsLabelClass {
	HdyWindowClass parent_class;
};

struct _DialogsLabelPrivate {
	ObjectsLabel* _label;
	GtkGrid* widget_color;
	gchar* _color_selected;
};

struct _Block34Data {
	int _ref_count_;
	DialogsLabel* self;
	GtkEntry* name_entry;
	WidgetsLoadingButton* submit_button;
};

struct _Planner {
	GtkApplication parent_instance;
	PlannerPrivate * priv;
	MainWindow* main_window;
};

struct _PlannerClass {
	GtkApplicationClass parent_class;
};

struct _Block35Data {
	int _ref_count_;
	Block34Data * _data34_;
	GeeMapEntry* entry;
};

static gint DialogsLabel_private_offset;
static gpointer dialogs_label_parent_class = NULL;
extern ServicesDatabase* planner_database;
extern ServicesTodoist* planner_todoist;
extern GSettings* planner_settings;
extern ServicesEventBus* planner_event_bus;

GType dialogs_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsLabel, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
DialogsLabel* dialogs_label_new_new (void);
DialogsLabel* dialogs_label_construct_new (GType object_type);
ObjectsLabel* objects_label_new (void);
ObjectsLabel* objects_label_construct (GType object_type);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gchar* util_get_random_color (Util* self);
void objects_label_set_color (ObjectsLabel* self,
                              const gchar* value);
#define CONSTANTS_INACTIVE 0
void objects_base_object_set_id (ObjectsBaseObject* self,
                                 gint64 value);
DialogsLabel* dialogs_label_new (ObjectsLabel* label);
DialogsLabel* dialogs_label_construct (GType object_type,
                                       ObjectsLabel* label);
void dialogs_label_hide_destroy (DialogsLabel* self);
static gboolean __lambda220_ (DialogsLabel* self);
static gboolean ___lambda220__gsource_func (gpointer self);
ObjectsLabel* dialogs_label_get_label (DialogsLabel* self);
static void dialogs_label_set_label (DialogsLabel* self,
                              ObjectsLabel* value);
gboolean dialogs_label_get_is_creating (DialogsLabel* self);
gint64 objects_base_object_get_id (ObjectsBaseObject* self);
const gchar* dialogs_label_get_color_selected (DialogsLabel* self);
void dialogs_label_set_color_selected (DialogsLabel* self,
                                       const gchar* value);
static GObject * dialogs_label_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties);
GType widgets_loading_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsLoadingButton, g_object_unref)
static Block34Data* block34_data_ref (Block34Data* _data34_);
static void block34_data_unref (void * _userdata_);
GType planner_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Planner, g_object_unref)
Planner* planner_get_instance (void);
GType main_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MainWindow, g_object_unref)
const gchar* objects_label_get_name (ObjectsLabel* self);
GType objects_color_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsColor, g_object_unref)
GeeHashMap* util_get_colors (Util* self);
static Block35Data* block35_data_ref (Block35Data* _data35_);
static void block35_data_unref (void * _userdata_);
gchar* util_get_color_name (Util* self,
                            const gchar* key);
void util_set_widget_color (Util* self,
                            const gchar* color,
                            GtkWidget* widget);
gchar* util_get_color (Util* self,
                       const gchar* key);
static void _dialogs_label_____lambda221_ (Block35Data* _data35_);
static void __dialogs_label_____lambda221__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                               gpointer self);
const gchar* objects_label_get_color (ObjectsLabel* self);
GType loading_button_type_get_type (void) G_GNUC_CONST;
WidgetsLoadingButton* widgets_loading_button_new (LoadingButtonType loading_type,
                                                  const gchar* text);
WidgetsLoadingButton* widgets_loading_button_construct (GType object_type,
                                                        LoadingButtonType loading_type,
                                                        const gchar* text);
static void _dialogs_label___lambda222_ (Block34Data* _data34_);
gboolean util_is_input_valid (Util* self,
                              GtkEntry* entry);
static void __dialogs_label___lambda222__gtk_editable_changed (GtkEditable* _sender,
                                                        gpointer self);
static void _dialogs_label___lambda223_ (Block34Data* _data34_);
void objects_label_set_name (ObjectsLabel* self,
                             const gchar* value);
void widgets_loading_button_set_is_loading (WidgetsLoadingButton* self,
                                            gboolean value);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
void services_database_update_label (ServicesDatabase* self,
                                     ObjectsLabel* label);
gboolean objects_label_get_todoist (ObjectsLabel* self);
GType services_todoist_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesTodoist, g_object_unref)
void services_todoist_update (ServicesTodoist* self,
                              ObjectsBaseObject* object,
                              GAsyncReadyCallback _callback_,
                              gpointer _user_data_);
gboolean services_todoist_update_finish (ServicesTodoist* self,
                                         GAsyncResult* _res_);
static void ____lambda224_ (Block34Data* _data34_,
                     GObject* obj,
                     GAsyncResult* res);
static void _____lambda224__gasync_ready_callback (GObject* source_object,
                                            GAsyncResult* res,
                                            gpointer self);
GType backend_type_get_type (void) G_GNUC_CONST;
void objects_label_set_todoist (ObjectsLabel* self,
                                gboolean value);
void services_todoist_add (ServicesTodoist* self,
                           ObjectsBaseObject* object,
                           GAsyncReadyCallback _callback_,
                           gpointer _user_data_);
gint64* services_todoist_add_finish (ServicesTodoist* self,
                                     GAsyncResult* _res_);
static void ____lambda225_ (DialogsLabel* self,
                     GObject* obj,
                     GAsyncResult* res);
gboolean services_database_insert_label (ServicesDatabase* self,
                                         ObjectsLabel* label);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
GType pane_type_get_type (void) G_GNUC_CONST;
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
static void _____lambda225__gasync_ready_callback (GObject* source_object,
                                            GAsyncResult* res,
                                            gpointer self);
gint64 util_generate_id (Util* self,
                         gint len);
static void __dialogs_label___lambda223__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
static void _dialogs_label___lambda226_ (DialogsLabel* self);
static void __dialogs_label___lambda226__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
static void dialogs_label_finalize (GObject * obj);
static GType dialogs_label_get_type_once (void);
static void _vala_dialogs_label_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec);
static void _vala_dialogs_label_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec);

static inline gpointer
dialogs_label_get_instance_private (DialogsLabel* self)
{
	return G_STRUCT_MEMBER_P (self, DialogsLabel_private_offset);
}

DialogsLabel*
dialogs_label_construct_new (GType object_type)
{
	DialogsLabel * self = NULL;
	ObjectsLabel* label = NULL;
	ObjectsLabel* _tmp0_;
	Util* _tmp1_;
	Util* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
#line 36 "../src/Dialogs/Label.vala"
	_tmp0_ = objects_label_new ();
#line 36 "../src/Dialogs/Label.vala"
	label = _tmp0_;
#line 37 "../src/Dialogs/Label.vala"
	_tmp1_ = util_get_default ();
#line 37 "../src/Dialogs/Label.vala"
	_tmp2_ = _tmp1_;
#line 37 "../src/Dialogs/Label.vala"
	_tmp3_ = util_get_random_color (_tmp2_);
#line 37 "../src/Dialogs/Label.vala"
	_tmp4_ = _tmp3_;
#line 37 "../src/Dialogs/Label.vala"
	objects_label_set_color (label, _tmp4_);
#line 37 "../src/Dialogs/Label.vala"
	_g_free0 (_tmp4_);
#line 37 "../src/Dialogs/Label.vala"
	_g_object_unref0 (_tmp2_);
#line 38 "../src/Dialogs/Label.vala"
	objects_base_object_set_id ((ObjectsBaseObject*) label, (gint64) CONSTANTS_INACTIVE);
#line 40 "../src/Dialogs/Label.vala"
	self = (DialogsLabel*) g_object_new (object_type, "label", label, "deletable", TRUE, "resizable", TRUE, "window-position", GTK_WIN_POS_CENTER_ON_PARENT, "modal", TRUE, NULL);
#line 35 "../src/Dialogs/Label.vala"
	_g_object_unref0 (label);
#line 35 "../src/Dialogs/Label.vala"
	return self;
#line 406 "Label.c"
}

DialogsLabel*
dialogs_label_new_new (void)
{
#line 35 "../src/Dialogs/Label.vala"
	return dialogs_label_construct_new (DIALOGS_TYPE_LABEL);
#line 414 "Label.c"
}

DialogsLabel*
dialogs_label_construct (GType object_type,
                         ObjectsLabel* label)
{
	DialogsLabel * self = NULL;
#line 49 "../src/Dialogs/Label.vala"
	g_return_val_if_fail (label != NULL, NULL);
#line 50 "../src/Dialogs/Label.vala"
	self = (DialogsLabel*) g_object_new (object_type, "label", label, "deletable", TRUE, "resizable", TRUE, "window-position", GTK_WIN_POS_CENTER_ON_PARENT, "modal", TRUE, NULL);
#line 49 "../src/Dialogs/Label.vala"
	return self;
#line 428 "Label.c"
}

DialogsLabel*
dialogs_label_new (ObjectsLabel* label)
{
#line 49 "../src/Dialogs/Label.vala"
	return dialogs_label_construct (DIALOGS_TYPE_LABEL, label);
#line 436 "Label.c"
}

static gboolean
__lambda220_ (DialogsLabel* self)
{
	gboolean result = FALSE;
#line 229 "../src/Dialogs/Label.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 230 "../src/Dialogs/Label.vala"
	result = G_SOURCE_REMOVE;
#line 230 "../src/Dialogs/Label.vala"
	return result;
#line 449 "Label.c"
}

static gboolean
___lambda220__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda220_ ((DialogsLabel*) self);
#line 228 "../src/Dialogs/Label.vala"
	return result;
#line 459 "Label.c"
}

void
dialogs_label_hide_destroy (DialogsLabel* self)
{
#line 225 "../src/Dialogs/Label.vala"
	g_return_if_fail (self != NULL);
#line 226 "../src/Dialogs/Label.vala"
	gtk_widget_hide ((GtkWidget*) self);
#line 228 "../src/Dialogs/Label.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 500, ___lambda220__gsource_func, g_object_ref (self), g_object_unref);
#line 471 "Label.c"
}

ObjectsLabel*
dialogs_label_get_label (DialogsLabel* self)
{
	ObjectsLabel* result;
	ObjectsLabel* _tmp0_;
#line 23 "../src/Dialogs/Label.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "../src/Dialogs/Label.vala"
	_tmp0_ = self->priv->_label;
#line 23 "../src/Dialogs/Label.vala"
	result = _tmp0_;
#line 23 "../src/Dialogs/Label.vala"
	return result;
#line 487 "Label.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 23 "../src/Dialogs/Label.vala"
	return self ? g_object_ref (self) : NULL;
#line 495 "Label.c"
}

static void
dialogs_label_set_label (DialogsLabel* self,
                         ObjectsLabel* value)
{
	ObjectsLabel* old_value;
#line 23 "../src/Dialogs/Label.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/Dialogs/Label.vala"
	old_value = dialogs_label_get_label (self);
#line 23 "../src/Dialogs/Label.vala"
	if (old_value != value) {
#line 509 "Label.c"
		ObjectsLabel* _tmp0_;
#line 23 "../src/Dialogs/Label.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 23 "../src/Dialogs/Label.vala"
		_g_object_unref0 (self->priv->_label);
#line 23 "../src/Dialogs/Label.vala"
		self->priv->_label = _tmp0_;
#line 23 "../src/Dialogs/Label.vala"
		g_object_notify_by_pspec ((GObject *) self, dialogs_label_properties[DIALOGS_LABEL_LABEL_PROPERTY]);
#line 519 "Label.c"
	}
}

gboolean
dialogs_label_get_is_creating (DialogsLabel* self)
{
	gboolean result;
	ObjectsLabel* _tmp0_;
	gint64 _tmp1_;
	gint64 _tmp2_;
#line 28 "../src/Dialogs/Label.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 29 "../src/Dialogs/Label.vala"
	_tmp0_ = self->priv->_label;
#line 29 "../src/Dialogs/Label.vala"
	_tmp1_ = objects_base_object_get_id ((ObjectsBaseObject*) _tmp0_);
#line 29 "../src/Dialogs/Label.vala"
	_tmp2_ = _tmp1_;
#line 29 "../src/Dialogs/Label.vala"
	result = _tmp2_ == ((gint64) CONSTANTS_INACTIVE);
#line 29 "../src/Dialogs/Label.vala"
	return result;
#line 542 "Label.c"
}

const gchar*
dialogs_label_get_color_selected (DialogsLabel* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 33 "../src/Dialogs/Label.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 33 "../src/Dialogs/Label.vala"
	_tmp0_ = self->priv->_color_selected;
#line 33 "../src/Dialogs/Label.vala"
	result = _tmp0_;
#line 33 "../src/Dialogs/Label.vala"
	return result;
#line 558 "Label.c"
}

void
dialogs_label_set_color_selected (DialogsLabel* self,
                                  const gchar* value)
{
	gchar* old_value;
#line 33 "../src/Dialogs/Label.vala"
	g_return_if_fail (self != NULL);
#line 33 "../src/Dialogs/Label.vala"
	old_value = dialogs_label_get_color_selected (self);
#line 33 "../src/Dialogs/Label.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 572 "Label.c"
		gchar* _tmp0_;
#line 33 "../src/Dialogs/Label.vala"
		_tmp0_ = g_strdup (value);
#line 33 "../src/Dialogs/Label.vala"
		_g_free0 (self->priv->_color_selected);
#line 33 "../src/Dialogs/Label.vala"
		self->priv->_color_selected = _tmp0_;
#line 33 "../src/Dialogs/Label.vala"
		g_object_notify_by_pspec ((GObject *) self, dialogs_label_properties[DIALOGS_LABEL_COLOR_SELECTED_PROPERTY]);
#line 582 "Label.c"
	}
}

static Block34Data*
block34_data_ref (Block34Data* _data34_)
{
#line 59 "../src/Dialogs/Label.vala"
	g_atomic_int_inc (&_data34_->_ref_count_);
#line 59 "../src/Dialogs/Label.vala"
	return _data34_;
#line 593 "Label.c"
}

static void
block34_data_unref (void * _userdata_)
{
	Block34Data* _data34_;
	_data34_ = (Block34Data*) _userdata_;
#line 59 "../src/Dialogs/Label.vala"
	if (g_atomic_int_dec_and_test (&_data34_->_ref_count_)) {
#line 603 "Label.c"
		DialogsLabel* self;
#line 59 "../src/Dialogs/Label.vala"
		self = _data34_->self;
#line 59 "../src/Dialogs/Label.vala"
		_g_object_unref0 (_data34_->submit_button);
#line 59 "../src/Dialogs/Label.vala"
		_g_object_unref0 (_data34_->name_entry);
#line 59 "../src/Dialogs/Label.vala"
		_g_object_unref0 (self);
#line 59 "../src/Dialogs/Label.vala"
		g_slice_free (Block34Data, _data34_);
#line 615 "Label.c"
	}
}

static Block35Data*
block35_data_ref (Block35Data* _data35_)
{
#line 108 "../src/Dialogs/Label.vala"
	g_atomic_int_inc (&_data35_->_ref_count_);
#line 108 "../src/Dialogs/Label.vala"
	return _data35_;
#line 626 "Label.c"
}

static void
block35_data_unref (void * _userdata_)
{
	Block35Data* _data35_;
	_data35_ = (Block35Data*) _userdata_;
#line 108 "../src/Dialogs/Label.vala"
	if (g_atomic_int_dec_and_test (&_data35_->_ref_count_)) {
#line 636 "Label.c"
		DialogsLabel* self;
#line 108 "../src/Dialogs/Label.vala"
		self = _data35_->_data34_->self;
#line 108 "../src/Dialogs/Label.vala"
		_g_object_unref0 (_data35_->entry);
#line 108 "../src/Dialogs/Label.vala"
		block34_data_unref (_data35_->_data34_);
#line 108 "../src/Dialogs/Label.vala"
		_data35_->_data34_ = NULL;
#line 108 "../src/Dialogs/Label.vala"
		g_slice_free (Block35Data, _data35_);
#line 648 "Label.c"
	}
}

static void
_dialogs_label_____lambda221_ (Block35Data* _data35_)
{
	Block34Data* _data34_;
	DialogsLabel* self;
	GeeMapEntry* _tmp0_;
	gconstpointer _tmp1_;
	gconstpointer _tmp2_;
	Util* _tmp3_;
	Util* _tmp4_;
	Util* _tmp5_;
	Util* _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	GtkGrid* _tmp10_;
#line 118 "../src/Dialogs/Label.vala"
	_data34_ = _data35_->_data34_;
#line 118 "../src/Dialogs/Label.vala"
	self = _data34_->self;
#line 119 "../src/Dialogs/Label.vala"
	_tmp0_ = _data35_->entry;
#line 119 "../src/Dialogs/Label.vala"
	_tmp1_ = gee_map_entry_get_key (_tmp0_);
#line 119 "../src/Dialogs/Label.vala"
	_tmp2_ = _tmp1_;
#line 119 "../src/Dialogs/Label.vala"
	dialogs_label_set_color_selected (self, (const gchar*) _tmp2_);
#line 120 "../src/Dialogs/Label.vala"
	_tmp3_ = util_get_default ();
#line 120 "../src/Dialogs/Label.vala"
	_tmp4_ = _tmp3_;
#line 120 "../src/Dialogs/Label.vala"
	_tmp5_ = util_get_default ();
#line 120 "../src/Dialogs/Label.vala"
	_tmp6_ = _tmp5_;
#line 120 "../src/Dialogs/Label.vala"
	_tmp7_ = self->priv->_color_selected;
#line 120 "../src/Dialogs/Label.vala"
	_tmp8_ = util_get_color (_tmp6_, _tmp7_);
#line 120 "../src/Dialogs/Label.vala"
	_tmp9_ = _tmp8_;
#line 120 "../src/Dialogs/Label.vala"
	_tmp10_ = self->priv->widget_color;
#line 120 "../src/Dialogs/Label.vala"
	util_set_widget_color (_tmp4_, _tmp9_, (GtkWidget*) _tmp10_);
#line 120 "../src/Dialogs/Label.vala"
	_g_free0 (_tmp9_);
#line 120 "../src/Dialogs/Label.vala"
	_g_object_unref0 (_tmp6_);
#line 120 "../src/Dialogs/Label.vala"
	_g_object_unref0 (_tmp4_);
#line 704 "Label.c"
}

static void
__dialogs_label_____lambda221__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                          gpointer self)
{
#line 118 "../src/Dialogs/Label.vala"
	_dialogs_label_____lambda221_ (self);
#line 713 "Label.c"
}

static void
_dialogs_label___lambda222_ (Block34Data* _data34_)
{
	DialogsLabel* self;
	WidgetsLoadingButton* _tmp0_;
	Util* _tmp1_;
	Util* _tmp2_;
	GtkEntry* _tmp3_;
#line 175 "../src/Dialogs/Label.vala"
	self = _data34_->self;
#line 176 "../src/Dialogs/Label.vala"
	_tmp0_ = _data34_->submit_button;
#line 176 "../src/Dialogs/Label.vala"
	_tmp1_ = util_get_default ();
#line 176 "../src/Dialogs/Label.vala"
	_tmp2_ = _tmp1_;
#line 176 "../src/Dialogs/Label.vala"
	_tmp3_ = _data34_->name_entry;
#line 176 "../src/Dialogs/Label.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp0_, util_is_input_valid (_tmp2_, _tmp3_));
#line 176 "../src/Dialogs/Label.vala"
	_g_object_unref0 (_tmp2_);
#line 738 "Label.c"
}

static void
__dialogs_label___lambda222__gtk_editable_changed (GtkEditable* _sender,
                                                   gpointer self)
{
#line 175 "../src/Dialogs/Label.vala"
	_dialogs_label___lambda222_ (self);
#line 747 "Label.c"
}

static void
____lambda224_ (Block34Data* _data34_,
                GObject* obj,
                GAsyncResult* res)
{
	DialogsLabel* self;
	ServicesTodoist* _tmp0_;
#line 187 "../src/Dialogs/Label.vala"
	self = _data34_->self;
#line 187 "../src/Dialogs/Label.vala"
	g_return_if_fail (res != NULL);
#line 188 "../src/Dialogs/Label.vala"
	_tmp0_ = planner_todoist;
#line 188 "../src/Dialogs/Label.vala"
	if (services_todoist_update_finish (_tmp0_, res)) {
#line 765 "Label.c"
		WidgetsLoadingButton* _tmp1_;
#line 189 "../src/Dialogs/Label.vala"
		_tmp1_ = _data34_->submit_button;
#line 189 "../src/Dialogs/Label.vala"
		widgets_loading_button_set_is_loading (_tmp1_, FALSE);
#line 190 "../src/Dialogs/Label.vala"
		dialogs_label_hide_destroy (self);
#line 773 "Label.c"
	}
}

static void
_____lambda224__gasync_ready_callback (GObject* source_object,
                                       GAsyncResult* res,
                                       gpointer self)
{
#line 187 "../src/Dialogs/Label.vala"
	____lambda224_ (self, source_object, res);
#line 187 "../src/Dialogs/Label.vala"
	block34_data_unref (self);
#line 786 "Label.c"
}

static void
____lambda225_ (DialogsLabel* self,
                GObject* obj,
                GAsyncResult* res)
{
	ObjectsLabel* _tmp0_;
	ServicesTodoist* _tmp1_;
	gint64* _tmp2_;
	gint64* _tmp3_;
	ServicesDatabase* _tmp4_;
	ObjectsLabel* _tmp5_;
	ServicesEventBus* _tmp6_;
	ObjectsLabel* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
#line 205 "../src/Dialogs/Label.vala"
	g_return_if_fail (res != NULL);
#line 206 "../src/Dialogs/Label.vala"
	_tmp0_ = self->priv->_label;
#line 206 "../src/Dialogs/Label.vala"
	_tmp1_ = planner_todoist;
#line 206 "../src/Dialogs/Label.vala"
	_tmp2_ = services_todoist_add_finish (_tmp1_, res);
#line 206 "../src/Dialogs/Label.vala"
	_tmp3_ = _tmp2_;
#line 206 "../src/Dialogs/Label.vala"
	objects_base_object_set_id ((ObjectsBaseObject*) _tmp0_, *_tmp3_);
#line 206 "../src/Dialogs/Label.vala"
	_g_free0 (_tmp3_);
#line 207 "../src/Dialogs/Label.vala"
	_tmp4_ = planner_database;
#line 207 "../src/Dialogs/Label.vala"
	_tmp5_ = self->priv->_label;
#line 207 "../src/Dialogs/Label.vala"
	services_database_insert_label (_tmp4_, _tmp5_);
#line 208 "../src/Dialogs/Label.vala"
	_tmp6_ = planner_event_bus;
#line 208 "../src/Dialogs/Label.vala"
	_tmp7_ = self->priv->_label;
#line 208 "../src/Dialogs/Label.vala"
	_tmp8_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp7_);
#line 208 "../src/Dialogs/Label.vala"
	_tmp9_ = _tmp8_;
#line 208 "../src/Dialogs/Label.vala"
	g_signal_emit_by_name (_tmp6_, "pane-selected", PANE_TYPE_LABEL, _tmp9_);
#line 209 "../src/Dialogs/Label.vala"
	dialogs_label_hide_destroy (self);
#line 836 "Label.c"
}

static void
_____lambda225__gasync_ready_callback (GObject* source_object,
                                       GAsyncResult* res,
                                       gpointer self)
{
#line 205 "../src/Dialogs/Label.vala"
	____lambda225_ ((DialogsLabel*) self, source_object, res);
#line 205 "../src/Dialogs/Label.vala"
	g_object_unref (self);
#line 848 "Label.c"
}

static void
_dialogs_label___lambda223_ (Block34Data* _data34_)
{
	DialogsLabel* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
#line 179 "../src/Dialogs/Label.vala"
	self = _data34_->self;
#line 180 "../src/Dialogs/Label.vala"
	_tmp0_ = dialogs_label_get_is_creating (self);
#line 180 "../src/Dialogs/Label.vala"
	_tmp1_ = _tmp0_;
#line 180 "../src/Dialogs/Label.vala"
	if (!_tmp1_) {
#line 865 "Label.c"
		ObjectsLabel* _tmp2_;
		GtkEntry* _tmp3_;
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		ObjectsLabel* _tmp6_;
		const gchar* _tmp7_;
		WidgetsLoadingButton* _tmp8_;
		ServicesDatabase* _tmp9_;
		ObjectsLabel* _tmp10_;
		ObjectsLabel* _tmp11_;
		gboolean _tmp12_;
		gboolean _tmp13_;
#line 181 "../src/Dialogs/Label.vala"
		_tmp2_ = self->priv->_label;
#line 181 "../src/Dialogs/Label.vala"
		_tmp3_ = _data34_->name_entry;
#line 181 "../src/Dialogs/Label.vala"
		_tmp4_ = gtk_entry_get_text (_tmp3_);
#line 181 "../src/Dialogs/Label.vala"
		_tmp5_ = _tmp4_;
#line 181 "../src/Dialogs/Label.vala"
		objects_label_set_name (_tmp2_, _tmp5_);
#line 182 "../src/Dialogs/Label.vala"
		_tmp6_ = self->priv->_label;
#line 182 "../src/Dialogs/Label.vala"
		_tmp7_ = self->priv->_color_selected;
#line 182 "../src/Dialogs/Label.vala"
		objects_label_set_color (_tmp6_, _tmp7_);
#line 184 "../src/Dialogs/Label.vala"
		_tmp8_ = _data34_->submit_button;
#line 184 "../src/Dialogs/Label.vala"
		widgets_loading_button_set_is_loading (_tmp8_, TRUE);
#line 185 "../src/Dialogs/Label.vala"
		_tmp9_ = planner_database;
#line 185 "../src/Dialogs/Label.vala"
		_tmp10_ = self->priv->_label;
#line 185 "../src/Dialogs/Label.vala"
		services_database_update_label (_tmp9_, _tmp10_);
#line 186 "../src/Dialogs/Label.vala"
		_tmp11_ = self->priv->_label;
#line 186 "../src/Dialogs/Label.vala"
		_tmp12_ = objects_label_get_todoist (_tmp11_);
#line 186 "../src/Dialogs/Label.vala"
		_tmp13_ = _tmp12_;
#line 186 "../src/Dialogs/Label.vala"
		if (_tmp13_) {
#line 912 "Label.c"
			ServicesTodoist* _tmp14_;
			ObjectsLabel* _tmp15_;
#line 187 "../src/Dialogs/Label.vala"
			_tmp14_ = planner_todoist;
#line 187 "../src/Dialogs/Label.vala"
			_tmp15_ = self->priv->_label;
#line 187 "../src/Dialogs/Label.vala"
			services_todoist_update (_tmp14_, (ObjectsBaseObject*) _tmp15_, _____lambda224__gasync_ready_callback, block34_data_ref (_data34_));
#line 921 "Label.c"
		} else {
#line 194 "../src/Dialogs/Label.vala"
			dialogs_label_hide_destroy (self);
#line 925 "Label.c"
		}
	} else {
		BackendType backend_type = 0;
		GSettings* _tmp16_;
		ObjectsLabel* _tmp17_;
		const gchar* _tmp18_;
		ObjectsLabel* _tmp19_;
		GtkEntry* _tmp20_;
		const gchar* _tmp21_;
		const gchar* _tmp22_;
		BackendType _tmp23_;
#line 197 "../src/Dialogs/Label.vala"
		_tmp16_ = planner_settings;
#line 197 "../src/Dialogs/Label.vala"
		backend_type = (BackendType) g_settings_get_enum (_tmp16_, "backend-type");
#line 199 "../src/Dialogs/Label.vala"
		_tmp17_ = self->priv->_label;
#line 199 "../src/Dialogs/Label.vala"
		_tmp18_ = self->priv->_color_selected;
#line 199 "../src/Dialogs/Label.vala"
		objects_label_set_color (_tmp17_, _tmp18_);
#line 200 "../src/Dialogs/Label.vala"
		_tmp19_ = self->priv->_label;
#line 200 "../src/Dialogs/Label.vala"
		_tmp20_ = _data34_->name_entry;
#line 200 "../src/Dialogs/Label.vala"
		_tmp21_ = gtk_entry_get_text (_tmp20_);
#line 200 "../src/Dialogs/Label.vala"
		_tmp22_ = _tmp21_;
#line 200 "../src/Dialogs/Label.vala"
		objects_label_set_name (_tmp19_, _tmp22_);
#line 202 "../src/Dialogs/Label.vala"
		_tmp23_ = backend_type;
#line 202 "../src/Dialogs/Label.vala"
		if (_tmp23_ == BACKEND_TYPE_TODOIST) {
#line 961 "Label.c"
			ObjectsLabel* _tmp24_;
			WidgetsLoadingButton* _tmp25_;
			ServicesTodoist* _tmp26_;
			ObjectsLabel* _tmp27_;
#line 203 "../src/Dialogs/Label.vala"
			_tmp24_ = self->priv->_label;
#line 203 "../src/Dialogs/Label.vala"
			objects_label_set_todoist (_tmp24_, TRUE);
#line 204 "../src/Dialogs/Label.vala"
			_tmp25_ = _data34_->submit_button;
#line 204 "../src/Dialogs/Label.vala"
			widgets_loading_button_set_is_loading (_tmp25_, TRUE);
#line 205 "../src/Dialogs/Label.vala"
			_tmp26_ = planner_todoist;
#line 205 "../src/Dialogs/Label.vala"
			_tmp27_ = self->priv->_label;
#line 205 "../src/Dialogs/Label.vala"
			services_todoist_add (_tmp26_, (ObjectsBaseObject*) _tmp27_, _____lambda225__gasync_ready_callback, g_object_ref (self));
#line 980 "Label.c"
		} else {
			BackendType _tmp28_;
#line 211 "../src/Dialogs/Label.vala"
			_tmp28_ = backend_type;
#line 211 "../src/Dialogs/Label.vala"
			if (_tmp28_ == BACKEND_TYPE_LOCAL) {
#line 987 "Label.c"
				ObjectsLabel* _tmp29_;
				Util* _tmp30_;
				Util* _tmp31_;
				ServicesDatabase* _tmp32_;
				ObjectsLabel* _tmp33_;
				ServicesEventBus* _tmp34_;
				ObjectsLabel* _tmp35_;
				const gchar* _tmp36_;
				const gchar* _tmp37_;
#line 212 "../src/Dialogs/Label.vala"
				_tmp29_ = self->priv->_label;
#line 212 "../src/Dialogs/Label.vala"
				_tmp30_ = util_get_default ();
#line 212 "../src/Dialogs/Label.vala"
				_tmp31_ = _tmp30_;
#line 212 "../src/Dialogs/Label.vala"
				objects_base_object_set_id ((ObjectsBaseObject*) _tmp29_, util_generate_id (_tmp31_, 10));
#line 212 "../src/Dialogs/Label.vala"
				_g_object_unref0 (_tmp31_);
#line 213 "../src/Dialogs/Label.vala"
				_tmp32_ = planner_database;
#line 213 "../src/Dialogs/Label.vala"
				_tmp33_ = self->priv->_label;
#line 213 "../src/Dialogs/Label.vala"
				services_database_insert_label (_tmp32_, _tmp33_);
#line 214 "../src/Dialogs/Label.vala"
				_tmp34_ = planner_event_bus;
#line 214 "../src/Dialogs/Label.vala"
				_tmp35_ = self->priv->_label;
#line 214 "../src/Dialogs/Label.vala"
				_tmp36_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp35_);
#line 214 "../src/Dialogs/Label.vala"
				_tmp37_ = _tmp36_;
#line 214 "../src/Dialogs/Label.vala"
				g_signal_emit_by_name (_tmp34_, "pane-selected", PANE_TYPE_LABEL, _tmp37_);
#line 215 "../src/Dialogs/Label.vala"
				dialogs_label_hide_destroy (self);
#line 1025 "Label.c"
			}
		}
	}
}

static void
__dialogs_label___lambda223__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
#line 179 "../src/Dialogs/Label.vala"
	_dialogs_label___lambda223_ (self);
#line 1037 "Label.c"
}

static void
_dialogs_label___lambda226_ (DialogsLabel* self)
{
#line 221 "../src/Dialogs/Label.vala"
	dialogs_label_hide_destroy (self);
#line 1045 "Label.c"
}

static void
__dialogs_label___lambda226__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
#line 220 "../src/Dialogs/Label.vala"
	_dialogs_label___lambda226_ ((DialogsLabel*) self);
#line 1054 "Label.c"
}

static GObject *
dialogs_label_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	DialogsLabel * self;
	Block34Data* _data34_;
	GtkStyleContext* dialog_context = NULL;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	GtkStyleContext* _tmp2_;
	GtkStyleContext* _tmp3_;
	Planner* _tmp4_;
	Planner* _tmp5_;
	MainWindow* _tmp6_;
	HdyHeaderBar* headerbar = NULL;
	HdyHeaderBar* _tmp7_;
	HdyHeaderBar* _tmp8_;
	HdyHeaderBar* _tmp9_;
	HdyHeaderBar* _tmp10_;
	GtkStyleContext* _tmp11_;
	GtkGrid* _tmp12_ = NULL;
	GtkStyleContext* widget_color_context = NULL;
	GtkGrid* _tmp13_;
	GtkStyleContext* _tmp14_;
	GtkStyleContext* _tmp15_;
	gchar* _tmp16_;
	GtkEntry* _tmp17_ = NULL;
	GtkEntry* _tmp18_;
	ObjectsLabel* _tmp19_;
	const gchar* _tmp20_;
	const gchar* _tmp21_;
	GtkEntry* _tmp22_;
	GtkStyleContext* _tmp23_;
	GtkEntry* _tmp24_;
	GtkStyleContext* _tmp25_;
	GtkRadioButton* radio = NULL;
	GtkRadioButton* _tmp26_;
	GeeHashMap* colors_hashmap = NULL;
	GeeHashMap* _tmp27_;
	GtkFlowBox* flowbox = NULL;
	GtkFlowBox* _tmp28_ = NULL;
	GtkStyleContext* flowbox_context = NULL;
	GtkFlowBox* _tmp29_;
	GtkStyleContext* _tmp30_;
	GtkStyleContext* _tmp31_;
	ObjectsLabel* _tmp82_;
	const gchar* _tmp83_;
	const gchar* _tmp84_;
	GeeHashMap* _tmp85_;
	const gchar* _tmp86_;
	GtkGrid* flowbox_grid = NULL;
	GtkGrid* _tmp91_ = NULL;
	GtkGrid* _tmp92_;
	GtkFlowBox* _tmp93_;
	GtkStyleContext* flowbox_grid_context = NULL;
	GtkGrid* _tmp94_;
	GtkStyleContext* _tmp95_;
	GtkStyleContext* _tmp96_;
	const gchar* _tmp97_ = NULL;
	gboolean _tmp98_;
	gboolean _tmp99_;
	gboolean _tmp100_;
	gboolean _tmp101_;
	WidgetsLoadingButton* _tmp102_ = NULL;
	WidgetsLoadingButton* _tmp103_;
	GtkStyleContext* _tmp104_;
	WidgetsLoadingButton* _tmp105_;
	GtkStyleContext* _tmp106_;
	GtkButton* cancel_button = NULL;
	GtkButton* _tmp107_;
	GtkButton* _tmp108_;
	GtkStyleContext* _tmp109_;
	GtkGrid* submit_cancel_grid = NULL;
	GtkGrid* _tmp110_ = NULL;
	GtkGrid* _tmp111_;
	GtkButton* _tmp112_;
	GtkGrid* _tmp113_;
	WidgetsLoadingButton* _tmp114_;
	GtkGrid* content_grid = NULL;
	GtkGrid* _tmp115_ = NULL;
	GtkGrid* _tmp116_;
	HdyHeaderBar* _tmp117_;
	GtkGrid* _tmp118_;
	GtkGrid* _tmp119_;
	GtkGrid* _tmp120_;
	GtkEntry* _tmp121_;
	GtkGrid* _tmp122_;
	GtkGrid* _tmp123_;
	GtkGrid* _tmp124_;
	GtkGrid* _tmp125_;
	GtkGrid* _tmp126_;
	GtkEntry* _tmp127_;
	WidgetsLoadingButton* _tmp128_;
	GtkButton* _tmp129_;
#line 59 "../src/Dialogs/Label.vala"
	parent_class = G_OBJECT_CLASS (dialogs_label_parent_class);
#line 59 "../src/Dialogs/Label.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 59 "../src/Dialogs/Label.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_TYPE_LABEL, DialogsLabel);
#line 59 "../src/Dialogs/Label.vala"
	_data34_ = g_slice_new0 (Block34Data);
#line 59 "../src/Dialogs/Label.vala"
	_data34_->_ref_count_ = 1;
#line 59 "../src/Dialogs/Label.vala"
	_data34_->self = g_object_ref (self);
#line 60 "../src/Dialogs/Label.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 60 "../src/Dialogs/Label.vala"
	dialog_context = _tmp0_;
#line 61 "../src/Dialogs/Label.vala"
	_tmp1_ = dialog_context;
#line 61 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp1_, GTK_STYLE_CLASS_VIEW);
#line 62 "../src/Dialogs/Label.vala"
	_tmp2_ = dialog_context;
#line 62 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp2_, "planner-dialog");
#line 63 "../src/Dialogs/Label.vala"
	_tmp3_ = dialog_context;
#line 63 "../src/Dialogs/Label.vala"
	gtk_style_context_remove_class (_tmp3_, "background");
#line 65 "../src/Dialogs/Label.vala"
	_tmp4_ = planner_get_instance ();
#line 65 "../src/Dialogs/Label.vala"
	_tmp5_ = _tmp4_;
#line 65 "../src/Dialogs/Label.vala"
	_tmp6_ = _tmp5_->main_window;
#line 65 "../src/Dialogs/Label.vala"
	gtk_window_set_transient_for ((GtkWindow*) self, (GtkWindow*) _tmp6_);
#line 67 "../src/Dialogs/Label.vala"
	_tmp7_ = (HdyHeaderBar*) hdy_header_bar_new ();
#line 67 "../src/Dialogs/Label.vala"
	g_object_ref_sink (_tmp7_);
#line 67 "../src/Dialogs/Label.vala"
	headerbar = _tmp7_;
#line 68 "../src/Dialogs/Label.vala"
	_tmp8_ = headerbar;
#line 68 "../src/Dialogs/Label.vala"
	hdy_header_bar_set_has_subtitle (_tmp8_, FALSE);
#line 69 "../src/Dialogs/Label.vala"
	_tmp9_ = headerbar;
#line 69 "../src/Dialogs/Label.vala"
	hdy_header_bar_set_show_close_button (_tmp9_, FALSE);
#line 70 "../src/Dialogs/Label.vala"
	_tmp10_ = headerbar;
#line 70 "../src/Dialogs/Label.vala"
	_tmp11_ = gtk_widget_get_style_context ((GtkWidget*) _tmp10_);
#line 70 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp11_, GTK_STYLE_CLASS_FLAT);
#line 72 "../src/Dialogs/Label.vala"
	_tmp12_ = (GtkGrid*) gtk_grid_new ();
#line 72 "../src/Dialogs/Label.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp12_, GTK_ALIGN_CENTER);
#line 72 "../src/Dialogs/Label.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp12_, GTK_ALIGN_CENTER);
#line 72 "../src/Dialogs/Label.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp12_, TRUE);
#line 72 "../src/Dialogs/Label.vala"
	g_object_set ((GtkWidget*) _tmp12_, "height-request", 48, NULL);
#line 72 "../src/Dialogs/Label.vala"
	g_object_set ((GtkWidget*) _tmp12_, "width-request", 48, NULL);
#line 72 "../src/Dialogs/Label.vala"
	g_object_ref_sink (_tmp12_);
#line 72 "../src/Dialogs/Label.vala"
	_g_object_unref0 (self->priv->widget_color);
#line 72 "../src/Dialogs/Label.vala"
	self->priv->widget_color = _tmp12_;
#line 80 "../src/Dialogs/Label.vala"
	_tmp13_ = self->priv->widget_color;
#line 80 "../src/Dialogs/Label.vala"
	_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
#line 80 "../src/Dialogs/Label.vala"
	widget_color_context = _tmp14_;
#line 81 "../src/Dialogs/Label.vala"
	_tmp15_ = widget_color_context;
#line 81 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp15_, "label-color");
#line 83 "../src/Dialogs/Label.vala"
	_tmp16_ = g_strdup (_ ("Label name"));
#line 83 "../src/Dialogs/Label.vala"
	_tmp17_ = (GtkEntry*) gtk_entry_new ();
#line 83 "../src/Dialogs/Label.vala"
	g_object_set ((GtkWidget*) _tmp17_, "margin", 12, NULL);
#line 83 "../src/Dialogs/Label.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp17_, 24);
#line 83 "../src/Dialogs/Label.vala"
	gtk_entry_set_placeholder_text (_tmp17_, _tmp16_);
#line 83 "../src/Dialogs/Label.vala"
	_g_free0 (_tmp16_);
#line 83 "../src/Dialogs/Label.vala"
	g_object_ref_sink (_tmp17_);
#line 83 "../src/Dialogs/Label.vala"
	_data34_->name_entry = _tmp17_;
#line 88 "../src/Dialogs/Label.vala"
	_tmp18_ = _data34_->name_entry;
#line 88 "../src/Dialogs/Label.vala"
	_tmp19_ = self->priv->_label;
#line 88 "../src/Dialogs/Label.vala"
	_tmp20_ = objects_label_get_name (_tmp19_);
#line 88 "../src/Dialogs/Label.vala"
	_tmp21_ = _tmp20_;
#line 88 "../src/Dialogs/Label.vala"
	gtk_entry_set_text (_tmp18_, _tmp21_);
#line 89 "../src/Dialogs/Label.vala"
	_tmp22_ = _data34_->name_entry;
#line 89 "../src/Dialogs/Label.vala"
	_tmp23_ = gtk_widget_get_style_context ((GtkWidget*) _tmp22_);
#line 89 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp23_, "border-radius-6");
#line 90 "../src/Dialogs/Label.vala"
	_tmp24_ = _data34_->name_entry;
#line 90 "../src/Dialogs/Label.vala"
	_tmp25_ = gtk_widget_get_style_context ((GtkWidget*) _tmp24_);
#line 90 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp25_, "dialog-entry");
#line 92 "../src/Dialogs/Label.vala"
	_tmp26_ = (GtkRadioButton*) gtk_radio_button_new (NULL);
#line 92 "../src/Dialogs/Label.vala"
	g_object_ref_sink (_tmp26_);
#line 92 "../src/Dialogs/Label.vala"
	radio = _tmp26_;
#line 93 "../src/Dialogs/Label.vala"
	_tmp27_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, gtk_radio_button_get_type (), (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 93 "../src/Dialogs/Label.vala"
	colors_hashmap = _tmp27_;
#line 95 "../src/Dialogs/Label.vala"
	_tmp28_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 95 "../src/Dialogs/Label.vala"
	gtk_flow_box_set_column_spacing (_tmp28_, (guint) 12);
#line 95 "../src/Dialogs/Label.vala"
	gtk_flow_box_set_row_spacing (_tmp28_, (guint) 12);
#line 95 "../src/Dialogs/Label.vala"
	gtk_container_set_border_width ((GtkContainer*) _tmp28_, (guint) 6);
#line 95 "../src/Dialogs/Label.vala"
	gtk_flow_box_set_max_children_per_line (_tmp28_, (guint) 10);
#line 95 "../src/Dialogs/Label.vala"
	gtk_flow_box_set_min_children_per_line (_tmp28_, (guint) 8);
#line 95 "../src/Dialogs/Label.vala"
	g_object_set ((GtkWidget*) _tmp28_, "expand", TRUE, NULL);
#line 95 "../src/Dialogs/Label.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp28_, GTK_ALIGN_START);
#line 95 "../src/Dialogs/Label.vala"
	g_object_ref_sink (_tmp28_);
#line 95 "../src/Dialogs/Label.vala"
	flowbox = _tmp28_;
#line 105 "../src/Dialogs/Label.vala"
	_tmp29_ = flowbox;
#line 105 "../src/Dialogs/Label.vala"
	_tmp30_ = gtk_widget_get_style_context ((GtkWidget*) _tmp29_);
#line 105 "../src/Dialogs/Label.vala"
	flowbox_context = _tmp30_;
#line 106 "../src/Dialogs/Label.vala"
	_tmp31_ = flowbox_context;
#line 106 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp31_, "flowbox-color");
#line 1316 "Label.c"
	{
		GeeIterator* _entry_it = NULL;
		Util* _tmp32_;
		Util* _tmp33_;
		GeeHashMap* _tmp34_;
		GeeHashMap* _tmp35_;
		GeeSet* _tmp36_;
		GeeSet* _tmp37_;
		GeeSet* _tmp38_;
		GeeIterator* _tmp39_;
		GeeIterator* _tmp40_;
#line 108 "../src/Dialogs/Label.vala"
		_tmp32_ = util_get_default ();
#line 108 "../src/Dialogs/Label.vala"
		_tmp33_ = _tmp32_;
#line 108 "../src/Dialogs/Label.vala"
		_tmp34_ = util_get_colors (_tmp33_);
#line 108 "../src/Dialogs/Label.vala"
		_tmp35_ = _tmp34_;
#line 108 "../src/Dialogs/Label.vala"
		_tmp36_ = gee_abstract_map_get_entries ((GeeAbstractMap*) _tmp35_);
#line 108 "../src/Dialogs/Label.vala"
		_tmp37_ = _tmp36_;
#line 108 "../src/Dialogs/Label.vala"
		_tmp38_ = _tmp37_;
#line 108 "../src/Dialogs/Label.vala"
		_tmp39_ = gee_iterable_iterator ((GeeIterable*) _tmp38_);
#line 108 "../src/Dialogs/Label.vala"
		_tmp40_ = _tmp39_;
#line 108 "../src/Dialogs/Label.vala"
		_g_object_unref0 (_tmp38_);
#line 108 "../src/Dialogs/Label.vala"
		_g_object_unref0 (_tmp35_);
#line 108 "../src/Dialogs/Label.vala"
		_g_object_unref0 (_tmp33_);
#line 108 "../src/Dialogs/Label.vala"
		_entry_it = _tmp40_;
#line 108 "../src/Dialogs/Label.vala"
		while (TRUE) {
#line 1356 "Label.c"
			Block35Data* _data35_;
			GeeIterator* _tmp41_;
			GeeIterator* _tmp42_;
			gpointer _tmp43_;
			GtkRadioButton* color_radio = NULL;
			GtkRadioButton* _tmp44_;
			GSList* _tmp45_;
			GtkRadioButton* _tmp46_;
			GtkRadioButton* _tmp47_;
			GtkRadioButton* _tmp48_;
			GtkRadioButton* _tmp49_;
			Util* _tmp50_;
			Util* _tmp51_;
			GeeMapEntry* _tmp52_;
			gconstpointer _tmp53_;
			gconstpointer _tmp54_;
			gchar* _tmp55_;
			gchar* _tmp56_;
			GtkRadioButton* _tmp57_;
			GtkStyleContext* _tmp58_;
			Util* _tmp59_;
			Util* _tmp60_;
			Util* _tmp61_;
			Util* _tmp62_;
			GeeMapEntry* _tmp63_;
			gconstpointer _tmp64_;
			gconstpointer _tmp65_;
			gchar* _tmp66_;
			gchar* _tmp67_;
			GtkRadioButton* _tmp68_;
			GeeHashMap* _tmp69_;
			GeeMapEntry* _tmp70_;
			gconstpointer _tmp71_;
			gconstpointer _tmp72_;
			GtkRadioButton* _tmp73_;
			GtkFlowBox* _tmp74_;
			GeeHashMap* _tmp75_;
			GeeMapEntry* _tmp76_;
			gconstpointer _tmp77_;
			gconstpointer _tmp78_;
			gpointer _tmp79_;
			GtkRadioButton* _tmp80_;
			GtkRadioButton* _tmp81_;
#line 108 "../src/Dialogs/Label.vala"
			_data35_ = g_slice_new0 (Block35Data);
#line 108 "../src/Dialogs/Label.vala"
			_data35_->_ref_count_ = 1;
#line 108 "../src/Dialogs/Label.vala"
			_data35_->_data34_ = block34_data_ref (_data34_);
#line 108 "../src/Dialogs/Label.vala"
			_tmp41_ = _entry_it;
#line 108 "../src/Dialogs/Label.vala"
			if (!gee_iterator_next (_tmp41_)) {
#line 108 "../src/Dialogs/Label.vala"
				block35_data_unref (_data35_);
#line 108 "../src/Dialogs/Label.vala"
				_data35_ = NULL;
#line 108 "../src/Dialogs/Label.vala"
				break;
#line 1416 "Label.c"
			}
#line 108 "../src/Dialogs/Label.vala"
			_tmp42_ = _entry_it;
#line 108 "../src/Dialogs/Label.vala"
			_tmp43_ = gee_iterator_get (_tmp42_);
#line 108 "../src/Dialogs/Label.vala"
			_data35_->entry = (GeeMapEntry*) _tmp43_;
#line 109 "../src/Dialogs/Label.vala"
			_tmp44_ = radio;
#line 109 "../src/Dialogs/Label.vala"
			_tmp45_ = gtk_radio_button_get_group (_tmp44_);
#line 109 "../src/Dialogs/Label.vala"
			_tmp46_ = (GtkRadioButton*) gtk_radio_button_new (_tmp45_);
#line 109 "../src/Dialogs/Label.vala"
			g_object_ref_sink (_tmp46_);
#line 109 "../src/Dialogs/Label.vala"
			color_radio = _tmp46_;
#line 110 "../src/Dialogs/Label.vala"
			_tmp47_ = color_radio;
#line 110 "../src/Dialogs/Label.vala"
			gtk_widget_set_valign ((GtkWidget*) _tmp47_, GTK_ALIGN_CENTER);
#line 111 "../src/Dialogs/Label.vala"
			_tmp48_ = color_radio;
#line 111 "../src/Dialogs/Label.vala"
			gtk_widget_set_halign ((GtkWidget*) _tmp48_, GTK_ALIGN_CENTER);
#line 112 "../src/Dialogs/Label.vala"
			_tmp49_ = color_radio;
#line 112 "../src/Dialogs/Label.vala"
			_tmp50_ = util_get_default ();
#line 112 "../src/Dialogs/Label.vala"
			_tmp51_ = _tmp50_;
#line 112 "../src/Dialogs/Label.vala"
			_tmp52_ = _data35_->entry;
#line 112 "../src/Dialogs/Label.vala"
			_tmp53_ = gee_map_entry_get_key (_tmp52_);
#line 112 "../src/Dialogs/Label.vala"
			_tmp54_ = _tmp53_;
#line 112 "../src/Dialogs/Label.vala"
			_tmp55_ = util_get_color_name (_tmp51_, (const gchar*) _tmp54_);
#line 112 "../src/Dialogs/Label.vala"
			_tmp56_ = _tmp55_;
#line 112 "../src/Dialogs/Label.vala"
			gtk_widget_set_tooltip_text ((GtkWidget*) _tmp49_, _tmp56_);
#line 112 "../src/Dialogs/Label.vala"
			_g_free0 (_tmp56_);
#line 112 "../src/Dialogs/Label.vala"
			_g_object_unref0 (_tmp51_);
#line 113 "../src/Dialogs/Label.vala"
			_tmp57_ = color_radio;
#line 113 "../src/Dialogs/Label.vala"
			_tmp58_ = gtk_widget_get_style_context ((GtkWidget*) _tmp57_);
#line 113 "../src/Dialogs/Label.vala"
			gtk_style_context_add_class (_tmp58_, "color-radio");
#line 114 "../src/Dialogs/Label.vala"
			_tmp59_ = util_get_default ();
#line 114 "../src/Dialogs/Label.vala"
			_tmp60_ = _tmp59_;
#line 114 "../src/Dialogs/Label.vala"
			_tmp61_ = util_get_default ();
#line 114 "../src/Dialogs/Label.vala"
			_tmp62_ = _tmp61_;
#line 114 "../src/Dialogs/Label.vala"
			_tmp63_ = _data35_->entry;
#line 114 "../src/Dialogs/Label.vala"
			_tmp64_ = gee_map_entry_get_key (_tmp63_);
#line 114 "../src/Dialogs/Label.vala"
			_tmp65_ = _tmp64_;
#line 114 "../src/Dialogs/Label.vala"
			_tmp66_ = util_get_color (_tmp62_, (const gchar*) _tmp65_);
#line 114 "../src/Dialogs/Label.vala"
			_tmp67_ = _tmp66_;
#line 114 "../src/Dialogs/Label.vala"
			_tmp68_ = color_radio;
#line 114 "../src/Dialogs/Label.vala"
			util_set_widget_color (_tmp60_, _tmp67_, (GtkWidget*) _tmp68_);
#line 114 "../src/Dialogs/Label.vala"
			_g_free0 (_tmp67_);
#line 114 "../src/Dialogs/Label.vala"
			_g_object_unref0 (_tmp62_);
#line 114 "../src/Dialogs/Label.vala"
			_g_object_unref0 (_tmp60_);
#line 115 "../src/Dialogs/Label.vala"
			_tmp69_ = colors_hashmap;
#line 115 "../src/Dialogs/Label.vala"
			_tmp70_ = _data35_->entry;
#line 115 "../src/Dialogs/Label.vala"
			_tmp71_ = gee_map_entry_get_key (_tmp70_);
#line 115 "../src/Dialogs/Label.vala"
			_tmp72_ = _tmp71_;
#line 115 "../src/Dialogs/Label.vala"
			_tmp73_ = color_radio;
#line 115 "../src/Dialogs/Label.vala"
			gee_abstract_map_set ((GeeAbstractMap*) _tmp69_, (const gchar*) _tmp72_, _tmp73_);
#line 116 "../src/Dialogs/Label.vala"
			_tmp74_ = flowbox;
#line 116 "../src/Dialogs/Label.vala"
			_tmp75_ = colors_hashmap;
#line 116 "../src/Dialogs/Label.vala"
			_tmp76_ = _data35_->entry;
#line 116 "../src/Dialogs/Label.vala"
			_tmp77_ = gee_map_entry_get_key (_tmp76_);
#line 116 "../src/Dialogs/Label.vala"
			_tmp78_ = _tmp77_;
#line 116 "../src/Dialogs/Label.vala"
			_tmp79_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp75_, (const gchar*) _tmp78_);
#line 116 "../src/Dialogs/Label.vala"
			_tmp80_ = (GtkRadioButton*) _tmp79_;
#line 116 "../src/Dialogs/Label.vala"
			gtk_container_add ((GtkContainer*) _tmp74_, (GtkWidget*) _tmp80_);
#line 116 "../src/Dialogs/Label.vala"
			_g_object_unref0 (_tmp80_);
#line 118 "../src/Dialogs/Label.vala"
			_tmp81_ = color_radio;
#line 118 "../src/Dialogs/Label.vala"
			g_signal_connect_data ((GtkToggleButton*) _tmp81_, "toggled", (GCallback) __dialogs_label_____lambda221__gtk_toggle_button_toggled, block35_data_ref (_data35_), (GClosureNotify) block35_data_unref, 0);
#line 108 "../src/Dialogs/Label.vala"
			_g_object_unref0 (color_radio);
#line 108 "../src/Dialogs/Label.vala"
			block35_data_unref (_data35_);
#line 108 "../src/Dialogs/Label.vala"
			_data35_ = NULL;
#line 1538 "Label.c"
		}
#line 108 "../src/Dialogs/Label.vala"
		_g_object_unref0 (_entry_it);
#line 1542 "Label.c"
	}
#line 126 "../src/Dialogs/Label.vala"
	_tmp82_ = self->priv->_label;
#line 126 "../src/Dialogs/Label.vala"
	_tmp83_ = objects_label_get_color (_tmp82_);
#line 126 "../src/Dialogs/Label.vala"
	_tmp84_ = _tmp83_;
#line 126 "../src/Dialogs/Label.vala"
	dialogs_label_set_color_selected (self, _tmp84_);
#line 127 "../src/Dialogs/Label.vala"
	_tmp85_ = colors_hashmap;
#line 127 "../src/Dialogs/Label.vala"
	_tmp86_ = self->priv->_color_selected;
#line 127 "../src/Dialogs/Label.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp85_, _tmp86_)) {
#line 1558 "Label.c"
		GeeHashMap* _tmp87_;
		const gchar* _tmp88_;
		gpointer _tmp89_;
		GtkRadioButton* _tmp90_;
#line 128 "../src/Dialogs/Label.vala"
		_tmp87_ = colors_hashmap;
#line 128 "../src/Dialogs/Label.vala"
		_tmp88_ = self->priv->_color_selected;
#line 128 "../src/Dialogs/Label.vala"
		_tmp89_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp87_, _tmp88_);
#line 128 "../src/Dialogs/Label.vala"
		_tmp90_ = (GtkRadioButton*) _tmp89_;
#line 128 "../src/Dialogs/Label.vala"
		gtk_toggle_button_set_active ((GtkToggleButton*) _tmp90_, TRUE);
#line 128 "../src/Dialogs/Label.vala"
		_g_object_unref0 (_tmp90_);
#line 1575 "Label.c"
	}
#line 131 "../src/Dialogs/Label.vala"
	_tmp91_ = (GtkGrid*) gtk_grid_new ();
#line 131 "../src/Dialogs/Label.vala"
	g_object_set ((GtkWidget*) _tmp91_, "margin", 12, NULL);
#line 131 "../src/Dialogs/Label.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp91_, 0);
#line 131 "../src/Dialogs/Label.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp91_, GTK_ALIGN_START);
#line 131 "../src/Dialogs/Label.vala"
	gtk_widget_set_vexpand ((GtkWidget*) _tmp91_, FALSE);
#line 131 "../src/Dialogs/Label.vala"
	g_object_ref_sink (_tmp91_);
#line 131 "../src/Dialogs/Label.vala"
	flowbox_grid = _tmp91_;
#line 137 "../src/Dialogs/Label.vala"
	_tmp92_ = flowbox_grid;
#line 137 "../src/Dialogs/Label.vala"
	_tmp93_ = flowbox;
#line 137 "../src/Dialogs/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp92_, (GtkWidget*) _tmp93_);
#line 139 "../src/Dialogs/Label.vala"
	_tmp94_ = flowbox_grid;
#line 139 "../src/Dialogs/Label.vala"
	_tmp95_ = gtk_widget_get_style_context ((GtkWidget*) _tmp94_);
#line 139 "../src/Dialogs/Label.vala"
	flowbox_grid_context = _tmp95_;
#line 140 "../src/Dialogs/Label.vala"
	_tmp96_ = flowbox_grid_context;
#line 140 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp96_, "picker-content");
#line 144 "../src/Dialogs/Label.vala"
	_tmp98_ = dialogs_label_get_is_creating (self);
#line 144 "../src/Dialogs/Label.vala"
	_tmp99_ = _tmp98_;
#line 144 "../src/Dialogs/Label.vala"
	if (_tmp99_) {
#line 144 "../src/Dialogs/Label.vala"
		_tmp97_ = _ ("Add label");
#line 1615 "Label.c"
	} else {
#line 144 "../src/Dialogs/Label.vala"
		_tmp97_ = _ ("Update label");
#line 1619 "Label.c"
	}
#line 142 "../src/Dialogs/Label.vala"
	_tmp100_ = dialogs_label_get_is_creating (self);
#line 142 "../src/Dialogs/Label.vala"
	_tmp101_ = _tmp100_;
#line 142 "../src/Dialogs/Label.vala"
	_tmp102_ = widgets_loading_button_new (LOADING_BUTTON_TYPE_LABEL, _tmp97_);
#line 142 "../src/Dialogs/Label.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp102_, !_tmp101_);
#line 142 "../src/Dialogs/Label.vala"
	g_object_ref_sink (_tmp102_);
#line 142 "../src/Dialogs/Label.vala"
	_data34_->submit_button = _tmp102_;
#line 147 "../src/Dialogs/Label.vala"
	_tmp103_ = _data34_->submit_button;
#line 147 "../src/Dialogs/Label.vala"
	_tmp104_ = gtk_widget_get_style_context ((GtkWidget*) _tmp103_);
#line 147 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp104_, GTK_STYLE_CLASS_SUGGESTED_ACTION);
#line 148 "../src/Dialogs/Label.vala"
	_tmp105_ = _data34_->submit_button;
#line 148 "../src/Dialogs/Label.vala"
	_tmp106_ = gtk_widget_get_style_context ((GtkWidget*) _tmp105_);
#line 148 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp106_, "border-radius-6");
#line 150 "../src/Dialogs/Label.vala"
	_tmp107_ = (GtkButton*) gtk_button_new_with_label (_ ("Cancel"));
#line 150 "../src/Dialogs/Label.vala"
	g_object_ref_sink (_tmp107_);
#line 150 "../src/Dialogs/Label.vala"
	cancel_button = _tmp107_;
#line 151 "../src/Dialogs/Label.vala"
	_tmp108_ = cancel_button;
#line 151 "../src/Dialogs/Label.vala"
	_tmp109_ = gtk_widget_get_style_context ((GtkWidget*) _tmp108_);
#line 151 "../src/Dialogs/Label.vala"
	gtk_style_context_add_class (_tmp109_, "border-radius-6");
#line 153 "../src/Dialogs/Label.vala"
	_tmp110_ = (GtkGrid*) gtk_grid_new ();
#line 153 "../src/Dialogs/Label.vala"
	gtk_grid_set_column_spacing (_tmp110_, 12);
#line 153 "../src/Dialogs/Label.vala"
	gtk_grid_set_column_homogeneous (_tmp110_, TRUE);
#line 153 "../src/Dialogs/Label.vala"
	g_object_set ((GtkWidget*) _tmp110_, "margin", 12, NULL);
#line 153 "../src/Dialogs/Label.vala"
	gtk_widget_set_vexpand ((GtkWidget*) _tmp110_, TRUE);
#line 153 "../src/Dialogs/Label.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp110_, GTK_ALIGN_END);
#line 153 "../src/Dialogs/Label.vala"
	g_object_ref_sink (_tmp110_);
#line 153 "../src/Dialogs/Label.vala"
	submit_cancel_grid = _tmp110_;
#line 160 "../src/Dialogs/Label.vala"
	_tmp111_ = submit_cancel_grid;
#line 160 "../src/Dialogs/Label.vala"
	_tmp112_ = cancel_button;
#line 160 "../src/Dialogs/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp111_, (GtkWidget*) _tmp112_);
#line 161 "../src/Dialogs/Label.vala"
	_tmp113_ = submit_cancel_grid;
#line 161 "../src/Dialogs/Label.vala"
	_tmp114_ = _data34_->submit_button;
#line 161 "../src/Dialogs/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp113_, (GtkWidget*) _tmp114_);
#line 163 "../src/Dialogs/Label.vala"
	_tmp115_ = (GtkGrid*) gtk_grid_new ();
#line 163 "../src/Dialogs/Label.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp115_, GTK_ORIENTATION_VERTICAL);
#line 163 "../src/Dialogs/Label.vala"
	g_object_ref_sink (_tmp115_);
#line 163 "../src/Dialogs/Label.vala"
	content_grid = _tmp115_;
#line 167 "../src/Dialogs/Label.vala"
	_tmp116_ = content_grid;
#line 167 "../src/Dialogs/Label.vala"
	_tmp117_ = headerbar;
#line 167 "../src/Dialogs/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp116_, (GtkWidget*) _tmp117_);
#line 168 "../src/Dialogs/Label.vala"
	_tmp118_ = content_grid;
#line 168 "../src/Dialogs/Label.vala"
	_tmp119_ = self->priv->widget_color;
#line 168 "../src/Dialogs/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp118_, (GtkWidget*) _tmp119_);
#line 169 "../src/Dialogs/Label.vala"
	_tmp120_ = content_grid;
#line 169 "../src/Dialogs/Label.vala"
	_tmp121_ = _data34_->name_entry;
#line 169 "../src/Dialogs/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp120_, (GtkWidget*) _tmp121_);
#line 170 "../src/Dialogs/Label.vala"
	_tmp122_ = content_grid;
#line 170 "../src/Dialogs/Label.vala"
	_tmp123_ = flowbox_grid;
#line 170 "../src/Dialogs/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp122_, (GtkWidget*) _tmp123_);
#line 171 "../src/Dialogs/Label.vala"
	_tmp124_ = content_grid;
#line 171 "../src/Dialogs/Label.vala"
	_tmp125_ = submit_cancel_grid;
#line 171 "../src/Dialogs/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp124_, (GtkWidget*) _tmp125_);
#line 173 "../src/Dialogs/Label.vala"
	_tmp126_ = content_grid;
#line 173 "../src/Dialogs/Label.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp126_);
#line 175 "../src/Dialogs/Label.vala"
	_tmp127_ = _data34_->name_entry;
#line 175 "../src/Dialogs/Label.vala"
	g_signal_connect_data ((GtkEditable*) _tmp127_, "changed", (GCallback) __dialogs_label___lambda222__gtk_editable_changed, block34_data_ref (_data34_), (GClosureNotify) block34_data_unref, 0);
#line 179 "../src/Dialogs/Label.vala"
	_tmp128_ = _data34_->submit_button;
#line 179 "../src/Dialogs/Label.vala"
	g_signal_connect_data ((GtkButton*) _tmp128_, "clicked", (GCallback) __dialogs_label___lambda223__gtk_button_clicked, block34_data_ref (_data34_), (GClosureNotify) block34_data_unref, 0);
#line 220 "../src/Dialogs/Label.vala"
	_tmp129_ = cancel_button;
#line 220 "../src/Dialogs/Label.vala"
	g_signal_connect_object (_tmp129_, "clicked", (GCallback) __dialogs_label___lambda226__gtk_button_clicked, self, 0);
#line 59 "../src/Dialogs/Label.vala"
	_g_object_unref0 (content_grid);
#line 59 "../src/Dialogs/Label.vala"
	_g_object_unref0 (submit_cancel_grid);
#line 59 "../src/Dialogs/Label.vala"
	_g_object_unref0 (cancel_button);
#line 59 "../src/Dialogs/Label.vala"
	_g_object_unref0 (flowbox_grid);
#line 59 "../src/Dialogs/Label.vala"
	_g_object_unref0 (flowbox);
#line 59 "../src/Dialogs/Label.vala"
	_g_object_unref0 (colors_hashmap);
#line 59 "../src/Dialogs/Label.vala"
	_g_object_unref0 (radio);
#line 59 "../src/Dialogs/Label.vala"
	_g_object_unref0 (headerbar);
#line 59 "../src/Dialogs/Label.vala"
	block34_data_unref (_data34_);
#line 59 "../src/Dialogs/Label.vala"
	_data34_ = NULL;
#line 59 "../src/Dialogs/Label.vala"
	return obj;
#line 1761 "Label.c"
}

static void
dialogs_label_class_init (DialogsLabelClass * klass,
                          gpointer klass_data)
{
#line 22 "../src/Dialogs/Label.vala"
	dialogs_label_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Dialogs/Label.vala"
	g_type_class_adjust_private_offset (klass, &DialogsLabel_private_offset);
#line 22 "../src/Dialogs/Label.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_dialogs_label_get_property;
#line 22 "../src/Dialogs/Label.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_dialogs_label_set_property;
#line 22 "../src/Dialogs/Label.vala"
	G_OBJECT_CLASS (klass)->constructor = dialogs_label_constructor;
#line 22 "../src/Dialogs/Label.vala"
	G_OBJECT_CLASS (klass)->finalize = dialogs_label_finalize;
#line 22 "../src/Dialogs/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_LABEL_LABEL_PROPERTY, dialogs_label_properties[DIALOGS_LABEL_LABEL_PROPERTY] = g_param_spec_object ("label", "label", "label", OBJECTS_TYPE_LABEL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "../src/Dialogs/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_LABEL_IS_CREATING_PROPERTY, dialogs_label_properties[DIALOGS_LABEL_IS_CREATING_PROPERTY] = g_param_spec_boolean ("is-creating", "is-creating", "is-creating", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "../src/Dialogs/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_LABEL_COLOR_SELECTED_PROPERTY, dialogs_label_properties[DIALOGS_LABEL_COLOR_SELECTED_PROPERTY] = g_param_spec_string ("color-selected", "color-selected", "color-selected", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1786 "Label.c"
}

static void
dialogs_label_instance_init (DialogsLabel * self,
                             gpointer klass)
{
#line 22 "../src/Dialogs/Label.vala"
	self->priv = dialogs_label_get_instance_private (self);
#line 1795 "Label.c"
}

static void
dialogs_label_finalize (GObject * obj)
{
	DialogsLabel * self;
#line 22 "../src/Dialogs/Label.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_TYPE_LABEL, DialogsLabel);
#line 23 "../src/Dialogs/Label.vala"
	_g_object_unref0 (self->priv->_label);
#line 25 "../src/Dialogs/Label.vala"
	_g_object_unref0 (self->priv->widget_color);
#line 33 "../src/Dialogs/Label.vala"
	_g_free0 (self->priv->_color_selected);
#line 22 "../src/Dialogs/Label.vala"
	G_OBJECT_CLASS (dialogs_label_parent_class)->finalize (obj);
#line 1812 "Label.c"
}

static GType
dialogs_label_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (DialogsLabelClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) dialogs_label_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (DialogsLabel), 0, (GInstanceInitFunc) dialogs_label_instance_init, NULL };
	GType dialogs_label_type_id;
	dialogs_label_type_id = g_type_register_static (hdy_window_get_type (), "DialogsLabel", &g_define_type_info, 0);
	DialogsLabel_private_offset = g_type_add_instance_private (dialogs_label_type_id, sizeof (DialogsLabelPrivate));
	return dialogs_label_type_id;
}

GType
dialogs_label_get_type (void)
{
	static volatile gsize dialogs_label_type_id__volatile = 0;
	if (g_once_init_enter (&dialogs_label_type_id__volatile)) {
		GType dialogs_label_type_id;
		dialogs_label_type_id = dialogs_label_get_type_once ();
		g_once_init_leave (&dialogs_label_type_id__volatile, dialogs_label_type_id);
	}
	return dialogs_label_type_id__volatile;
}

static void
_vala_dialogs_label_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec)
{
	DialogsLabel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_TYPE_LABEL, DialogsLabel);
#line 22 "../src/Dialogs/Label.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/Label.vala"
		case DIALOGS_LABEL_LABEL_PROPERTY:
#line 22 "../src/Dialogs/Label.vala"
		g_value_set_object (value, dialogs_label_get_label (self));
#line 22 "../src/Dialogs/Label.vala"
		break;
#line 22 "../src/Dialogs/Label.vala"
		case DIALOGS_LABEL_IS_CREATING_PROPERTY:
#line 22 "../src/Dialogs/Label.vala"
		g_value_set_boolean (value, dialogs_label_get_is_creating (self));
#line 22 "../src/Dialogs/Label.vala"
		break;
#line 22 "../src/Dialogs/Label.vala"
		case DIALOGS_LABEL_COLOR_SELECTED_PROPERTY:
#line 22 "../src/Dialogs/Label.vala"
		g_value_set_string (value, dialogs_label_get_color_selected (self));
#line 22 "../src/Dialogs/Label.vala"
		break;
#line 1865 "Label.c"
		default:
#line 22 "../src/Dialogs/Label.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/Label.vala"
		break;
#line 1871 "Label.c"
	}
}

static void
_vala_dialogs_label_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec)
{
	DialogsLabel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_TYPE_LABEL, DialogsLabel);
#line 22 "../src/Dialogs/Label.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/Label.vala"
		case DIALOGS_LABEL_LABEL_PROPERTY:
#line 22 "../src/Dialogs/Label.vala"
		dialogs_label_set_label (self, g_value_get_object (value));
#line 22 "../src/Dialogs/Label.vala"
		break;
#line 22 "../src/Dialogs/Label.vala"
		case DIALOGS_LABEL_COLOR_SELECTED_PROPERTY:
#line 22 "../src/Dialogs/Label.vala"
		dialogs_label_set_color_selected (self, g_value_get_string (value));
#line 22 "../src/Dialogs/Label.vala"
		break;
#line 1897 "Label.c"
		default:
#line 22 "../src/Dialogs/Label.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/Label.vala"
		break;
#line 1903 "Label.c"
	}
}

