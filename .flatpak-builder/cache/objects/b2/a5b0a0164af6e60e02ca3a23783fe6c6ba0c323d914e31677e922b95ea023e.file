/* PinButton.c generated by valac 0.50.10, the Vala compiler
 * generated from PinButton.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#define WIDGETS_TYPE_PIN_BUTTON (widgets_pin_button_get_type ())
#define WIDGETS_PIN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_PIN_BUTTON, WidgetsPinButton))
#define WIDGETS_PIN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_PIN_BUTTON, WidgetsPinButtonClass))
#define WIDGETS_IS_PIN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_PIN_BUTTON))
#define WIDGETS_IS_PIN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_PIN_BUTTON))
#define WIDGETS_PIN_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_PIN_BUTTON, WidgetsPinButtonClass))

typedef struct _WidgetsPinButton WidgetsPinButton;
typedef struct _WidgetsPinButtonClass WidgetsPinButtonClass;
typedef struct _WidgetsPinButtonPrivate WidgetsPinButtonPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;
enum  {
	WIDGETS_PIN_BUTTON_0_PROPERTY,
	WIDGETS_PIN_BUTTON_ITEM_PROPERTY,
	WIDGETS_PIN_BUTTON_NUM_PROPERTIES
};
static GParamSpec* widgets_pin_button_properties[WIDGETS_PIN_BUTTON_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
enum  {
	WIDGETS_PIN_BUTTON_CHANGED_SIGNAL,
	WIDGETS_PIN_BUTTON_NUM_SIGNALS
};
static guint widgets_pin_button_signals[WIDGETS_PIN_BUTTON_NUM_SIGNALS] = {0};

struct _WidgetsPinButton {
	GtkButton parent_instance;
	WidgetsPinButtonPrivate * priv;
};

struct _WidgetsPinButtonClass {
	GtkButtonClass parent_class;
};

struct _WidgetsPinButtonPrivate {
	ObjectsItem* _item;
	WidgetsDynamicIcon* pinned_image;
};

static gint WidgetsPinButton_private_offset;
static gpointer widgets_pin_button_parent_class = NULL;

GType widgets_pin_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsPinButton, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
WidgetsPinButton* widgets_pin_button_new (ObjectsItem* item);
WidgetsPinButton* widgets_pin_button_construct (GType object_type,
                                                ObjectsItem* item);
void widgets_pin_button_update_request (WidgetsPinButton* self);
void widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                            const gchar* icon_name);
ObjectsItem* widgets_pin_button_get_item (WidgetsPinButton* self);
const gchar* objects_item_get_pinned_icon (ObjectsItem* self);
static void widgets_pin_button_set_item (WidgetsPinButton* self,
                                  ObjectsItem* value);
static GObject * widgets_pin_button_constructor (GType type,
                                          guint n_construct_properties,
                                          GObjectConstructParam * construct_properties);
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
static void _widgets_pin_button___lambda112_ (WidgetsPinButton* self);
static void __widgets_pin_button___lambda112__gtk_button_clicked (GtkButton* _sender,
                                                           gpointer self);
static void widgets_pin_button_finalize (GObject * obj);
static GType widgets_pin_button_get_type_once (void);
static void _vala_widgets_pin_button_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec);
static void _vala_widgets_pin_button_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);

static inline gpointer
widgets_pin_button_get_instance_private (WidgetsPinButton* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsPinButton_private_offset);
}

WidgetsPinButton*
widgets_pin_button_construct (GType object_type,
                              ObjectsItem* item)
{
	WidgetsPinButton * self = NULL;
#line 7 "../src/Widgets/PinButton.vala"
	g_return_val_if_fail (item != NULL, NULL);
#line 8 "../src/Widgets/PinButton.vala"
	self = (WidgetsPinButton*) g_object_new (object_type, "item", item, "can-focus", FALSE, "valign", GTK_ALIGN_CENTER, "halign", GTK_ALIGN_CENTER, NULL);
#line 7 "../src/Widgets/PinButton.vala"
	return self;
#line 137 "PinButton.c"
}

WidgetsPinButton*
widgets_pin_button_new (ObjectsItem* item)
{
#line 7 "../src/Widgets/PinButton.vala"
	return widgets_pin_button_construct (WIDGETS_TYPE_PIN_BUTTON, item);
#line 145 "PinButton.c"
}

void
widgets_pin_button_update_request (WidgetsPinButton* self)
{
	WidgetsDynamicIcon* _tmp0_;
	ObjectsItem* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 37 "../src/Widgets/PinButton.vala"
	g_return_if_fail (self != NULL);
#line 38 "../src/Widgets/PinButton.vala"
	_tmp0_ = self->priv->pinned_image;
#line 38 "../src/Widgets/PinButton.vala"
	_tmp1_ = self->priv->_item;
#line 38 "../src/Widgets/PinButton.vala"
	_tmp2_ = objects_item_get_pinned_icon (_tmp1_);
#line 38 "../src/Widgets/PinButton.vala"
	_tmp3_ = _tmp2_;
#line 38 "../src/Widgets/PinButton.vala"
	widgets_dynamic_icon_update_icon_name (_tmp0_, _tmp3_);
#line 167 "PinButton.c"
}

ObjectsItem*
widgets_pin_button_get_item (WidgetsPinButton* self)
{
	ObjectsItem* result;
	ObjectsItem* _tmp0_;
#line 2 "../src/Widgets/PinButton.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Widgets/PinButton.vala"
	_tmp0_ = self->priv->_item;
#line 2 "../src/Widgets/PinButton.vala"
	result = _tmp0_;
#line 2 "../src/Widgets/PinButton.vala"
	return result;
#line 183 "PinButton.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 2 "../src/Widgets/PinButton.vala"
	return self ? g_object_ref (self) : NULL;
#line 191 "PinButton.c"
}

static void
widgets_pin_button_set_item (WidgetsPinButton* self,
                             ObjectsItem* value)
{
	ObjectsItem* old_value;
#line 2 "../src/Widgets/PinButton.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Widgets/PinButton.vala"
	old_value = widgets_pin_button_get_item (self);
#line 2 "../src/Widgets/PinButton.vala"
	if (old_value != value) {
#line 205 "PinButton.c"
		ObjectsItem* _tmp0_;
#line 2 "../src/Widgets/PinButton.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 2 "../src/Widgets/PinButton.vala"
		_g_object_unref0 (self->priv->_item);
#line 2 "../src/Widgets/PinButton.vala"
		self->priv->_item = _tmp0_;
#line 2 "../src/Widgets/PinButton.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_pin_button_properties[WIDGETS_PIN_BUTTON_ITEM_PROPERTY]);
#line 215 "PinButton.c"
	}
}

static void
_widgets_pin_button___lambda112_ (WidgetsPinButton* self)
{
#line 33 "../src/Widgets/PinButton.vala"
	g_signal_emit (self, widgets_pin_button_signals[WIDGETS_PIN_BUTTON_CHANGED_SIGNAL], 0);
#line 224 "PinButton.c"
}

static void
__widgets_pin_button___lambda112__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self)
{
#line 32 "../src/Widgets/PinButton.vala"
	_widgets_pin_button___lambda112_ ((WidgetsPinButton*) self);
#line 233 "PinButton.c"
}

static GObject *
widgets_pin_button_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsPinButton * self;
	GtkStyleContext* _tmp0_;
	WidgetsDynamicIcon* _tmp1_;
	WidgetsDynamicIcon* _tmp2_;
	GtkGrid* projectbutton_grid = NULL;
	GtkGrid* _tmp3_ = NULL;
	GtkGrid* _tmp4_;
	WidgetsDynamicIcon* _tmp5_;
	GtkGrid* _tmp6_;
#line 16 "../src/Widgets/PinButton.vala"
	parent_class = G_OBJECT_CLASS (widgets_pin_button_parent_class);
#line 16 "../src/Widgets/PinButton.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 16 "../src/Widgets/PinButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_PIN_BUTTON, WidgetsPinButton);
#line 17 "../src/Widgets/PinButton.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 17 "../src/Widgets/PinButton.vala"
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_FLAT);
#line 19 "../src/Widgets/PinButton.vala"
	_tmp1_ = widgets_dynamic_icon_new ();
#line 19 "../src/Widgets/PinButton.vala"
	g_object_ref_sink (_tmp1_);
#line 19 "../src/Widgets/PinButton.vala"
	_g_object_unref0 (self->priv->pinned_image);
#line 19 "../src/Widgets/PinButton.vala"
	self->priv->pinned_image = _tmp1_;
#line 20 "../src/Widgets/PinButton.vala"
	_tmp2_ = self->priv->pinned_image;
#line 20 "../src/Widgets/PinButton.vala"
	widgets_dynamic_icon_set_size (_tmp2_, 19);
#line 22 "../src/Widgets/PinButton.vala"
	_tmp3_ = (GtkGrid*) gtk_grid_new ();
#line 22 "../src/Widgets/PinButton.vala"
	gtk_grid_set_column_spacing (_tmp3_, 6);
#line 22 "../src/Widgets/PinButton.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp3_, GTK_ALIGN_CENTER);
#line 22 "../src/Widgets/PinButton.vala"
	g_object_ref_sink (_tmp3_);
#line 22 "../src/Widgets/PinButton.vala"
	projectbutton_grid = _tmp3_;
#line 26 "../src/Widgets/PinButton.vala"
	_tmp4_ = projectbutton_grid;
#line 26 "../src/Widgets/PinButton.vala"
	_tmp5_ = self->priv->pinned_image;
#line 26 "../src/Widgets/PinButton.vala"
	gtk_container_add ((GtkContainer*) _tmp4_, (GtkWidget*) _tmp5_);
#line 28 "../src/Widgets/PinButton.vala"
	_tmp6_ = projectbutton_grid;
#line 28 "../src/Widgets/PinButton.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp6_);
#line 30 "../src/Widgets/PinButton.vala"
	widgets_pin_button_update_request (self);
#line 32 "../src/Widgets/PinButton.vala"
	g_signal_connect_object ((GtkButton*) self, "clicked", (GCallback) __widgets_pin_button___lambda112__gtk_button_clicked, self, 0);
#line 16 "../src/Widgets/PinButton.vala"
	_g_object_unref0 (projectbutton_grid);
#line 16 "../src/Widgets/PinButton.vala"
	return obj;
#line 302 "PinButton.c"
}

static void
widgets_pin_button_class_init (WidgetsPinButtonClass * klass,
                               gpointer klass_data)
{
#line 1 "../src/Widgets/PinButton.vala"
	widgets_pin_button_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Widgets/PinButton.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsPinButton_private_offset);
#line 1 "../src/Widgets/PinButton.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_pin_button_get_property;
#line 1 "../src/Widgets/PinButton.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_pin_button_set_property;
#line 1 "../src/Widgets/PinButton.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_pin_button_constructor;
#line 1 "../src/Widgets/PinButton.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_pin_button_finalize;
#line 1 "../src/Widgets/PinButton.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_PIN_BUTTON_ITEM_PROPERTY, widgets_pin_button_properties[WIDGETS_PIN_BUTTON_ITEM_PROPERTY] = g_param_spec_object ("item", "item", "item", OBJECTS_TYPE_ITEM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Widgets/PinButton.vala"
	widgets_pin_button_signals[WIDGETS_PIN_BUTTON_CHANGED_SIGNAL] = g_signal_new ("changed", WIDGETS_TYPE_PIN_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 325 "PinButton.c"
}

static void
widgets_pin_button_instance_init (WidgetsPinButton * self,
                                  gpointer klass)
{
#line 1 "../src/Widgets/PinButton.vala"
	self->priv = widgets_pin_button_get_instance_private (self);
#line 334 "PinButton.c"
}

static void
widgets_pin_button_finalize (GObject * obj)
{
	WidgetsPinButton * self;
#line 1 "../src/Widgets/PinButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_PIN_BUTTON, WidgetsPinButton);
#line 2 "../src/Widgets/PinButton.vala"
	_g_object_unref0 (self->priv->_item);
#line 3 "../src/Widgets/PinButton.vala"
	_g_object_unref0 (self->priv->pinned_image);
#line 1 "../src/Widgets/PinButton.vala"
	G_OBJECT_CLASS (widgets_pin_button_parent_class)->finalize (obj);
#line 349 "PinButton.c"
}

static GType
widgets_pin_button_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsPinButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_pin_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsPinButton), 0, (GInstanceInitFunc) widgets_pin_button_instance_init, NULL };
	GType widgets_pin_button_type_id;
	widgets_pin_button_type_id = g_type_register_static (gtk_button_get_type (), "WidgetsPinButton", &g_define_type_info, 0);
	WidgetsPinButton_private_offset = g_type_add_instance_private (widgets_pin_button_type_id, sizeof (WidgetsPinButtonPrivate));
	return widgets_pin_button_type_id;
}

GType
widgets_pin_button_get_type (void)
{
	static volatile gsize widgets_pin_button_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_pin_button_type_id__volatile)) {
		GType widgets_pin_button_type_id;
		widgets_pin_button_type_id = widgets_pin_button_get_type_once ();
		g_once_init_leave (&widgets_pin_button_type_id__volatile, widgets_pin_button_type_id);
	}
	return widgets_pin_button_type_id__volatile;
}

static void
_vala_widgets_pin_button_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec)
{
	WidgetsPinButton * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_PIN_BUTTON, WidgetsPinButton);
#line 1 "../src/Widgets/PinButton.vala"
	switch (property_id) {
#line 1 "../src/Widgets/PinButton.vala"
		case WIDGETS_PIN_BUTTON_ITEM_PROPERTY:
#line 1 "../src/Widgets/PinButton.vala"
		g_value_set_object (value, widgets_pin_button_get_item (self));
#line 1 "../src/Widgets/PinButton.vala"
		break;
#line 390 "PinButton.c"
		default:
#line 1 "../src/Widgets/PinButton.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/PinButton.vala"
		break;
#line 396 "PinButton.c"
	}
}

static void
_vala_widgets_pin_button_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	WidgetsPinButton * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_PIN_BUTTON, WidgetsPinButton);
#line 1 "../src/Widgets/PinButton.vala"
	switch (property_id) {
#line 1 "../src/Widgets/PinButton.vala"
		case WIDGETS_PIN_BUTTON_ITEM_PROPERTY:
#line 1 "../src/Widgets/PinButton.vala"
		widgets_pin_button_set_item (self, g_value_get_object (value));
#line 1 "../src/Widgets/PinButton.vala"
		break;
#line 416 "PinButton.c"
		default:
#line 1 "../src/Widgets/PinButton.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/PinButton.vala"
		break;
#line 422 "PinButton.c"
	}
}

