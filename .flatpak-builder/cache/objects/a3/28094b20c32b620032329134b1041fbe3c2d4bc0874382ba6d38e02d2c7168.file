/* DynamicIcon.c generated by valac 0.50.10, the Vala compiler
 * generated from DynamicIcon.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gio/gio.h>

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;
typedef struct _WidgetsDynamicIconPrivate WidgetsDynamicIconPrivate;
enum  {
	WIDGETS_DYNAMIC_ICON_0_PROPERTY,
	WIDGETS_DYNAMIC_ICON_ICON_NAME_PROPERTY,
	WIDGETS_DYNAMIC_ICON_SIZE_PROPERTY,
	WIDGETS_DYNAMIC_ICON_NUM_PROPERTIES
};
static GParamSpec* widgets_dynamic_icon_properties[WIDGETS_DYNAMIC_ICON_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;

struct _WidgetsDynamicIcon {
	GtkEventBox parent_instance;
	WidgetsDynamicIconPrivate * priv;
};

struct _WidgetsDynamicIconClass {
	GtkEventBoxClass parent_class;
};

struct _WidgetsDynamicIconPrivate {
	gchar* _icon_name;
	gint _size;
	GtkImage* icon;
};

static gint WidgetsDynamicIcon_private_offset;
static gpointer widgets_dynamic_icon_parent_class = NULL;
extern GSettings* planner_settings;
extern ServicesEventBus* planner_event_bus;

GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
void widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                            const gchar* icon_name);
void widgets_dynamic_icon_set_icon_name (WidgetsDynamicIcon* self,
                                         const gchar* value);
static void widgets_dynamic_icon_generate_icon (WidgetsDynamicIcon* self);
const gchar* widgets_dynamic_icon_get_icon_name (WidgetsDynamicIcon* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gboolean util_is_dynamic_icon (Util* self,
                               const gchar* icon_name);
gint widgets_dynamic_icon_get_size (WidgetsDynamicIcon* self);
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
static GObject * widgets_dynamic_icon_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
static void _widgets_dynamic_icon___lambda4_ (WidgetsDynamicIcon* self);
static void __widgets_dynamic_icon___lambda4__g_object_notify (GObject* _sender,
                                                        GParamSpec* pspec,
                                                        gpointer self);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
static void _widgets_dynamic_icon___lambda168_ (WidgetsDynamicIcon* self);
static void __widgets_dynamic_icon___lambda168__services_event_bus_theme_changed (ServicesEventBus* _sender,
                                                                           gpointer self);
static void widgets_dynamic_icon_finalize (GObject * obj);
static GType widgets_dynamic_icon_get_type_once (void);
static void _vala_widgets_dynamic_icon_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_widgets_dynamic_icon_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);

static inline gpointer
widgets_dynamic_icon_get_instance_private (WidgetsDynamicIcon* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsDynamicIcon_private_offset);
}

void
widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                       const gchar* icon_name)
{
#line 30 "../src/Widgets/DynamicIcon.vala"
	g_return_if_fail (self != NULL);
#line 30 "../src/Widgets/DynamicIcon.vala"
	g_return_if_fail (icon_name != NULL);
#line 31 "../src/Widgets/DynamicIcon.vala"
	widgets_dynamic_icon_set_icon_name (self, icon_name);
#line 32 "../src/Widgets/DynamicIcon.vala"
	widgets_dynamic_icon_generate_icon (self);
#line 131 "DynamicIcon.c"
}

static void
widgets_dynamic_icon_generate_icon (WidgetsDynamicIcon* self)
{
	const gchar* _tmp0_;
	Util* _tmp1_;
	Util* _tmp2_;
	const gchar* _tmp3_;
	gboolean _tmp4_;
#line 35 "../src/Widgets/DynamicIcon.vala"
	g_return_if_fail (self != NULL);
#line 36 "../src/Widgets/DynamicIcon.vala"
	_tmp0_ = self->priv->_icon_name;
#line 36 "../src/Widgets/DynamicIcon.vala"
	if (_tmp0_ == NULL) {
#line 37 "../src/Widgets/DynamicIcon.vala"
		return;
#line 150 "DynamicIcon.c"
	}
#line 40 "../src/Widgets/DynamicIcon.vala"
	_tmp1_ = util_get_default ();
#line 40 "../src/Widgets/DynamicIcon.vala"
	_tmp2_ = _tmp1_;
#line 40 "../src/Widgets/DynamicIcon.vala"
	_tmp3_ = self->priv->_icon_name;
#line 40 "../src/Widgets/DynamicIcon.vala"
	_tmp4_ = util_is_dynamic_icon (_tmp2_, _tmp3_);
#line 40 "../src/Widgets/DynamicIcon.vala"
	_g_object_unref0 (_tmp2_);
#line 40 "../src/Widgets/DynamicIcon.vala"
	if (_tmp4_) {
#line 164 "DynamicIcon.c"
		const gchar* _tmp5_ = NULL;
		GSettings* _tmp6_;
		GtkImage* _tmp7_;
		const gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		GThemedIcon* _tmp11_;
		GThemedIcon* _tmp12_;
		GtkImage* _tmp13_;
		gint _tmp14_;
#line 42 "../src/Widgets/DynamicIcon.vala"
		_tmp6_ = planner_settings;
#line 42 "../src/Widgets/DynamicIcon.vala"
		if (g_settings_get_enum (_tmp6_, "appearance") != 0) {
#line 42 "../src/Widgets/DynamicIcon.vala"
			_tmp5_ = "dark";
#line 181 "DynamicIcon.c"
		} else {
#line 42 "../src/Widgets/DynamicIcon.vala"
			_tmp5_ = "light";
#line 185 "DynamicIcon.c"
		}
#line 41 "../src/Widgets/DynamicIcon.vala"
		_tmp7_ = self->priv->icon;
#line 41 "../src/Widgets/DynamicIcon.vala"
		_tmp8_ = self->priv->_icon_name;
#line 41 "../src/Widgets/DynamicIcon.vala"
		_tmp9_ = g_strdup_printf ("%s-%s", _tmp8_, _tmp5_);
#line 41 "../src/Widgets/DynamicIcon.vala"
		_tmp10_ = _tmp9_;
#line 41 "../src/Widgets/DynamicIcon.vala"
		_tmp11_ = (GThemedIcon*) g_themed_icon_new (_tmp10_);
#line 41 "../src/Widgets/DynamicIcon.vala"
		_tmp12_ = _tmp11_;
#line 41 "../src/Widgets/DynamicIcon.vala"
		g_object_set (_tmp7_, "gicon", (GIcon*) _tmp12_, NULL);
#line 41 "../src/Widgets/DynamicIcon.vala"
		_g_object_unref0 (_tmp12_);
#line 41 "../src/Widgets/DynamicIcon.vala"
		_g_free0 (_tmp10_);
#line 44 "../src/Widgets/DynamicIcon.vala"
		_tmp13_ = self->priv->icon;
#line 44 "../src/Widgets/DynamicIcon.vala"
		_tmp14_ = self->priv->_size;
#line 44 "../src/Widgets/DynamicIcon.vala"
		gtk_image_set_pixel_size (_tmp13_, _tmp14_);
#line 211 "DynamicIcon.c"
	} else {
		GtkImage* _tmp15_;
		const gchar* _tmp16_;
		GThemedIcon* _tmp17_;
		GThemedIcon* _tmp18_;
		GtkImage* _tmp19_;
		gint _tmp20_;
#line 46 "../src/Widgets/DynamicIcon.vala"
		_tmp15_ = self->priv->icon;
#line 46 "../src/Widgets/DynamicIcon.vala"
		_tmp16_ = self->priv->_icon_name;
#line 46 "../src/Widgets/DynamicIcon.vala"
		_tmp17_ = (GThemedIcon*) g_themed_icon_new (_tmp16_);
#line 46 "../src/Widgets/DynamicIcon.vala"
		_tmp18_ = _tmp17_;
#line 46 "../src/Widgets/DynamicIcon.vala"
		g_object_set (_tmp15_, "gicon", (GIcon*) _tmp18_, NULL);
#line 46 "../src/Widgets/DynamicIcon.vala"
		_g_object_unref0 (_tmp18_);
#line 47 "../src/Widgets/DynamicIcon.vala"
		_tmp19_ = self->priv->icon;
#line 47 "../src/Widgets/DynamicIcon.vala"
		_tmp20_ = self->priv->_size;
#line 47 "../src/Widgets/DynamicIcon.vala"
		gtk_image_set_pixel_size (_tmp19_, _tmp20_);
#line 237 "DynamicIcon.c"
	}
}

WidgetsDynamicIcon*
widgets_dynamic_icon_construct (GType object_type)
{
	WidgetsDynamicIcon * self = NULL;
#line 1 "../src/Widgets/DynamicIcon.vala"
	self = (WidgetsDynamicIcon*) g_object_new (object_type, NULL);
#line 1 "../src/Widgets/DynamicIcon.vala"
	return self;
#line 249 "DynamicIcon.c"
}

WidgetsDynamicIcon*
widgets_dynamic_icon_new (void)
{
#line 1 "../src/Widgets/DynamicIcon.vala"
	return widgets_dynamic_icon_construct (WIDGETS_TYPE_DYNAMIC_ICON);
#line 257 "DynamicIcon.c"
}

const gchar*
widgets_dynamic_icon_get_icon_name (WidgetsDynamicIcon* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 2 "../src/Widgets/DynamicIcon.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Widgets/DynamicIcon.vala"
	_tmp0_ = self->priv->_icon_name;
#line 2 "../src/Widgets/DynamicIcon.vala"
	result = _tmp0_;
#line 2 "../src/Widgets/DynamicIcon.vala"
	return result;
#line 273 "DynamicIcon.c"
}

void
widgets_dynamic_icon_set_icon_name (WidgetsDynamicIcon* self,
                                    const gchar* value)
{
	gchar* old_value;
#line 2 "../src/Widgets/DynamicIcon.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Widgets/DynamicIcon.vala"
	old_value = widgets_dynamic_icon_get_icon_name (self);
#line 2 "../src/Widgets/DynamicIcon.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 287 "DynamicIcon.c"
		gchar* _tmp0_;
#line 2 "../src/Widgets/DynamicIcon.vala"
		_tmp0_ = g_strdup (value);
#line 2 "../src/Widgets/DynamicIcon.vala"
		_g_free0 (self->priv->_icon_name);
#line 2 "../src/Widgets/DynamicIcon.vala"
		self->priv->_icon_name = _tmp0_;
#line 2 "../src/Widgets/DynamicIcon.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_dynamic_icon_properties[WIDGETS_DYNAMIC_ICON_ICON_NAME_PROPERTY]);
#line 297 "DynamicIcon.c"
	}
}

gint
widgets_dynamic_icon_get_size (WidgetsDynamicIcon* self)
{
	gint result;
#line 3 "../src/Widgets/DynamicIcon.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 3 "../src/Widgets/DynamicIcon.vala"
	result = self->priv->_size;
#line 3 "../src/Widgets/DynamicIcon.vala"
	return result;
#line 311 "DynamicIcon.c"
}

void
widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                               gint value)
{
	gint old_value;
#line 3 "../src/Widgets/DynamicIcon.vala"
	g_return_if_fail (self != NULL);
#line 3 "../src/Widgets/DynamicIcon.vala"
	old_value = widgets_dynamic_icon_get_size (self);
#line 3 "../src/Widgets/DynamicIcon.vala"
	if (old_value != value) {
#line 3 "../src/Widgets/DynamicIcon.vala"
		self->priv->_size = value;
#line 3 "../src/Widgets/DynamicIcon.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_dynamic_icon_properties[WIDGETS_DYNAMIC_ICON_SIZE_PROPERTY]);
#line 329 "DynamicIcon.c"
	}
}

static void
_widgets_dynamic_icon___lambda4_ (WidgetsDynamicIcon* self)
{
#line 16 "../src/Widgets/DynamicIcon.vala"
	widgets_dynamic_icon_generate_icon (self);
#line 338 "DynamicIcon.c"
}

static void
__widgets_dynamic_icon___lambda4__g_object_notify (GObject* _sender,
                                                   GParamSpec* pspec,
                                                   gpointer self)
{
#line 15 "../src/Widgets/DynamicIcon.vala"
	_widgets_dynamic_icon___lambda4_ ((WidgetsDynamicIcon*) self);
#line 348 "DynamicIcon.c"
}

static void
_widgets_dynamic_icon___lambda168_ (WidgetsDynamicIcon* self)
{
#line 26 "../src/Widgets/DynamicIcon.vala"
	widgets_dynamic_icon_generate_icon (self);
#line 356 "DynamicIcon.c"
}

static void
__widgets_dynamic_icon___lambda168__services_event_bus_theme_changed (ServicesEventBus* _sender,
                                                                      gpointer self)
{
#line 25 "../src/Widgets/DynamicIcon.vala"
	_widgets_dynamic_icon___lambda168_ ((WidgetsDynamicIcon*) self);
#line 365 "DynamicIcon.c"
}

static GObject *
widgets_dynamic_icon_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsDynamicIcon * self;
	GtkImage* _tmp0_ = NULL;
	GtkImage* _tmp1_;
	ServicesEventBus* _tmp2_;
#line 7 "../src/Widgets/DynamicIcon.vala"
	parent_class = G_OBJECT_CLASS (widgets_dynamic_icon_parent_class);
#line 7 "../src/Widgets/DynamicIcon.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 7 "../src/Widgets/DynamicIcon.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon);
#line 8 "../src/Widgets/DynamicIcon.vala"
	_tmp0_ = (GtkImage*) gtk_image_new ();
#line 8 "../src/Widgets/DynamicIcon.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp0_, GTK_ALIGN_CENTER);
#line 8 "../src/Widgets/DynamicIcon.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp0_, GTK_ALIGN_CENTER);
#line 8 "../src/Widgets/DynamicIcon.vala"
	g_object_ref_sink (_tmp0_);
#line 8 "../src/Widgets/DynamicIcon.vala"
	_g_object_unref0 (self->priv->icon);
#line 8 "../src/Widgets/DynamicIcon.vala"
	self->priv->icon = _tmp0_;
#line 13 "../src/Widgets/DynamicIcon.vala"
	_tmp1_ = self->priv->icon;
#line 13 "../src/Widgets/DynamicIcon.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp1_);
#line 15 "../src/Widgets/DynamicIcon.vala"
	g_signal_connect_object ((GObject*) self, "notify::size", (GCallback) __widgets_dynamic_icon___lambda4__g_object_notify, self, 0);
#line 25 "../src/Widgets/DynamicIcon.vala"
	_tmp2_ = planner_event_bus;
#line 25 "../src/Widgets/DynamicIcon.vala"
	g_signal_connect_object (_tmp2_, "theme-changed", (GCallback) __widgets_dynamic_icon___lambda168__services_event_bus_theme_changed, self, 0);
#line 7 "../src/Widgets/DynamicIcon.vala"
	return obj;
#line 409 "DynamicIcon.c"
}

static void
widgets_dynamic_icon_class_init (WidgetsDynamicIconClass * klass,
                                 gpointer klass_data)
{
#line 1 "../src/Widgets/DynamicIcon.vala"
	widgets_dynamic_icon_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Widgets/DynamicIcon.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsDynamicIcon_private_offset);
#line 1 "../src/Widgets/DynamicIcon.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_dynamic_icon_get_property;
#line 1 "../src/Widgets/DynamicIcon.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_dynamic_icon_set_property;
#line 1 "../src/Widgets/DynamicIcon.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_dynamic_icon_constructor;
#line 1 "../src/Widgets/DynamicIcon.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_dynamic_icon_finalize;
#line 1 "../src/Widgets/DynamicIcon.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_DYNAMIC_ICON_ICON_NAME_PROPERTY, widgets_dynamic_icon_properties[WIDGETS_DYNAMIC_ICON_ICON_NAME_PROPERTY] = g_param_spec_string ("icon-name", "icon-name", "icon-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1 "../src/Widgets/DynamicIcon.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_DYNAMIC_ICON_SIZE_PROPERTY, widgets_dynamic_icon_properties[WIDGETS_DYNAMIC_ICON_SIZE_PROPERTY] = g_param_spec_int ("size", "size", "size", G_MININT, G_MAXINT, 16, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 432 "DynamicIcon.c"
}

static void
widgets_dynamic_icon_instance_init (WidgetsDynamicIcon * self,
                                    gpointer klass)
{
#line 1 "../src/Widgets/DynamicIcon.vala"
	self->priv = widgets_dynamic_icon_get_instance_private (self);
#line 2 "../src/Widgets/DynamicIcon.vala"
	self->priv->_icon_name = NULL;
#line 3 "../src/Widgets/DynamicIcon.vala"
	self->priv->_size = 16;
#line 445 "DynamicIcon.c"
}

static void
widgets_dynamic_icon_finalize (GObject * obj)
{
	WidgetsDynamicIcon * self;
#line 1 "../src/Widgets/DynamicIcon.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon);
#line 2 "../src/Widgets/DynamicIcon.vala"
	_g_free0 (self->priv->_icon_name);
#line 5 "../src/Widgets/DynamicIcon.vala"
	_g_object_unref0 (self->priv->icon);
#line 1 "../src/Widgets/DynamicIcon.vala"
	G_OBJECT_CLASS (widgets_dynamic_icon_parent_class)->finalize (obj);
#line 460 "DynamicIcon.c"
}

static GType
widgets_dynamic_icon_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsDynamicIconClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_dynamic_icon_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsDynamicIcon), 0, (GInstanceInitFunc) widgets_dynamic_icon_instance_init, NULL };
	GType widgets_dynamic_icon_type_id;
	widgets_dynamic_icon_type_id = g_type_register_static (gtk_event_box_get_type (), "WidgetsDynamicIcon", &g_define_type_info, 0);
	WidgetsDynamicIcon_private_offset = g_type_add_instance_private (widgets_dynamic_icon_type_id, sizeof (WidgetsDynamicIconPrivate));
	return widgets_dynamic_icon_type_id;
}

GType
widgets_dynamic_icon_get_type (void)
{
	static volatile gsize widgets_dynamic_icon_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_dynamic_icon_type_id__volatile)) {
		GType widgets_dynamic_icon_type_id;
		widgets_dynamic_icon_type_id = widgets_dynamic_icon_get_type_once ();
		g_once_init_leave (&widgets_dynamic_icon_type_id__volatile, widgets_dynamic_icon_type_id);
	}
	return widgets_dynamic_icon_type_id__volatile;
}

static void
_vala_widgets_dynamic_icon_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	WidgetsDynamicIcon * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon);
#line 1 "../src/Widgets/DynamicIcon.vala"
	switch (property_id) {
#line 1 "../src/Widgets/DynamicIcon.vala"
		case WIDGETS_DYNAMIC_ICON_ICON_NAME_PROPERTY:
#line 1 "../src/Widgets/DynamicIcon.vala"
		g_value_set_string (value, widgets_dynamic_icon_get_icon_name (self));
#line 1 "../src/Widgets/DynamicIcon.vala"
		break;
#line 1 "../src/Widgets/DynamicIcon.vala"
		case WIDGETS_DYNAMIC_ICON_SIZE_PROPERTY:
#line 1 "../src/Widgets/DynamicIcon.vala"
		g_value_set_int (value, widgets_dynamic_icon_get_size (self));
#line 1 "../src/Widgets/DynamicIcon.vala"
		break;
#line 507 "DynamicIcon.c"
		default:
#line 1 "../src/Widgets/DynamicIcon.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/DynamicIcon.vala"
		break;
#line 513 "DynamicIcon.c"
	}
}

static void
_vala_widgets_dynamic_icon_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	WidgetsDynamicIcon * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon);
#line 1 "../src/Widgets/DynamicIcon.vala"
	switch (property_id) {
#line 1 "../src/Widgets/DynamicIcon.vala"
		case WIDGETS_DYNAMIC_ICON_ICON_NAME_PROPERTY:
#line 1 "../src/Widgets/DynamicIcon.vala"
		widgets_dynamic_icon_set_icon_name (self, g_value_get_string (value));
#line 1 "../src/Widgets/DynamicIcon.vala"
		break;
#line 1 "../src/Widgets/DynamicIcon.vala"
		case WIDGETS_DYNAMIC_ICON_SIZE_PROPERTY:
#line 1 "../src/Widgets/DynamicIcon.vala"
		widgets_dynamic_icon_set_size (self, g_value_get_int (value));
#line 1 "../src/Widgets/DynamicIcon.vala"
		break;
#line 539 "DynamicIcon.c"
		default:
#line 1 "../src/Widgets/DynamicIcon.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/DynamicIcon.vala"
		break;
#line 545 "DynamicIcon.c"
	}
}

