/* ProjectProgress.c generated by valac 0.50.10, the Vala compiler
 * generated from ProjectProgress.vala, do not modify */

/* -*- Mode: Vala; indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4 -*- */
/* vim: set tabstop=4 softtabstop=4 shiftwidth=4 expandtab : */
/*
 * Custom Gtk.Widget to provide a circular progress bar.
 * It extends/subclasses Gtk.Bin instead of Gtk.DrawingArea.
 *
 * Based on Jos√© Miguel Fonte's Vala Circular Progress Bar
 * https://github.com/phastmike/vala-circular-progress-bar
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <cairo-gobject.h>
#include <gdk/gdk.h>

#define WIDGETS_TYPE_PROJECT_PROGRESS (widgets_project_progress_get_type ())
#define WIDGETS_PROJECT_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgress))
#define WIDGETS_PROJECT_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgressClass))
#define WIDGETS_IS_PROJECT_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_PROJECT_PROGRESS))
#define WIDGETS_IS_PROJECT_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_PROJECT_PROGRESS))
#define WIDGETS_PROJECT_PROGRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgressClass))

typedef struct _WidgetsProjectProgress WidgetsProjectProgress;
typedef struct _WidgetsProjectProgressClass WidgetsProjectProgressClass;
typedef struct _WidgetsProjectProgressPrivate WidgetsProjectProgressPrivate;
enum  {
	WIDGETS_PROJECT_PROGRESS_0_PROPERTY,
	WIDGETS_PROJECT_PROGRESS_MIN_D_PROPERTY,
	WIDGETS_PROJECT_PROGRESS_PROGRESS_FILL_COLOR_PROPERTY,
	WIDGETS_PROJECT_PROGRESS_PERCENTAGE_PROPERTY,
	WIDGETS_PROJECT_PROGRESS_NUM_PROPERTIES
};
static GParamSpec* widgets_project_progress_properties[WIDGETS_PROJECT_PROGRESS_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

struct _WidgetsProjectProgress {
	GtkBin parent_instance;
	WidgetsProjectProgressPrivate * priv;
	gint subproject_offset;
	gdouble subproject_line_width;
	gdouble line_width;
	gboolean has_subprojects;
	gboolean enable_subprojects;
};

struct _WidgetsProjectProgressClass {
	GtkBinClass parent_class;
};

struct _WidgetsProjectProgressPrivate {
	gint _min_d;
	gchar* _progress_fill_color;
	gdouble _percentage;
};

static gint WidgetsProjectProgress_private_offset;
static gpointer widgets_project_progress_parent_class = NULL;

GType widgets_project_progress_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsProjectProgress, g_object_unref)
WidgetsProjectProgress* widgets_project_progress_new (gint min_d);
WidgetsProjectProgress* widgets_project_progress_construct (GType object_type,
                                                            gint min_d);
static void __lambda187_ (WidgetsProjectProgress* self);
static void ___lambda187__g_object_notify (GObject* _sender,
                                    GParamSpec* pspec,
                                    gpointer self);
static gint widgets_project_progress_calculate_radius (WidgetsProjectProgress* self);
static gint widgets_project_progress_calculate_diameter (WidgetsProjectProgress* self);
static GtkSizeRequestMode widgets_project_progress_real_get_request_mode (GtkWidget* base);
static void widgets_project_progress_real_get_preferred_width (GtkWidget* base,
                                                        gint* min_w,
                                                        gint* natural_w);
gint widgets_project_progress_get_min_d (WidgetsProjectProgress* self);
static void widgets_project_progress_real_get_preferred_height (GtkWidget* base,
                                                         gint* min_h,
                                                         gint* natural_h);
static void widgets_project_progress_real_size_allocate (GtkWidget* base,
                                                  GtkAllocation* allocation);
static gboolean widgets_project_progress_real_draw (GtkWidget* base,
                                             cairo_t* cr);
const gchar* widgets_project_progress_get_progress_fill_color (WidgetsProjectProgress* self);
gdouble widgets_project_progress_get_percentage (WidgetsProjectProgress* self);
static void widgets_project_progress_set_min_d (WidgetsProjectProgress* self,
                                         gint value);
void widgets_project_progress_set_progress_fill_color (WidgetsProjectProgress* self,
                                                       const gchar* value);
void widgets_project_progress_set_percentage (WidgetsProjectProgress* self,
                                              gdouble value);
static GObject * widgets_project_progress_constructor (GType type,
                                                guint n_construct_properties,
                                                GObjectConstructParam * construct_properties);
static void widgets_project_progress_finalize (GObject * obj);
static GType widgets_project_progress_get_type_once (void);
static void _vala_widgets_project_progress_get_property (GObject * object,
                                                  guint property_id,
                                                  GValue * value,
                                                  GParamSpec * pspec);
static void _vala_widgets_project_progress_set_property (GObject * object,
                                                  guint property_id,
                                                  const GValue * value,
                                                  GParamSpec * pspec);

static inline gpointer
widgets_project_progress_get_instance_private (WidgetsProjectProgress* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsProjectProgress_private_offset);
}

static void
__lambda187_ (WidgetsProjectProgress* self)
{
#line 58 "../src/Widgets/ProjectProgress.vala"
	gtk_widget_queue_draw ((GtkWidget*) self);
#line 124 "ProjectProgress.c"
}

static void
___lambda187__g_object_notify (GObject* _sender,
                               GParamSpec* pspec,
                               gpointer self)
{
#line 57 "../src/Widgets/ProjectProgress.vala"
	__lambda187_ ((WidgetsProjectProgress*) self);
#line 134 "ProjectProgress.c"
}

WidgetsProjectProgress*
widgets_project_progress_construct (GType object_type,
                                    gint min_d)
{
	WidgetsProjectProgress * self = NULL;
#line 53 "../src/Widgets/ProjectProgress.vala"
	self = (WidgetsProjectProgress*) g_object_new (object_type, "min-d", min_d, NULL);
#line 57 "../src/Widgets/ProjectProgress.vala"
	g_signal_connect_object ((GObject*) self, "notify", (GCallback) ___lambda187__g_object_notify, self, 0);
#line 52 "../src/Widgets/ProjectProgress.vala"
	return self;
#line 148 "ProjectProgress.c"
}

WidgetsProjectProgress*
widgets_project_progress_new (gint min_d)
{
#line 52 "../src/Widgets/ProjectProgress.vala"
	return widgets_project_progress_construct (WIDGETS_TYPE_PROJECT_PROGRESS, min_d);
#line 156 "ProjectProgress.c"
}

static gint
widgets_project_progress_calculate_radius (WidgetsProjectProgress* self)
{
	gint result = 0;
#line 62 "../src/Widgets/ProjectProgress.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 63 "../src/Widgets/ProjectProgress.vala"
	result = MIN (gtk_widget_get_allocated_width ((GtkWidget*) self) / 2, gtk_widget_get_allocated_height ((GtkWidget*) self) / 2) - 1;
#line 63 "../src/Widgets/ProjectProgress.vala"
	return result;
#line 169 "ProjectProgress.c"
}

static gint
widgets_project_progress_calculate_diameter (WidgetsProjectProgress* self)
{
	gint result = 0;
#line 66 "../src/Widgets/ProjectProgress.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 67 "../src/Widgets/ProjectProgress.vala"
	result = 2 * widgets_project_progress_calculate_radius (self);
#line 67 "../src/Widgets/ProjectProgress.vala"
	return result;
#line 182 "ProjectProgress.c"
}

static GtkSizeRequestMode
widgets_project_progress_real_get_request_mode (GtkWidget* base)
{
	WidgetsProjectProgress * self;
	GtkSizeRequestMode result = 0;
#line 70 "../src/Widgets/ProjectProgress.vala"
	self = (WidgetsProjectProgress*) base;
#line 71 "../src/Widgets/ProjectProgress.vala"
	result = GTK_SIZE_REQUEST_CONSTANT_SIZE;
#line 71 "../src/Widgets/ProjectProgress.vala"
	return result;
#line 196 "ProjectProgress.c"
}

static void
widgets_project_progress_real_get_preferred_width (GtkWidget* base,
                                                   gint* min_w,
                                                   gint* natural_w)
{
	WidgetsProjectProgress * self;
	gint _vala_min_w = 0;
	gint _vala_natural_w = 0;
	gint _tmp0_;
	gint _tmp1_;
#line 74 "../src/Widgets/ProjectProgress.vala"
	self = (WidgetsProjectProgress*) base;
#line 75 "../src/Widgets/ProjectProgress.vala"
	_tmp0_ = self->priv->_min_d;
#line 75 "../src/Widgets/ProjectProgress.vala"
	_vala_min_w = _tmp0_;
#line 76 "../src/Widgets/ProjectProgress.vala"
	_tmp1_ = self->priv->_min_d;
#line 76 "../src/Widgets/ProjectProgress.vala"
	_vala_natural_w = MAX (widgets_project_progress_calculate_diameter (self), _tmp1_);
#line 74 "../src/Widgets/ProjectProgress.vala"
	if (min_w) {
#line 74 "../src/Widgets/ProjectProgress.vala"
		*min_w = _vala_min_w;
#line 223 "ProjectProgress.c"
	}
#line 74 "../src/Widgets/ProjectProgress.vala"
	if (natural_w) {
#line 74 "../src/Widgets/ProjectProgress.vala"
		*natural_w = _vala_natural_w;
#line 229 "ProjectProgress.c"
	}
}

static void
widgets_project_progress_real_get_preferred_height (GtkWidget* base,
                                                    gint* min_h,
                                                    gint* natural_h)
{
	WidgetsProjectProgress * self;
	gint _vala_min_h = 0;
	gint _vala_natural_h = 0;
	gint _tmp0_;
	gint _tmp1_;
#line 79 "../src/Widgets/ProjectProgress.vala"
	self = (WidgetsProjectProgress*) base;
#line 80 "../src/Widgets/ProjectProgress.vala"
	_tmp0_ = self->priv->_min_d;
#line 80 "../src/Widgets/ProjectProgress.vala"
	_vala_min_h = _tmp0_;
#line 81 "../src/Widgets/ProjectProgress.vala"
	_tmp1_ = self->priv->_min_d;
#line 81 "../src/Widgets/ProjectProgress.vala"
	_vala_natural_h = MAX (widgets_project_progress_calculate_diameter (self), _tmp1_);
#line 79 "../src/Widgets/ProjectProgress.vala"
	if (min_h) {
#line 79 "../src/Widgets/ProjectProgress.vala"
		*min_h = _vala_min_h;
#line 257 "ProjectProgress.c"
	}
#line 79 "../src/Widgets/ProjectProgress.vala"
	if (natural_h) {
#line 79 "../src/Widgets/ProjectProgress.vala"
		*natural_h = _vala_natural_h;
#line 263 "ProjectProgress.c"
	}
}

static void
widgets_project_progress_real_size_allocate (GtkWidget* base,
                                             GtkAllocation* allocation)
{
	WidgetsProjectProgress * self;
	GtkAllocation _tmp0_;
#line 84 "../src/Widgets/ProjectProgress.vala"
	self = (WidgetsProjectProgress*) base;
#line 84 "../src/Widgets/ProjectProgress.vala"
	g_return_if_fail (allocation != NULL);
#line 85 "../src/Widgets/ProjectProgress.vala"
	_tmp0_ = *allocation;
#line 85 "../src/Widgets/ProjectProgress.vala"
	GTK_WIDGET_CLASS (widgets_project_progress_parent_class)->size_allocate ((GtkWidget*) G_TYPE_CHECK_INSTANCE_CAST (self, gtk_bin_get_type (), GtkBin), &_tmp0_);
#line 281 "ProjectProgress.c"
}

static gboolean
widgets_project_progress_real_draw (GtkWidget* base,
                                    cairo_t* cr)
{
	WidgetsProjectProgress * self;
	GdkRGBA color = {0};
	gint center_x = 0;
	gint center_y = 0;
	gdouble _tmp0_ = 0.0;
	gdouble outer_delta = 0.0;
	gint _tmp1_ = 0;
	gint inner_delta = 0;
	gdouble outer_radius = 0.0;
	gdouble inner_radius = 0.0;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	GdkRGBA _tmp4_;
	gdouble _tmp5_;
	gdouble _tmp6_;
	gboolean _tmp9_ = FALSE;
	gboolean result = FALSE;
#line 88 "../src/Widgets/ProjectProgress.vala"
	self = (WidgetsProjectProgress*) base;
#line 88 "../src/Widgets/ProjectProgress.vala"
	g_return_val_if_fail (cr != NULL, FALSE);
#line 91 "../src/Widgets/ProjectProgress.vala"
	cairo_save (cr);
#line 93 "../src/Widgets/ProjectProgress.vala"
	center_x = gtk_widget_get_allocated_width ((GtkWidget*) self) / 2;
#line 94 "../src/Widgets/ProjectProgress.vala"
	center_y = gtk_widget_get_allocated_height ((GtkWidget*) self) / 2;
#line 96 "../src/Widgets/ProjectProgress.vala"
	if (self->enable_subprojects) {
#line 96 "../src/Widgets/ProjectProgress.vala"
		_tmp0_ = self->subproject_offset + self->subproject_line_width;
#line 319 "ProjectProgress.c"
	} else {
#line 96 "../src/Widgets/ProjectProgress.vala"
		_tmp0_ = self->line_width;
#line 323 "ProjectProgress.c"
	}
#line 96 "../src/Widgets/ProjectProgress.vala"
	outer_delta = _tmp0_;
#line 97 "../src/Widgets/ProjectProgress.vala"
	if (self->enable_subprojects) {
#line 97 "../src/Widgets/ProjectProgress.vala"
		_tmp1_ = 1;
#line 331 "ProjectProgress.c"
	} else {
#line 97 "../src/Widgets/ProjectProgress.vala"
		_tmp1_ = 2;
#line 335 "ProjectProgress.c"
	}
#line 97 "../src/Widgets/ProjectProgress.vala"
	inner_delta = _tmp1_;
#line 99 "../src/Widgets/ProjectProgress.vala"
	outer_radius = round (center_x - outer_delta);
#line 100 "../src/Widgets/ProjectProgress.vala"
	inner_radius = round ((outer_radius - self->line_width) - inner_delta);
#line 102 "../src/Widgets/ProjectProgress.vala"
	memset (&color, 0, sizeof (GdkRGBA));
#line 103 "../src/Widgets/ProjectProgress.vala"
	_tmp2_ = widgets_project_progress_get_progress_fill_color (self);
#line 103 "../src/Widgets/ProjectProgress.vala"
	_tmp3_ = _tmp2_;
#line 103 "../src/Widgets/ProjectProgress.vala"
	gdk_rgba_parse (&color, _tmp3_);
#line 104 "../src/Widgets/ProjectProgress.vala"
	_tmp4_ = color;
#line 104 "../src/Widgets/ProjectProgress.vala"
	gdk_cairo_set_source_rgba (cr, &_tmp4_);
#line 107 "../src/Widgets/ProjectProgress.vala"
	_tmp5_ = widgets_project_progress_get_percentage (self);
#line 107 "../src/Widgets/ProjectProgress.vala"
	_tmp6_ = _tmp5_;
#line 107 "../src/Widgets/ProjectProgress.vala"
	if (_tmp6_ > ((gdouble) 0)) {
#line 361 "ProjectProgress.c"
		gdouble _tmp7_;
		gdouble _tmp8_;
#line 108 "../src/Widgets/ProjectProgress.vala"
		cairo_move_to (cr, (gdouble) center_x, (gdouble) center_y);
#line 109 "../src/Widgets/ProjectProgress.vala"
		_tmp7_ = widgets_project_progress_get_percentage (self);
#line 109 "../src/Widgets/ProjectProgress.vala"
		_tmp8_ = _tmp7_;
#line 109 "../src/Widgets/ProjectProgress.vala"
		cairo_arc (cr, (gdouble) center_x, (gdouble) center_y, inner_radius, 1.5 * G_PI, (1.5 + (_tmp8_ * 2)) * G_PI);
#line 114 "../src/Widgets/ProjectProgress.vala"
		cairo_fill (cr);
#line 374 "ProjectProgress.c"
	}
#line 118 "../src/Widgets/ProjectProgress.vala"
	cairo_set_line_width (cr, self->line_width);
#line 119 "../src/Widgets/ProjectProgress.vala"
	cairo_arc (cr, (gdouble) center_x, (gdouble) center_y, outer_radius, (gdouble) 0, G_PI * 2);
#line 124 "../src/Widgets/ProjectProgress.vala"
	cairo_stroke (cr);
#line 127 "../src/Widgets/ProjectProgress.vala"
	if (self->has_subprojects) {
#line 127 "../src/Widgets/ProjectProgress.vala"
		_tmp9_ = self->enable_subprojects;
#line 386 "ProjectProgress.c"
	} else {
#line 127 "../src/Widgets/ProjectProgress.vala"
		_tmp9_ = FALSE;
#line 390 "ProjectProgress.c"
	}
#line 127 "../src/Widgets/ProjectProgress.vala"
	if (_tmp9_) {
#line 394 "ProjectProgress.c"
		GdkRGBA _tmp10_;
#line 128 "../src/Widgets/ProjectProgress.vala"
		color.alpha = 0.7;
#line 129 "../src/Widgets/ProjectProgress.vala"
		_tmp10_ = color;
#line 129 "../src/Widgets/ProjectProgress.vala"
		gdk_cairo_set_source_rgba (cr, &_tmp10_);
#line 130 "../src/Widgets/ProjectProgress.vala"
		cairo_set_line_width (cr, self->subproject_line_width);
#line 132 "../src/Widgets/ProjectProgress.vala"
		cairo_arc (cr, (gdouble) (center_x + 2), (gdouble) (center_y + 2), outer_radius, G_PI / 90.0, (90.0 * G_PI) / 180.0);
#line 137 "../src/Widgets/ProjectProgress.vala"
		cairo_stroke (cr);
#line 408 "ProjectProgress.c"
	}
#line 140 "../src/Widgets/ProjectProgress.vala"
	cairo_restore (cr);
#line 142 "../src/Widgets/ProjectProgress.vala"
	result = GTK_WIDGET_CLASS (widgets_project_progress_parent_class)->draw ((GtkWidget*) G_TYPE_CHECK_INSTANCE_CAST (self, gtk_bin_get_type (), GtkBin), cr);
#line 142 "../src/Widgets/ProjectProgress.vala"
	return result;
#line 416 "ProjectProgress.c"
}

gint
widgets_project_progress_get_min_d (WidgetsProjectProgress* self)
{
	gint result;
#line 15 "../src/Widgets/ProjectProgress.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 15 "../src/Widgets/ProjectProgress.vala"
	result = self->priv->_min_d;
#line 15 "../src/Widgets/ProjectProgress.vala"
	return result;
#line 429 "ProjectProgress.c"
}

static void
widgets_project_progress_set_min_d (WidgetsProjectProgress* self,
                                    gint value)
{
	gint old_value;
#line 15 "../src/Widgets/ProjectProgress.vala"
	g_return_if_fail (self != NULL);
#line 15 "../src/Widgets/ProjectProgress.vala"
	old_value = widgets_project_progress_get_min_d (self);
#line 15 "../src/Widgets/ProjectProgress.vala"
	if (old_value != value) {
#line 15 "../src/Widgets/ProjectProgress.vala"
		self->priv->_min_d = value;
#line 15 "../src/Widgets/ProjectProgress.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_project_progress_properties[WIDGETS_PROJECT_PROGRESS_MIN_D_PROPERTY]);
#line 447 "ProjectProgress.c"
	}
}

const gchar*
widgets_project_progress_get_progress_fill_color (WidgetsProjectProgress* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 26 "../src/Widgets/ProjectProgress.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 27 "../src/Widgets/ProjectProgress.vala"
	_tmp0_ = self->priv->_progress_fill_color;
#line 27 "../src/Widgets/ProjectProgress.vala"
	result = _tmp0_;
#line 27 "../src/Widgets/ProjectProgress.vala"
	return result;
#line 464 "ProjectProgress.c"
}

void
widgets_project_progress_set_progress_fill_color (WidgetsProjectProgress* self,
                                                  const gchar* value)
{
	GdkRGBA color = {0};
#line 29 "../src/Widgets/ProjectProgress.vala"
	g_return_if_fail (self != NULL);
#line 30 "../src/Widgets/ProjectProgress.vala"
	memset (&color, 0, sizeof (GdkRGBA));
#line 31 "../src/Widgets/ProjectProgress.vala"
	if (gdk_rgba_parse (&color, value)) {
#line 478 "ProjectProgress.c"
		gchar* _tmp0_;
#line 32 "../src/Widgets/ProjectProgress.vala"
		_tmp0_ = g_strdup (value);
#line 32 "../src/Widgets/ProjectProgress.vala"
		_g_free0 (self->priv->_progress_fill_color);
#line 32 "../src/Widgets/ProjectProgress.vala"
		self->priv->_progress_fill_color = _tmp0_;
#line 486 "ProjectProgress.c"
	}
#line 29 "../src/Widgets/ProjectProgress.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_project_progress_properties[WIDGETS_PROJECT_PROGRESS_PROGRESS_FILL_COLOR_PROPERTY]);
#line 490 "ProjectProgress.c"
}

gdouble
widgets_project_progress_get_percentage (WidgetsProjectProgress* self)
{
	gdouble result;
#line 39 "../src/Widgets/ProjectProgress.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 40 "../src/Widgets/ProjectProgress.vala"
	result = self->priv->_percentage;
#line 40 "../src/Widgets/ProjectProgress.vala"
	return result;
#line 503 "ProjectProgress.c"
}

void
widgets_project_progress_set_percentage (WidgetsProjectProgress* self,
                                         gdouble value)
{
#line 42 "../src/Widgets/ProjectProgress.vala"
	g_return_if_fail (self != NULL);
#line 43 "../src/Widgets/ProjectProgress.vala"
	self->priv->_percentage = MIN (MAX (value, (gdouble) 0), (gdouble) 1);
#line 42 "../src/Widgets/ProjectProgress.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_project_progress_properties[WIDGETS_PROJECT_PROGRESS_PERCENTAGE_PROPERTY]);
#line 516 "ProjectProgress.c"
}

static GObject *
widgets_project_progress_constructor (GType type,
                                      guint n_construct_properties,
                                      GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsProjectProgress * self;
	gchar* _tmp0_;
#line 47 "../src/Widgets/ProjectProgress.vala"
	parent_class = G_OBJECT_CLASS (widgets_project_progress_parent_class);
#line 47 "../src/Widgets/ProjectProgress.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 47 "../src/Widgets/ProjectProgress.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgress);
#line 48 "../src/Widgets/ProjectProgress.vala"
	self->priv->_percentage = (gdouble) 0;
#line 49 "../src/Widgets/ProjectProgress.vala"
	_tmp0_ = g_strdup ("#4a90d9");
#line 49 "../src/Widgets/ProjectProgress.vala"
	_g_free0 (self->priv->_progress_fill_color);
#line 49 "../src/Widgets/ProjectProgress.vala"
	self->priv->_progress_fill_color = _tmp0_;
#line 47 "../src/Widgets/ProjectProgress.vala"
	return obj;
#line 544 "ProjectProgress.c"
}

static void
widgets_project_progress_class_init (WidgetsProjectProgressClass * klass,
                                     gpointer klass_data)
{
#line 14 "../src/Widgets/ProjectProgress.vala"
	widgets_project_progress_parent_class = g_type_class_peek_parent (klass);
#line 14 "../src/Widgets/ProjectProgress.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsProjectProgress_private_offset);
#line 14 "../src/Widgets/ProjectProgress.vala"
	((GtkWidgetClass *) klass)->get_request_mode = (GtkSizeRequestMode (*) (GtkWidget*)) widgets_project_progress_real_get_request_mode;
#line 14 "../src/Widgets/ProjectProgress.vala"
	((GtkWidgetClass *) klass)->get_preferred_width = (void (*) (GtkWidget*, gint*, gint*)) widgets_project_progress_real_get_preferred_width;
#line 14 "../src/Widgets/ProjectProgress.vala"
	((GtkWidgetClass *) klass)->get_preferred_height = (void (*) (GtkWidget*, gint*, gint*)) widgets_project_progress_real_get_preferred_height;
#line 14 "../src/Widgets/ProjectProgress.vala"
	((GtkWidgetClass *) klass)->size_allocate = (void (*) (GtkWidget*, GtkAllocation*)) widgets_project_progress_real_size_allocate;
#line 14 "../src/Widgets/ProjectProgress.vala"
	((GtkWidgetClass *) klass)->draw = (gboolean (*) (GtkWidget*, cairo_t*)) widgets_project_progress_real_draw;
#line 14 "../src/Widgets/ProjectProgress.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_project_progress_get_property;
#line 14 "../src/Widgets/ProjectProgress.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_project_progress_set_property;
#line 14 "../src/Widgets/ProjectProgress.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_project_progress_constructor;
#line 14 "../src/Widgets/ProjectProgress.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_project_progress_finalize;
#line 14 "../src/Widgets/ProjectProgress.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_PROJECT_PROGRESS_MIN_D_PROPERTY, widgets_project_progress_properties[WIDGETS_PROJECT_PROGRESS_MIN_D_PROPERTY] = g_param_spec_int ("min-d", "min-d", "min-d", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 14 "../src/Widgets/ProjectProgress.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_PROJECT_PROGRESS_PROGRESS_FILL_COLOR_PROPERTY, widgets_project_progress_properties[WIDGETS_PROJECT_PROGRESS_PROGRESS_FILL_COLOR_PROPERTY] = g_param_spec_string ("progress-fill-color", "Progress fill color", "Progress line color (Check GdkRGBA parse method)", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 14 "../src/Widgets/ProjectProgress.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_PROJECT_PROGRESS_PERCENTAGE_PROPERTY, widgets_project_progress_properties[WIDGETS_PROJECT_PROGRESS_PERCENTAGE_PROPERTY] = g_param_spec_double ("percentage", "Percentage/Value", "The percentage value [0.0 ... 1.0]", -G_MAXDOUBLE, G_MAXDOUBLE, 0.0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 579 "ProjectProgress.c"
}

static void
widgets_project_progress_instance_init (WidgetsProjectProgress * self,
                                        gpointer klass)
{
#line 14 "../src/Widgets/ProjectProgress.vala"
	self->priv = widgets_project_progress_get_instance_private (self);
#line 16 "../src/Widgets/ProjectProgress.vala"
	self->subproject_offset = 2;
#line 19 "../src/Widgets/ProjectProgress.vala"
	self->subproject_line_width = 1.1;
#line 20 "../src/Widgets/ProjectProgress.vala"
	self->line_width = 1.5;
#line 21 "../src/Widgets/ProjectProgress.vala"
	self->has_subprojects = FALSE;
#line 22 "../src/Widgets/ProjectProgress.vala"
	self->enable_subprojects = FALSE;
#line 598 "ProjectProgress.c"
}

static void
widgets_project_progress_finalize (GObject * obj)
{
	WidgetsProjectProgress * self;
#line 14 "../src/Widgets/ProjectProgress.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgress);
#line 17 "../src/Widgets/ProjectProgress.vala"
	_g_free0 (self->priv->_progress_fill_color);
#line 14 "../src/Widgets/ProjectProgress.vala"
	G_OBJECT_CLASS (widgets_project_progress_parent_class)->finalize (obj);
#line 611 "ProjectProgress.c"
}

static GType
widgets_project_progress_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsProjectProgressClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_project_progress_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsProjectProgress), 0, (GInstanceInitFunc) widgets_project_progress_instance_init, NULL };
	GType widgets_project_progress_type_id;
	widgets_project_progress_type_id = g_type_register_static (gtk_bin_get_type (), "WidgetsProjectProgress", &g_define_type_info, 0);
	WidgetsProjectProgress_private_offset = g_type_add_instance_private (widgets_project_progress_type_id, sizeof (WidgetsProjectProgressPrivate));
	return widgets_project_progress_type_id;
}

GType
widgets_project_progress_get_type (void)
{
	static volatile gsize widgets_project_progress_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_project_progress_type_id__volatile)) {
		GType widgets_project_progress_type_id;
		widgets_project_progress_type_id = widgets_project_progress_get_type_once ();
		g_once_init_leave (&widgets_project_progress_type_id__volatile, widgets_project_progress_type_id);
	}
	return widgets_project_progress_type_id__volatile;
}

static void
_vala_widgets_project_progress_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec)
{
	WidgetsProjectProgress * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgress);
#line 14 "../src/Widgets/ProjectProgress.vala"
	switch (property_id) {
#line 14 "../src/Widgets/ProjectProgress.vala"
		case WIDGETS_PROJECT_PROGRESS_MIN_D_PROPERTY:
#line 14 "../src/Widgets/ProjectProgress.vala"
		g_value_set_int (value, widgets_project_progress_get_min_d (self));
#line 14 "../src/Widgets/ProjectProgress.vala"
		break;
#line 14 "../src/Widgets/ProjectProgress.vala"
		case WIDGETS_PROJECT_PROGRESS_PROGRESS_FILL_COLOR_PROPERTY:
#line 14 "../src/Widgets/ProjectProgress.vala"
		g_value_set_string (value, widgets_project_progress_get_progress_fill_color (self));
#line 14 "../src/Widgets/ProjectProgress.vala"
		break;
#line 14 "../src/Widgets/ProjectProgress.vala"
		case WIDGETS_PROJECT_PROGRESS_PERCENTAGE_PROPERTY:
#line 14 "../src/Widgets/ProjectProgress.vala"
		g_value_set_double (value, widgets_project_progress_get_percentage (self));
#line 14 "../src/Widgets/ProjectProgress.vala"
		break;
#line 664 "ProjectProgress.c"
		default:
#line 14 "../src/Widgets/ProjectProgress.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 14 "../src/Widgets/ProjectProgress.vala"
		break;
#line 670 "ProjectProgress.c"
	}
}

static void
_vala_widgets_project_progress_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec)
{
	WidgetsProjectProgress * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgress);
#line 14 "../src/Widgets/ProjectProgress.vala"
	switch (property_id) {
#line 14 "../src/Widgets/ProjectProgress.vala"
		case WIDGETS_PROJECT_PROGRESS_MIN_D_PROPERTY:
#line 14 "../src/Widgets/ProjectProgress.vala"
		widgets_project_progress_set_min_d (self, g_value_get_int (value));
#line 14 "../src/Widgets/ProjectProgress.vala"
		break;
#line 14 "../src/Widgets/ProjectProgress.vala"
		case WIDGETS_PROJECT_PROGRESS_PROGRESS_FILL_COLOR_PROPERTY:
#line 14 "../src/Widgets/ProjectProgress.vala"
		widgets_project_progress_set_progress_fill_color (self, g_value_get_string (value));
#line 14 "../src/Widgets/ProjectProgress.vala"
		break;
#line 14 "../src/Widgets/ProjectProgress.vala"
		case WIDGETS_PROJECT_PROGRESS_PERCENTAGE_PROPERTY:
#line 14 "../src/Widgets/ProjectProgress.vala"
		widgets_project_progress_set_percentage (self, g_value_get_double (value));
#line 14 "../src/Widgets/ProjectProgress.vala"
		break;
#line 702 "ProjectProgress.c"
		default:
#line 14 "../src/Widgets/ProjectProgress.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 14 "../src/Widgets/ProjectProgress.vala"
		break;
#line 708 "ProjectProgress.c"
	}
}

