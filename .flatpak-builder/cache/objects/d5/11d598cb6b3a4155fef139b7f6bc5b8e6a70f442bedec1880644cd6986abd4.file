/* CalendarView.c generated by valac 0.50.10, the Vala compiler
 * generated from CalendarView.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gee.h>
#include <glib.h>

#define WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW (widgets_calendar_calendar_view_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, WidgetsCalendarCalendarView))
#define WIDGETS_CALENDAR_CALENDAR_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, WidgetsCalendarCalendarViewClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW))
#define WIDGETS_CALENDAR_IS_CALENDAR_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW))
#define WIDGETS_CALENDAR_CALENDAR_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, WidgetsCalendarCalendarViewClass))

typedef struct _WidgetsCalendarCalendarView WidgetsCalendarCalendarView;
typedef struct _WidgetsCalendarCalendarViewClass WidgetsCalendarCalendarViewClass;
typedef struct _WidgetsCalendarCalendarViewPrivate WidgetsCalendarCalendarViewPrivate;

#define WIDGETS_CALENDAR_TYPE_CALENDAR_DAY (widgets_calendar_calendar_day_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_DAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDay))
#define WIDGETS_CALENDAR_CALENDAR_DAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDayClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_DAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY))
#define WIDGETS_CALENDAR_IS_CALENDAR_DAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY))
#define WIDGETS_CALENDAR_CALENDAR_DAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDayClass))

typedef struct _WidgetsCalendarCalendarDay WidgetsCalendarCalendarDay;
typedef struct _WidgetsCalendarCalendarDayClass WidgetsCalendarCalendarDayClass;
enum  {
	WIDGETS_CALENDAR_CALENDAR_VIEW_0_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_VIEW_NUM_PROPERTIES
};
static GParamSpec* widgets_calendar_calendar_view_properties[WIDGETS_CALENDAR_CALENDAR_VIEW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
enum  {
	WIDGETS_CALENDAR_CALENDAR_VIEW_DAY_SELECTED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_VIEW_NUM_SIGNALS
};
static guint widgets_calendar_calendar_view_signals[WIDGETS_CALENDAR_CALENDAR_VIEW_NUM_SIGNALS] = {0};

struct _WidgetsCalendarCalendarView {
	GtkBox parent_instance;
	WidgetsCalendarCalendarViewPrivate * priv;
};

struct _WidgetsCalendarCalendarViewClass {
	GtkBoxClass parent_class;
};

struct _WidgetsCalendarCalendarViewPrivate {
	GeeArrayList* days_arraylist;
	GtkGrid* days_grid;
};

static gint WidgetsCalendarCalendarView_private_offset;
static gpointer widgets_calendar_calendar_view_parent_class = NULL;

GType widgets_calendar_calendar_view_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsCalendarCalendarView, g_object_unref)
GType widgets_calendar_calendar_day_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsCalendarCalendarDay, g_object_unref)
WidgetsCalendarCalendarView* widgets_calendar_calendar_view_new (void);
WidgetsCalendarCalendarView* widgets_calendar_calendar_view_construct (GType object_type);
WidgetsCalendarCalendarDay* widgets_calendar_calendar_day_new (void);
WidgetsCalendarCalendarDay* widgets_calendar_calendar_day_construct (GType object_type);
static void widgets_calendar_calendar_view_day_selected_style (WidgetsCalendarCalendarView* self,
                                                        gint day);
static void _widgets_calendar_calendar_view_day_selected_style_widgets_calendar_calendar_day_day_selected (WidgetsCalendarCalendarDay* _sender,
                                                                                                    gint day,
                                                                                                    gpointer self);
void widgets_calendar_calendar_view_fill_grid_days (WidgetsCalendarCalendarView* self,
                                                    gint start_day,
                                                    gint max_day,
                                                    gint current_day,
                                                    gboolean is_current_month,
                                                    gboolean block_past_days,
                                                    GDateTime* month);
void widgets_calendar_calendar_day_set_day (WidgetsCalendarCalendarDay* self,
                                            gint value);
static void widgets_calendar_calendar_view_clear_style (WidgetsCalendarCalendarView* self);
static void widgets_calendar_calendar_view_finalize (GObject * obj);
static GType widgets_calendar_calendar_view_get_type_once (void);

static inline gpointer
widgets_calendar_calendar_view_get_instance_private (WidgetsCalendarCalendarView* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsCalendarCalendarView_private_offset);
}

static void
_widgets_calendar_calendar_view_day_selected_style_widgets_calendar_calendar_day_day_selected (WidgetsCalendarCalendarDay* _sender,
                                                                                               gint day,
                                                                                               gpointer self)
{
#line 42 "../src/Widgets/Calendar/CalendarView.vala"
	widgets_calendar_calendar_view_day_selected_style ((WidgetsCalendarCalendarView*) self, day);
#line 120 "CalendarView.c"
}

WidgetsCalendarCalendarView*
widgets_calendar_calendar_view_construct (GType object_type)
{
	WidgetsCalendarCalendarView * self = NULL;
	GeeArrayList* _tmp0_;
	GtkGrid* _tmp1_;
	GtkGrid* _tmp2_;
	GtkGrid* _tmp3_;
	gint col = 0;
	gint row = 0;
	GtkGrid* _tmp14_;
#line 28 "../src/Widgets/Calendar/CalendarView.vala"
	self = (WidgetsCalendarCalendarView*) g_object_new (object_type, NULL);
#line 29 "../src/Widgets/Calendar/CalendarView.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) self, GTK_ORIENTATION_VERTICAL);
#line 31 "../src/Widgets/Calendar/CalendarView.vala"
	_tmp0_ = gee_array_list_new (WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL);
#line 31 "../src/Widgets/Calendar/CalendarView.vala"
	_g_object_unref0 (self->priv->days_arraylist);
#line 31 "../src/Widgets/Calendar/CalendarView.vala"
	self->priv->days_arraylist = _tmp0_;
#line 33 "../src/Widgets/Calendar/CalendarView.vala"
	_tmp1_ = (GtkGrid*) gtk_grid_new ();
#line 33 "../src/Widgets/Calendar/CalendarView.vala"
	g_object_ref_sink (_tmp1_);
#line 33 "../src/Widgets/Calendar/CalendarView.vala"
	_g_object_unref0 (self->priv->days_grid);
#line 33 "../src/Widgets/Calendar/CalendarView.vala"
	self->priv->days_grid = _tmp1_;
#line 34 "../src/Widgets/Calendar/CalendarView.vala"
	_tmp2_ = self->priv->days_grid;
#line 34 "../src/Widgets/Calendar/CalendarView.vala"
	gtk_grid_set_column_homogeneous (_tmp2_, TRUE);
#line 35 "../src/Widgets/Calendar/CalendarView.vala"
	_tmp3_ = self->priv->days_grid;
#line 35 "../src/Widgets/Calendar/CalendarView.vala"
	gtk_grid_set_row_homogeneous (_tmp3_, TRUE);
#line 37 "../src/Widgets/Calendar/CalendarView.vala"
	col = 0;
#line 38 "../src/Widgets/Calendar/CalendarView.vala"
	row = 0;
#line 164 "CalendarView.c"
	{
		gint i = 0;
#line 40 "../src/Widgets/Calendar/CalendarView.vala"
		i = 0;
#line 169 "CalendarView.c"
		{
			gboolean _tmp4_ = FALSE;
#line 40 "../src/Widgets/Calendar/CalendarView.vala"
			_tmp4_ = TRUE;
#line 40 "../src/Widgets/Calendar/CalendarView.vala"
			while (TRUE) {
#line 176 "CalendarView.c"
				WidgetsCalendarCalendarDay* day = NULL;
				WidgetsCalendarCalendarDay* _tmp6_;
				WidgetsCalendarCalendarDay* _tmp7_;
				GtkGrid* _tmp8_;
				WidgetsCalendarCalendarDay* _tmp9_;
				gboolean _tmp10_ = FALSE;
				WidgetsCalendarCalendarDay* _tmp11_;
				GeeArrayList* _tmp12_;
				WidgetsCalendarCalendarDay* _tmp13_;
#line 40 "../src/Widgets/Calendar/CalendarView.vala"
				if (!_tmp4_) {
#line 188 "CalendarView.c"
					gint _tmp5_;
#line 40 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp5_ = i;
#line 40 "../src/Widgets/Calendar/CalendarView.vala"
					i = _tmp5_ + 1;
#line 194 "CalendarView.c"
				}
#line 40 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp4_ = FALSE;
#line 40 "../src/Widgets/Calendar/CalendarView.vala"
				if (!(i < 42)) {
#line 40 "../src/Widgets/Calendar/CalendarView.vala"
					break;
#line 202 "CalendarView.c"
				}
#line 41 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp6_ = widgets_calendar_calendar_day_new ();
#line 41 "../src/Widgets/Calendar/CalendarView.vala"
				g_object_ref_sink (_tmp6_);
#line 41 "../src/Widgets/Calendar/CalendarView.vala"
				day = _tmp6_;
#line 42 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp7_ = day;
#line 42 "../src/Widgets/Calendar/CalendarView.vala"
				g_signal_connect_object (_tmp7_, "day-selected", (GCallback) _widgets_calendar_calendar_view_day_selected_style_widgets_calendar_calendar_day_day_selected, self, 0);
#line 43 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp8_ = self->priv->days_grid;
#line 43 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp9_ = day;
#line 43 "../src/Widgets/Calendar/CalendarView.vala"
				gtk_grid_attach (_tmp8_, (GtkWidget*) _tmp9_, col, row, 1, 1);
#line 44 "../src/Widgets/Calendar/CalendarView.vala"
				col = col + 1;
#line 46 "../src/Widgets/Calendar/CalendarView.vala"
				if (col != 0) {
#line 46 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp10_ = (col % 7) == 0;
#line 226 "CalendarView.c"
				} else {
#line 46 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp10_ = FALSE;
#line 230 "CalendarView.c"
				}
#line 46 "../src/Widgets/Calendar/CalendarView.vala"
				if (_tmp10_) {
#line 47 "../src/Widgets/Calendar/CalendarView.vala"
					row = row + 1;
#line 48 "../src/Widgets/Calendar/CalendarView.vala"
					col = 0;
#line 238 "CalendarView.c"
				}
#line 51 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp11_ = day;
#line 51 "../src/Widgets/Calendar/CalendarView.vala"
				gtk_widget_set_no_show_all ((GtkWidget*) _tmp11_, TRUE);
#line 52 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp12_ = self->priv->days_arraylist;
#line 52 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp13_ = day;
#line 52 "../src/Widgets/Calendar/CalendarView.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp12_, _tmp13_);
#line 40 "../src/Widgets/Calendar/CalendarView.vala"
				_g_object_unref0 (day);
#line 252 "CalendarView.c"
			}
		}
	}
#line 55 "../src/Widgets/Calendar/CalendarView.vala"
	_tmp14_ = self->priv->days_grid;
#line 55 "../src/Widgets/Calendar/CalendarView.vala"
	gtk_box_pack_end ((GtkBox*) self, (GtkWidget*) _tmp14_, TRUE, TRUE, (guint) 0);
#line 28 "../src/Widgets/Calendar/CalendarView.vala"
	return self;
#line 262 "CalendarView.c"
}

WidgetsCalendarCalendarView*
widgets_calendar_calendar_view_new (void)
{
#line 28 "../src/Widgets/Calendar/CalendarView.vala"
	return widgets_calendar_calendar_view_construct (WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW);
#line 270 "CalendarView.c"
}

void
widgets_calendar_calendar_view_fill_grid_days (WidgetsCalendarCalendarView* self,
                                               gint start_day,
                                               gint max_day,
                                               gint current_day,
                                               gboolean is_current_month,
                                               gboolean block_past_days,
                                               GDateTime* month)
{
	gint day_number = 0;
	gint _current_day = 0;
	GtkGrid* _tmp24_;
#line 58 "../src/Widgets/Calendar/CalendarView.vala"
	g_return_if_fail (self != NULL);
#line 58 "../src/Widgets/Calendar/CalendarView.vala"
	g_return_if_fail (month != NULL);
#line 64 "../src/Widgets/Calendar/CalendarView.vala"
	day_number = 1;
#line 66 "../src/Widgets/Calendar/CalendarView.vala"
	_current_day = current_day;
#line 67 "../src/Widgets/Calendar/CalendarView.vala"
	if (is_current_month) {
#line 295 "CalendarView.c"
		GDateTime* current_date = NULL;
		GDateTime* _tmp0_;
		GDateTime* _tmp1_;
#line 68 "../src/Widgets/Calendar/CalendarView.vala"
		_tmp0_ = g_date_time_new_now_local ();
#line 68 "../src/Widgets/Calendar/CalendarView.vala"
		current_date = _tmp0_;
#line 69 "../src/Widgets/Calendar/CalendarView.vala"
		_tmp1_ = current_date;
#line 69 "../src/Widgets/Calendar/CalendarView.vala"
		_current_day = g_date_time_get_day_of_month (_tmp1_);
#line 67 "../src/Widgets/Calendar/CalendarView.vala"
		_g_date_time_unref0 (current_date);
#line 309 "CalendarView.c"
	}
	{
		gint i = 0;
#line 72 "../src/Widgets/Calendar/CalendarView.vala"
		i = 0;
#line 315 "CalendarView.c"
		{
			gboolean _tmp2_ = FALSE;
#line 72 "../src/Widgets/Calendar/CalendarView.vala"
			_tmp2_ = TRUE;
#line 72 "../src/Widgets/Calendar/CalendarView.vala"
			while (TRUE) {
#line 322 "CalendarView.c"
				WidgetsCalendarCalendarDay* item = NULL;
				GeeArrayList* _tmp4_;
				gpointer _tmp5_;
				WidgetsCalendarCalendarDay* _tmp6_;
				WidgetsCalendarCalendarDay* _tmp7_;
				WidgetsCalendarCalendarDay* _tmp8_;
				WidgetsCalendarCalendarDay* _tmp9_;
				GtkStyleContext* _tmp10_;
				gboolean _tmp11_ = FALSE;
#line 72 "../src/Widgets/Calendar/CalendarView.vala"
				if (!_tmp2_) {
#line 334 "CalendarView.c"
					gint _tmp3_;
#line 72 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp3_ = i;
#line 72 "../src/Widgets/Calendar/CalendarView.vala"
					i = _tmp3_ + 1;
#line 340 "CalendarView.c"
				}
#line 72 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp2_ = FALSE;
#line 72 "../src/Widgets/Calendar/CalendarView.vala"
				if (!(i < 42)) {
#line 72 "../src/Widgets/Calendar/CalendarView.vala"
					break;
#line 348 "CalendarView.c"
				}
#line 73 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp4_ = self->priv->days_arraylist;
#line 73 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp5_ = gee_abstract_list_get ((GeeAbstractList*) _tmp4_, i);
#line 73 "../src/Widgets/Calendar/CalendarView.vala"
				item = (WidgetsCalendarCalendarDay*) _tmp5_;
#line 74 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp6_ = item;
#line 74 "../src/Widgets/Calendar/CalendarView.vala"
				gtk_widget_set_sensitive ((GtkWidget*) _tmp6_, TRUE);
#line 75 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp7_ = item;
#line 75 "../src/Widgets/Calendar/CalendarView.vala"
				gtk_widget_set_visible ((GtkWidget*) _tmp7_, TRUE);
#line 76 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp8_ = item;
#line 76 "../src/Widgets/Calendar/CalendarView.vala"
				gtk_widget_set_no_show_all ((GtkWidget*) _tmp8_, FALSE);
#line 78 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp9_ = item;
#line 78 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
#line 78 "../src/Widgets/Calendar/CalendarView.vala"
				gtk_style_context_remove_class (_tmp10_, "calendar-today");
#line 80 "../src/Widgets/Calendar/CalendarView.vala"
				if (i < start_day) {
#line 80 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp11_ = TRUE;
#line 378 "CalendarView.c"
				} else {
#line 80 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp11_ = i >= (max_day + start_day);
#line 382 "CalendarView.c"
				}
#line 80 "../src/Widgets/Calendar/CalendarView.vala"
				if (_tmp11_) {
#line 386 "CalendarView.c"
					WidgetsCalendarCalendarDay* _tmp12_;
					WidgetsCalendarCalendarDay* _tmp13_;
#line 81 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp12_ = item;
#line 81 "../src/Widgets/Calendar/CalendarView.vala"
					gtk_widget_set_visible ((GtkWidget*) _tmp12_, FALSE);
#line 82 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp13_ = item;
#line 82 "../src/Widgets/Calendar/CalendarView.vala"
					gtk_widget_set_no_show_all ((GtkWidget*) _tmp13_, TRUE);
#line 397 "CalendarView.c"
				} else {
					gboolean _tmp16_ = FALSE;
					WidgetsCalendarCalendarDay* _tmp19_;
#line 84 "../src/Widgets/Calendar/CalendarView.vala"
					if (day_number < _current_day) {
#line 403 "CalendarView.c"
						gboolean _tmp14_ = FALSE;
#line 85 "../src/Widgets/Calendar/CalendarView.vala"
						if (block_past_days) {
#line 85 "../src/Widgets/Calendar/CalendarView.vala"
							_tmp14_ = is_current_month;
#line 409 "CalendarView.c"
						} else {
#line 85 "../src/Widgets/Calendar/CalendarView.vala"
							_tmp14_ = FALSE;
#line 413 "CalendarView.c"
						}
#line 85 "../src/Widgets/Calendar/CalendarView.vala"
						if (_tmp14_) {
#line 417 "CalendarView.c"
							WidgetsCalendarCalendarDay* _tmp15_;
#line 86 "../src/Widgets/Calendar/CalendarView.vala"
							_tmp15_ = item;
#line 86 "../src/Widgets/Calendar/CalendarView.vala"
							gtk_widget_set_sensitive ((GtkWidget*) _tmp15_, FALSE);
#line 423 "CalendarView.c"
						}
					}
#line 90 "../src/Widgets/Calendar/CalendarView.vala"
					if (_current_day != -1) {
#line 90 "../src/Widgets/Calendar/CalendarView.vala"
						_tmp16_ = (i + 1) == (_current_day + start_day);
#line 430 "CalendarView.c"
					} else {
#line 90 "../src/Widgets/Calendar/CalendarView.vala"
						_tmp16_ = FALSE;
#line 434 "CalendarView.c"
					}
#line 90 "../src/Widgets/Calendar/CalendarView.vala"
					if (_tmp16_) {
#line 91 "../src/Widgets/Calendar/CalendarView.vala"
						if (is_current_month) {
#line 440 "CalendarView.c"
							WidgetsCalendarCalendarDay* _tmp17_;
							GtkStyleContext* _tmp18_;
#line 92 "../src/Widgets/Calendar/CalendarView.vala"
							_tmp17_ = item;
#line 92 "../src/Widgets/Calendar/CalendarView.vala"
							_tmp18_ = gtk_widget_get_style_context ((GtkWidget*) _tmp17_);
#line 92 "../src/Widgets/Calendar/CalendarView.vala"
							gtk_style_context_add_class (_tmp18_, "calendar-today");
#line 449 "CalendarView.c"
						}
					}
#line 96 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp19_ = item;
#line 96 "../src/Widgets/Calendar/CalendarView.vala"
					widgets_calendar_calendar_day_set_day (_tmp19_, day_number);
#line 97 "../src/Widgets/Calendar/CalendarView.vala"
					day_number = day_number + 1;
#line 458 "CalendarView.c"
				}
#line 100 "../src/Widgets/Calendar/CalendarView.vala"
				if (block_past_days) {
#line 101 "../src/Widgets/Calendar/CalendarView.vala"
					if (is_current_month == FALSE) {
#line 464 "CalendarView.c"
						GDateTime* _tmp20_;
						GDateTime* _tmp21_;
						gboolean _tmp22_;
#line 102 "../src/Widgets/Calendar/CalendarView.vala"
						_tmp20_ = g_date_time_new_now_local ();
#line 102 "../src/Widgets/Calendar/CalendarView.vala"
						_tmp21_ = _tmp20_;
#line 102 "../src/Widgets/Calendar/CalendarView.vala"
						_tmp22_ = g_date_time_compare (month, _tmp21_) == -1;
#line 102 "../src/Widgets/Calendar/CalendarView.vala"
						_g_date_time_unref0 (_tmp21_);
#line 102 "../src/Widgets/Calendar/CalendarView.vala"
						if (_tmp22_) {
#line 478 "CalendarView.c"
							WidgetsCalendarCalendarDay* _tmp23_;
#line 103 "../src/Widgets/Calendar/CalendarView.vala"
							_tmp23_ = item;
#line 103 "../src/Widgets/Calendar/CalendarView.vala"
							gtk_widget_set_sensitive ((GtkWidget*) _tmp23_, FALSE);
#line 484 "CalendarView.c"
						}
					}
				}
#line 72 "../src/Widgets/Calendar/CalendarView.vala"
				_g_object_unref0 (item);
#line 490 "CalendarView.c"
			}
		}
	}
#line 109 "../src/Widgets/Calendar/CalendarView.vala"
	widgets_calendar_calendar_view_clear_style (self);
#line 110 "../src/Widgets/Calendar/CalendarView.vala"
	_tmp24_ = self->priv->days_grid;
#line 110 "../src/Widgets/Calendar/CalendarView.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp24_);
#line 500 "CalendarView.c"
}

static void
widgets_calendar_calendar_view_clear_style (WidgetsCalendarCalendarView* self)
{
#line 113 "../src/Widgets/Calendar/CalendarView.vala"
	g_return_if_fail (self != NULL);
#line 508 "CalendarView.c"
	{
		gint i = 0;
#line 114 "../src/Widgets/Calendar/CalendarView.vala"
		i = 0;
#line 513 "CalendarView.c"
		{
			gboolean _tmp0_ = FALSE;
#line 114 "../src/Widgets/Calendar/CalendarView.vala"
			_tmp0_ = TRUE;
#line 114 "../src/Widgets/Calendar/CalendarView.vala"
			while (TRUE) {
#line 520 "CalendarView.c"
				WidgetsCalendarCalendarDay* item = NULL;
				GeeArrayList* _tmp2_;
				gpointer _tmp3_;
				WidgetsCalendarCalendarDay* _tmp4_;
				GtkStyleContext* _tmp5_;
#line 114 "../src/Widgets/Calendar/CalendarView.vala"
				if (!_tmp0_) {
#line 528 "CalendarView.c"
					gint _tmp1_;
#line 114 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp1_ = i;
#line 114 "../src/Widgets/Calendar/CalendarView.vala"
					i = _tmp1_ + 1;
#line 534 "CalendarView.c"
				}
#line 114 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp0_ = FALSE;
#line 114 "../src/Widgets/Calendar/CalendarView.vala"
				if (!(i < 42)) {
#line 114 "../src/Widgets/Calendar/CalendarView.vala"
					break;
#line 542 "CalendarView.c"
				}
#line 115 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp2_ = self->priv->days_arraylist;
#line 115 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp3_ = gee_abstract_list_get ((GeeAbstractList*) _tmp2_, i);
#line 115 "../src/Widgets/Calendar/CalendarView.vala"
				item = (WidgetsCalendarCalendarDay*) _tmp3_;
#line 116 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp4_ = item;
#line 116 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) _tmp4_);
#line 116 "../src/Widgets/Calendar/CalendarView.vala"
				gtk_style_context_remove_class (_tmp5_, "calendar-day-selected");
#line 114 "../src/Widgets/Calendar/CalendarView.vala"
				_g_object_unref0 (item);
#line 558 "CalendarView.c"
			}
		}
	}
}

static void
widgets_calendar_calendar_view_day_selected_style (WidgetsCalendarCalendarView* self,
                                                   gint day)
{
#line 119 "../src/Widgets/Calendar/CalendarView.vala"
	g_return_if_fail (self != NULL);
#line 120 "../src/Widgets/Calendar/CalendarView.vala"
	g_signal_emit (self, widgets_calendar_calendar_view_signals[WIDGETS_CALENDAR_CALENDAR_VIEW_DAY_SELECTED_SIGNAL], 0, day);
#line 572 "CalendarView.c"
	{
		gint i = 0;
#line 122 "../src/Widgets/Calendar/CalendarView.vala"
		i = 0;
#line 577 "CalendarView.c"
		{
			gboolean _tmp0_ = FALSE;
#line 122 "../src/Widgets/Calendar/CalendarView.vala"
			_tmp0_ = TRUE;
#line 122 "../src/Widgets/Calendar/CalendarView.vala"
			while (TRUE) {
#line 584 "CalendarView.c"
				WidgetsCalendarCalendarDay* day_item = NULL;
				GeeArrayList* _tmp2_;
				gpointer _tmp3_;
				WidgetsCalendarCalendarDay* _tmp4_;
				GtkStyleContext* _tmp5_;
#line 122 "../src/Widgets/Calendar/CalendarView.vala"
				if (!_tmp0_) {
#line 592 "CalendarView.c"
					gint _tmp1_;
#line 122 "../src/Widgets/Calendar/CalendarView.vala"
					_tmp1_ = i;
#line 122 "../src/Widgets/Calendar/CalendarView.vala"
					i = _tmp1_ + 1;
#line 598 "CalendarView.c"
				}
#line 122 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp0_ = FALSE;
#line 122 "../src/Widgets/Calendar/CalendarView.vala"
				if (!(i < 42)) {
#line 122 "../src/Widgets/Calendar/CalendarView.vala"
					break;
#line 606 "CalendarView.c"
				}
#line 123 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp2_ = self->priv->days_arraylist;
#line 123 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp3_ = gee_abstract_list_get ((GeeAbstractList*) _tmp2_, i);
#line 123 "../src/Widgets/Calendar/CalendarView.vala"
				day_item = (WidgetsCalendarCalendarDay*) _tmp3_;
#line 124 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp4_ = day_item;
#line 124 "../src/Widgets/Calendar/CalendarView.vala"
				_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) _tmp4_);
#line 124 "../src/Widgets/Calendar/CalendarView.vala"
				gtk_style_context_remove_class (_tmp5_, "calendar-day-selected");
#line 122 "../src/Widgets/Calendar/CalendarView.vala"
				_g_object_unref0 (day_item);
#line 622 "CalendarView.c"
			}
		}
	}
}

static void
widgets_calendar_calendar_view_class_init (WidgetsCalendarCalendarViewClass * klass,
                                           gpointer klass_data)
{
#line 22 "../src/Widgets/Calendar/CalendarView.vala"
	widgets_calendar_calendar_view_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Widgets/Calendar/CalendarView.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsCalendarCalendarView_private_offset);
#line 22 "../src/Widgets/Calendar/CalendarView.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_calendar_calendar_view_finalize;
#line 22 "../src/Widgets/Calendar/CalendarView.vala"
	widgets_calendar_calendar_view_signals[WIDGETS_CALENDAR_CALENDAR_VIEW_DAY_SELECTED_SIGNAL] = g_signal_new ("day-selected", WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
#line 640 "CalendarView.c"
}

static void
widgets_calendar_calendar_view_instance_init (WidgetsCalendarCalendarView * self,
                                              gpointer klass)
{
#line 22 "../src/Widgets/Calendar/CalendarView.vala"
	self->priv = widgets_calendar_calendar_view_get_instance_private (self);
#line 649 "CalendarView.c"
}

static void
widgets_calendar_calendar_view_finalize (GObject * obj)
{
	WidgetsCalendarCalendarView * self;
#line 22 "../src/Widgets/Calendar/CalendarView.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, WidgetsCalendarCalendarView);
#line 23 "../src/Widgets/Calendar/CalendarView.vala"
	_g_object_unref0 (self->priv->days_arraylist);
#line 24 "../src/Widgets/Calendar/CalendarView.vala"
	_g_object_unref0 (self->priv->days_grid);
#line 22 "../src/Widgets/Calendar/CalendarView.vala"
	G_OBJECT_CLASS (widgets_calendar_calendar_view_parent_class)->finalize (obj);
#line 664 "CalendarView.c"
}

static GType
widgets_calendar_calendar_view_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsCalendarCalendarViewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_calendar_calendar_view_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsCalendarCalendarView), 0, (GInstanceInitFunc) widgets_calendar_calendar_view_instance_init, NULL };
	GType widgets_calendar_calendar_view_type_id;
	widgets_calendar_calendar_view_type_id = g_type_register_static (gtk_box_get_type (), "WidgetsCalendarCalendarView", &g_define_type_info, 0);
	WidgetsCalendarCalendarView_private_offset = g_type_add_instance_private (widgets_calendar_calendar_view_type_id, sizeof (WidgetsCalendarCalendarViewPrivate));
	return widgets_calendar_calendar_view_type_id;
}

GType
widgets_calendar_calendar_view_get_type (void)
{
	static volatile gsize widgets_calendar_calendar_view_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_calendar_calendar_view_type_id__volatile)) {
		GType widgets_calendar_calendar_view_type_id;
		widgets_calendar_calendar_view_type_id = widgets_calendar_calendar_view_get_type_once ();
		g_once_init_leave (&widgets_calendar_calendar_view_type_id__volatile, widgets_calendar_calendar_view_type_id);
	}
	return widgets_calendar_calendar_view_type_id__volatile;
}

