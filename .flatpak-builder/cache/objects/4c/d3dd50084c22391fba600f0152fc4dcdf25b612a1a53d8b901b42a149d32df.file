/* ItemLabel.c generated by valac 0.50.10, the Vala compiler
 * generated from ItemLabel.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;
typedef struct _ObjectsBaseObjectPrivate ObjectsBaseObjectPrivate;

#define OBJECTS_TYPE_ITEM_LABEL (objects_item_label_get_type ())
#define OBJECTS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabel))
#define OBJECTS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))
#define OBJECTS_IS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_IS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_ITEM_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))

typedef struct _ObjectsItemLabel ObjectsItemLabel;
typedef struct _ObjectsItemLabelClass ObjectsItemLabelClass;
typedef struct _ObjectsItemLabelPrivate ObjectsItemLabelPrivate;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;
enum  {
	OBJECTS_ITEM_LABEL_0_PROPERTY,
	OBJECTS_ITEM_LABEL_ITEM_ID_PROPERTY,
	OBJECTS_ITEM_LABEL_LABEL_ID_PROPERTY,
	OBJECTS_ITEM_LABEL_LABEL_PROPERTY,
	OBJECTS_ITEM_LABEL_ITEM_PROPERTY,
	OBJECTS_ITEM_LABEL_NUM_PROPERTIES
};
static GParamSpec* objects_item_label_properties[OBJECTS_ITEM_LABEL_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

struct _ObjectsBaseObject {
	GObject parent_instance;
	ObjectsBaseObjectPrivate * priv;
};

struct _ObjectsBaseObjectClass {
	GObjectClass parent_class;
	gchar* (*get_update_json) (ObjectsBaseObject* self, const gchar* uuid, const gchar* temp_id);
	gchar* (*get_add_json) (ObjectsBaseObject* self, const gchar* temp_id, const gchar* uuid);
};

struct _ObjectsItemLabel {
	ObjectsBaseObject parent_instance;
	ObjectsItemLabelPrivate * priv;
};

struct _ObjectsItemLabelClass {
	ObjectsBaseObjectClass parent_class;
};

struct _ObjectsItemLabelPrivate {
	gint64 _item_id;
	gint64 _label_id;
	ObjectsLabel* _label;
	ObjectsItem* _item;
};

static gint ObjectsItemLabel_private_offset;
static gpointer objects_item_label_parent_class = NULL;
extern ServicesDatabase* planner_database;

GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItemLabel, g_object_unref)
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
#define CONSTANTS_INACTIVE 0
ObjectsItemLabel* objects_item_label_new (void);
ObjectsItemLabel* objects_item_label_construct (GType object_type);
ObjectsBaseObject* objects_base_object_new (void);
ObjectsBaseObject* objects_base_object_construct (GType object_type);
gint64 objects_item_label_get_item_id (ObjectsItemLabel* self);
void objects_item_label_set_item_id (ObjectsItemLabel* self,
                                     gint64 value);
gint64 objects_item_label_get_label_id (ObjectsItemLabel* self);
void objects_item_label_set_label_id (ObjectsItemLabel* self,
                                      gint64 value);
ObjectsLabel* objects_item_label_get_label (ObjectsItemLabel* self);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
ObjectsLabel* services_database_get_label (ServicesDatabase* self,
                                           gint64 id);
ObjectsItem* objects_item_label_get_item (ObjectsItemLabel* self);
ObjectsItem* services_database_get_item (ServicesDatabase* self,
                                         gint64 id);
static void objects_item_label_finalize (GObject * obj);
static GType objects_item_label_get_type_once (void);
static void _vala_objects_item_label_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec);
static void _vala_objects_item_label_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);

static inline gpointer
objects_item_label_get_instance_private (ObjectsItemLabel* self)
{
	return G_STRUCT_MEMBER_P (self, ObjectsItemLabel_private_offset);
}

ObjectsItemLabel*
objects_item_label_construct (GType object_type)
{
	ObjectsItemLabel * self = NULL;
#line 1 "../src/Objects/ItemLabel.vala"
	self = (ObjectsItemLabel*) objects_base_object_construct (object_type);
#line 1 "../src/Objects/ItemLabel.vala"
	return self;
#line 155 "ItemLabel.c"
}

ObjectsItemLabel*
objects_item_label_new (void)
{
#line 1 "../src/Objects/ItemLabel.vala"
	return objects_item_label_construct (OBJECTS_TYPE_ITEM_LABEL);
#line 163 "ItemLabel.c"
}

gint64
objects_item_label_get_item_id (ObjectsItemLabel* self)
{
	gint64 result;
#line 2 "../src/Objects/ItemLabel.vala"
	g_return_val_if_fail (self != NULL, 0LL);
#line 2 "../src/Objects/ItemLabel.vala"
	result = self->priv->_item_id;
#line 2 "../src/Objects/ItemLabel.vala"
	return result;
#line 176 "ItemLabel.c"
}

void
objects_item_label_set_item_id (ObjectsItemLabel* self,
                                gint64 value)
{
	gint64 old_value;
#line 2 "../src/Objects/ItemLabel.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Objects/ItemLabel.vala"
	old_value = objects_item_label_get_item_id (self);
#line 2 "../src/Objects/ItemLabel.vala"
	if (old_value != value) {
#line 2 "../src/Objects/ItemLabel.vala"
		self->priv->_item_id = value;
#line 2 "../src/Objects/ItemLabel.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_item_label_properties[OBJECTS_ITEM_LABEL_ITEM_ID_PROPERTY]);
#line 194 "ItemLabel.c"
	}
}

gint64
objects_item_label_get_label_id (ObjectsItemLabel* self)
{
	gint64 result;
#line 3 "../src/Objects/ItemLabel.vala"
	g_return_val_if_fail (self != NULL, 0LL);
#line 3 "../src/Objects/ItemLabel.vala"
	result = self->priv->_label_id;
#line 3 "../src/Objects/ItemLabel.vala"
	return result;
#line 208 "ItemLabel.c"
}

void
objects_item_label_set_label_id (ObjectsItemLabel* self,
                                 gint64 value)
{
	gint64 old_value;
#line 3 "../src/Objects/ItemLabel.vala"
	g_return_if_fail (self != NULL);
#line 3 "../src/Objects/ItemLabel.vala"
	old_value = objects_item_label_get_label_id (self);
#line 3 "../src/Objects/ItemLabel.vala"
	if (old_value != value) {
#line 3 "../src/Objects/ItemLabel.vala"
		self->priv->_label_id = value;
#line 3 "../src/Objects/ItemLabel.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_item_label_properties[OBJECTS_ITEM_LABEL_LABEL_ID_PROPERTY]);
#line 226 "ItemLabel.c"
	}
}

ObjectsLabel*
objects_item_label_get_label (ObjectsItemLabel* self)
{
	ObjectsLabel* result;
	ObjectsLabel* _tmp0_;
	ObjectsLabel* _tmp4_;
#line 7 "../src/Objects/ItemLabel.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 8 "../src/Objects/ItemLabel.vala"
	_tmp0_ = self->priv->_label;
#line 8 "../src/Objects/ItemLabel.vala"
	if (_tmp0_ == NULL) {
#line 242 "ItemLabel.c"
		ServicesDatabase* _tmp1_;
		gint64 _tmp2_;
		ObjectsLabel* _tmp3_;
#line 9 "../src/Objects/ItemLabel.vala"
		_tmp1_ = planner_database;
#line 9 "../src/Objects/ItemLabel.vala"
		_tmp2_ = self->priv->_label_id;
#line 9 "../src/Objects/ItemLabel.vala"
		_tmp3_ = services_database_get_label (_tmp1_, _tmp2_);
#line 9 "../src/Objects/ItemLabel.vala"
		_g_object_unref0 (self->priv->_label);
#line 9 "../src/Objects/ItemLabel.vala"
		self->priv->_label = _tmp3_;
#line 256 "ItemLabel.c"
	}
#line 11 "../src/Objects/ItemLabel.vala"
	_tmp4_ = self->priv->_label;
#line 11 "../src/Objects/ItemLabel.vala"
	result = _tmp4_;
#line 11 "../src/Objects/ItemLabel.vala"
	return result;
#line 264 "ItemLabel.c"
}

ObjectsItem*
objects_item_label_get_item (ObjectsItemLabel* self)
{
	ObjectsItem* result;
	ObjectsItem* _tmp0_;
	ObjectsItem* _tmp4_;
#line 17 "../src/Objects/ItemLabel.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 18 "../src/Objects/ItemLabel.vala"
	_tmp0_ = self->priv->_item;
#line 18 "../src/Objects/ItemLabel.vala"
	if (_tmp0_ == NULL) {
#line 279 "ItemLabel.c"
		ServicesDatabase* _tmp1_;
		gint64 _tmp2_;
		ObjectsItem* _tmp3_;
#line 19 "../src/Objects/ItemLabel.vala"
		_tmp1_ = planner_database;
#line 19 "../src/Objects/ItemLabel.vala"
		_tmp2_ = self->priv->_item_id;
#line 19 "../src/Objects/ItemLabel.vala"
		_tmp3_ = services_database_get_item (_tmp1_, _tmp2_);
#line 19 "../src/Objects/ItemLabel.vala"
		_g_object_unref0 (self->priv->_item);
#line 19 "../src/Objects/ItemLabel.vala"
		self->priv->_item = _tmp3_;
#line 293 "ItemLabel.c"
	}
#line 21 "../src/Objects/ItemLabel.vala"
	_tmp4_ = self->priv->_item;
#line 21 "../src/Objects/ItemLabel.vala"
	result = _tmp4_;
#line 21 "../src/Objects/ItemLabel.vala"
	return result;
#line 301 "ItemLabel.c"
}

static void
objects_item_label_class_init (ObjectsItemLabelClass * klass,
                               gpointer klass_data)
{
#line 1 "../src/Objects/ItemLabel.vala"
	objects_item_label_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Objects/ItemLabel.vala"
	g_type_class_adjust_private_offset (klass, &ObjectsItemLabel_private_offset);
#line 1 "../src/Objects/ItemLabel.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_objects_item_label_get_property;
#line 1 "../src/Objects/ItemLabel.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_objects_item_label_set_property;
#line 1 "../src/Objects/ItemLabel.vala"
	G_OBJECT_CLASS (klass)->finalize = objects_item_label_finalize;
#line 1 "../src/Objects/ItemLabel.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_ITEM_LABEL_ITEM_ID_PROPERTY, objects_item_label_properties[OBJECTS_ITEM_LABEL_ITEM_ID_PROPERTY] = g_param_spec_int64 ("item-id", "item-id", "item-id", G_MININT64, G_MAXINT64, (gint64) CONSTANTS_INACTIVE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1 "../src/Objects/ItemLabel.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_ITEM_LABEL_LABEL_ID_PROPERTY, objects_item_label_properties[OBJECTS_ITEM_LABEL_LABEL_ID_PROPERTY] = g_param_spec_int64 ("label-id", "label-id", "label-id", G_MININT64, G_MAXINT64, (gint64) CONSTANTS_INACTIVE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1 "../src/Objects/ItemLabel.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_ITEM_LABEL_LABEL_PROPERTY, objects_item_label_properties[OBJECTS_ITEM_LABEL_LABEL_PROPERTY] = g_param_spec_object ("label", "label", "label", OBJECTS_TYPE_LABEL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1 "../src/Objects/ItemLabel.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_ITEM_LABEL_ITEM_PROPERTY, objects_item_label_properties[OBJECTS_ITEM_LABEL_ITEM_PROPERTY] = g_param_spec_object ("item", "item", "item", OBJECTS_TYPE_ITEM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 326 "ItemLabel.c"
}

static void
objects_item_label_instance_init (ObjectsItemLabel * self,
                                  gpointer klass)
{
#line 1 "../src/Objects/ItemLabel.vala"
	self->priv = objects_item_label_get_instance_private (self);
#line 2 "../src/Objects/ItemLabel.vala"
	self->priv->_item_id = (gint64) CONSTANTS_INACTIVE;
#line 3 "../src/Objects/ItemLabel.vala"
	self->priv->_label_id = (gint64) CONSTANTS_INACTIVE;
#line 5 "../src/Objects/ItemLabel.vala"
	self->priv->_label = NULL;
#line 15 "../src/Objects/ItemLabel.vala"
	self->priv->_item = NULL;
#line 343 "ItemLabel.c"
}

static void
objects_item_label_finalize (GObject * obj)
{
	ObjectsItemLabel * self;
#line 1 "../src/Objects/ItemLabel.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabel);
#line 5 "../src/Objects/ItemLabel.vala"
	_g_object_unref0 (self->priv->_label);
#line 15 "../src/Objects/ItemLabel.vala"
	_g_object_unref0 (self->priv->_item);
#line 1 "../src/Objects/ItemLabel.vala"
	G_OBJECT_CLASS (objects_item_label_parent_class)->finalize (obj);
#line 358 "ItemLabel.c"
}

static GType
objects_item_label_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ObjectsItemLabelClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_item_label_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsItemLabel), 0, (GInstanceInitFunc) objects_item_label_instance_init, NULL };
	GType objects_item_label_type_id;
	objects_item_label_type_id = g_type_register_static (OBJECTS_TYPE_BASE_OBJECT, "ObjectsItemLabel", &g_define_type_info, 0);
	ObjectsItemLabel_private_offset = g_type_add_instance_private (objects_item_label_type_id, sizeof (ObjectsItemLabelPrivate));
	return objects_item_label_type_id;
}

GType
objects_item_label_get_type (void)
{
	static volatile gsize objects_item_label_type_id__volatile = 0;
	if (g_once_init_enter (&objects_item_label_type_id__volatile)) {
		GType objects_item_label_type_id;
		objects_item_label_type_id = objects_item_label_get_type_once ();
		g_once_init_leave (&objects_item_label_type_id__volatile, objects_item_label_type_id);
	}
	return objects_item_label_type_id__volatile;
}

static void
_vala_objects_item_label_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec)
{
	ObjectsItemLabel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabel);
#line 1 "../src/Objects/ItemLabel.vala"
	switch (property_id) {
#line 1 "../src/Objects/ItemLabel.vala"
		case OBJECTS_ITEM_LABEL_ITEM_ID_PROPERTY:
#line 1 "../src/Objects/ItemLabel.vala"
		g_value_set_int64 (value, objects_item_label_get_item_id (self));
#line 1 "../src/Objects/ItemLabel.vala"
		break;
#line 1 "../src/Objects/ItemLabel.vala"
		case OBJECTS_ITEM_LABEL_LABEL_ID_PROPERTY:
#line 1 "../src/Objects/ItemLabel.vala"
		g_value_set_int64 (value, objects_item_label_get_label_id (self));
#line 1 "../src/Objects/ItemLabel.vala"
		break;
#line 1 "../src/Objects/ItemLabel.vala"
		case OBJECTS_ITEM_LABEL_LABEL_PROPERTY:
#line 1 "../src/Objects/ItemLabel.vala"
		g_value_set_object (value, objects_item_label_get_label (self));
#line 1 "../src/Objects/ItemLabel.vala"
		break;
#line 1 "../src/Objects/ItemLabel.vala"
		case OBJECTS_ITEM_LABEL_ITEM_PROPERTY:
#line 1 "../src/Objects/ItemLabel.vala"
		g_value_set_object (value, objects_item_label_get_item (self));
#line 1 "../src/Objects/ItemLabel.vala"
		break;
#line 417 "ItemLabel.c"
		default:
#line 1 "../src/Objects/ItemLabel.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Objects/ItemLabel.vala"
		break;
#line 423 "ItemLabel.c"
	}
}

static void
_vala_objects_item_label_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	ObjectsItemLabel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabel);
#line 1 "../src/Objects/ItemLabel.vala"
	switch (property_id) {
#line 1 "../src/Objects/ItemLabel.vala"
		case OBJECTS_ITEM_LABEL_ITEM_ID_PROPERTY:
#line 1 "../src/Objects/ItemLabel.vala"
		objects_item_label_set_item_id (self, g_value_get_int64 (value));
#line 1 "../src/Objects/ItemLabel.vala"
		break;
#line 1 "../src/Objects/ItemLabel.vala"
		case OBJECTS_ITEM_LABEL_LABEL_ID_PROPERTY:
#line 1 "../src/Objects/ItemLabel.vala"
		objects_item_label_set_label_id (self, g_value_get_int64 (value));
#line 1 "../src/Objects/ItemLabel.vala"
		break;
#line 449 "ItemLabel.c"
		default:
#line 1 "../src/Objects/ItemLabel.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Objects/ItemLabel.vala"
		break;
#line 455 "ItemLabel.c"
	}
}

