/* ProjectButton.c generated by valac 0.50.10, the Vala compiler
 * generated from ProjectButton.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <granite.h>
#include <handy.h>

#define WIDGETS_TYPE_PROJECT_BUTTON (widgets_project_button_get_type ())
#define WIDGETS_PROJECT_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_PROJECT_BUTTON, WidgetsProjectButton))
#define WIDGETS_PROJECT_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_PROJECT_BUTTON, WidgetsProjectButtonClass))
#define WIDGETS_IS_PROJECT_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_PROJECT_BUTTON))
#define WIDGETS_IS_PROJECT_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_PROJECT_BUTTON))
#define WIDGETS_PROJECT_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_PROJECT_BUTTON, WidgetsProjectButtonClass))

typedef struct _WidgetsProjectButton WidgetsProjectButton;
typedef struct _WidgetsProjectButtonClass WidgetsProjectButtonClass;
typedef struct _WidgetsProjectButtonPrivate WidgetsProjectButtonPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define WIDGETS_TYPE_ICON_COLOR_PROJECT (widgets_icon_color_project_get_type ())
#define WIDGETS_ICON_COLOR_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ICON_COLOR_PROJECT, WidgetsIconColorProject))
#define WIDGETS_ICON_COLOR_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ICON_COLOR_PROJECT, WidgetsIconColorProjectClass))
#define WIDGETS_IS_ICON_COLOR_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ICON_COLOR_PROJECT))
#define WIDGETS_IS_ICON_COLOR_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ICON_COLOR_PROJECT))
#define WIDGETS_ICON_COLOR_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ICON_COLOR_PROJECT, WidgetsIconColorProjectClass))

typedef struct _WidgetsIconColorProject WidgetsIconColorProject;
typedef struct _WidgetsIconColorProjectClass WidgetsIconColorProjectClass;
enum  {
	WIDGETS_PROJECT_BUTTON_0_PROPERTY,
	WIDGETS_PROJECT_BUTTON_ITEM_PROPERTY,
	WIDGETS_PROJECT_BUTTON_NUM_PROPERTIES
};
static GParamSpec* widgets_project_button_properties[WIDGETS_PROJECT_BUTTON_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_SECTION (objects_section_get_type ())
#define OBJECTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_SECTION, ObjectsSection))
#define OBJECTS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_SECTION, ObjectsSectionClass))
#define OBJECTS_IS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_SECTION))
#define OBJECTS_IS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_SECTION))
#define OBJECTS_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_SECTION, ObjectsSectionClass))

typedef struct _ObjectsSection ObjectsSection;
typedef struct _ObjectsSectionClass ObjectsSectionClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER (dialogs_project_picker_project_picker_get_type ())
#define DIALOGS_PROJECT_PICKER_PROJECT_PICKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, DialogsProjectPickerProjectPicker))
#define DIALOGS_PROJECT_PICKER_PROJECT_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, DialogsProjectPickerProjectPickerClass))
#define DIALOGS_PROJECT_PICKER_IS_PROJECT_PICKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER))
#define DIALOGS_PROJECT_PICKER_IS_PROJECT_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER))
#define DIALOGS_PROJECT_PICKER_PROJECT_PICKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_PROJECT_PICKER_TYPE_PROJECT_PICKER, DialogsProjectPickerProjectPickerClass))

typedef struct _DialogsProjectPickerProjectPicker DialogsProjectPickerProjectPicker;
typedef struct _DialogsProjectPickerProjectPickerClass DialogsProjectPickerProjectPickerClass;
enum  {
	WIDGETS_PROJECT_BUTTON_CHANGED_SIGNAL,
	WIDGETS_PROJECT_BUTTON_DIALOG_OPEN_SIGNAL,
	WIDGETS_PROJECT_BUTTON_NUM_SIGNALS
};
static guint widgets_project_button_signals[WIDGETS_PROJECT_BUTTON_NUM_SIGNALS] = {0};

struct _WidgetsProjectButton {
	GtkButton parent_instance;
	WidgetsProjectButtonPrivate * priv;
};

struct _WidgetsProjectButtonClass {
	GtkButtonClass parent_class;
};

struct _WidgetsProjectButtonPrivate {
	ObjectsItem* _item;
	GtkLabel* name_label;
	WidgetsIconColorProject* icon_project;
};

static gint WidgetsProjectButton_private_offset;
static gpointer widgets_project_button_parent_class = NULL;

GType widgets_project_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsProjectButton, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
GType widgets_icon_color_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsIconColorProject, g_object_unref)
WidgetsProjectButton* widgets_project_button_new (ObjectsItem* item);
WidgetsProjectButton* widgets_project_button_construct (GType object_type,
                                                        ObjectsItem* item);
void widgets_project_button_update_request (WidgetsProjectButton* self);
ObjectsItem* widgets_project_button_get_item (WidgetsProjectButton* self);
gboolean objects_item_get_has_section (ObjectsItem* self);
GType objects_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsSection, g_object_unref)
ObjectsSection* objects_item_get_section (ObjectsItem* self);
const gchar* objects_section_get_short_name (ObjectsSection* self);
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
ObjectsProject* objects_item_get_project (ObjectsItem* self);
const gchar* objects_project_get_short_name (ObjectsProject* self);
void widgets_icon_color_project_update_request (WidgetsIconColorProject* self);
static void widgets_project_button_set_item (WidgetsProjectButton* self,
                                      ObjectsItem* value);
static void g_cclosure_user_marshal_VOID__INT64_INT64 (GClosure * closure,
                                                GValue * return_value,
                                                guint n_param_values,
                                                const GValue * param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
static GObject * widgets_project_button_constructor (GType type,
                                              guint n_construct_properties,
                                              GObjectConstructParam * construct_properties);
WidgetsIconColorProject* widgets_icon_color_project_new (gint pixel_size);
WidgetsIconColorProject* widgets_icon_color_project_construct (GType object_type,
                                                               gint pixel_size);
void widgets_icon_color_project_set_project (WidgetsIconColorProject* self,
                                             ObjectsProject* value);
static void _widgets_project_button___lambda38_ (WidgetsProjectButton* self);
static void __widgets_project_button___lambda38__objects_base_object_updated (ObjectsBaseObject* _sender,
                                                                       gpointer self);
static void _widgets_project_button___lambda39_ (WidgetsProjectButton* self);
GType dialogs_project_picker_project_picker_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsProjectPickerProjectPicker, g_object_unref)
DialogsProjectPickerProjectPicker* dialogs_project_picker_project_picker_new (void);
DialogsProjectPickerProjectPicker* dialogs_project_picker_project_picker_construct (GType object_type);
void dialogs_project_picker_project_picker_set_section (DialogsProjectPickerProjectPicker* self,
                                                        ObjectsSection* value);
void dialogs_project_picker_project_picker_set_project (DialogsProjectPickerProjectPicker* self,
                                                        ObjectsProject* value);
void dialogs_project_picker_project_picker_popup (DialogsProjectPickerProjectPicker* self);
static void __lambda52_ (WidgetsProjectButton* self,
                  gint64 project_id,
                  gint64 section_id);
static void ___lambda52__dialogs_project_picker_project_picker_changed (DialogsProjectPickerProjectPicker* _sender,
                                                                 gint64 project_id,
                                                                 gint64 section_id,
                                                                 gpointer self);
static void __lambda53_ (WidgetsProjectButton* self);
static void ___lambda53__gtk_widget_destroy (GtkWidget* _sender,
                                      gpointer self);
static void __widgets_project_button___lambda39__gtk_button_clicked (GtkButton* _sender,
                                                              gpointer self);
static void widgets_project_button_finalize (GObject * obj);
static GType widgets_project_button_get_type_once (void);
static void _vala_widgets_project_button_get_property (GObject * object,
                                                guint property_id,
                                                GValue * value,
                                                GParamSpec * pspec);
static void _vala_widgets_project_button_set_property (GObject * object,
                                                guint property_id,
                                                const GValue * value,
                                                GParamSpec * pspec);

static inline gpointer
widgets_project_button_get_instance_private (WidgetsProjectButton* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsProjectButton_private_offset);
}

WidgetsProjectButton*
widgets_project_button_construct (GType object_type,
                                  ObjectsItem* item)
{
	WidgetsProjectButton * self = NULL;
#line 10 "../src/Widgets/ProjectButton.vala"
	g_return_val_if_fail (item != NULL, NULL);
#line 11 "../src/Widgets/ProjectButton.vala"
	self = (WidgetsProjectButton*) g_object_new (object_type, "item", item, "can-focus", FALSE, NULL);
#line 10 "../src/Widgets/ProjectButton.vala"
	return self;
#line 208 "ProjectButton.c"
}

WidgetsProjectButton*
widgets_project_button_new (ObjectsItem* item)
{
#line 10 "../src/Widgets/ProjectButton.vala"
	return widgets_project_button_construct (WIDGETS_TYPE_PROJECT_BUTTON, item);
#line 216 "ProjectButton.c"
}

void
widgets_project_button_update_request (WidgetsProjectButton* self)
{
	gchar* section_name = NULL;
	gchar* _tmp0_;
	ObjectsItem* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	GtkLabel* _tmp10_;
	ObjectsItem* _tmp11_;
	ObjectsProject* _tmp12_;
	ObjectsProject* _tmp13_;
	const gchar* _tmp14_;
	const gchar* _tmp15_;
	const gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	WidgetsIconColorProject* _tmp19_;
#line 61 "../src/Widgets/ProjectButton.vala"
	g_return_if_fail (self != NULL);
#line 62 "../src/Widgets/ProjectButton.vala"
	_tmp0_ = g_strdup ("");
#line 62 "../src/Widgets/ProjectButton.vala"
	section_name = _tmp0_;
#line 63 "../src/Widgets/ProjectButton.vala"
	_tmp1_ = self->priv->_item;
#line 63 "../src/Widgets/ProjectButton.vala"
	_tmp2_ = objects_item_get_has_section (_tmp1_);
#line 63 "../src/Widgets/ProjectButton.vala"
	_tmp3_ = _tmp2_;
#line 63 "../src/Widgets/ProjectButton.vala"
	if (_tmp3_) {
#line 251 "ProjectButton.c"
		ObjectsItem* _tmp4_;
		ObjectsSection* _tmp5_;
		ObjectsSection* _tmp6_;
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		gchar* _tmp9_;
#line 64 "../src/Widgets/ProjectButton.vala"
		_tmp4_ = self->priv->_item;
#line 64 "../src/Widgets/ProjectButton.vala"
		_tmp5_ = objects_item_get_section (_tmp4_);
#line 64 "../src/Widgets/ProjectButton.vala"
		_tmp6_ = _tmp5_;
#line 64 "../src/Widgets/ProjectButton.vala"
		_tmp7_ = objects_section_get_short_name (_tmp6_);
#line 64 "../src/Widgets/ProjectButton.vala"
		_tmp8_ = _tmp7_;
#line 64 "../src/Widgets/ProjectButton.vala"
		_tmp9_ = g_strdup_printf ("/ %s", _tmp8_);
#line 64 "../src/Widgets/ProjectButton.vala"
		_g_free0 (section_name);
#line 64 "../src/Widgets/ProjectButton.vala"
		section_name = _tmp9_;
#line 274 "ProjectButton.c"
	}
#line 67 "../src/Widgets/ProjectButton.vala"
	_tmp10_ = self->priv->name_label;
#line 67 "../src/Widgets/ProjectButton.vala"
	_tmp11_ = self->priv->_item;
#line 67 "../src/Widgets/ProjectButton.vala"
	_tmp12_ = objects_item_get_project (_tmp11_);
#line 67 "../src/Widgets/ProjectButton.vala"
	_tmp13_ = _tmp12_;
#line 67 "../src/Widgets/ProjectButton.vala"
	_tmp14_ = objects_project_get_short_name (_tmp13_);
#line 67 "../src/Widgets/ProjectButton.vala"
	_tmp15_ = _tmp14_;
#line 67 "../src/Widgets/ProjectButton.vala"
	_tmp16_ = section_name;
#line 67 "../src/Widgets/ProjectButton.vala"
	_tmp17_ = g_strdup_printf ("%s %s", _tmp15_, _tmp16_);
#line 67 "../src/Widgets/ProjectButton.vala"
	_tmp18_ = _tmp17_;
#line 67 "../src/Widgets/ProjectButton.vala"
	gtk_label_set_label (_tmp10_, _tmp18_);
#line 67 "../src/Widgets/ProjectButton.vala"
	_g_free0 (_tmp18_);
#line 68 "../src/Widgets/ProjectButton.vala"
	_tmp19_ = self->priv->icon_project;
#line 68 "../src/Widgets/ProjectButton.vala"
	widgets_icon_color_project_update_request (_tmp19_);
#line 61 "../src/Widgets/ProjectButton.vala"
	_g_free0 (section_name);
#line 304 "ProjectButton.c"
}

ObjectsItem*
widgets_project_button_get_item (WidgetsProjectButton* self)
{
	ObjectsItem* result;
	ObjectsItem* _tmp0_;
#line 2 "../src/Widgets/ProjectButton.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Widgets/ProjectButton.vala"
	_tmp0_ = self->priv->_item;
#line 2 "../src/Widgets/ProjectButton.vala"
	result = _tmp0_;
#line 2 "../src/Widgets/ProjectButton.vala"
	return result;
#line 320 "ProjectButton.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 2 "../src/Widgets/ProjectButton.vala"
	return self ? g_object_ref (self) : NULL;
#line 328 "ProjectButton.c"
}

static void
widgets_project_button_set_item (WidgetsProjectButton* self,
                                 ObjectsItem* value)
{
	ObjectsItem* old_value;
#line 2 "../src/Widgets/ProjectButton.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Widgets/ProjectButton.vala"
	old_value = widgets_project_button_get_item (self);
#line 2 "../src/Widgets/ProjectButton.vala"
	if (old_value != value) {
#line 342 "ProjectButton.c"
		ObjectsItem* _tmp0_;
#line 2 "../src/Widgets/ProjectButton.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 2 "../src/Widgets/ProjectButton.vala"
		_g_object_unref0 (self->priv->_item);
#line 2 "../src/Widgets/ProjectButton.vala"
		self->priv->_item = _tmp0_;
#line 2 "../src/Widgets/ProjectButton.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_project_button_properties[WIDGETS_PROJECT_BUTTON_ITEM_PROPERTY]);
#line 352 "ProjectButton.c"
	}
}

static void
g_cclosure_user_marshal_VOID__INT64_INT64 (GClosure * closure,
                                           GValue * return_value,
                                           guint n_param_values,
                                           const GValue * param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__INT64_INT64) (gpointer data1, gint64 arg_1, gint64 arg_2, gpointer data2);
	register GMarshalFunc_VOID__INT64_INT64 callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 1 "../src/Widgets/ProjectButton.vala"
	g_return_if_fail (n_param_values == 3);
#line 1 "../src/Widgets/ProjectButton.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 1 "../src/Widgets/ProjectButton.vala"
		data1 = closure->data;
#line 1 "../src/Widgets/ProjectButton.vala"
		data2 = param_values->data[0].v_pointer;
#line 378 "ProjectButton.c"
	} else {
#line 1 "../src/Widgets/ProjectButton.vala"
		data1 = param_values->data[0].v_pointer;
#line 1 "../src/Widgets/ProjectButton.vala"
		data2 = closure->data;
#line 384 "ProjectButton.c"
	}
#line 1 "../src/Widgets/ProjectButton.vala"
	callback = (GMarshalFunc_VOID__INT64_INT64) (marshal_data ? marshal_data : cc->callback);
#line 1 "../src/Widgets/ProjectButton.vala"
	callback (data1, g_value_get_int64 (param_values + 1), g_value_get_int64 (param_values + 2), data2);
#line 390 "ProjectButton.c"
}

static void
_widgets_project_button___lambda38_ (WidgetsProjectButton* self)
{
#line 36 "../src/Widgets/ProjectButton.vala"
	widgets_project_button_update_request (self);
#line 398 "ProjectButton.c"
}

static void
__widgets_project_button___lambda38__objects_base_object_updated (ObjectsBaseObject* _sender,
                                                                  gpointer self)
{
#line 35 "../src/Widgets/ProjectButton.vala"
	_widgets_project_button___lambda38_ ((WidgetsProjectButton*) self);
#line 407 "ProjectButton.c"
}

static void
__lambda52_ (WidgetsProjectButton* self,
             gint64 project_id,
             gint64 section_id)
{
#line 52 "../src/Widgets/ProjectButton.vala"
	g_signal_emit (self, widgets_project_button_signals[WIDGETS_PROJECT_BUTTON_CHANGED_SIGNAL], 0, project_id, section_id);
#line 417 "ProjectButton.c"
}

static void
___lambda52__dialogs_project_picker_project_picker_changed (DialogsProjectPickerProjectPicker* _sender,
                                                            gint64 project_id,
                                                            gint64 section_id,
                                                            gpointer self)
{
#line 51 "../src/Widgets/ProjectButton.vala"
	__lambda52_ ((WidgetsProjectButton*) self, project_id, section_id);
#line 428 "ProjectButton.c"
}

static void
__lambda53_ (WidgetsProjectButton* self)
{
#line 56 "../src/Widgets/ProjectButton.vala"
	g_signal_emit (self, widgets_project_button_signals[WIDGETS_PROJECT_BUTTON_DIALOG_OPEN_SIGNAL], 0, FALSE);
#line 436 "ProjectButton.c"
}

static void
___lambda53__gtk_widget_destroy (GtkWidget* _sender,
                                 gpointer self)
{
#line 55 "../src/Widgets/ProjectButton.vala"
	__lambda53_ ((WidgetsProjectButton*) self);
#line 445 "ProjectButton.c"
}

static void
_widgets_project_button___lambda39_ (WidgetsProjectButton* self)
{
	DialogsProjectPickerProjectPicker* picker = NULL;
	DialogsProjectPickerProjectPicker* _tmp0_;
	ObjectsItem* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	DialogsProjectPickerProjectPicker* _tmp12_;
	DialogsProjectPickerProjectPicker* _tmp13_;
	DialogsProjectPickerProjectPicker* _tmp14_;
#line 40 "../src/Widgets/ProjectButton.vala"
	_tmp0_ = dialogs_project_picker_project_picker_new ();
#line 40 "../src/Widgets/ProjectButton.vala"
	g_object_ref_sink (_tmp0_);
#line 40 "../src/Widgets/ProjectButton.vala"
	picker = _tmp0_;
#line 42 "../src/Widgets/ProjectButton.vala"
	_tmp1_ = self->priv->_item;
#line 42 "../src/Widgets/ProjectButton.vala"
	_tmp2_ = objects_item_get_has_section (_tmp1_);
#line 42 "../src/Widgets/ProjectButton.vala"
	_tmp3_ = _tmp2_;
#line 42 "../src/Widgets/ProjectButton.vala"
	if (_tmp3_) {
#line 473 "ProjectButton.c"
		DialogsProjectPickerProjectPicker* _tmp4_;
		ObjectsItem* _tmp5_;
		ObjectsSection* _tmp6_;
		ObjectsSection* _tmp7_;
#line 43 "../src/Widgets/ProjectButton.vala"
		_tmp4_ = picker;
#line 43 "../src/Widgets/ProjectButton.vala"
		_tmp5_ = self->priv->_item;
#line 43 "../src/Widgets/ProjectButton.vala"
		_tmp6_ = objects_item_get_section (_tmp5_);
#line 43 "../src/Widgets/ProjectButton.vala"
		_tmp7_ = _tmp6_;
#line 43 "../src/Widgets/ProjectButton.vala"
		dialogs_project_picker_project_picker_set_section (_tmp4_, _tmp7_);
#line 488 "ProjectButton.c"
	} else {
		DialogsProjectPickerProjectPicker* _tmp8_;
		ObjectsItem* _tmp9_;
		ObjectsProject* _tmp10_;
		ObjectsProject* _tmp11_;
#line 45 "../src/Widgets/ProjectButton.vala"
		_tmp8_ = picker;
#line 45 "../src/Widgets/ProjectButton.vala"
		_tmp9_ = self->priv->_item;
#line 45 "../src/Widgets/ProjectButton.vala"
		_tmp10_ = objects_item_get_project (_tmp9_);
#line 45 "../src/Widgets/ProjectButton.vala"
		_tmp11_ = _tmp10_;
#line 45 "../src/Widgets/ProjectButton.vala"
		dialogs_project_picker_project_picker_set_project (_tmp8_, _tmp11_);
#line 504 "ProjectButton.c"
	}
#line 48 "../src/Widgets/ProjectButton.vala"
	g_signal_emit (self, widgets_project_button_signals[WIDGETS_PROJECT_BUTTON_DIALOG_OPEN_SIGNAL], 0, TRUE);
#line 49 "../src/Widgets/ProjectButton.vala"
	_tmp12_ = picker;
#line 49 "../src/Widgets/ProjectButton.vala"
	dialogs_project_picker_project_picker_popup (_tmp12_);
#line 51 "../src/Widgets/ProjectButton.vala"
	_tmp13_ = picker;
#line 51 "../src/Widgets/ProjectButton.vala"
	g_signal_connect_object (_tmp13_, "changed", (GCallback) ___lambda52__dialogs_project_picker_project_picker_changed, self, 0);
#line 55 "../src/Widgets/ProjectButton.vala"
	_tmp14_ = picker;
#line 55 "../src/Widgets/ProjectButton.vala"
	g_signal_connect_object ((GtkWidget*) _tmp14_, "destroy", (GCallback) ___lambda53__gtk_widget_destroy, self, 0);
#line 39 "../src/Widgets/ProjectButton.vala"
	_g_object_unref0 (picker);
#line 522 "ProjectButton.c"
}

static void
__widgets_project_button___lambda39__gtk_button_clicked (GtkButton* _sender,
                                                         gpointer self)
{
#line 39 "../src/Widgets/ProjectButton.vala"
	_widgets_project_button___lambda39_ ((WidgetsProjectButton*) self);
#line 531 "ProjectButton.c"
}

static GObject *
widgets_project_button_constructor (GType type,
                                    guint n_construct_properties,
                                    GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsProjectButton * self;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	WidgetsIconColorProject* _tmp2_;
	WidgetsIconColorProject* _tmp3_;
	ObjectsItem* _tmp4_;
	ObjectsProject* _tmp5_;
	ObjectsProject* _tmp6_;
	GtkLabel* _tmp7_;
	GtkGrid* projectbutton_grid = NULL;
	GtkGrid* _tmp8_ = NULL;
	GtkGrid* _tmp9_;
	WidgetsIconColorProject* _tmp10_;
	GtkGrid* _tmp11_;
	GtkLabel* _tmp12_;
	GtkGrid* _tmp13_;
	ObjectsItem* _tmp14_;
	ObjectsProject* _tmp15_;
	ObjectsProject* _tmp16_;
#line 17 "../src/Widgets/ProjectButton.vala"
	parent_class = G_OBJECT_CLASS (widgets_project_button_parent_class);
#line 17 "../src/Widgets/ProjectButton.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 17 "../src/Widgets/ProjectButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_PROJECT_BUTTON, WidgetsProjectButton);
#line 18 "../src/Widgets/ProjectButton.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 18 "../src/Widgets/ProjectButton.vala"
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_FLAT);
#line 19 "../src/Widgets/ProjectButton.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 19 "../src/Widgets/ProjectButton.vala"
	gtk_style_context_add_class (_tmp1_, GRANITE_STYLE_CLASS_SMALL_LABEL);
#line 21 "../src/Widgets/ProjectButton.vala"
	_tmp2_ = widgets_icon_color_project_new (13);
#line 21 "../src/Widgets/ProjectButton.vala"
	g_object_ref_sink (_tmp2_);
#line 21 "../src/Widgets/ProjectButton.vala"
	_g_object_unref0 (self->priv->icon_project);
#line 21 "../src/Widgets/ProjectButton.vala"
	self->priv->icon_project = _tmp2_;
#line 22 "../src/Widgets/ProjectButton.vala"
	_tmp3_ = self->priv->icon_project;
#line 22 "../src/Widgets/ProjectButton.vala"
	_tmp4_ = self->priv->_item;
#line 22 "../src/Widgets/ProjectButton.vala"
	_tmp5_ = objects_item_get_project (_tmp4_);
#line 22 "../src/Widgets/ProjectButton.vala"
	_tmp6_ = _tmp5_;
#line 22 "../src/Widgets/ProjectButton.vala"
	widgets_icon_color_project_set_project (_tmp3_, _tmp6_);
#line 23 "../src/Widgets/ProjectButton.vala"
	_tmp7_ = (GtkLabel*) gtk_label_new (NULL);
#line 23 "../src/Widgets/ProjectButton.vala"
	g_object_ref_sink (_tmp7_);
#line 23 "../src/Widgets/ProjectButton.vala"
	_g_object_unref0 (self->priv->name_label);
#line 23 "../src/Widgets/ProjectButton.vala"
	self->priv->name_label = _tmp7_;
#line 25 "../src/Widgets/ProjectButton.vala"
	_tmp8_ = (GtkGrid*) gtk_grid_new ();
#line 25 "../src/Widgets/ProjectButton.vala"
	gtk_grid_set_column_spacing (_tmp8_, 6);
#line 25 "../src/Widgets/ProjectButton.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp8_, GTK_ALIGN_CENTER);
#line 25 "../src/Widgets/ProjectButton.vala"
	g_object_ref_sink (_tmp8_);
#line 25 "../src/Widgets/ProjectButton.vala"
	projectbutton_grid = _tmp8_;
#line 29 "../src/Widgets/ProjectButton.vala"
	_tmp9_ = projectbutton_grid;
#line 29 "../src/Widgets/ProjectButton.vala"
	_tmp10_ = self->priv->icon_project;
#line 29 "../src/Widgets/ProjectButton.vala"
	gtk_container_add ((GtkContainer*) _tmp9_, (GtkWidget*) _tmp10_);
#line 30 "../src/Widgets/ProjectButton.vala"
	_tmp11_ = projectbutton_grid;
#line 30 "../src/Widgets/ProjectButton.vala"
	_tmp12_ = self->priv->name_label;
#line 30 "../src/Widgets/ProjectButton.vala"
	gtk_container_add ((GtkContainer*) _tmp11_, (GtkWidget*) _tmp12_);
#line 32 "../src/Widgets/ProjectButton.vala"
	_tmp13_ = projectbutton_grid;
#line 32 "../src/Widgets/ProjectButton.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp13_);
#line 33 "../src/Widgets/ProjectButton.vala"
	widgets_project_button_update_request (self);
#line 35 "../src/Widgets/ProjectButton.vala"
	_tmp14_ = self->priv->_item;
#line 35 "../src/Widgets/ProjectButton.vala"
	_tmp15_ = objects_item_get_project (_tmp14_);
#line 35 "../src/Widgets/ProjectButton.vala"
	_tmp16_ = _tmp15_;
#line 35 "../src/Widgets/ProjectButton.vala"
	g_signal_connect_object ((ObjectsBaseObject*) _tmp16_, "updated", (GCallback) __widgets_project_button___lambda38__objects_base_object_updated, self, 0);
#line 39 "../src/Widgets/ProjectButton.vala"
	g_signal_connect_object ((GtkButton*) self, "clicked", (GCallback) __widgets_project_button___lambda39__gtk_button_clicked, self, 0);
#line 17 "../src/Widgets/ProjectButton.vala"
	_g_object_unref0 (projectbutton_grid);
#line 17 "../src/Widgets/ProjectButton.vala"
	return obj;
#line 642 "ProjectButton.c"
}

static void
widgets_project_button_class_init (WidgetsProjectButtonClass * klass,
                                   gpointer klass_data)
{
#line 1 "../src/Widgets/ProjectButton.vala"
	widgets_project_button_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Widgets/ProjectButton.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsProjectButton_private_offset);
#line 1 "../src/Widgets/ProjectButton.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_project_button_get_property;
#line 1 "../src/Widgets/ProjectButton.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_project_button_set_property;
#line 1 "../src/Widgets/ProjectButton.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_project_button_constructor;
#line 1 "../src/Widgets/ProjectButton.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_project_button_finalize;
#line 1 "../src/Widgets/ProjectButton.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_PROJECT_BUTTON_ITEM_PROPERTY, widgets_project_button_properties[WIDGETS_PROJECT_BUTTON_ITEM_PROPERTY] = g_param_spec_object ("item", "item", "item", OBJECTS_TYPE_ITEM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Widgets/ProjectButton.vala"
	widgets_project_button_signals[WIDGETS_PROJECT_BUTTON_CHANGED_SIGNAL] = g_signal_new ("changed", WIDGETS_TYPE_PROJECT_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__INT64_INT64, G_TYPE_NONE, 2, G_TYPE_INT64, G_TYPE_INT64);
#line 1 "../src/Widgets/ProjectButton.vala"
	widgets_project_button_signals[WIDGETS_PROJECT_BUTTON_DIALOG_OPEN_SIGNAL] = g_signal_new ("dialog-open", WIDGETS_TYPE_PROJECT_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOOLEAN, G_TYPE_NONE, 1, G_TYPE_BOOLEAN);
#line 667 "ProjectButton.c"
}

static void
widgets_project_button_instance_init (WidgetsProjectButton * self,
                                      gpointer klass)
{
#line 1 "../src/Widgets/ProjectButton.vala"
	self->priv = widgets_project_button_get_instance_private (self);
#line 676 "ProjectButton.c"
}

static void
widgets_project_button_finalize (GObject * obj)
{
	WidgetsProjectButton * self;
#line 1 "../src/Widgets/ProjectButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_PROJECT_BUTTON, WidgetsProjectButton);
#line 2 "../src/Widgets/ProjectButton.vala"
	_g_object_unref0 (self->priv->_item);
#line 4 "../src/Widgets/ProjectButton.vala"
	_g_object_unref0 (self->priv->name_label);
#line 5 "../src/Widgets/ProjectButton.vala"
	_g_object_unref0 (self->priv->icon_project);
#line 1 "../src/Widgets/ProjectButton.vala"
	G_OBJECT_CLASS (widgets_project_button_parent_class)->finalize (obj);
#line 693 "ProjectButton.c"
}

static GType
widgets_project_button_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsProjectButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_project_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsProjectButton), 0, (GInstanceInitFunc) widgets_project_button_instance_init, NULL };
	GType widgets_project_button_type_id;
	widgets_project_button_type_id = g_type_register_static (gtk_button_get_type (), "WidgetsProjectButton", &g_define_type_info, 0);
	WidgetsProjectButton_private_offset = g_type_add_instance_private (widgets_project_button_type_id, sizeof (WidgetsProjectButtonPrivate));
	return widgets_project_button_type_id;
}

GType
widgets_project_button_get_type (void)
{
	static volatile gsize widgets_project_button_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_project_button_type_id__volatile)) {
		GType widgets_project_button_type_id;
		widgets_project_button_type_id = widgets_project_button_get_type_once ();
		g_once_init_leave (&widgets_project_button_type_id__volatile, widgets_project_button_type_id);
	}
	return widgets_project_button_type_id__volatile;
}

static void
_vala_widgets_project_button_get_property (GObject * object,
                                           guint property_id,
                                           GValue * value,
                                           GParamSpec * pspec)
{
	WidgetsProjectButton * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_PROJECT_BUTTON, WidgetsProjectButton);
#line 1 "../src/Widgets/ProjectButton.vala"
	switch (property_id) {
#line 1 "../src/Widgets/ProjectButton.vala"
		case WIDGETS_PROJECT_BUTTON_ITEM_PROPERTY:
#line 1 "../src/Widgets/ProjectButton.vala"
		g_value_set_object (value, widgets_project_button_get_item (self));
#line 1 "../src/Widgets/ProjectButton.vala"
		break;
#line 734 "ProjectButton.c"
		default:
#line 1 "../src/Widgets/ProjectButton.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/ProjectButton.vala"
		break;
#line 740 "ProjectButton.c"
	}
}

static void
_vala_widgets_project_button_set_property (GObject * object,
                                           guint property_id,
                                           const GValue * value,
                                           GParamSpec * pspec)
{
	WidgetsProjectButton * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_PROJECT_BUTTON, WidgetsProjectButton);
#line 1 "../src/Widgets/ProjectButton.vala"
	switch (property_id) {
#line 1 "../src/Widgets/ProjectButton.vala"
		case WIDGETS_PROJECT_BUTTON_ITEM_PROPERTY:
#line 1 "../src/Widgets/ProjectButton.vala"
		widgets_project_button_set_item (self, g_value_get_object (value));
#line 1 "../src/Widgets/ProjectButton.vala"
		break;
#line 760 "ProjectButton.c"
		default:
#line 1 "../src/Widgets/ProjectButton.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/ProjectButton.vala"
		break;
#line 766 "ProjectButton.c"
	}
}

