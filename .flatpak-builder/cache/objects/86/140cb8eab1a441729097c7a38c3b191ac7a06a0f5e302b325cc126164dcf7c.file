/* ViewHeader.c generated by valac 0.50.10, the Vala compiler
 * generated from ViewHeader.vala, do not modify */

#include <handy.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>

#define LAYOUTS_TYPE_VIEW_HEADER (layouts_view_header_get_type ())
#define LAYOUTS_VIEW_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_VIEW_HEADER, LayoutsViewHeader))
#define LAYOUTS_VIEW_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_VIEW_HEADER, LayoutsViewHeaderClass))
#define LAYOUTS_IS_VIEW_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_VIEW_HEADER))
#define LAYOUTS_IS_VIEW_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_VIEW_HEADER))
#define LAYOUTS_VIEW_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_VIEW_HEADER, LayoutsViewHeaderClass))

typedef struct _LayoutsViewHeader LayoutsViewHeader;
typedef struct _LayoutsViewHeaderClass LayoutsViewHeaderClass;
typedef struct _LayoutsViewHeaderPrivate LayoutsViewHeaderPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define WIDGETS_TYPE_PROJECT_PROGRESS (widgets_project_progress_get_type ())
#define WIDGETS_PROJECT_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgress))
#define WIDGETS_PROJECT_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgressClass))
#define WIDGETS_IS_PROJECT_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_PROJECT_PROGRESS))
#define WIDGETS_IS_PROJECT_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_PROJECT_PROGRESS))
#define WIDGETS_PROJECT_PROGRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgressClass))

typedef struct _WidgetsProjectProgress WidgetsProjectProgress;
typedef struct _WidgetsProjectProgressClass WidgetsProjectProgressClass;
enum  {
	LAYOUTS_VIEW_HEADER_0_PROPERTY,
	LAYOUTS_VIEW_HEADER_PROJECT_PROPERTY,
	LAYOUTS_VIEW_HEADER_NUM_PROPERTIES
};
static GParamSpec* layouts_view_header_properties[LAYOUTS_VIEW_HEADER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef enum  {
	PROJECT_ICON_STYLE_PROGRESS,
	PROJECT_ICON_STYLE_EMOJI
} ProjectIconStyle;

#define TYPE_PROJECT_ICON_STYLE (project_icon_style_get_type ())
typedef struct _Block15Data Block15Data;
typedef struct _WidgetsProjectProgressPrivate WidgetsProjectProgressPrivate;

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;

struct _LayoutsViewHeader {
	HdyHeaderBar parent_instance;
	LayoutsViewHeaderPrivate * priv;
};

struct _LayoutsViewHeaderClass {
	HdyHeaderBarClass parent_class;
};

struct _LayoutsViewHeaderPrivate {
	ObjectsProject* _project;
	GtkRevealer* project_revealer;
	WidgetsProjectProgress* project_progress;
	GtkLabel* name_label;
	GtkLabel* emoji_label;
	GtkStack* progress_emoji_stack;
};

struct _Block15Data {
	int _ref_count_;
	LayoutsViewHeader* self;
	GtkImage* sidebar_image;
};

struct _WidgetsProjectProgress {
	GtkBin parent_instance;
	WidgetsProjectProgressPrivate * priv;
	gint subproject_offset;
	gdouble subproject_line_width;
	gdouble line_width;
	gboolean has_subprojects;
	gboolean enable_subprojects;
};

struct _WidgetsProjectProgressClass {
	GtkBinClass parent_class;
};

static gint LayoutsViewHeader_private_offset;
static gpointer layouts_view_header_parent_class = NULL;
extern GSettings* planner_settings;
extern ServicesEventBus* planner_event_bus;

GType layouts_view_header_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsViewHeader, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
GType widgets_project_progress_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsProjectProgress, g_object_unref)
static void layouts_view_header_project_update_request (LayoutsViewHeader* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gchar* util_get_color (Util* self,
                       const gchar* key);
ObjectsProject* layouts_view_header_get_project (LayoutsViewHeader* self);
const gchar* objects_project_get_color (ObjectsProject* self);
void widgets_project_progress_set_progress_fill_color (WidgetsProjectProgress* self,
                                                       const gchar* value);
gdouble objects_project_get_percentage (ObjectsProject* self);
void widgets_project_progress_set_percentage (WidgetsProjectProgress* self,
                                              gdouble value);
const gchar* objects_project_get_name (ObjectsProject* self);
const gchar* objects_project_get_emoji (ObjectsProject* self);
GType project_icon_style_get_type (void) G_GNUC_CONST;
ProjectIconStyle objects_project_get_icon_style (ObjectsProject* self);
LayoutsViewHeader* layouts_view_header_new (void);
LayoutsViewHeader* layouts_view_header_construct (GType object_type);
void layouts_view_header_set_project (LayoutsViewHeader* self,
                                      ObjectsProject* value);
static GObject * layouts_view_header_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties);
static Block15Data* block15_data_ref (Block15Data* _data15_);
static void block15_data_unref (void * _userdata_);
WidgetsProjectProgress* widgets_project_progress_new (gint min_d);
WidgetsProjectProgress* widgets_project_progress_construct (GType object_type,
                                                            gint min_d);
static void _layouts_view_header___lambda240_ (LayoutsViewHeader* self);
static void _layouts_view_header_project_update_request_objects_base_object_updated (ObjectsBaseObject* _sender,
                                                                              gpointer self);
static void __lambda241_ (LayoutsViewHeader* self);
static void ___lambda241__objects_project_project_count_updated (ObjectsProject* _sender,
                                                          gpointer self);
static void __layouts_view_header___lambda240__g_object_notify (GObject* _sender,
                                                         GParamSpec* pspec,
                                                         gpointer self);
static void _layouts_view_header___lambda242_ (LayoutsViewHeader* self);
static void __layouts_view_header___lambda242__gtk_button_clicked (GtkButton* _sender,
                                                            gpointer self);
static void _layouts_view_header___lambda243_ (Block15Data* _data15_,
                                        const gchar* key);
static void __layouts_view_header___lambda243__g_settings_changed (GSettings* _sender,
                                                            const gchar* key,
                                                            gpointer self);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
static void _layouts_view_header___lambda244_ (LayoutsViewHeader* self,
                                        gboolean reveal_child);
static void __layouts_view_header___lambda244__services_event_bus_view_header (ServicesEventBus* _sender,
                                                                        gboolean view,
                                                                        gpointer self);
static void layouts_view_header_finalize (GObject * obj);
static GType layouts_view_header_get_type_once (void);
static void _vala_layouts_view_header_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_layouts_view_header_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);

static inline gpointer
layouts_view_header_get_instance_private (LayoutsViewHeader* self)
{
	return G_STRUCT_MEMBER_P (self, LayoutsViewHeader_private_offset);
}

static void
layouts_view_header_project_update_request (LayoutsViewHeader* self)
{
	GtkRevealer* _tmp0_;
	WidgetsProjectProgress* _tmp1_;
	Util* _tmp2_;
	Util* _tmp3_;
	ObjectsProject* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	WidgetsProjectProgress* _tmp9_;
	ObjectsProject* _tmp10_;
	gdouble _tmp11_;
	gdouble _tmp12_;
	GtkLabel* _tmp13_;
	ObjectsProject* _tmp14_;
	const gchar* _tmp15_;
	const gchar* _tmp16_;
	GtkLabel* _tmp17_;
	ObjectsProject* _tmp18_;
	const gchar* _tmp19_;
	const gchar* _tmp20_;
	ObjectsProject* _tmp21_;
	ProjectIconStyle _tmp22_;
	ProjectIconStyle _tmp23_;
#line 98 "../src/Layouts/ViewHeader.vala"
	g_return_if_fail (self != NULL);
#line 99 "../src/Layouts/ViewHeader.vala"
	_tmp0_ = self->priv->project_revealer;
#line 99 "../src/Layouts/ViewHeader.vala"
	gtk_revealer_set_reveal_child (_tmp0_, FALSE);
#line 101 "../src/Layouts/ViewHeader.vala"
	_tmp1_ = self->priv->project_progress;
#line 101 "../src/Layouts/ViewHeader.vala"
	_tmp2_ = util_get_default ();
#line 101 "../src/Layouts/ViewHeader.vala"
	_tmp3_ = _tmp2_;
#line 101 "../src/Layouts/ViewHeader.vala"
	_tmp4_ = self->priv->_project;
#line 101 "../src/Layouts/ViewHeader.vala"
	_tmp5_ = objects_project_get_color (_tmp4_);
#line 101 "../src/Layouts/ViewHeader.vala"
	_tmp6_ = _tmp5_;
#line 101 "../src/Layouts/ViewHeader.vala"
	_tmp7_ = util_get_color (_tmp3_, _tmp6_);
#line 101 "../src/Layouts/ViewHeader.vala"
	_tmp8_ = _tmp7_;
#line 101 "../src/Layouts/ViewHeader.vala"
	widgets_project_progress_set_progress_fill_color (_tmp1_, _tmp8_);
#line 101 "../src/Layouts/ViewHeader.vala"
	_g_free0 (_tmp8_);
#line 101 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (_tmp3_);
#line 102 "../src/Layouts/ViewHeader.vala"
	_tmp9_ = self->priv->project_progress;
#line 102 "../src/Layouts/ViewHeader.vala"
	_tmp10_ = self->priv->_project;
#line 102 "../src/Layouts/ViewHeader.vala"
	_tmp11_ = objects_project_get_percentage (_tmp10_);
#line 102 "../src/Layouts/ViewHeader.vala"
	_tmp12_ = _tmp11_;
#line 102 "../src/Layouts/ViewHeader.vala"
	widgets_project_progress_set_percentage (_tmp9_, _tmp12_);
#line 104 "../src/Layouts/ViewHeader.vala"
	_tmp13_ = self->priv->name_label;
#line 104 "../src/Layouts/ViewHeader.vala"
	_tmp14_ = self->priv->_project;
#line 104 "../src/Layouts/ViewHeader.vala"
	_tmp15_ = objects_project_get_name (_tmp14_);
#line 104 "../src/Layouts/ViewHeader.vala"
	_tmp16_ = _tmp15_;
#line 104 "../src/Layouts/ViewHeader.vala"
	gtk_label_set_label (_tmp13_, _tmp16_);
#line 105 "../src/Layouts/ViewHeader.vala"
	_tmp17_ = self->priv->emoji_label;
#line 105 "../src/Layouts/ViewHeader.vala"
	_tmp18_ = self->priv->_project;
#line 105 "../src/Layouts/ViewHeader.vala"
	_tmp19_ = objects_project_get_emoji (_tmp18_);
#line 105 "../src/Layouts/ViewHeader.vala"
	_tmp20_ = _tmp19_;
#line 105 "../src/Layouts/ViewHeader.vala"
	gtk_label_set_label (_tmp17_, _tmp20_);
#line 106 "../src/Layouts/ViewHeader.vala"
	_tmp21_ = self->priv->_project;
#line 106 "../src/Layouts/ViewHeader.vala"
	_tmp22_ = objects_project_get_icon_style (_tmp21_);
#line 106 "../src/Layouts/ViewHeader.vala"
	_tmp23_ = _tmp22_;
#line 106 "../src/Layouts/ViewHeader.vala"
	if (_tmp23_ == PROJECT_ICON_STYLE_PROGRESS) {
#line 306 "ViewHeader.c"
		GtkStack* _tmp24_;
#line 107 "../src/Layouts/ViewHeader.vala"
		_tmp24_ = self->priv->progress_emoji_stack;
#line 107 "../src/Layouts/ViewHeader.vala"
		gtk_stack_set_visible_child_name (_tmp24_, "progress");
#line 312 "ViewHeader.c"
	} else {
		GtkStack* _tmp25_;
#line 109 "../src/Layouts/ViewHeader.vala"
		_tmp25_ = self->priv->progress_emoji_stack;
#line 109 "../src/Layouts/ViewHeader.vala"
		gtk_stack_set_visible_child_name (_tmp25_, "label");
#line 319 "ViewHeader.c"
	}
}

LayoutsViewHeader*
layouts_view_header_construct (GType object_type)
{
	LayoutsViewHeader * self = NULL;
#line 1 "../src/Layouts/ViewHeader.vala"
	self = (LayoutsViewHeader*) g_object_new (object_type, NULL);
#line 1 "../src/Layouts/ViewHeader.vala"
	return self;
#line 331 "ViewHeader.c"
}

LayoutsViewHeader*
layouts_view_header_new (void)
{
#line 1 "../src/Layouts/ViewHeader.vala"
	return layouts_view_header_construct (LAYOUTS_TYPE_VIEW_HEADER);
#line 339 "ViewHeader.c"
}

ObjectsProject*
layouts_view_header_get_project (LayoutsViewHeader* self)
{
	ObjectsProject* result;
	ObjectsProject* _tmp0_;
#line 2 "../src/Layouts/ViewHeader.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Layouts/ViewHeader.vala"
	_tmp0_ = self->priv->_project;
#line 2 "../src/Layouts/ViewHeader.vala"
	result = _tmp0_;
#line 2 "../src/Layouts/ViewHeader.vala"
	return result;
#line 355 "ViewHeader.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 2 "../src/Layouts/ViewHeader.vala"
	return self ? g_object_ref (self) : NULL;
#line 363 "ViewHeader.c"
}

void
layouts_view_header_set_project (LayoutsViewHeader* self,
                                 ObjectsProject* value)
{
	ObjectsProject* old_value;
#line 2 "../src/Layouts/ViewHeader.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Layouts/ViewHeader.vala"
	old_value = layouts_view_header_get_project (self);
#line 2 "../src/Layouts/ViewHeader.vala"
	if (old_value != value) {
#line 377 "ViewHeader.c"
		ObjectsProject* _tmp0_;
#line 2 "../src/Layouts/ViewHeader.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 2 "../src/Layouts/ViewHeader.vala"
		_g_object_unref0 (self->priv->_project);
#line 2 "../src/Layouts/ViewHeader.vala"
		self->priv->_project = _tmp0_;
#line 2 "../src/Layouts/ViewHeader.vala"
		g_object_notify_by_pspec ((GObject *) self, layouts_view_header_properties[LAYOUTS_VIEW_HEADER_PROJECT_PROPERTY]);
#line 387 "ViewHeader.c"
	}
}

static Block15Data*
block15_data_ref (Block15Data* _data15_)
{
#line 10 "../src/Layouts/ViewHeader.vala"
	g_atomic_int_inc (&_data15_->_ref_count_);
#line 10 "../src/Layouts/ViewHeader.vala"
	return _data15_;
#line 398 "ViewHeader.c"
}

static void
block15_data_unref (void * _userdata_)
{
	Block15Data* _data15_;
	_data15_ = (Block15Data*) _userdata_;
#line 10 "../src/Layouts/ViewHeader.vala"
	if (g_atomic_int_dec_and_test (&_data15_->_ref_count_)) {
#line 408 "ViewHeader.c"
		LayoutsViewHeader* self;
#line 10 "../src/Layouts/ViewHeader.vala"
		self = _data15_->self;
#line 10 "../src/Layouts/ViewHeader.vala"
		_g_object_unref0 (_data15_->sidebar_image);
#line 10 "../src/Layouts/ViewHeader.vala"
		_g_object_unref0 (self);
#line 10 "../src/Layouts/ViewHeader.vala"
		g_slice_free (Block15Data, _data15_);
#line 418 "ViewHeader.c"
	}
}

static void
_layouts_view_header_project_update_request_objects_base_object_updated (ObjectsBaseObject* _sender,
                                                                         gpointer self)
{
#line 73 "../src/Layouts/ViewHeader.vala"
	layouts_view_header_project_update_request ((LayoutsViewHeader*) self);
#line 428 "ViewHeader.c"
}

static void
__lambda241_ (LayoutsViewHeader* self)
{
	WidgetsProjectProgress* _tmp0_;
	ObjectsProject* _tmp1_;
	gdouble _tmp2_;
	gdouble _tmp3_;
#line 75 "../src/Layouts/ViewHeader.vala"
	_tmp0_ = self->priv->project_progress;
#line 75 "../src/Layouts/ViewHeader.vala"
	_tmp1_ = self->priv->_project;
#line 75 "../src/Layouts/ViewHeader.vala"
	_tmp2_ = objects_project_get_percentage (_tmp1_);
#line 75 "../src/Layouts/ViewHeader.vala"
	_tmp3_ = _tmp2_;
#line 75 "../src/Layouts/ViewHeader.vala"
	widgets_project_progress_set_percentage (_tmp0_, _tmp3_);
#line 448 "ViewHeader.c"
}

static void
___lambda241__objects_project_project_count_updated (ObjectsProject* _sender,
                                                     gpointer self)
{
#line 74 "../src/Layouts/ViewHeader.vala"
	__lambda241_ ((LayoutsViewHeader*) self);
#line 457 "ViewHeader.c"
}

static void
_layouts_view_header___lambda240_ (LayoutsViewHeader* self)
{
	ObjectsProject* _tmp0_;
	ObjectsProject* _tmp1_;
#line 72 "../src/Layouts/ViewHeader.vala"
	layouts_view_header_project_update_request (self);
#line 73 "../src/Layouts/ViewHeader.vala"
	_tmp0_ = self->priv->_project;
#line 73 "../src/Layouts/ViewHeader.vala"
	g_signal_connect_object ((ObjectsBaseObject*) _tmp0_, "updated", (GCallback) _layouts_view_header_project_update_request_objects_base_object_updated, self, 0);
#line 74 "../src/Layouts/ViewHeader.vala"
	_tmp1_ = self->priv->_project;
#line 74 "../src/Layouts/ViewHeader.vala"
	g_signal_connect_object (_tmp1_, "project-count-updated", (GCallback) ___lambda241__objects_project_project_count_updated, self, 0);
#line 475 "ViewHeader.c"
}

static void
__layouts_view_header___lambda240__g_object_notify (GObject* _sender,
                                                    GParamSpec* pspec,
                                                    gpointer self)
{
#line 71 "../src/Layouts/ViewHeader.vala"
	_layouts_view_header___lambda240_ ((LayoutsViewHeader*) self);
#line 485 "ViewHeader.c"
}

static void
_layouts_view_header___lambda242_ (LayoutsViewHeader* self)
{
	GSettings* _tmp0_;
	GSettings* _tmp1_;
#line 80 "../src/Layouts/ViewHeader.vala"
	_tmp0_ = planner_settings;
#line 80 "../src/Layouts/ViewHeader.vala"
	_tmp1_ = planner_settings;
#line 80 "../src/Layouts/ViewHeader.vala"
	g_settings_set_boolean (_tmp0_, "slim-mode", !g_settings_get_boolean (_tmp1_, "slim-mode"));
#line 499 "ViewHeader.c"
}

static void
__layouts_view_header___lambda242__gtk_button_clicked (GtkButton* _sender,
                                                       gpointer self)
{
#line 79 "../src/Layouts/ViewHeader.vala"
	_layouts_view_header___lambda242_ ((LayoutsViewHeader*) self);
#line 508 "ViewHeader.c"
}

static void
_layouts_view_header___lambda243_ (Block15Data* _data15_,
                                   const gchar* key)
{
	LayoutsViewHeader* self;
#line 83 "../src/Layouts/ViewHeader.vala"
	self = _data15_->self;
#line 83 "../src/Layouts/ViewHeader.vala"
	g_return_if_fail (key != NULL);
#line 84 "../src/Layouts/ViewHeader.vala"
	if (g_strcmp0 (key, "slim-mode") == 0) {
#line 522 "ViewHeader.c"
		GSettings* _tmp0_;
#line 85 "../src/Layouts/ViewHeader.vala"
		_tmp0_ = planner_settings;
#line 85 "../src/Layouts/ViewHeader.vala"
		if (g_settings_get_boolean (_tmp0_, "slim-mode")) {
#line 528 "ViewHeader.c"
			GtkImage* _tmp1_;
			GThemedIcon* _tmp2_;
			GThemedIcon* _tmp3_;
#line 86 "../src/Layouts/ViewHeader.vala"
			_tmp1_ = _data15_->sidebar_image;
#line 86 "../src/Layouts/ViewHeader.vala"
			_tmp2_ = (GThemedIcon*) g_themed_icon_new ("view-sidebar-end-symbolic");
#line 86 "../src/Layouts/ViewHeader.vala"
			_tmp3_ = _tmp2_;
#line 86 "../src/Layouts/ViewHeader.vala"
			g_object_set (_tmp1_, "gicon", (GIcon*) _tmp3_, NULL);
#line 86 "../src/Layouts/ViewHeader.vala"
			_g_object_unref0 (_tmp3_);
#line 542 "ViewHeader.c"
		} else {
			GtkImage* _tmp4_;
			GThemedIcon* _tmp5_;
			GThemedIcon* _tmp6_;
#line 88 "../src/Layouts/ViewHeader.vala"
			_tmp4_ = _data15_->sidebar_image;
#line 88 "../src/Layouts/ViewHeader.vala"
			_tmp5_ = (GThemedIcon*) g_themed_icon_new ("view-sidebar-start-symbolic");
#line 88 "../src/Layouts/ViewHeader.vala"
			_tmp6_ = _tmp5_;
#line 88 "../src/Layouts/ViewHeader.vala"
			g_object_set (_tmp4_, "gicon", (GIcon*) _tmp6_, NULL);
#line 88 "../src/Layouts/ViewHeader.vala"
			_g_object_unref0 (_tmp6_);
#line 557 "ViewHeader.c"
		}
	}
}

static void
__layouts_view_header___lambda243__g_settings_changed (GSettings* _sender,
                                                       const gchar* key,
                                                       gpointer self)
{
#line 83 "../src/Layouts/ViewHeader.vala"
	_layouts_view_header___lambda243_ (self, key);
#line 569 "ViewHeader.c"
}

static void
_layouts_view_header___lambda244_ (LayoutsViewHeader* self,
                                   gboolean reveal_child)
{
	GtkRevealer* _tmp0_;
#line 94 "../src/Layouts/ViewHeader.vala"
	_tmp0_ = self->priv->project_revealer;
#line 94 "../src/Layouts/ViewHeader.vala"
	gtk_revealer_set_reveal_child (_tmp0_, reveal_child);
#line 581 "ViewHeader.c"
}

static void
__layouts_view_header___lambda244__services_event_bus_view_header (ServicesEventBus* _sender,
                                                                   gboolean view,
                                                                   gpointer self)
{
#line 93 "../src/Layouts/ViewHeader.vala"
	_layouts_view_header___lambda244_ ((LayoutsViewHeader*) self, view);
#line 591 "ViewHeader.c"
}

static GObject *
layouts_view_header_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	LayoutsViewHeader * self;
	Block15Data* _data15_;
	GThemedIcon* _tmp0_;
	GtkImage* _tmp1_ = NULL;
	GtkButton* sidebar_button = NULL;
	GtkButton* _tmp2_ = NULL;
	GtkButton* _tmp3_;
	GtkImage* _tmp4_;
	GtkStyleContext* sidebar_button_context = NULL;
	GtkButton* _tmp5_;
	GtkStyleContext* _tmp6_;
	GtkStyleContext* _tmp7_;
	WidgetsProjectProgress* _tmp8_;
	WidgetsProjectProgress* _tmp9_;
	WidgetsProjectProgress* _tmp10_;
	WidgetsProjectProgress* _tmp11_;
	GtkLabel* _tmp12_ = NULL;
	GtkStyleContext* emoji_label_context = NULL;
	GtkLabel* _tmp13_;
	GtkStyleContext* _tmp14_;
	GtkStyleContext* _tmp15_;
	GtkStyleContext* _tmp16_;
	GtkStack* _tmp17_;
	GtkStack* _tmp18_;
	WidgetsProjectProgress* _tmp19_;
	GtkStack* _tmp20_;
	GtkLabel* _tmp21_;
	GtkLabel* _tmp22_;
	GtkLabel* _tmp23_;
	GtkStyleContext* name_label_context = NULL;
	GtkLabel* _tmp24_;
	GtkStyleContext* _tmp25_;
	GtkStyleContext* _tmp26_;
	GtkStyleContext* _tmp27_;
	GtkGrid* project_grid = NULL;
	GtkGrid* _tmp28_ = NULL;
	GtkGrid* _tmp29_;
	GtkStack* _tmp30_;
	GtkGrid* _tmp31_;
	GtkLabel* _tmp32_;
	GtkRevealer* _tmp33_ = NULL;
	GtkRevealer* _tmp34_;
	GtkGrid* _tmp35_;
	GtkGrid* start_grid = NULL;
	GtkGrid* _tmp36_ = NULL;
	GtkGrid* _tmp37_;
	GtkButton* _tmp38_;
	GtkGrid* _tmp39_;
	GtkRevealer* _tmp40_;
	GtkButton* _tmp41_;
	GSettings* _tmp42_;
	ServicesEventBus* _tmp43_;
#line 10 "../src/Layouts/ViewHeader.vala"
	parent_class = G_OBJECT_CLASS (layouts_view_header_parent_class);
#line 10 "../src/Layouts/ViewHeader.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 10 "../src/Layouts/ViewHeader.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, LAYOUTS_TYPE_VIEW_HEADER, LayoutsViewHeader);
#line 10 "../src/Layouts/ViewHeader.vala"
	_data15_ = g_slice_new0 (Block15Data);
#line 10 "../src/Layouts/ViewHeader.vala"
	_data15_->_ref_count_ = 1;
#line 10 "../src/Layouts/ViewHeader.vala"
	_data15_->self = g_object_ref (self);
#line 11 "../src/Layouts/ViewHeader.vala"
	_tmp0_ = (GThemedIcon*) g_themed_icon_new ("view-sidebar-start-symbolic");
#line 11 "../src/Layouts/ViewHeader.vala"
	_tmp1_ = (GtkImage*) gtk_image_new ();
#line 11 "../src/Layouts/ViewHeader.vala"
	g_object_set (_tmp1_, "gicon", (GIcon*) _tmp0_, NULL);
#line 11 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (_tmp0_);
#line 11 "../src/Layouts/ViewHeader.vala"
	gtk_image_set_pixel_size (_tmp1_, 16);
#line 11 "../src/Layouts/ViewHeader.vala"
	g_object_ref_sink (_tmp1_);
#line 11 "../src/Layouts/ViewHeader.vala"
	_data15_->sidebar_image = _tmp1_;
#line 16 "../src/Layouts/ViewHeader.vala"
	_tmp2_ = (GtkButton*) gtk_button_new ();
#line 16 "../src/Layouts/ViewHeader.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp2_, GTK_ALIGN_CENTER);
#line 16 "../src/Layouts/ViewHeader.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp2_, FALSE);
#line 16 "../src/Layouts/ViewHeader.vala"
	g_object_ref_sink (_tmp2_);
#line 16 "../src/Layouts/ViewHeader.vala"
	sidebar_button = _tmp2_;
#line 21 "../src/Layouts/ViewHeader.vala"
	_tmp3_ = sidebar_button;
#line 21 "../src/Layouts/ViewHeader.vala"
	_tmp4_ = _data15_->sidebar_image;
#line 21 "../src/Layouts/ViewHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp3_, (GtkWidget*) _tmp4_);
#line 23 "../src/Layouts/ViewHeader.vala"
	_tmp5_ = sidebar_button;
#line 23 "../src/Layouts/ViewHeader.vala"
	_tmp6_ = gtk_widget_get_style_context ((GtkWidget*) _tmp5_);
#line 23 "../src/Layouts/ViewHeader.vala"
	sidebar_button_context = _tmp6_;
#line 24 "../src/Layouts/ViewHeader.vala"
	_tmp7_ = sidebar_button_context;
#line 24 "../src/Layouts/ViewHeader.vala"
	gtk_style_context_add_class (_tmp7_, GTK_STYLE_CLASS_FLAT);
#line 26 "../src/Layouts/ViewHeader.vala"
	_tmp8_ = widgets_project_progress_new (16);
#line 26 "../src/Layouts/ViewHeader.vala"
	g_object_ref_sink (_tmp8_);
#line 26 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->project_progress);
#line 26 "../src/Layouts/ViewHeader.vala"
	self->priv->project_progress = _tmp8_;
#line 27 "../src/Layouts/ViewHeader.vala"
	_tmp9_ = self->priv->project_progress;
#line 27 "../src/Layouts/ViewHeader.vala"
	_tmp9_->enable_subprojects = TRUE;
#line 28 "../src/Layouts/ViewHeader.vala"
	_tmp10_ = self->priv->project_progress;
#line 28 "../src/Layouts/ViewHeader.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp10_, GTK_ALIGN_CENTER);
#line 29 "../src/Layouts/ViewHeader.vala"
	_tmp11_ = self->priv->project_progress;
#line 29 "../src/Layouts/ViewHeader.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp11_, GTK_ALIGN_CENTER);
#line 31 "../src/Layouts/ViewHeader.vala"
	_tmp12_ = (GtkLabel*) gtk_label_new (NULL);
#line 31 "../src/Layouts/ViewHeader.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp12_, GTK_ALIGN_CENTER);
#line 31 "../src/Layouts/ViewHeader.vala"
	g_object_ref_sink (_tmp12_);
#line 31 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->emoji_label);
#line 31 "../src/Layouts/ViewHeader.vala"
	self->priv->emoji_label = _tmp12_;
#line 35 "../src/Layouts/ViewHeader.vala"
	_tmp13_ = self->priv->emoji_label;
#line 35 "../src/Layouts/ViewHeader.vala"
	_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
#line 35 "../src/Layouts/ViewHeader.vala"
	emoji_label_context = _tmp14_;
#line 36 "../src/Layouts/ViewHeader.vala"
	_tmp15_ = emoji_label_context;
#line 36 "../src/Layouts/ViewHeader.vala"
	gtk_style_context_add_class (_tmp15_, "h4");
#line 37 "../src/Layouts/ViewHeader.vala"
	_tmp16_ = emoji_label_context;
#line 37 "../src/Layouts/ViewHeader.vala"
	gtk_style_context_add_class (_tmp16_, "opacity-1");
#line 39 "../src/Layouts/ViewHeader.vala"
	_tmp17_ = (GtkStack*) gtk_stack_new ();
#line 39 "../src/Layouts/ViewHeader.vala"
	g_object_ref_sink (_tmp17_);
#line 39 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->progress_emoji_stack);
#line 39 "../src/Layouts/ViewHeader.vala"
	self->priv->progress_emoji_stack = _tmp17_;
#line 40 "../src/Layouts/ViewHeader.vala"
	_tmp18_ = self->priv->progress_emoji_stack;
#line 40 "../src/Layouts/ViewHeader.vala"
	_tmp19_ = self->priv->project_progress;
#line 40 "../src/Layouts/ViewHeader.vala"
	gtk_stack_add_named (_tmp18_, (GtkWidget*) _tmp19_, "progress");
#line 41 "../src/Layouts/ViewHeader.vala"
	_tmp20_ = self->priv->progress_emoji_stack;
#line 41 "../src/Layouts/ViewHeader.vala"
	_tmp21_ = self->priv->emoji_label;
#line 41 "../src/Layouts/ViewHeader.vala"
	gtk_stack_add_named (_tmp20_, (GtkWidget*) _tmp21_, "label");
#line 43 "../src/Layouts/ViewHeader.vala"
	_tmp22_ = (GtkLabel*) gtk_label_new (NULL);
#line 43 "../src/Layouts/ViewHeader.vala"
	g_object_ref_sink (_tmp22_);
#line 43 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->name_label);
#line 43 "../src/Layouts/ViewHeader.vala"
	self->priv->name_label = _tmp22_;
#line 44 "../src/Layouts/ViewHeader.vala"
	_tmp23_ = self->priv->name_label;
#line 44 "../src/Layouts/ViewHeader.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp23_, GTK_ALIGN_CENTER);
#line 46 "../src/Layouts/ViewHeader.vala"
	_tmp24_ = self->priv->name_label;
#line 46 "../src/Layouts/ViewHeader.vala"
	_tmp25_ = gtk_widget_get_style_context ((GtkWidget*) _tmp24_);
#line 46 "../src/Layouts/ViewHeader.vala"
	name_label_context = _tmp25_;
#line 47 "../src/Layouts/ViewHeader.vala"
	_tmp26_ = name_label_context;
#line 47 "../src/Layouts/ViewHeader.vala"
	gtk_style_context_add_class (_tmp26_, "h4");
#line 48 "../src/Layouts/ViewHeader.vala"
	_tmp27_ = name_label_context;
#line 48 "../src/Layouts/ViewHeader.vala"
	gtk_style_context_add_class (_tmp27_, "opacity-1");
#line 50 "../src/Layouts/ViewHeader.vala"
	_tmp28_ = (GtkGrid*) gtk_grid_new ();
#line 50 "../src/Layouts/ViewHeader.vala"
	gtk_grid_set_column_spacing (_tmp28_, 6);
#line 50 "../src/Layouts/ViewHeader.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp28_, GTK_ALIGN_CENTER);
#line 50 "../src/Layouts/ViewHeader.vala"
	g_object_ref_sink (_tmp28_);
#line 50 "../src/Layouts/ViewHeader.vala"
	project_grid = _tmp28_;
#line 54 "../src/Layouts/ViewHeader.vala"
	_tmp29_ = project_grid;
#line 54 "../src/Layouts/ViewHeader.vala"
	_tmp30_ = self->priv->progress_emoji_stack;
#line 54 "../src/Layouts/ViewHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp29_, (GtkWidget*) _tmp30_);
#line 55 "../src/Layouts/ViewHeader.vala"
	_tmp31_ = project_grid;
#line 55 "../src/Layouts/ViewHeader.vala"
	_tmp32_ = self->priv->name_label;
#line 55 "../src/Layouts/ViewHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp31_, (GtkWidget*) _tmp32_);
#line 57 "../src/Layouts/ViewHeader.vala"
	_tmp33_ = (GtkRevealer*) gtk_revealer_new ();
#line 57 "../src/Layouts/ViewHeader.vala"
	gtk_revealer_set_transition_type (_tmp33_, GTK_REVEALER_TRANSITION_TYPE_CROSSFADE);
#line 57 "../src/Layouts/ViewHeader.vala"
	g_object_ref_sink (_tmp33_);
#line 57 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->project_revealer);
#line 57 "../src/Layouts/ViewHeader.vala"
	self->priv->project_revealer = _tmp33_;
#line 60 "../src/Layouts/ViewHeader.vala"
	_tmp34_ = self->priv->project_revealer;
#line 60 "../src/Layouts/ViewHeader.vala"
	_tmp35_ = project_grid;
#line 60 "../src/Layouts/ViewHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp34_, (GtkWidget*) _tmp35_);
#line 62 "../src/Layouts/ViewHeader.vala"
	_tmp36_ = (GtkGrid*) gtk_grid_new ();
#line 62 "../src/Layouts/ViewHeader.vala"
	gtk_grid_set_column_spacing (_tmp36_, 6);
#line 62 "../src/Layouts/ViewHeader.vala"
	g_object_ref_sink (_tmp36_);
#line 62 "../src/Layouts/ViewHeader.vala"
	start_grid = _tmp36_;
#line 66 "../src/Layouts/ViewHeader.vala"
	_tmp37_ = start_grid;
#line 66 "../src/Layouts/ViewHeader.vala"
	_tmp38_ = sidebar_button;
#line 66 "../src/Layouts/ViewHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp37_, (GtkWidget*) _tmp38_);
#line 68 "../src/Layouts/ViewHeader.vala"
	_tmp39_ = start_grid;
#line 68 "../src/Layouts/ViewHeader.vala"
	hdy_header_bar_pack_start ((HdyHeaderBar*) self, (GtkWidget*) _tmp39_);
#line 69 "../src/Layouts/ViewHeader.vala"
	_tmp40_ = self->priv->project_revealer;
#line 69 "../src/Layouts/ViewHeader.vala"
	hdy_header_bar_set_custom_title ((HdyHeaderBar*) self, (GtkWidget*) _tmp40_);
#line 71 "../src/Layouts/ViewHeader.vala"
	g_signal_connect_object ((GObject*) self, "notify::project", (GCallback) __layouts_view_header___lambda240__g_object_notify, self, 0);
#line 79 "../src/Layouts/ViewHeader.vala"
	_tmp41_ = sidebar_button;
#line 79 "../src/Layouts/ViewHeader.vala"
	g_signal_connect_object (_tmp41_, "clicked", (GCallback) __layouts_view_header___lambda242__gtk_button_clicked, self, 0);
#line 83 "../src/Layouts/ViewHeader.vala"
	_tmp42_ = planner_settings;
#line 83 "../src/Layouts/ViewHeader.vala"
	g_signal_connect_data (_tmp42_, "changed", (GCallback) __layouts_view_header___lambda243__g_settings_changed, block15_data_ref (_data15_), (GClosureNotify) block15_data_unref, 0);
#line 93 "../src/Layouts/ViewHeader.vala"
	_tmp43_ = planner_event_bus;
#line 93 "../src/Layouts/ViewHeader.vala"
	g_signal_connect_object (_tmp43_, "view-header", (GCallback) __layouts_view_header___lambda244__services_event_bus_view_header, self, 0);
#line 10 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (start_grid);
#line 10 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (project_grid);
#line 10 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (sidebar_button);
#line 10 "../src/Layouts/ViewHeader.vala"
	block15_data_unref (_data15_);
#line 10 "../src/Layouts/ViewHeader.vala"
	_data15_ = NULL;
#line 10 "../src/Layouts/ViewHeader.vala"
	return obj;
#line 881 "ViewHeader.c"
}

static void
layouts_view_header_class_init (LayoutsViewHeaderClass * klass,
                                gpointer klass_data)
{
#line 1 "../src/Layouts/ViewHeader.vala"
	layouts_view_header_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Layouts/ViewHeader.vala"
	g_type_class_adjust_private_offset (klass, &LayoutsViewHeader_private_offset);
#line 1 "../src/Layouts/ViewHeader.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_layouts_view_header_get_property;
#line 1 "../src/Layouts/ViewHeader.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_layouts_view_header_set_property;
#line 1 "../src/Layouts/ViewHeader.vala"
	G_OBJECT_CLASS (klass)->constructor = layouts_view_header_constructor;
#line 1 "../src/Layouts/ViewHeader.vala"
	G_OBJECT_CLASS (klass)->finalize = layouts_view_header_finalize;
#line 1 "../src/Layouts/ViewHeader.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), LAYOUTS_VIEW_HEADER_PROJECT_PROPERTY, layouts_view_header_properties[LAYOUTS_VIEW_HEADER_PROJECT_PROPERTY] = g_param_spec_object ("project", "project", "project", OBJECTS_TYPE_PROJECT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 902 "ViewHeader.c"
}

static void
layouts_view_header_instance_init (LayoutsViewHeader * self,
                                   gpointer klass)
{
#line 1 "../src/Layouts/ViewHeader.vala"
	self->priv = layouts_view_header_get_instance_private (self);
#line 911 "ViewHeader.c"
}

static void
layouts_view_header_finalize (GObject * obj)
{
	LayoutsViewHeader * self;
#line 1 "../src/Layouts/ViewHeader.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, LAYOUTS_TYPE_VIEW_HEADER, LayoutsViewHeader);
#line 2 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->_project);
#line 4 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->project_revealer);
#line 5 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->project_progress);
#line 6 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->name_label);
#line 7 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->emoji_label);
#line 8 "../src/Layouts/ViewHeader.vala"
	_g_object_unref0 (self->priv->progress_emoji_stack);
#line 1 "../src/Layouts/ViewHeader.vala"
	G_OBJECT_CLASS (layouts_view_header_parent_class)->finalize (obj);
#line 934 "ViewHeader.c"
}

static GType
layouts_view_header_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (LayoutsViewHeaderClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) layouts_view_header_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (LayoutsViewHeader), 0, (GInstanceInitFunc) layouts_view_header_instance_init, NULL };
	GType layouts_view_header_type_id;
	layouts_view_header_type_id = g_type_register_static (hdy_header_bar_get_type (), "LayoutsViewHeader", &g_define_type_info, 0);
	LayoutsViewHeader_private_offset = g_type_add_instance_private (layouts_view_header_type_id, sizeof (LayoutsViewHeaderPrivate));
	return layouts_view_header_type_id;
}

GType
layouts_view_header_get_type (void)
{
	static volatile gsize layouts_view_header_type_id__volatile = 0;
	if (g_once_init_enter (&layouts_view_header_type_id__volatile)) {
		GType layouts_view_header_type_id;
		layouts_view_header_type_id = layouts_view_header_get_type_once ();
		g_once_init_leave (&layouts_view_header_type_id__volatile, layouts_view_header_type_id);
	}
	return layouts_view_header_type_id__volatile;
}

static void
_vala_layouts_view_header_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	LayoutsViewHeader * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, LAYOUTS_TYPE_VIEW_HEADER, LayoutsViewHeader);
#line 1 "../src/Layouts/ViewHeader.vala"
	switch (property_id) {
#line 1 "../src/Layouts/ViewHeader.vala"
		case LAYOUTS_VIEW_HEADER_PROJECT_PROPERTY:
#line 1 "../src/Layouts/ViewHeader.vala"
		g_value_set_object (value, layouts_view_header_get_project (self));
#line 1 "../src/Layouts/ViewHeader.vala"
		break;
#line 975 "ViewHeader.c"
		default:
#line 1 "../src/Layouts/ViewHeader.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Layouts/ViewHeader.vala"
		break;
#line 981 "ViewHeader.c"
	}
}

static void
_vala_layouts_view_header_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	LayoutsViewHeader * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, LAYOUTS_TYPE_VIEW_HEADER, LayoutsViewHeader);
#line 1 "../src/Layouts/ViewHeader.vala"
	switch (property_id) {
#line 1 "../src/Layouts/ViewHeader.vala"
		case LAYOUTS_VIEW_HEADER_PROJECT_PROPERTY:
#line 1 "../src/Layouts/ViewHeader.vala"
		layouts_view_header_set_project (self, g_value_get_object (value));
#line 1 "../src/Layouts/ViewHeader.vala"
		break;
#line 1001 "ViewHeader.c"
		default:
#line 1 "../src/Layouts/ViewHeader.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Layouts/ViewHeader.vala"
		break;
#line 1007 "ViewHeader.c"
	}
}

