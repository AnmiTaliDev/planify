/* IconColorProject.c generated by valac 0.50.10, the Vala compiler
 * generated from IconColorProject.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>

#define WIDGETS_TYPE_ICON_COLOR_PROJECT (widgets_icon_color_project_get_type ())
#define WIDGETS_ICON_COLOR_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ICON_COLOR_PROJECT, WidgetsIconColorProject))
#define WIDGETS_ICON_COLOR_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ICON_COLOR_PROJECT, WidgetsIconColorProjectClass))
#define WIDGETS_IS_ICON_COLOR_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ICON_COLOR_PROJECT))
#define WIDGETS_IS_ICON_COLOR_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ICON_COLOR_PROJECT))
#define WIDGETS_ICON_COLOR_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ICON_COLOR_PROJECT, WidgetsIconColorProjectClass))

typedef struct _WidgetsIconColorProject WidgetsIconColorProject;
typedef struct _WidgetsIconColorProjectClass WidgetsIconColorProjectClass;
typedef struct _WidgetsIconColorProjectPrivate WidgetsIconColorProjectPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;
enum  {
	WIDGETS_ICON_COLOR_PROJECT_0_PROPERTY,
	WIDGETS_ICON_COLOR_PROJECT_PROJECT_PROPERTY,
	WIDGETS_ICON_COLOR_PROJECT_PIXEL_SIZE_PROPERTY,
	WIDGETS_ICON_COLOR_PROJECT_NUM_PROPERTIES
};
static GParamSpec* widgets_icon_color_project_properties[WIDGETS_ICON_COLOR_PROJECT_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
#define _g_free0(var) (var = (g_free (var), NULL))

struct _WidgetsIconColorProject {
	GtkEventBox parent_instance;
	WidgetsIconColorProjectPrivate * priv;
};

struct _WidgetsIconColorProjectClass {
	GtkEventBoxClass parent_class;
};

struct _WidgetsIconColorProjectPrivate {
	ObjectsProject* _project;
	gint _pixel_size;
	GtkGrid* widget_color;
	GtkStack* stack;
};

static gint WidgetsIconColorProject_private_offset;
static gpointer widgets_icon_color_project_parent_class = NULL;

GType widgets_icon_color_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsIconColorProject, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
WidgetsIconColorProject* widgets_icon_color_project_new (gint pixel_size);
WidgetsIconColorProject* widgets_icon_color_project_construct (GType object_type,
                                                               gint pixel_size);
void widgets_icon_color_project_update_request (WidgetsIconColorProject* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
void util_set_widget_color (Util* self,
                            const gchar* color,
                            GtkWidget* widget);
gchar* util_get_color (Util* self,
                       const gchar* key);
ObjectsProject* widgets_icon_color_project_get_project (WidgetsIconColorProject* self);
const gchar* objects_project_get_color (ObjectsProject* self);
static gboolean __lambda36_ (WidgetsIconColorProject* self);
gboolean objects_project_get_inbox_project (ObjectsProject* self);
static gboolean ___lambda36__gsource_func (gpointer self);
void widgets_icon_color_project_set_project (WidgetsIconColorProject* self,
                                             ObjectsProject* value);
gint widgets_icon_color_project_get_pixel_size (WidgetsIconColorProject* self);
static void widgets_icon_color_project_set_pixel_size (WidgetsIconColorProject* self,
                                                gint value);
static GObject * widgets_icon_color_project_constructor (GType type,
                                                  guint n_construct_properties,
                                                  GObjectConstructParam * construct_properties);
static void _widgets_icon_color_project___lambda37_ (WidgetsIconColorProject* self);
static void __widgets_icon_color_project___lambda37__g_object_notify (GObject* _sender,
                                                               GParamSpec* pspec,
                                                               gpointer self);
static void widgets_icon_color_project_finalize (GObject * obj);
static GType widgets_icon_color_project_get_type_once (void);
static void _vala_widgets_icon_color_project_get_property (GObject * object,
                                                    guint property_id,
                                                    GValue * value,
                                                    GParamSpec * pspec);
static void _vala_widgets_icon_color_project_set_property (GObject * object,
                                                    guint property_id,
                                                    const GValue * value,
                                                    GParamSpec * pspec);

static inline gpointer
widgets_icon_color_project_get_instance_private (WidgetsIconColorProject* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsIconColorProject_private_offset);
}

WidgetsIconColorProject*
widgets_icon_color_project_construct (GType object_type,
                                      gint pixel_size)
{
	WidgetsIconColorProject * self = NULL;
#line 9 "../src/Widgets/IconColorProject.vala"
	self = (WidgetsIconColorProject*) g_object_new (object_type, "pixel-size", pixel_size, NULL);
#line 8 "../src/Widgets/IconColorProject.vala"
	return self;
#line 142 "IconColorProject.c"
}

WidgetsIconColorProject*
widgets_icon_color_project_new (gint pixel_size)
{
#line 8 "../src/Widgets/IconColorProject.vala"
	return widgets_icon_color_project_construct (WIDGETS_TYPE_ICON_COLOR_PROJECT, pixel_size);
#line 150 "IconColorProject.c"
}

static gboolean
__lambda36_ (WidgetsIconColorProject* self)
{
	const gchar* _tmp0_ = NULL;
	ObjectsProject* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	GtkStack* _tmp4_;
	gboolean result = FALSE;
#line 49 "../src/Widgets/IconColorProject.vala"
	_tmp1_ = self->priv->_project;
#line 49 "../src/Widgets/IconColorProject.vala"
	_tmp2_ = objects_project_get_inbox_project (_tmp1_);
#line 49 "../src/Widgets/IconColorProject.vala"
	_tmp3_ = _tmp2_;
#line 49 "../src/Widgets/IconColorProject.vala"
	if (_tmp3_) {
#line 49 "../src/Widgets/IconColorProject.vala"
		_tmp0_ = "icon";
#line 172 "IconColorProject.c"
	} else {
#line 49 "../src/Widgets/IconColorProject.vala"
		_tmp0_ = "color";
#line 176 "IconColorProject.c"
	}
#line 49 "../src/Widgets/IconColorProject.vala"
	_tmp4_ = self->priv->stack;
#line 49 "../src/Widgets/IconColorProject.vala"
	gtk_stack_set_visible_child_name (_tmp4_, _tmp0_);
#line 50 "../src/Widgets/IconColorProject.vala"
	result = G_SOURCE_REMOVE;
#line 50 "../src/Widgets/IconColorProject.vala"
	return result;
#line 186 "IconColorProject.c"
}

static gboolean
___lambda36__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda36_ ((WidgetsIconColorProject*) self);
#line 48 "../src/Widgets/IconColorProject.vala"
	return result;
#line 196 "IconColorProject.c"
}

void
widgets_icon_color_project_update_request (WidgetsIconColorProject* self)
{
	Util* _tmp0_;
	Util* _tmp1_;
	Util* _tmp2_;
	Util* _tmp3_;
	ObjectsProject* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	GtkGrid* _tmp9_;
	GtkStack* _tmp10_;
	guint _tmp11_;
	guint _tmp12_;
#line 46 "../src/Widgets/IconColorProject.vala"
	g_return_if_fail (self != NULL);
#line 47 "../src/Widgets/IconColorProject.vala"
	_tmp0_ = util_get_default ();
#line 47 "../src/Widgets/IconColorProject.vala"
	_tmp1_ = _tmp0_;
#line 47 "../src/Widgets/IconColorProject.vala"
	_tmp2_ = util_get_default ();
#line 47 "../src/Widgets/IconColorProject.vala"
	_tmp3_ = _tmp2_;
#line 47 "../src/Widgets/IconColorProject.vala"
	_tmp4_ = self->priv->_project;
#line 47 "../src/Widgets/IconColorProject.vala"
	_tmp5_ = objects_project_get_color (_tmp4_);
#line 47 "../src/Widgets/IconColorProject.vala"
	_tmp6_ = _tmp5_;
#line 47 "../src/Widgets/IconColorProject.vala"
	_tmp7_ = util_get_color (_tmp3_, _tmp6_);
#line 47 "../src/Widgets/IconColorProject.vala"
	_tmp8_ = _tmp7_;
#line 47 "../src/Widgets/IconColorProject.vala"
	_tmp9_ = self->priv->widget_color;
#line 47 "../src/Widgets/IconColorProject.vala"
	util_set_widget_color (_tmp1_, _tmp8_, (GtkWidget*) _tmp9_);
#line 47 "../src/Widgets/IconColorProject.vala"
	_g_free0 (_tmp8_);
#line 47 "../src/Widgets/IconColorProject.vala"
	_g_object_unref0 (_tmp3_);
#line 47 "../src/Widgets/IconColorProject.vala"
	_g_object_unref0 (_tmp1_);
#line 48 "../src/Widgets/IconColorProject.vala"
	_tmp10_ = self->priv->stack;
#line 48 "../src/Widgets/IconColorProject.vala"
	_tmp11_ = gtk_stack_get_transition_duration (_tmp10_);
#line 48 "../src/Widgets/IconColorProject.vala"
	_tmp12_ = _tmp11_;
#line 48 "../src/Widgets/IconColorProject.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp12_, ___lambda36__gsource_func, g_object_ref (self), g_object_unref);
#line 253 "IconColorProject.c"
}

ObjectsProject*
widgets_icon_color_project_get_project (WidgetsIconColorProject* self)
{
	ObjectsProject* result;
	ObjectsProject* _tmp0_;
#line 2 "../src/Widgets/IconColorProject.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Widgets/IconColorProject.vala"
	_tmp0_ = self->priv->_project;
#line 2 "../src/Widgets/IconColorProject.vala"
	result = _tmp0_;
#line 2 "../src/Widgets/IconColorProject.vala"
	return result;
#line 269 "IconColorProject.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 2 "../src/Widgets/IconColorProject.vala"
	return self ? g_object_ref (self) : NULL;
#line 277 "IconColorProject.c"
}

void
widgets_icon_color_project_set_project (WidgetsIconColorProject* self,
                                        ObjectsProject* value)
{
	ObjectsProject* old_value;
#line 2 "../src/Widgets/IconColorProject.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Widgets/IconColorProject.vala"
	old_value = widgets_icon_color_project_get_project (self);
#line 2 "../src/Widgets/IconColorProject.vala"
	if (old_value != value) {
#line 291 "IconColorProject.c"
		ObjectsProject* _tmp0_;
#line 2 "../src/Widgets/IconColorProject.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 2 "../src/Widgets/IconColorProject.vala"
		_g_object_unref0 (self->priv->_project);
#line 2 "../src/Widgets/IconColorProject.vala"
		self->priv->_project = _tmp0_;
#line 2 "../src/Widgets/IconColorProject.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_icon_color_project_properties[WIDGETS_ICON_COLOR_PROJECT_PROJECT_PROPERTY]);
#line 301 "IconColorProject.c"
	}
}

gint
widgets_icon_color_project_get_pixel_size (WidgetsIconColorProject* self)
{
	gint result;
#line 3 "../src/Widgets/IconColorProject.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 3 "../src/Widgets/IconColorProject.vala"
	result = self->priv->_pixel_size;
#line 3 "../src/Widgets/IconColorProject.vala"
	return result;
#line 315 "IconColorProject.c"
}

static void
widgets_icon_color_project_set_pixel_size (WidgetsIconColorProject* self,
                                           gint value)
{
	gint old_value;
#line 3 "../src/Widgets/IconColorProject.vala"
	g_return_if_fail (self != NULL);
#line 3 "../src/Widgets/IconColorProject.vala"
	old_value = widgets_icon_color_project_get_pixel_size (self);
#line 3 "../src/Widgets/IconColorProject.vala"
	if (old_value != value) {
#line 3 "../src/Widgets/IconColorProject.vala"
		self->priv->_pixel_size = value;
#line 3 "../src/Widgets/IconColorProject.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_icon_color_project_properties[WIDGETS_ICON_COLOR_PROJECT_PIXEL_SIZE_PROPERTY]);
#line 333 "IconColorProject.c"
	}
}

static void
_widgets_icon_color_project___lambda37_ (WidgetsIconColorProject* self)
{
#line 42 "../src/Widgets/IconColorProject.vala"
	widgets_icon_color_project_update_request (self);
#line 342 "IconColorProject.c"
}

static void
__widgets_icon_color_project___lambda37__g_object_notify (GObject* _sender,
                                                          GParamSpec* pspec,
                                                          gpointer self)
{
#line 41 "../src/Widgets/IconColorProject.vala"
	_widgets_icon_color_project___lambda37_ ((WidgetsIconColorProject*) self);
#line 352 "IconColorProject.c"
}

static GObject *
widgets_icon_color_project_constructor (GType type,
                                        guint n_construct_properties,
                                        GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsIconColorProject * self;
	GtkImage* inbox_icon = NULL;
	GThemedIcon* _tmp0_;
	gint _tmp1_;
	GtkImage* _tmp2_ = NULL;
	gint _tmp3_;
	gint _tmp4_;
	GtkGrid* _tmp5_ = NULL;
	GtkStyleContext* widget_color_context = NULL;
	GtkGrid* _tmp6_;
	GtkStyleContext* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkStack* _tmp9_ = NULL;
	GtkStack* _tmp10_;
	GtkImage* _tmp11_;
	GtkStack* _tmp12_;
	GtkGrid* _tmp13_;
	GtkStack* _tmp14_;
#line 14 "../src/Widgets/IconColorProject.vala"
	parent_class = G_OBJECT_CLASS (widgets_icon_color_project_parent_class);
#line 14 "../src/Widgets/IconColorProject.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 14 "../src/Widgets/IconColorProject.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_ICON_COLOR_PROJECT, WidgetsIconColorProject);
#line 15 "../src/Widgets/IconColorProject.vala"
	_tmp0_ = (GThemedIcon*) g_themed_icon_new ("planner-inbox");
#line 15 "../src/Widgets/IconColorProject.vala"
	_tmp1_ = self->priv->_pixel_size;
#line 15 "../src/Widgets/IconColorProject.vala"
	_tmp2_ = (GtkImage*) gtk_image_new ();
#line 15 "../src/Widgets/IconColorProject.vala"
	g_object_set (_tmp2_, "gicon", (GIcon*) _tmp0_, NULL);
#line 15 "../src/Widgets/IconColorProject.vala"
	_g_object_unref0 (_tmp0_);
#line 15 "../src/Widgets/IconColorProject.vala"
	gtk_image_set_pixel_size (_tmp2_, _tmp1_);
#line 15 "../src/Widgets/IconColorProject.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp2_, GTK_ALIGN_CENTER);
#line 15 "../src/Widgets/IconColorProject.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp2_, GTK_ALIGN_CENTER);
#line 15 "../src/Widgets/IconColorProject.vala"
	g_object_ref_sink (_tmp2_);
#line 15 "../src/Widgets/IconColorProject.vala"
	inbox_icon = _tmp2_;
#line 22 "../src/Widgets/IconColorProject.vala"
	_tmp3_ = self->priv->_pixel_size;
#line 22 "../src/Widgets/IconColorProject.vala"
	_tmp4_ = self->priv->_pixel_size;
#line 22 "../src/Widgets/IconColorProject.vala"
	_tmp5_ = (GtkGrid*) gtk_grid_new ();
#line 22 "../src/Widgets/IconColorProject.vala"
	g_object_set ((GtkWidget*) _tmp5_, "height-request", _tmp3_ - 3, NULL);
#line 22 "../src/Widgets/IconColorProject.vala"
	g_object_set ((GtkWidget*) _tmp5_, "width-request", _tmp4_ - 3, NULL);
#line 22 "../src/Widgets/IconColorProject.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp5_, GTK_ALIGN_CENTER);
#line 22 "../src/Widgets/IconColorProject.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp5_, GTK_ALIGN_CENTER);
#line 22 "../src/Widgets/IconColorProject.vala"
	g_object_ref_sink (_tmp5_);
#line 22 "../src/Widgets/IconColorProject.vala"
	_g_object_unref0 (self->priv->widget_color);
#line 22 "../src/Widgets/IconColorProject.vala"
	self->priv->widget_color = _tmp5_;
#line 29 "../src/Widgets/IconColorProject.vala"
	_tmp6_ = self->priv->widget_color;
#line 29 "../src/Widgets/IconColorProject.vala"
	_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) _tmp6_);
#line 29 "../src/Widgets/IconColorProject.vala"
	widget_color_context = _tmp7_;
#line 30 "../src/Widgets/IconColorProject.vala"
	_tmp8_ = widget_color_context;
#line 30 "../src/Widgets/IconColorProject.vala"
	gtk_style_context_add_class (_tmp8_, "label-color");
#line 32 "../src/Widgets/IconColorProject.vala"
	_tmp9_ = (GtkStack*) gtk_stack_new ();
#line 32 "../src/Widgets/IconColorProject.vala"
	gtk_stack_set_transition_type (_tmp9_, GTK_STACK_TRANSITION_TYPE_CROSSFADE);
#line 32 "../src/Widgets/IconColorProject.vala"
	g_object_ref_sink (_tmp9_);
#line 32 "../src/Widgets/IconColorProject.vala"
	_g_object_unref0 (self->priv->stack);
#line 32 "../src/Widgets/IconColorProject.vala"
	self->priv->stack = _tmp9_;
#line 36 "../src/Widgets/IconColorProject.vala"
	_tmp10_ = self->priv->stack;
#line 36 "../src/Widgets/IconColorProject.vala"
	_tmp11_ = inbox_icon;
#line 36 "../src/Widgets/IconColorProject.vala"
	gtk_stack_add_named (_tmp10_, (GtkWidget*) _tmp11_, "icon");
#line 37 "../src/Widgets/IconColorProject.vala"
	_tmp12_ = self->priv->stack;
#line 37 "../src/Widgets/IconColorProject.vala"
	_tmp13_ = self->priv->widget_color;
#line 37 "../src/Widgets/IconColorProject.vala"
	gtk_stack_add_named (_tmp12_, (GtkWidget*) _tmp13_, "color");
#line 39 "../src/Widgets/IconColorProject.vala"
	_tmp14_ = self->priv->stack;
#line 39 "../src/Widgets/IconColorProject.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp14_);
#line 41 "../src/Widgets/IconColorProject.vala"
	g_signal_connect_object ((GObject*) self, "notify::project", (GCallback) __widgets_icon_color_project___lambda37__g_object_notify, self, 0);
#line 14 "../src/Widgets/IconColorProject.vala"
	_g_object_unref0 (inbox_icon);
#line 14 "../src/Widgets/IconColorProject.vala"
	return obj;
#line 468 "IconColorProject.c"
}

static void
widgets_icon_color_project_class_init (WidgetsIconColorProjectClass * klass,
                                       gpointer klass_data)
{
#line 1 "../src/Widgets/IconColorProject.vala"
	widgets_icon_color_project_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Widgets/IconColorProject.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsIconColorProject_private_offset);
#line 1 "../src/Widgets/IconColorProject.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_icon_color_project_get_property;
#line 1 "../src/Widgets/IconColorProject.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_icon_color_project_set_property;
#line 1 "../src/Widgets/IconColorProject.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_icon_color_project_constructor;
#line 1 "../src/Widgets/IconColorProject.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_icon_color_project_finalize;
#line 1 "../src/Widgets/IconColorProject.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ICON_COLOR_PROJECT_PROJECT_PROPERTY, widgets_icon_color_project_properties[WIDGETS_ICON_COLOR_PROJECT_PROJECT_PROPERTY] = g_param_spec_object ("project", "project", "project", OBJECTS_TYPE_PROJECT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1 "../src/Widgets/IconColorProject.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ICON_COLOR_PROJECT_PIXEL_SIZE_PROPERTY, widgets_icon_color_project_properties[WIDGETS_ICON_COLOR_PROJECT_PIXEL_SIZE_PROPERTY] = g_param_spec_int ("pixel-size", "pixel-size", "pixel-size", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 491 "IconColorProject.c"
}

static void
widgets_icon_color_project_instance_init (WidgetsIconColorProject * self,
                                          gpointer klass)
{
#line 1 "../src/Widgets/IconColorProject.vala"
	self->priv = widgets_icon_color_project_get_instance_private (self);
#line 500 "IconColorProject.c"
}

static void
widgets_icon_color_project_finalize (GObject * obj)
{
	WidgetsIconColorProject * self;
#line 1 "../src/Widgets/IconColorProject.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_ICON_COLOR_PROJECT, WidgetsIconColorProject);
#line 2 "../src/Widgets/IconColorProject.vala"
	_g_object_unref0 (self->priv->_project);
#line 5 "../src/Widgets/IconColorProject.vala"
	_g_object_unref0 (self->priv->widget_color);
#line 6 "../src/Widgets/IconColorProject.vala"
	_g_object_unref0 (self->priv->stack);
#line 1 "../src/Widgets/IconColorProject.vala"
	G_OBJECT_CLASS (widgets_icon_color_project_parent_class)->finalize (obj);
#line 517 "IconColorProject.c"
}

static GType
widgets_icon_color_project_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsIconColorProjectClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_icon_color_project_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsIconColorProject), 0, (GInstanceInitFunc) widgets_icon_color_project_instance_init, NULL };
	GType widgets_icon_color_project_type_id;
	widgets_icon_color_project_type_id = g_type_register_static (gtk_event_box_get_type (), "WidgetsIconColorProject", &g_define_type_info, 0);
	WidgetsIconColorProject_private_offset = g_type_add_instance_private (widgets_icon_color_project_type_id, sizeof (WidgetsIconColorProjectPrivate));
	return widgets_icon_color_project_type_id;
}

GType
widgets_icon_color_project_get_type (void)
{
	static volatile gsize widgets_icon_color_project_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_icon_color_project_type_id__volatile)) {
		GType widgets_icon_color_project_type_id;
		widgets_icon_color_project_type_id = widgets_icon_color_project_get_type_once ();
		g_once_init_leave (&widgets_icon_color_project_type_id__volatile, widgets_icon_color_project_type_id);
	}
	return widgets_icon_color_project_type_id__volatile;
}

static void
_vala_widgets_icon_color_project_get_property (GObject * object,
                                               guint property_id,
                                               GValue * value,
                                               GParamSpec * pspec)
{
	WidgetsIconColorProject * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_ICON_COLOR_PROJECT, WidgetsIconColorProject);
#line 1 "../src/Widgets/IconColorProject.vala"
	switch (property_id) {
#line 1 "../src/Widgets/IconColorProject.vala"
		case WIDGETS_ICON_COLOR_PROJECT_PROJECT_PROPERTY:
#line 1 "../src/Widgets/IconColorProject.vala"
		g_value_set_object (value, widgets_icon_color_project_get_project (self));
#line 1 "../src/Widgets/IconColorProject.vala"
		break;
#line 1 "../src/Widgets/IconColorProject.vala"
		case WIDGETS_ICON_COLOR_PROJECT_PIXEL_SIZE_PROPERTY:
#line 1 "../src/Widgets/IconColorProject.vala"
		g_value_set_int (value, widgets_icon_color_project_get_pixel_size (self));
#line 1 "../src/Widgets/IconColorProject.vala"
		break;
#line 564 "IconColorProject.c"
		default:
#line 1 "../src/Widgets/IconColorProject.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/IconColorProject.vala"
		break;
#line 570 "IconColorProject.c"
	}
}

static void
_vala_widgets_icon_color_project_set_property (GObject * object,
                                               guint property_id,
                                               const GValue * value,
                                               GParamSpec * pspec)
{
	WidgetsIconColorProject * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_ICON_COLOR_PROJECT, WidgetsIconColorProject);
#line 1 "../src/Widgets/IconColorProject.vala"
	switch (property_id) {
#line 1 "../src/Widgets/IconColorProject.vala"
		case WIDGETS_ICON_COLOR_PROJECT_PROJECT_PROPERTY:
#line 1 "../src/Widgets/IconColorProject.vala"
		widgets_icon_color_project_set_project (self, g_value_get_object (value));
#line 1 "../src/Widgets/IconColorProject.vala"
		break;
#line 1 "../src/Widgets/IconColorProject.vala"
		case WIDGETS_ICON_COLOR_PROJECT_PIXEL_SIZE_PROPERTY:
#line 1 "../src/Widgets/IconColorProject.vala"
		widgets_icon_color_project_set_pixel_size (self, g_value_get_int (value));
#line 1 "../src/Widgets/IconColorProject.vala"
		break;
#line 596 "IconColorProject.c"
		default:
#line 1 "../src/Widgets/IconColorProject.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/IconColorProject.vala"
		break;
#line 602 "IconColorProject.c"
	}
}

