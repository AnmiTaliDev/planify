/* MainWindow.c generated by valac 0.50.10, the Vala compiler
 * generated from MainWindow.vala, do not modify */

/*
* Copyright (c) 2017 Daniel For√© (http://danielfore.com)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*/

#include <handy.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <glib.h>
#include <gdk/gdk.h>
#include <glib/gi18n-lib.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <cairo-gobject.h>

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;
typedef struct _MainWindowPrivate MainWindowPrivate;

#define LAYOUTS_TYPE_SIDEBAR (layouts_sidebar_get_type ())
#define LAYOUTS_SIDEBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_SIDEBAR, LayoutsSidebar))
#define LAYOUTS_SIDEBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_SIDEBAR, LayoutsSidebarClass))
#define LAYOUTS_IS_SIDEBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_SIDEBAR))
#define LAYOUTS_IS_SIDEBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_SIDEBAR))
#define LAYOUTS_SIDEBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_SIDEBAR, LayoutsSidebarClass))

typedef struct _LayoutsSidebar LayoutsSidebar;
typedef struct _LayoutsSidebarClass LayoutsSidebarClass;

#define LAYOUTS_TYPE_VIEW_HEADER (layouts_view_header_get_type ())
#define LAYOUTS_VIEW_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_VIEW_HEADER, LayoutsViewHeader))
#define LAYOUTS_VIEW_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_VIEW_HEADER, LayoutsViewHeaderClass))
#define LAYOUTS_IS_VIEW_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_VIEW_HEADER))
#define LAYOUTS_IS_VIEW_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_VIEW_HEADER))
#define LAYOUTS_VIEW_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_VIEW_HEADER, LayoutsViewHeaderClass))

typedef struct _LayoutsViewHeader LayoutsViewHeader;
typedef struct _LayoutsViewHeaderClass LayoutsViewHeaderClass;
enum  {
	MAIN_WINDOW_0_PROPERTY,
	MAIN_WINDOW_NUM_PROPERTIES
};
static GParamSpec* main_window_properties[MAIN_WINDOW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define VIEWS_TYPE_TODAY (views_today_get_type ())
#define VIEWS_TODAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_TODAY, ViewsToday))
#define VIEWS_TODAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_TODAY, ViewsTodayClass))
#define VIEWS_IS_TODAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_TODAY))
#define VIEWS_IS_TODAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_TODAY))
#define VIEWS_TODAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_TODAY, ViewsTodayClass))

typedef struct _ViewsToday ViewsToday;
typedef struct _ViewsTodayClass ViewsTodayClass;

#define VIEWS_SCHEDULED_TYPE_SCHEDULED (views_scheduled_scheduled_get_type ())
#define VIEWS_SCHEDULED_SCHEDULED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED, ViewsScheduledScheduled))
#define VIEWS_SCHEDULED_SCHEDULED_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_SCHEDULED_TYPE_SCHEDULED, ViewsScheduledScheduledClass))
#define VIEWS_SCHEDULED_IS_SCHEDULED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED))
#define VIEWS_SCHEDULED_IS_SCHEDULED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_SCHEDULED_TYPE_SCHEDULED))
#define VIEWS_SCHEDULED_SCHEDULED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED, ViewsScheduledScheduledClass))

typedef struct _ViewsScheduledScheduled ViewsScheduledScheduled;
typedef struct _ViewsScheduledScheduledClass ViewsScheduledScheduledClass;

#define VIEWS_TYPE_PINBOARD (views_pinboard_get_type ())
#define VIEWS_PINBOARD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_PINBOARD, ViewsPinboard))
#define VIEWS_PINBOARD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_PINBOARD, ViewsPinboardClass))
#define VIEWS_IS_PINBOARD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_PINBOARD))
#define VIEWS_IS_PINBOARD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_PINBOARD))
#define VIEWS_PINBOARD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_PINBOARD, ViewsPinboardClass))

typedef struct _ViewsPinboard ViewsPinboard;
typedef struct _ViewsPinboardClass ViewsPinboardClass;

#define VIEWS_TYPE_LABEL (views_label_get_type ())
#define VIEWS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_LABEL, ViewsLabel))
#define VIEWS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_LABEL, ViewsLabelClass))
#define VIEWS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_LABEL))
#define VIEWS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_LABEL))
#define VIEWS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_LABEL, ViewsLabelClass))

typedef struct _ViewsLabel ViewsLabel;
typedef struct _ViewsLabelClass ViewsLabelClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define VIEWS_TYPE_PROJECT (views_project_get_type ())
#define VIEWS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_PROJECT, ViewsProject))
#define VIEWS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_PROJECT, ViewsProjectClass))
#define VIEWS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_PROJECT))
#define VIEWS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_PROJECT))
#define VIEWS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_PROJECT, ViewsProjectClass))

typedef struct _ViewsProject ViewsProject;
typedef struct _ViewsProjectClass ViewsProjectClass;
typedef enum  {
	BACKEND_TYPE_NONE = 0,
	BACKEND_TYPE_LOCAL = 1,
	BACKEND_TYPE_TODOIST = 2,
	BACKEND_TYPE_CALDAV = 3
} BackendType;

#define TYPE_BACKEND_TYPE (backend_type_get_type ())
typedef struct _Block3Data Block3Data;

#define SERVICES_TYPE_TODOIST (services_todoist_get_type ())
#define SERVICES_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_TODOIST, ServicesTodoist))
#define SERVICES_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_TODOIST, ServicesTodoistClass))
#define SERVICES_IS_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_TODOIST))
#define SERVICES_IS_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_TODOIST))
#define SERVICES_TODOIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_TODOIST, ServicesTodoistClass))

typedef struct _ServicesTodoist ServicesTodoist;
typedef struct _ServicesTodoistClass ServicesTodoistClass;

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;
typedef enum  {
	PANE_TYPE_FILTER,
	PANE_TYPE_FAVORITE,
	PANE_TYPE_PROJECT,
	PANE_TYPE_LABEL,
	PANE_TYPE_TASKLIST
} PaneType;

#define TYPE_PANE_TYPE (pane_type_get_type ())
typedef enum  {
	FILTER_TYPE_TODAY,
	FILTER_TYPE_INBOX,
	FILTER_TYPE_SCHEDULED,
	FILTER_TYPE_PINBOARD
} FilterType;

#define TYPE_FILTER_TYPE (filter_type_get_type ())
#define _g_free0(var) (var = (g_free (var), NULL))

#define VIEWS_TYPE_WELCOME (views_welcome_get_type ())
#define VIEWS_WELCOME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_WELCOME, ViewsWelcome))
#define VIEWS_WELCOME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_WELCOME, ViewsWelcomeClass))
#define VIEWS_IS_WELCOME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_WELCOME))
#define VIEWS_IS_WELCOME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_WELCOME))
#define VIEWS_WELCOME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_WELCOME, ViewsWelcomeClass))

typedef struct _ViewsWelcome ViewsWelcome;
typedef struct _ViewsWelcomeClass ViewsWelcomeClass;

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;

struct _MainWindow {
	HdyWindow parent_instance;
	MainWindowPrivate * priv;
};

struct _MainWindowClass {
	HdyWindowClass parent_class;
};

struct _MainWindowPrivate {
	LayoutsSidebar* sidebar;
	GtkStack* main_stack;
	GtkStack* views_stack;
	LayoutsViewHeader* views_header;
	guint configure_id;
};

struct _Block3Data {
	int _ref_count_;
	MainWindow* self;
	BackendType backend_type;
};

static gint MainWindow_private_offset;
static gpointer main_window_parent_class = NULL;
extern ServicesDatabase* planner_database;
extern GSettings* planner_settings;
extern ServicesTodoist* planner_todoist;
extern ServicesEventBus* planner_event_bus;

GType main_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MainWindow, g_object_unref)
GType layouts_sidebar_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsSidebar, g_object_unref)
GType layouts_view_header_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsViewHeader, g_object_unref)
MainWindow* main_window_new (GtkApplication* application);
MainWindow* main_window_construct (GType object_type,
                                   GtkApplication* application);
static void main_window_add_today_view (MainWindow* self);
GType views_today_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsToday, g_object_unref)
ViewsToday* views_today_new (void);
ViewsToday* views_today_construct (GType object_type);
static void main_window_add_scheduled_view (MainWindow* self);
GType views_scheduled_scheduled_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsScheduledScheduled, g_object_unref)
ViewsScheduledScheduled* views_scheduled_scheduled_new (void);
ViewsScheduledScheduled* views_scheduled_scheduled_construct (GType object_type);
static void main_window_add_pinboard_view (MainWindow* self);
GType views_pinboard_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsPinboard, g_object_unref)
ViewsPinboard* views_pinboard_new (void);
ViewsPinboard* views_pinboard_construct (GType object_type);
static void main_window_add_label_view (MainWindow* self,
                                 const gchar* id);
GType views_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsLabel, g_object_unref)
ViewsLabel* views_label_new (void);
ViewsLabel* views_label_construct (GType object_type);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
ObjectsLabel* services_database_get_label (ServicesDatabase* self,
                                           gint64 id);
void views_label_set_label (ViewsLabel* self,
                            ObjectsLabel* value);
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
GType views_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsProject, g_object_unref)
static ViewsProject* main_window_add_project_view (MainWindow* self,
                                            ObjectsProject* project);
const gchar* objects_project_get_view_id (ObjectsProject* self);
ViewsProject* views_project_new (ObjectsProject* project);
ViewsProject* views_project_construct (GType object_type,
                                       ObjectsProject* project);
void layouts_view_header_set_project (LayoutsViewHeader* self,
                                      ObjectsProject* value);
static void main_window_init_backend (MainWindow* self);
GType backend_type_get_type (void) G_GNUC_CONST;
static Block3Data* block3_data_ref (Block3Data* _data3_);
static void block3_data_unref (void * _userdata_);
ServicesDatabase* services_database_get_default (void);
void services_database_init_database (ServicesDatabase* self);
GType services_todoist_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesTodoist, g_object_unref)
ServicesTodoist* services_todoist_get_default (void);
void services_todoist_init (ServicesTodoist* self);
static void ____lambda313_ (MainWindow* self,
                     gboolean welcome);
void services_todoist_log_out (ServicesTodoist* self);
static void _____lambda313__services_todoist_oauth_closed (ServicesTodoist* _sender,
                                                    gboolean welcome,
                                                    gpointer self);
static void ____lambda314_ (Block3Data* _data3_);
void layouts_sidebar_init (LayoutsSidebar* self,
                           BackendType backend_type);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
GType pane_type_get_type (void) G_GNUC_CONST;
GType filter_type_get_type (void) G_GNUC_CONST;
gchar* filter_type_to_string (FilterType self);
static void _____lambda314__services_todoist_first_sync_finished (ServicesTodoist* _sender,
                                                           gpointer self);
gboolean services_todoist_invalid_token (ServicesTodoist* self);
gboolean services_database_is_database_empty (ServicesDatabase* self);
#define CONSTANTS_TODOIST_SYNC_TIMEOUT 2500
static gboolean _____lambda315_ (MainWindow* self);
void services_todoist_sync_async (ServicesTodoist* self);
static gboolean ______lambda315__gsource_func (gpointer self);
static gboolean main_window_real_configure_event (GtkWidget* base,
                                           GdkEventConfigure* event);
static gboolean __lambda316_ (MainWindow* self);
static gboolean ___lambda316__gsource_func (gpointer self);
static GObject * main_window_constructor (GType type,
                                   guint n_construct_properties,
                                   GObjectConstructParam * construct_properties);
LayoutsViewHeader* layouts_view_header_new (void);
LayoutsViewHeader* layouts_view_header_construct (GType object_type);
LayoutsSidebar* layouts_sidebar_new (void);
LayoutsSidebar* layouts_sidebar_construct (GType object_type);
GType views_welcome_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsWelcome, g_object_unref)
ViewsWelcome* views_welcome_new (void);
ViewsWelcome* views_welcome_construct (GType object_type);
static void _main_window___lambda318_ (MainWindow* self,
                                gint index);
static void __main_window___lambda318__views_welcome_activated (ViewsWelcome* _sender,
                                                         gint index,
                                                         gpointer self);
static gboolean _main_window___lambda319_ (MainWindow* self);
static gboolean __main_window___lambda319__gsource_func (gpointer self);
static void _main_window___lambda320_ (MainWindow* self,
                                PaneType pane_type,
                                const gchar* id);
ObjectsProject* services_database_get_project (ServicesDatabase* self,
                                               gint64 id);
static void __main_window___lambda320__services_event_bus_pane_selected (ServicesEventBus* _sender,
                                                                  PaneType panel_type,
                                                                  const gchar* id,
                                                                  gpointer self);
static void _main_window___lambda321_ (MainWindow* self,
                                const gchar* key);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
void util_update_theme (Util* self);
static void __main_window___lambda321__g_settings_changed (GSettings* _sender,
                                                    const gchar* key,
                                                    gpointer self);
static void main_window_finalize (GObject * obj);
static GType main_window_get_type_once (void);

static inline gpointer
main_window_get_instance_private (MainWindow* self)
{
	return G_STRUCT_MEMBER_P (self, MainWindow_private_offset);
}

MainWindow*
main_window_construct (GType object_type,
                       GtkApplication* application)
{
	MainWindow * self = NULL;
#line 27 "../src/MainWindow.vala"
	g_return_val_if_fail (application != NULL, NULL);
#line 28 "../src/MainWindow.vala"
	self = (MainWindow*) g_object_new (object_type, "application", application, "icon-name", "com.github.alainm23.planner", "title", _ ("Planner"), NULL);
#line 27 "../src/MainWindow.vala"
	return self;
#line 403 "MainWindow.c"
}

MainWindow*
main_window_new (GtkApplication* application)
{
#line 27 "../src/MainWindow.vala"
	return main_window_construct (TYPE_MAIN_WINDOW, application);
#line 411 "MainWindow.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 149 "../src/MainWindow.vala"
	return self ? g_object_ref (self) : NULL;
#line 419 "MainWindow.c"
}

static void
main_window_add_today_view (MainWindow* self)
{
	ViewsToday* today_view = NULL;
	GtkStack* _tmp0_;
	GtkWidget* _tmp1_;
	ViewsToday* _tmp2_;
	ViewsToday* _tmp3_;
	GtkStack* _tmp7_;
#line 147 "../src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 149 "../src/MainWindow.vala"
	_tmp0_ = self->priv->views_stack;
#line 149 "../src/MainWindow.vala"
	_tmp1_ = gtk_stack_get_child_by_name (_tmp0_, "today-view");
#line 149 "../src/MainWindow.vala"
	_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, VIEWS_TYPE_TODAY, ViewsToday));
#line 149 "../src/MainWindow.vala"
	_g_object_unref0 (today_view);
#line 149 "../src/MainWindow.vala"
	today_view = _tmp2_;
#line 150 "../src/MainWindow.vala"
	_tmp3_ = today_view;
#line 150 "../src/MainWindow.vala"
	if (_tmp3_ == NULL) {
#line 447 "MainWindow.c"
		ViewsToday* _tmp4_;
		GtkStack* _tmp5_;
		ViewsToday* _tmp6_;
#line 151 "../src/MainWindow.vala"
		_tmp4_ = views_today_new ();
#line 151 "../src/MainWindow.vala"
		g_object_ref_sink (_tmp4_);
#line 151 "../src/MainWindow.vala"
		_g_object_unref0 (today_view);
#line 151 "../src/MainWindow.vala"
		today_view = _tmp4_;
#line 152 "../src/MainWindow.vala"
		_tmp5_ = self->priv->views_stack;
#line 152 "../src/MainWindow.vala"
		_tmp6_ = today_view;
#line 152 "../src/MainWindow.vala"
		gtk_stack_add_named (_tmp5_, (GtkWidget*) _tmp6_, "today-view");
#line 465 "MainWindow.c"
	}
#line 155 "../src/MainWindow.vala"
	_tmp7_ = self->priv->views_stack;
#line 155 "../src/MainWindow.vala"
	gtk_stack_set_visible_child_name (_tmp7_, "today-view");
#line 147 "../src/MainWindow.vala"
	_g_object_unref0 (today_view);
#line 473 "MainWindow.c"
}

static void
main_window_add_scheduled_view (MainWindow* self)
{
	ViewsScheduledScheduled* scheduled_view = NULL;
	GtkStack* _tmp0_;
	GtkWidget* _tmp1_;
	ViewsScheduledScheduled* _tmp2_;
	ViewsScheduledScheduled* _tmp3_;
	GtkStack* _tmp7_;
#line 158 "../src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 160 "../src/MainWindow.vala"
	_tmp0_ = self->priv->views_stack;
#line 160 "../src/MainWindow.vala"
	_tmp1_ = gtk_stack_get_child_by_name (_tmp0_, "scheduled-view");
#line 160 "../src/MainWindow.vala"
	_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, VIEWS_SCHEDULED_TYPE_SCHEDULED, ViewsScheduledScheduled));
#line 160 "../src/MainWindow.vala"
	_g_object_unref0 (scheduled_view);
#line 160 "../src/MainWindow.vala"
	scheduled_view = _tmp2_;
#line 161 "../src/MainWindow.vala"
	_tmp3_ = scheduled_view;
#line 161 "../src/MainWindow.vala"
	if (_tmp3_ == NULL) {
#line 501 "MainWindow.c"
		ViewsScheduledScheduled* _tmp4_;
		GtkStack* _tmp5_;
		ViewsScheduledScheduled* _tmp6_;
#line 162 "../src/MainWindow.vala"
		_tmp4_ = views_scheduled_scheduled_new ();
#line 162 "../src/MainWindow.vala"
		g_object_ref_sink (_tmp4_);
#line 162 "../src/MainWindow.vala"
		_g_object_unref0 (scheduled_view);
#line 162 "../src/MainWindow.vala"
		scheduled_view = _tmp4_;
#line 163 "../src/MainWindow.vala"
		_tmp5_ = self->priv->views_stack;
#line 163 "../src/MainWindow.vala"
		_tmp6_ = scheduled_view;
#line 163 "../src/MainWindow.vala"
		gtk_stack_add_named (_tmp5_, (GtkWidget*) _tmp6_, "scheduled-view");
#line 519 "MainWindow.c"
	}
#line 166 "../src/MainWindow.vala"
	_tmp7_ = self->priv->views_stack;
#line 166 "../src/MainWindow.vala"
	gtk_stack_set_visible_child_name (_tmp7_, "scheduled-view");
#line 158 "../src/MainWindow.vala"
	_g_object_unref0 (scheduled_view);
#line 527 "MainWindow.c"
}

static void
main_window_add_pinboard_view (MainWindow* self)
{
	ViewsPinboard* pinboard_view = NULL;
	GtkStack* _tmp0_;
	GtkWidget* _tmp1_;
	ViewsPinboard* _tmp2_;
	ViewsPinboard* _tmp3_;
	GtkStack* _tmp7_;
#line 169 "../src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 171 "../src/MainWindow.vala"
	_tmp0_ = self->priv->views_stack;
#line 171 "../src/MainWindow.vala"
	_tmp1_ = gtk_stack_get_child_by_name (_tmp0_, "pinboard-view");
#line 171 "../src/MainWindow.vala"
	_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, VIEWS_TYPE_PINBOARD, ViewsPinboard));
#line 171 "../src/MainWindow.vala"
	_g_object_unref0 (pinboard_view);
#line 171 "../src/MainWindow.vala"
	pinboard_view = _tmp2_;
#line 172 "../src/MainWindow.vala"
	_tmp3_ = pinboard_view;
#line 172 "../src/MainWindow.vala"
	if (_tmp3_ == NULL) {
#line 555 "MainWindow.c"
		ViewsPinboard* _tmp4_;
		GtkStack* _tmp5_;
		ViewsPinboard* _tmp6_;
#line 173 "../src/MainWindow.vala"
		_tmp4_ = views_pinboard_new ();
#line 173 "../src/MainWindow.vala"
		g_object_ref_sink (_tmp4_);
#line 173 "../src/MainWindow.vala"
		_g_object_unref0 (pinboard_view);
#line 173 "../src/MainWindow.vala"
		pinboard_view = _tmp4_;
#line 174 "../src/MainWindow.vala"
		_tmp5_ = self->priv->views_stack;
#line 174 "../src/MainWindow.vala"
		_tmp6_ = pinboard_view;
#line 174 "../src/MainWindow.vala"
		gtk_stack_add_named (_tmp5_, (GtkWidget*) _tmp6_, "pinboard-view");
#line 573 "MainWindow.c"
	}
#line 177 "../src/MainWindow.vala"
	_tmp7_ = self->priv->views_stack;
#line 177 "../src/MainWindow.vala"
	gtk_stack_set_visible_child_name (_tmp7_, "pinboard-view");
#line 169 "../src/MainWindow.vala"
	_g_object_unref0 (pinboard_view);
#line 581 "MainWindow.c"
}

static gint64
int64_parse (const gchar* str,
             guint _base)
{
	gint64 result = 0LL;
#line 770 "glib-2.0.vapi"
	g_return_val_if_fail (str != NULL, 0LL);
#line 771 "glib-2.0.vapi"
	result = g_ascii_strtoll (str, NULL, _base);
#line 771 "glib-2.0.vapi"
	return result;
#line 595 "MainWindow.c"
}

static void
main_window_add_label_view (MainWindow* self,
                            const gchar* id)
{
	ViewsLabel* label_view = NULL;
	GtkStack* _tmp0_;
	GtkWidget* _tmp1_;
	ViewsLabel* _tmp2_;
	ViewsLabel* _tmp3_;
	ViewsLabel* _tmp7_;
	ServicesDatabase* _tmp8_;
	ObjectsLabel* _tmp9_;
	ObjectsLabel* _tmp10_;
	GtkStack* _tmp11_;
#line 180 "../src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 180 "../src/MainWindow.vala"
	g_return_if_fail (id != NULL);
#line 182 "../src/MainWindow.vala"
	_tmp0_ = self->priv->views_stack;
#line 182 "../src/MainWindow.vala"
	_tmp1_ = gtk_stack_get_child_by_name (_tmp0_, "label-view");
#line 182 "../src/MainWindow.vala"
	_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, VIEWS_TYPE_LABEL, ViewsLabel));
#line 182 "../src/MainWindow.vala"
	_g_object_unref0 (label_view);
#line 182 "../src/MainWindow.vala"
	label_view = _tmp2_;
#line 183 "../src/MainWindow.vala"
	_tmp3_ = label_view;
#line 183 "../src/MainWindow.vala"
	if (_tmp3_ == NULL) {
#line 630 "MainWindow.c"
		ViewsLabel* _tmp4_;
		GtkStack* _tmp5_;
		ViewsLabel* _tmp6_;
#line 184 "../src/MainWindow.vala"
		_tmp4_ = views_label_new ();
#line 184 "../src/MainWindow.vala"
		g_object_ref_sink (_tmp4_);
#line 184 "../src/MainWindow.vala"
		_g_object_unref0 (label_view);
#line 184 "../src/MainWindow.vala"
		label_view = _tmp4_;
#line 185 "../src/MainWindow.vala"
		_tmp5_ = self->priv->views_stack;
#line 185 "../src/MainWindow.vala"
		_tmp6_ = label_view;
#line 185 "../src/MainWindow.vala"
		gtk_stack_add_named (_tmp5_, (GtkWidget*) _tmp6_, "label-view");
#line 648 "MainWindow.c"
	}
#line 188 "../src/MainWindow.vala"
	_tmp7_ = label_view;
#line 188 "../src/MainWindow.vala"
	_tmp8_ = planner_database;
#line 188 "../src/MainWindow.vala"
	_tmp9_ = services_database_get_label (_tmp8_, int64_parse (id, (guint) 0));
#line 188 "../src/MainWindow.vala"
	_tmp10_ = _tmp9_;
#line 188 "../src/MainWindow.vala"
	views_label_set_label (_tmp7_, _tmp10_);
#line 188 "../src/MainWindow.vala"
	_g_object_unref0 (_tmp10_);
#line 189 "../src/MainWindow.vala"
	_tmp11_ = self->priv->views_stack;
#line 189 "../src/MainWindow.vala"
	gtk_stack_set_visible_child_name (_tmp11_, "label-view");
#line 180 "../src/MainWindow.vala"
	_g_object_unref0 (label_view);
#line 668 "MainWindow.c"
}

static ViewsProject*
main_window_add_project_view (MainWindow* self,
                              ObjectsProject* project)
{
	ViewsProject* project_view = NULL;
	GtkStack* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	GtkWidget* _tmp3_;
	ViewsProject* _tmp4_;
	ViewsProject* _tmp5_;
	LayoutsViewHeader* _tmp11_;
	GtkStack* _tmp12_;
	const gchar* _tmp13_;
	const gchar* _tmp14_;
	ViewsProject* result = NULL;
#line 192 "../src/MainWindow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 192 "../src/MainWindow.vala"
	g_return_val_if_fail (project != NULL, NULL);
#line 194 "../src/MainWindow.vala"
	_tmp0_ = self->priv->views_stack;
#line 194 "../src/MainWindow.vala"
	_tmp1_ = objects_project_get_view_id (project);
#line 194 "../src/MainWindow.vala"
	_tmp2_ = _tmp1_;
#line 194 "../src/MainWindow.vala"
	_tmp3_ = gtk_stack_get_child_by_name (_tmp0_, _tmp2_);
#line 194 "../src/MainWindow.vala"
	_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp3_, VIEWS_TYPE_PROJECT, ViewsProject));
#line 194 "../src/MainWindow.vala"
	_g_object_unref0 (project_view);
#line 194 "../src/MainWindow.vala"
	project_view = _tmp4_;
#line 195 "../src/MainWindow.vala"
	_tmp5_ = project_view;
#line 195 "../src/MainWindow.vala"
	if (_tmp5_ == NULL) {
#line 709 "MainWindow.c"
		ViewsProject* _tmp6_;
		GtkStack* _tmp7_;
		ViewsProject* _tmp8_;
		const gchar* _tmp9_;
		const gchar* _tmp10_;
#line 196 "../src/MainWindow.vala"
		_tmp6_ = views_project_new (project);
#line 196 "../src/MainWindow.vala"
		g_object_ref_sink (_tmp6_);
#line 196 "../src/MainWindow.vala"
		_g_object_unref0 (project_view);
#line 196 "../src/MainWindow.vala"
		project_view = _tmp6_;
#line 197 "../src/MainWindow.vala"
		_tmp7_ = self->priv->views_stack;
#line 197 "../src/MainWindow.vala"
		_tmp8_ = project_view;
#line 197 "../src/MainWindow.vala"
		_tmp9_ = objects_project_get_view_id (project);
#line 197 "../src/MainWindow.vala"
		_tmp10_ = _tmp9_;
#line 197 "../src/MainWindow.vala"
		gtk_stack_add_named (_tmp7_, (GtkWidget*) _tmp8_, _tmp10_);
#line 733 "MainWindow.c"
	}
#line 200 "../src/MainWindow.vala"
	_tmp11_ = self->priv->views_header;
#line 200 "../src/MainWindow.vala"
	layouts_view_header_set_project (_tmp11_, project);
#line 201 "../src/MainWindow.vala"
	_tmp12_ = self->priv->views_stack;
#line 201 "../src/MainWindow.vala"
	_tmp13_ = objects_project_get_view_id (project);
#line 201 "../src/MainWindow.vala"
	_tmp14_ = _tmp13_;
#line 201 "../src/MainWindow.vala"
	gtk_stack_set_visible_child_name (_tmp12_, _tmp14_);
#line 202 "../src/MainWindow.vala"
	result = project_view;
#line 202 "../src/MainWindow.vala"
	return result;
#line 751 "MainWindow.c"
}

static Block3Data*
block3_data_ref (Block3Data* _data3_)
{
#line 205 "../src/MainWindow.vala"
	g_atomic_int_inc (&_data3_->_ref_count_);
#line 205 "../src/MainWindow.vala"
	return _data3_;
#line 761 "MainWindow.c"
}

static void
block3_data_unref (void * _userdata_)
{
	Block3Data* _data3_;
	_data3_ = (Block3Data*) _userdata_;
#line 205 "../src/MainWindow.vala"
	if (g_atomic_int_dec_and_test (&_data3_->_ref_count_)) {
#line 771 "MainWindow.c"
		MainWindow* self;
#line 205 "../src/MainWindow.vala"
		self = _data3_->self;
#line 205 "../src/MainWindow.vala"
		_g_object_unref0 (self);
#line 205 "../src/MainWindow.vala"
		g_slice_free (Block3Data, _data3_);
#line 779 "MainWindow.c"
	}
}

static void
____lambda313_ (MainWindow* self,
                gboolean welcome)
{
#line 219 "../src/MainWindow.vala"
	if (welcome) {
#line 789 "MainWindow.c"
		GSettings* _tmp0_;
		ServicesTodoist* _tmp1_;
		GtkStack* _tmp2_;
#line 220 "../src/MainWindow.vala"
		_tmp0_ = planner_settings;
#line 220 "../src/MainWindow.vala"
		g_settings_set_enum (_tmp0_, "backend-type", 0);
#line 221 "../src/MainWindow.vala"
		_tmp1_ = planner_todoist;
#line 221 "../src/MainWindow.vala"
		services_todoist_log_out (_tmp1_);
#line 222 "../src/MainWindow.vala"
		_tmp2_ = self->priv->main_stack;
#line 222 "../src/MainWindow.vala"
		gtk_stack_set_visible_child_name (_tmp2_, "welcome-view");
#line 805 "MainWindow.c"
	}
}

static void
_____lambda313__services_todoist_oauth_closed (ServicesTodoist* _sender,
                                               gboolean welcome,
                                               gpointer self)
{
#line 218 "../src/MainWindow.vala"
	____lambda313_ ((MainWindow*) self, welcome);
#line 816 "MainWindow.c"
}

static void
____lambda314_ (Block3Data* _data3_)
{
	MainWindow* self;
	LayoutsSidebar* _tmp0_;
	BackendType _tmp1_;
	ServicesEventBus* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
#line 226 "../src/MainWindow.vala"
	self = _data3_->self;
#line 227 "../src/MainWindow.vala"
	_tmp0_ = self->priv->sidebar;
#line 227 "../src/MainWindow.vala"
	_tmp1_ = _data3_->backend_type;
#line 227 "../src/MainWindow.vala"
	layouts_sidebar_init (_tmp0_, _tmp1_);
#line 228 "../src/MainWindow.vala"
	_tmp2_ = planner_event_bus;
#line 228 "../src/MainWindow.vala"
	_tmp3_ = filter_type_to_string (FILTER_TYPE_INBOX);
#line 228 "../src/MainWindow.vala"
	_tmp4_ = _tmp3_;
#line 228 "../src/MainWindow.vala"
	g_signal_emit_by_name (_tmp2_, "pane-selected", PANE_TYPE_FILTER, _tmp4_);
#line 228 "../src/MainWindow.vala"
	_g_free0 (_tmp4_);
#line 846 "MainWindow.c"
}

static void
_____lambda314__services_todoist_first_sync_finished (ServicesTodoist* _sender,
                                                      gpointer self)
{
#line 226 "../src/MainWindow.vala"
	____lambda314_ (self);
#line 855 "MainWindow.c"
}

static gboolean
_____lambda315_ (MainWindow* self)
{
	ServicesTodoist* _tmp0_;
	ServicesTodoist* _tmp1_;
	gboolean result = FALSE;
#line 238 "../src/MainWindow.vala"
	_tmp0_ = services_todoist_get_default ();
#line 238 "../src/MainWindow.vala"
	_tmp1_ = _tmp0_;
#line 238 "../src/MainWindow.vala"
	services_todoist_sync_async (_tmp1_);
#line 238 "../src/MainWindow.vala"
	_g_object_unref0 (_tmp1_);
#line 239 "../src/MainWindow.vala"
	result = G_SOURCE_REMOVE;
#line 239 "../src/MainWindow.vala"
	return result;
#line 876 "MainWindow.c"
}

static gboolean
______lambda315__gsource_func (gpointer self)
{
	gboolean result;
	result = _____lambda315_ ((MainWindow*) self);
#line 237 "../src/MainWindow.vala"
	return result;
#line 886 "MainWindow.c"
}

static void
main_window_init_backend (MainWindow* self)
{
	Block3Data* _data3_;
	GSettings* _tmp0_;
	BackendType _tmp1_;
#line 205 "../src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 205 "../src/MainWindow.vala"
	_data3_ = g_slice_new0 (Block3Data);
#line 205 "../src/MainWindow.vala"
	_data3_->_ref_count_ = 1;
#line 205 "../src/MainWindow.vala"
	_data3_->self = g_object_ref (self);
#line 206 "../src/MainWindow.vala"
	_tmp0_ = planner_settings;
#line 206 "../src/MainWindow.vala"
	_data3_->backend_type = (BackendType) g_settings_get_enum (_tmp0_, "backend-type");
#line 208 "../src/MainWindow.vala"
	_tmp1_ = _data3_->backend_type;
#line 208 "../src/MainWindow.vala"
	if (_tmp1_ == BACKEND_TYPE_LOCAL) {
#line 911 "MainWindow.c"
		ServicesDatabase* _tmp2_;
		ServicesDatabase* _tmp3_;
#line 209 "../src/MainWindow.vala"
		_tmp2_ = services_database_get_default ();
#line 209 "../src/MainWindow.vala"
		_g_object_unref0 (planner_database);
#line 209 "../src/MainWindow.vala"
		planner_database = _tmp2_;
#line 210 "../src/MainWindow.vala"
		_tmp3_ = planner_database;
#line 210 "../src/MainWindow.vala"
		services_database_init_database (_tmp3_);
#line 924 "MainWindow.c"
	} else {
		BackendType _tmp4_;
#line 211 "../src/MainWindow.vala"
		_tmp4_ = _data3_->backend_type;
#line 211 "../src/MainWindow.vala"
		if (_tmp4_ == BACKEND_TYPE_TODOIST) {
#line 931 "MainWindow.c"
			ServicesDatabase* _tmp5_;
			ServicesDatabase* _tmp6_;
			ServicesTodoist* _tmp7_;
			ServicesTodoist* _tmp8_;
			ServicesTodoist* _tmp9_;
			ServicesTodoist* _tmp10_;
			GtkStack* _tmp11_;
			gboolean _tmp12_ = FALSE;
			ServicesTodoist* _tmp13_;
#line 212 "../src/MainWindow.vala"
			_tmp5_ = services_database_get_default ();
#line 212 "../src/MainWindow.vala"
			_g_object_unref0 (planner_database);
#line 212 "../src/MainWindow.vala"
			planner_database = _tmp5_;
#line 213 "../src/MainWindow.vala"
			_tmp6_ = planner_database;
#line 213 "../src/MainWindow.vala"
			services_database_init_database (_tmp6_);
#line 215 "../src/MainWindow.vala"
			_tmp7_ = services_todoist_get_default ();
#line 215 "../src/MainWindow.vala"
			_g_object_unref0 (planner_todoist);
#line 215 "../src/MainWindow.vala"
			planner_todoist = _tmp7_;
#line 216 "../src/MainWindow.vala"
			_tmp8_ = planner_todoist;
#line 216 "../src/MainWindow.vala"
			services_todoist_init (_tmp8_);
#line 218 "../src/MainWindow.vala"
			_tmp9_ = planner_todoist;
#line 218 "../src/MainWindow.vala"
			g_signal_connect_object (_tmp9_, "oauth-closed", (GCallback) _____lambda313__services_todoist_oauth_closed, self, 0);
#line 226 "../src/MainWindow.vala"
			_tmp10_ = planner_todoist;
#line 226 "../src/MainWindow.vala"
			g_signal_connect_data (_tmp10_, "first-sync-finished", (GCallback) _____lambda314__services_todoist_first_sync_finished, block3_data_ref (_data3_), (GClosureNotify) block3_data_unref, 0);
#line 231 "../src/MainWindow.vala"
			_tmp11_ = self->priv->main_stack;
#line 231 "../src/MainWindow.vala"
			gtk_stack_set_visible_child_name (_tmp11_, "main-view");
#line 233 "../src/MainWindow.vala"
			_tmp13_ = planner_todoist;
#line 233 "../src/MainWindow.vala"
			if (!services_todoist_invalid_token (_tmp13_)) {
#line 977 "MainWindow.c"
				ServicesDatabase* _tmp14_;
#line 233 "../src/MainWindow.vala"
				_tmp14_ = planner_database;
#line 233 "../src/MainWindow.vala"
				_tmp12_ = !services_database_is_database_empty (_tmp14_);
#line 983 "MainWindow.c"
			} else {
#line 233 "../src/MainWindow.vala"
				_tmp12_ = FALSE;
#line 987 "MainWindow.c"
			}
#line 233 "../src/MainWindow.vala"
			if (_tmp12_) {
#line 991 "MainWindow.c"
				LayoutsSidebar* _tmp15_;
				BackendType _tmp16_;
				ServicesEventBus* _tmp17_;
				gchar* _tmp18_;
				gchar* _tmp19_;
#line 234 "../src/MainWindow.vala"
				_tmp15_ = self->priv->sidebar;
#line 234 "../src/MainWindow.vala"
				_tmp16_ = _data3_->backend_type;
#line 234 "../src/MainWindow.vala"
				layouts_sidebar_init (_tmp15_, _tmp16_);
#line 235 "../src/MainWindow.vala"
				_tmp17_ = planner_event_bus;
#line 235 "../src/MainWindow.vala"
				_tmp18_ = filter_type_to_string (FILTER_TYPE_INBOX);
#line 235 "../src/MainWindow.vala"
				_tmp19_ = _tmp18_;
#line 235 "../src/MainWindow.vala"
				g_signal_emit_by_name (_tmp17_, "pane-selected", PANE_TYPE_FILTER, _tmp19_);
#line 235 "../src/MainWindow.vala"
				_g_free0 (_tmp19_);
#line 237 "../src/MainWindow.vala"
				g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) CONSTANTS_TODOIST_SYNC_TIMEOUT, ______lambda315__gsource_func, g_object_ref (self), g_object_unref);
#line 1015 "MainWindow.c"
			}
		} else {
			BackendType _tmp20_;
#line 242 "../src/MainWindow.vala"
			_tmp20_ = _data3_->backend_type;
#line 242 "../src/MainWindow.vala"
			if (_tmp20_ == BACKEND_TYPE_CALDAV) {
#line 1023 "MainWindow.c"
			} else {
				GtkStack* _tmp21_;
#line 245 "../src/MainWindow.vala"
				_tmp21_ = self->priv->main_stack;
#line 245 "../src/MainWindow.vala"
				gtk_stack_set_visible_child_name (_tmp21_, "welcome-view");
#line 1030 "MainWindow.c"
			}
		}
	}
#line 205 "../src/MainWindow.vala"
	block3_data_unref (_data3_);
#line 205 "../src/MainWindow.vala"
	_data3_ = NULL;
#line 1038 "MainWindow.c"
}

static gboolean
__lambda316_ (MainWindow* self)
{
	GdkRectangle rect = {0};
	GtkAllocation _tmp0_ = {0};
	GSettings* _tmp1_;
	GdkRectangle _tmp2_;
	GdkRectangle _tmp3_;
	gint root_x = 0;
	gint root_y = 0;
	gint _tmp4_ = 0;
	gint _tmp5_ = 0;
	GSettings* _tmp6_;
	gboolean result = FALSE;
#line 255 "../src/MainWindow.vala"
	self->priv->configure_id = (guint) 0;
#line 258 "../src/MainWindow.vala"
	gtk_widget_get_allocation ((GtkWidget*) self, &_tmp0_);
#line 258 "../src/MainWindow.vala"
	rect = _tmp0_;
#line 259 "../src/MainWindow.vala"
	_tmp1_ = planner_settings;
#line 259 "../src/MainWindow.vala"
	_tmp2_ = rect;
#line 259 "../src/MainWindow.vala"
	_tmp3_ = rect;
#line 259 "../src/MainWindow.vala"
	g_settings_set (_tmp1_, "window-size", "(ii)", _tmp2_.width, _tmp3_.height);
#line 262 "../src/MainWindow.vala"
	gtk_window_get_position ((GtkWindow*) self, &_tmp4_, &_tmp5_);
#line 262 "../src/MainWindow.vala"
	root_x = _tmp4_;
#line 262 "../src/MainWindow.vala"
	root_y = _tmp5_;
#line 263 "../src/MainWindow.vala"
	_tmp6_ = planner_settings;
#line 263 "../src/MainWindow.vala"
	g_settings_set (_tmp6_, "window-position", "(ii)", root_x, root_y);
#line 265 "../src/MainWindow.vala"
	result = G_SOURCE_REMOVE;
#line 265 "../src/MainWindow.vala"
	return result;
#line 1083 "MainWindow.c"
}

static gboolean
___lambda316__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda316_ ((MainWindow*) self);
#line 254 "../src/MainWindow.vala"
	return result;
#line 1093 "MainWindow.c"
}

static gboolean
main_window_real_configure_event (GtkWidget* base,
                                  GdkEventConfigure* event)
{
	MainWindow * self;
	gboolean result = FALSE;
#line 249 "../src/MainWindow.vala"
	self = (MainWindow*) base;
#line 249 "../src/MainWindow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 250 "../src/MainWindow.vala"
	if (self->priv->configure_id != ((guint) 0)) {
#line 251 "../src/MainWindow.vala"
		g_source_remove (self->priv->configure_id);
#line 1110 "MainWindow.c"
	}
#line 254 "../src/MainWindow.vala"
	self->priv->configure_id = g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 100, ___lambda316__gsource_func, g_object_ref (self), g_object_unref);
#line 268 "../src/MainWindow.vala"
	result = GTK_WIDGET_CLASS (main_window_parent_class)->configure_event ((GtkWidget*) G_TYPE_CHECK_INSTANCE_CAST (self, hdy_window_get_type (), HdyWindow), event);
#line 268 "../src/MainWindow.vala"
	return result;
#line 1118 "MainWindow.c"
}

static void
_main_window___lambda318_ (MainWindow* self,
                           gint index)
{
	GSettings* _tmp0_;
#line 113 "../src/MainWindow.vala"
	_tmp0_ = planner_settings;
#line 113 "../src/MainWindow.vala"
	g_settings_set_enum (_tmp0_, "backend-type", index + 1);
#line 114 "../src/MainWindow.vala"
	main_window_init_backend (self);
#line 1132 "MainWindow.c"
}

static void
__main_window___lambda318__views_welcome_activated (ViewsWelcome* _sender,
                                                    gint index,
                                                    gpointer self)
{
#line 112 "../src/MainWindow.vala"
	_main_window___lambda318_ ((MainWindow*) self, index);
#line 1142 "MainWindow.c"
}

static gboolean
_main_window___lambda319_ (MainWindow* self)
{
	gboolean result = FALSE;
#line 118 "../src/MainWindow.vala"
	main_window_init_backend (self);
#line 119 "../src/MainWindow.vala"
	result = G_SOURCE_REMOVE;
#line 119 "../src/MainWindow.vala"
	return result;
#line 1155 "MainWindow.c"
}

static gboolean
__main_window___lambda319__gsource_func (gpointer self)
{
	gboolean result;
	result = _main_window___lambda319_ ((MainWindow*) self);
#line 117 "../src/MainWindow.vala"
	return result;
#line 1165 "MainWindow.c"
}

static void
_main_window___lambda320_ (MainWindow* self,
                           PaneType pane_type,
                           const gchar* id)
{
#line 122 "../src/MainWindow.vala"
	g_return_if_fail (id != NULL);
#line 123 "../src/MainWindow.vala"
	if (pane_type == PANE_TYPE_PROJECT) {
#line 1177 "MainWindow.c"
		ServicesDatabase* _tmp0_;
		ObjectsProject* _tmp1_;
		ObjectsProject* _tmp2_;
		ViewsProject* _tmp3_;
		ViewsProject* _tmp4_;
#line 124 "../src/MainWindow.vala"
		_tmp0_ = planner_database;
#line 124 "../src/MainWindow.vala"
		_tmp1_ = services_database_get_project (_tmp0_, int64_parse (id, (guint) 0));
#line 124 "../src/MainWindow.vala"
		_tmp2_ = _tmp1_;
#line 124 "../src/MainWindow.vala"
		_tmp3_ = main_window_add_project_view (self, _tmp2_);
#line 124 "../src/MainWindow.vala"
		_tmp4_ = _tmp3_;
#line 124 "../src/MainWindow.vala"
		_g_object_unref0 (_tmp4_);
#line 124 "../src/MainWindow.vala"
		_g_object_unref0 (_tmp2_);
#line 1197 "MainWindow.c"
	} else {
#line 125 "../src/MainWindow.vala"
		if (pane_type == PANE_TYPE_FILTER) {
#line 1201 "MainWindow.c"
			gchar* _tmp5_;
			gchar* _tmp6_;
			gboolean _tmp7_;
#line 126 "../src/MainWindow.vala"
			_tmp5_ = filter_type_to_string (FILTER_TYPE_INBOX);
#line 126 "../src/MainWindow.vala"
			_tmp6_ = _tmp5_;
#line 126 "../src/MainWindow.vala"
			_tmp7_ = g_strcmp0 (id, _tmp6_) == 0;
#line 126 "../src/MainWindow.vala"
			_g_free0 (_tmp6_);
#line 126 "../src/MainWindow.vala"
			if (_tmp7_) {
#line 1215 "MainWindow.c"
				ServicesDatabase* _tmp8_;
				GSettings* _tmp9_;
				ObjectsProject* _tmp10_;
				ObjectsProject* _tmp11_;
				ViewsProject* _tmp12_;
				ViewsProject* _tmp13_;
#line 127 "../src/MainWindow.vala"
				_tmp8_ = planner_database;
#line 127 "../src/MainWindow.vala"
				_tmp9_ = planner_settings;
#line 127 "../src/MainWindow.vala"
				_tmp10_ = services_database_get_project (_tmp8_, g_settings_get_int64 (_tmp9_, "inbox-project-id"));
#line 127 "../src/MainWindow.vala"
				_tmp11_ = _tmp10_;
#line 127 "../src/MainWindow.vala"
				_tmp12_ = main_window_add_project_view (self, _tmp11_);
#line 127 "../src/MainWindow.vala"
				_tmp13_ = _tmp12_;
#line 127 "../src/MainWindow.vala"
				_g_object_unref0 (_tmp13_);
#line 127 "../src/MainWindow.vala"
				_g_object_unref0 (_tmp11_);
#line 1238 "MainWindow.c"
			} else {
				gchar* _tmp14_;
				gchar* _tmp15_;
				gboolean _tmp16_;
#line 128 "../src/MainWindow.vala"
				_tmp14_ = filter_type_to_string (FILTER_TYPE_TODAY);
#line 128 "../src/MainWindow.vala"
				_tmp15_ = _tmp14_;
#line 128 "../src/MainWindow.vala"
				_tmp16_ = g_strcmp0 (id, _tmp15_) == 0;
#line 128 "../src/MainWindow.vala"
				_g_free0 (_tmp15_);
#line 128 "../src/MainWindow.vala"
				if (_tmp16_) {
#line 129 "../src/MainWindow.vala"
					main_window_add_today_view (self);
#line 1255 "MainWindow.c"
				} else {
					gchar* _tmp17_;
					gchar* _tmp18_;
					gboolean _tmp19_;
#line 130 "../src/MainWindow.vala"
					_tmp17_ = filter_type_to_string (FILTER_TYPE_SCHEDULED);
#line 130 "../src/MainWindow.vala"
					_tmp18_ = _tmp17_;
#line 130 "../src/MainWindow.vala"
					_tmp19_ = g_strcmp0 (id, _tmp18_) == 0;
#line 130 "../src/MainWindow.vala"
					_g_free0 (_tmp18_);
#line 130 "../src/MainWindow.vala"
					if (_tmp19_) {
#line 131 "../src/MainWindow.vala"
						main_window_add_scheduled_view (self);
#line 1272 "MainWindow.c"
					} else {
						gchar* _tmp20_;
						gchar* _tmp21_;
						gboolean _tmp22_;
#line 132 "../src/MainWindow.vala"
						_tmp20_ = filter_type_to_string (FILTER_TYPE_PINBOARD);
#line 132 "../src/MainWindow.vala"
						_tmp21_ = _tmp20_;
#line 132 "../src/MainWindow.vala"
						_tmp22_ = g_strcmp0 (id, _tmp21_) == 0;
#line 132 "../src/MainWindow.vala"
						_g_free0 (_tmp21_);
#line 132 "../src/MainWindow.vala"
						if (_tmp22_) {
#line 133 "../src/MainWindow.vala"
							main_window_add_pinboard_view (self);
#line 1289 "MainWindow.c"
						}
					}
				}
			}
		} else {
#line 135 "../src/MainWindow.vala"
			if (pane_type == PANE_TYPE_LABEL) {
#line 136 "../src/MainWindow.vala"
				main_window_add_label_view (self, id);
#line 1299 "MainWindow.c"
			}
		}
	}
}

static void
__main_window___lambda320__services_event_bus_pane_selected (ServicesEventBus* _sender,
                                                             PaneType panel_type,
                                                             const gchar* id,
                                                             gpointer self)
{
#line 122 "../src/MainWindow.vala"
	_main_window___lambda320_ ((MainWindow*) self, panel_type, id);
#line 1313 "MainWindow.c"
}

static void
_main_window___lambda321_ (MainWindow* self,
                           const gchar* key)
{
#line 140 "../src/MainWindow.vala"
	g_return_if_fail (key != NULL);
#line 141 "../src/MainWindow.vala"
	if (g_strcmp0 (key, "appearance") == 0) {
#line 1324 "MainWindow.c"
		Util* _tmp0_;
		Util* _tmp1_;
#line 142 "../src/MainWindow.vala"
		_tmp0_ = util_get_default ();
#line 142 "../src/MainWindow.vala"
		_tmp1_ = _tmp0_;
#line 142 "../src/MainWindow.vala"
		util_update_theme (_tmp1_);
#line 142 "../src/MainWindow.vala"
		_g_object_unref0 (_tmp1_);
#line 1335 "MainWindow.c"
	}
}

static void
__main_window___lambda321__g_settings_changed (GSettings* _sender,
                                               const gchar* key,
                                               gpointer self)
{
#line 140 "../src/MainWindow.vala"
	_main_window___lambda321_ ((MainWindow*) self, key);
#line 1346 "MainWindow.c"
}

static GObject *
main_window_constructor (GType type,
                         guint n_construct_properties,
                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	MainWindow * self;
	HdyHeaderBar* sidebar_header = NULL;
	HdyHeaderBar* _tmp0_ = NULL;
	GtkStyleContext* sidebar_header_context = NULL;
	HdyHeaderBar* _tmp1_;
	GtkStyleContext* _tmp2_;
	GtkStyleContext* _tmp3_;
	LayoutsViewHeader* _tmp4_ = NULL;
	GtkStyleContext* views_header_context = NULL;
	LayoutsViewHeader* _tmp5_;
	GtkStyleContext* _tmp6_;
	GtkStyleContext* _tmp7_;
	HdyHeaderGroup* header_group = NULL;
	HdyHeaderGroup* _tmp8_;
	HdyHeaderGroup* _tmp9_;
	HdyHeaderBar* _tmp10_;
	HdyHeaderGroup* _tmp11_;
	LayoutsViewHeader* _tmp12_;
	LayoutsSidebar* _tmp13_;
	GtkGrid* sidebar_content = NULL;
	GtkGrid* _tmp14_ = NULL;
	GtkGrid* _tmp15_;
	HdyHeaderBar* _tmp16_;
	GtkGrid* _tmp17_;
	LayoutsSidebar* _tmp18_;
	GtkStyleContext* sidebar_content_context = NULL;
	GtkGrid* _tmp19_;
	GtkStyleContext* _tmp20_;
	GtkStyleContext* _tmp21_;
	GtkStack* _tmp22_ = NULL;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp23_;
	GtkGrid* _tmp24_;
	LayoutsViewHeader* _tmp25_;
	GtkGrid* _tmp26_;
	GtkStack* _tmp27_;
	GtkStyleContext* main_grid_context = NULL;
	GtkGrid* _tmp28_;
	GtkStyleContext* _tmp29_;
	GtkStyleContext* _tmp30_;
	HdyFlap* flap_view = NULL;
	HdyFlap* _tmp31_ = NULL;
	HdyFlap* _tmp32_;
	GtkGrid* _tmp33_;
	HdyFlap* _tmp34_;
	GtkSeparator* _tmp35_;
	GtkSeparator* _tmp36_;
	HdyFlap* _tmp37_;
	GtkGrid* _tmp38_;
	ViewsWelcome* welcome_view = NULL;
	ViewsWelcome* _tmp39_;
	GtkStack* _tmp40_;
	GtkStack* _tmp41_;
	GtkStack* _tmp42_;
	GtkStack* _tmp43_;
	ViewsWelcome* _tmp44_;
	GtkStack* _tmp45_;
	HdyFlap* _tmp46_;
	GtkStack* _tmp47_;
	GSettings* _tmp48_;
	GtkGrid* _tmp49_;
	GSettings* _tmp50_;
	HdyFlap* _tmp51_;
	ViewsWelcome* _tmp52_;
	GtkStack* _tmp53_;
	guint _tmp54_;
	guint _tmp55_;
	ServicesEventBus* _tmp56_;
	GSettings* _tmp57_;
#line 42 "../src/MainWindow.vala"
	parent_class = G_OBJECT_CLASS (main_window_parent_class);
#line 42 "../src/MainWindow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 42 "../src/MainWindow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_MAIN_WINDOW, MainWindow);
#line 43 "../src/MainWindow.vala"
	_tmp0_ = (HdyHeaderBar*) hdy_header_bar_new ();
#line 43 "../src/MainWindow.vala"
	hdy_header_bar_set_has_subtitle (_tmp0_, FALSE);
#line 43 "../src/MainWindow.vala"
	hdy_header_bar_set_show_close_button (_tmp0_, TRUE);
#line 43 "../src/MainWindow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp0_, TRUE);
#line 43 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp0_);
#line 43 "../src/MainWindow.vala"
	sidebar_header = _tmp0_;
#line 48 "../src/MainWindow.vala"
	_tmp1_ = sidebar_header;
#line 48 "../src/MainWindow.vala"
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) _tmp1_);
#line 48 "../src/MainWindow.vala"
	sidebar_header_context = _tmp2_;
#line 49 "../src/MainWindow.vala"
	_tmp3_ = sidebar_header_context;
#line 49 "../src/MainWindow.vala"
	gtk_style_context_add_class (_tmp3_, GTK_STYLE_CLASS_FLAT);
#line 51 "../src/MainWindow.vala"
	_tmp4_ = layouts_view_header_new ();
#line 51 "../src/MainWindow.vala"
	hdy_header_bar_set_has_subtitle ((HdyHeaderBar*) _tmp4_, FALSE);
#line 51 "../src/MainWindow.vala"
	hdy_header_bar_set_show_close_button ((HdyHeaderBar*) _tmp4_, TRUE);
#line 51 "../src/MainWindow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp4_, TRUE);
#line 51 "../src/MainWindow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp4_, 3);
#line 51 "../src/MainWindow.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp4_, 3);
#line 51 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp4_);
#line 51 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->views_header);
#line 51 "../src/MainWindow.vala"
	self->priv->views_header = _tmp4_;
#line 59 "../src/MainWindow.vala"
	_tmp5_ = self->priv->views_header;
#line 59 "../src/MainWindow.vala"
	_tmp6_ = gtk_widget_get_style_context ((GtkWidget*) _tmp5_);
#line 59 "../src/MainWindow.vala"
	views_header_context = _tmp6_;
#line 60 "../src/MainWindow.vala"
	_tmp7_ = views_header_context;
#line 60 "../src/MainWindow.vala"
	gtk_style_context_add_class (_tmp7_, GTK_STYLE_CLASS_FLAT);
#line 62 "../src/MainWindow.vala"
	_tmp8_ = hdy_header_group_new ();
#line 62 "../src/MainWindow.vala"
	header_group = _tmp8_;
#line 63 "../src/MainWindow.vala"
	_tmp9_ = header_group;
#line 63 "../src/MainWindow.vala"
	_tmp10_ = sidebar_header;
#line 63 "../src/MainWindow.vala"
	hdy_header_group_add_header_bar (_tmp9_, _tmp10_);
#line 64 "../src/MainWindow.vala"
	_tmp11_ = header_group;
#line 64 "../src/MainWindow.vala"
	_tmp12_ = self->priv->views_header;
#line 64 "../src/MainWindow.vala"
	hdy_header_group_add_header_bar (_tmp11_, (HdyHeaderBar*) _tmp12_);
#line 66 "../src/MainWindow.vala"
	_tmp13_ = layouts_sidebar_new ();
#line 66 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp13_);
#line 66 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->sidebar);
#line 66 "../src/MainWindow.vala"
	self->priv->sidebar = _tmp13_;
#line 68 "../src/MainWindow.vala"
	_tmp14_ = (GtkGrid*) gtk_grid_new ();
#line 68 "../src/MainWindow.vala"
	gtk_widget_set_vexpand ((GtkWidget*) _tmp14_, TRUE);
#line 68 "../src/MainWindow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp14_, FALSE);
#line 68 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp14_);
#line 68 "../src/MainWindow.vala"
	sidebar_content = _tmp14_;
#line 72 "../src/MainWindow.vala"
	_tmp15_ = sidebar_content;
#line 72 "../src/MainWindow.vala"
	_tmp16_ = sidebar_header;
#line 72 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp15_, (GtkWidget*) _tmp16_, 0, 0, 1, 1);
#line 73 "../src/MainWindow.vala"
	_tmp17_ = sidebar_content;
#line 73 "../src/MainWindow.vala"
	_tmp18_ = self->priv->sidebar;
#line 73 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp17_, (GtkWidget*) _tmp18_, 0, 1, 1, 1);
#line 75 "../src/MainWindow.vala"
	_tmp19_ = sidebar_content;
#line 75 "../src/MainWindow.vala"
	_tmp20_ = gtk_widget_get_style_context ((GtkWidget*) _tmp19_);
#line 75 "../src/MainWindow.vala"
	sidebar_content_context = _tmp20_;
#line 76 "../src/MainWindow.vala"
	_tmp21_ = sidebar_content_context;
#line 76 "../src/MainWindow.vala"
	gtk_style_context_add_class (_tmp21_, "planner-sidebar");
#line 78 "../src/MainWindow.vala"
	_tmp22_ = (GtkStack*) gtk_stack_new ();
#line 78 "../src/MainWindow.vala"
	g_object_set ((GtkWidget*) _tmp22_, "expand", TRUE, NULL);
#line 78 "../src/MainWindow.vala"
	gtk_stack_set_transition_type (_tmp22_, GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT);
#line 78 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp22_);
#line 78 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->views_stack);
#line 78 "../src/MainWindow.vala"
	self->priv->views_stack = _tmp22_;
#line 83 "../src/MainWindow.vala"
	_tmp23_ = (GtkGrid*) gtk_grid_new ();
#line 83 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp23_);
#line 83 "../src/MainWindow.vala"
	main_grid = _tmp23_;
#line 84 "../src/MainWindow.vala"
	_tmp24_ = main_grid;
#line 84 "../src/MainWindow.vala"
	_tmp25_ = self->priv->views_header;
#line 84 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp24_, (GtkWidget*) _tmp25_, 0, 0, 1, 1);
#line 85 "../src/MainWindow.vala"
	_tmp26_ = main_grid;
#line 85 "../src/MainWindow.vala"
	_tmp27_ = self->priv->views_stack;
#line 85 "../src/MainWindow.vala"
	gtk_grid_attach (_tmp26_, (GtkWidget*) _tmp27_, 0, 1, 1, 1);
#line 87 "../src/MainWindow.vala"
	_tmp28_ = main_grid;
#line 87 "../src/MainWindow.vala"
	_tmp29_ = gtk_widget_get_style_context ((GtkWidget*) _tmp28_);
#line 87 "../src/MainWindow.vala"
	main_grid_context = _tmp29_;
#line 88 "../src/MainWindow.vala"
	_tmp30_ = main_grid_context;
#line 88 "../src/MainWindow.vala"
	gtk_style_context_add_class (_tmp30_, "main-view");
#line 90 "../src/MainWindow.vala"
	_tmp31_ = (HdyFlap*) hdy_flap_new ();
#line 90 "../src/MainWindow.vala"
	hdy_flap_set_locked (_tmp31_, TRUE);
#line 90 "../src/MainWindow.vala"
	hdy_flap_set_fold_policy (_tmp31_, HDY_FLAP_FOLD_POLICY_NEVER);
#line 90 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp31_);
#line 90 "../src/MainWindow.vala"
	flap_view = _tmp31_;
#line 94 "../src/MainWindow.vala"
	_tmp32_ = flap_view;
#line 94 "../src/MainWindow.vala"
	_tmp33_ = main_grid;
#line 94 "../src/MainWindow.vala"
	hdy_flap_set_content (_tmp32_, (GtkWidget*) _tmp33_);
#line 95 "../src/MainWindow.vala"
	_tmp34_ = flap_view;
#line 95 "../src/MainWindow.vala"
	_tmp35_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_VERTICAL);
#line 95 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp35_);
#line 95 "../src/MainWindow.vala"
	_tmp36_ = _tmp35_;
#line 95 "../src/MainWindow.vala"
	hdy_flap_set_separator (_tmp34_, (GtkWidget*) _tmp36_);
#line 95 "../src/MainWindow.vala"
	_g_object_unref0 (_tmp36_);
#line 96 "../src/MainWindow.vala"
	_tmp37_ = flap_view;
#line 96 "../src/MainWindow.vala"
	_tmp38_ = sidebar_content;
#line 96 "../src/MainWindow.vala"
	hdy_flap_set_flap (_tmp37_, (GtkWidget*) _tmp38_);
#line 98 "../src/MainWindow.vala"
	_tmp39_ = views_welcome_new ();
#line 98 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp39_);
#line 98 "../src/MainWindow.vala"
	welcome_view = _tmp39_;
#line 100 "../src/MainWindow.vala"
	_tmp40_ = (GtkStack*) gtk_stack_new ();
#line 100 "../src/MainWindow.vala"
	g_object_ref_sink (_tmp40_);
#line 100 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 100 "../src/MainWindow.vala"
	self->priv->main_stack = _tmp40_;
#line 101 "../src/MainWindow.vala"
	_tmp41_ = self->priv->main_stack;
#line 101 "../src/MainWindow.vala"
	g_object_set ((GtkWidget*) _tmp41_, "expand", TRUE, NULL);
#line 102 "../src/MainWindow.vala"
	_tmp42_ = self->priv->main_stack;
#line 102 "../src/MainWindow.vala"
	gtk_stack_set_transition_type (_tmp42_, GTK_STACK_TRANSITION_TYPE_CROSSFADE);
#line 104 "../src/MainWindow.vala"
	_tmp43_ = self->priv->main_stack;
#line 104 "../src/MainWindow.vala"
	_tmp44_ = welcome_view;
#line 104 "../src/MainWindow.vala"
	gtk_stack_add_named (_tmp43_, (GtkWidget*) _tmp44_, "welcome-view");
#line 105 "../src/MainWindow.vala"
	_tmp45_ = self->priv->main_stack;
#line 105 "../src/MainWindow.vala"
	_tmp46_ = flap_view;
#line 105 "../src/MainWindow.vala"
	gtk_stack_add_named (_tmp45_, (GtkWidget*) _tmp46_, "main-view");
#line 107 "../src/MainWindow.vala"
	_tmp47_ = self->priv->main_stack;
#line 107 "../src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp47_);
#line 109 "../src/MainWindow.vala"
	_tmp48_ = planner_settings;
#line 109 "../src/MainWindow.vala"
	_tmp49_ = sidebar_content;
#line 109 "../src/MainWindow.vala"
	g_settings_bind (_tmp48_, "pane-position", (GObject*) _tmp49_, "width_request", G_SETTINGS_BIND_DEFAULT);
#line 110 "../src/MainWindow.vala"
	_tmp50_ = planner_settings;
#line 110 "../src/MainWindow.vala"
	_tmp51_ = flap_view;
#line 110 "../src/MainWindow.vala"
	g_settings_bind (_tmp50_, "slim-mode", (GObject*) _tmp51_, "reveal_flap", G_SETTINGS_BIND_DEFAULT);
#line 112 "../src/MainWindow.vala"
	_tmp52_ = welcome_view;
#line 112 "../src/MainWindow.vala"
	g_signal_connect_object (_tmp52_, "activated", (GCallback) __main_window___lambda318__views_welcome_activated, self, 0);
#line 117 "../src/MainWindow.vala"
	_tmp53_ = self->priv->main_stack;
#line 117 "../src/MainWindow.vala"
	_tmp54_ = gtk_stack_get_transition_duration (_tmp53_);
#line 117 "../src/MainWindow.vala"
	_tmp55_ = _tmp54_;
#line 117 "../src/MainWindow.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp55_, __main_window___lambda319__gsource_func, g_object_ref (self), g_object_unref);
#line 122 "../src/MainWindow.vala"
	_tmp56_ = planner_event_bus;
#line 122 "../src/MainWindow.vala"
	g_signal_connect_object (_tmp56_, "pane-selected", (GCallback) __main_window___lambda320__services_event_bus_pane_selected, self, 0);
#line 140 "../src/MainWindow.vala"
	_tmp57_ = planner_settings;
#line 140 "../src/MainWindow.vala"
	g_signal_connect_object (_tmp57_, "changed", (GCallback) __main_window___lambda321__g_settings_changed, self, 0);
#line 42 "../src/MainWindow.vala"
	_g_object_unref0 (welcome_view);
#line 42 "../src/MainWindow.vala"
	_g_object_unref0 (flap_view);
#line 42 "../src/MainWindow.vala"
	_g_object_unref0 (main_grid);
#line 42 "../src/MainWindow.vala"
	_g_object_unref0 (sidebar_content);
#line 42 "../src/MainWindow.vala"
	_g_object_unref0 (header_group);
#line 42 "../src/MainWindow.vala"
	_g_object_unref0 (sidebar_header);
#line 42 "../src/MainWindow.vala"
	return obj;
#line 1695 "MainWindow.c"
}

static void
main_window_class_init (MainWindowClass * klass,
                        gpointer klass_data)
{
	GtkIconTheme* default_theme = NULL;
	GtkIconTheme* _tmp0_;
	GtkIconTheme* _tmp1_;
#line 20 "../src/MainWindow.vala"
	main_window_parent_class = g_type_class_peek_parent (klass);
#line 20 "../src/MainWindow.vala"
	g_type_class_adjust_private_offset (klass, &MainWindow_private_offset);
#line 20 "../src/MainWindow.vala"
	((GtkWidgetClass *) klass)->configure_event = (gboolean (*) (GtkWidget*, GdkEventConfigure*)) main_window_real_configure_event;
#line 20 "../src/MainWindow.vala"
	G_OBJECT_CLASS (klass)->constructor = main_window_constructor;
#line 20 "../src/MainWindow.vala"
	G_OBJECT_CLASS (klass)->finalize = main_window_finalize;
#line 36 "../src/MainWindow.vala"
	hdy_init ();
#line 38 "../src/MainWindow.vala"
	_tmp0_ = gtk_icon_theme_get_default ();
#line 38 "../src/MainWindow.vala"
	default_theme = _tmp0_;
#line 39 "../src/MainWindow.vala"
	_tmp1_ = default_theme;
#line 39 "../src/MainWindow.vala"
	gtk_icon_theme_add_resource_path (_tmp1_, "/com/github/alainm23/planner");
#line 1725 "MainWindow.c"
}

static void
main_window_instance_init (MainWindow * self,
                           gpointer klass)
{
#line 20 "../src/MainWindow.vala"
	self->priv = main_window_get_instance_private (self);
#line 26 "../src/MainWindow.vala"
	self->priv->configure_id = (guint) 0;
#line 1736 "MainWindow.c"
}

static void
main_window_finalize (GObject * obj)
{
	MainWindow * self;
#line 20 "../src/MainWindow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_MAIN_WINDOW, MainWindow);
#line 21 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->sidebar);
#line 22 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 23 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->views_stack);
#line 24 "../src/MainWindow.vala"
	_g_object_unref0 (self->priv->views_header);
#line 20 "../src/MainWindow.vala"
	G_OBJECT_CLASS (main_window_parent_class)->finalize (obj);
#line 1755 "MainWindow.c"
}

static GType
main_window_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MainWindowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) main_window_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MainWindow), 0, (GInstanceInitFunc) main_window_instance_init, NULL };
	GType main_window_type_id;
	main_window_type_id = g_type_register_static (hdy_window_get_type (), "MainWindow", &g_define_type_info, 0);
	MainWindow_private_offset = g_type_add_instance_private (main_window_type_id, sizeof (MainWindowPrivate));
	return main_window_type_id;
}

GType
main_window_get_type (void)
{
	static volatile gsize main_window_type_id__volatile = 0;
	if (g_once_init_enter (&main_window_type_id__volatile)) {
		GType main_window_type_id;
		main_window_type_id = main_window_get_type_once ();
		g_once_init_leave (&main_window_type_id__volatile, main_window_type_id);
	}
	return main_window_type_id__volatile;
}

