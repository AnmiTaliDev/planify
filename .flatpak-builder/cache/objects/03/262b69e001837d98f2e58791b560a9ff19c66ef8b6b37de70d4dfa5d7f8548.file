/* Label.c generated by valac 0.50.10, the Vala compiler
 * generated from Label.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gee.h>
#include <json-glib/json-glib.h>

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;
typedef struct _ObjectsBaseObjectPrivate ObjectsBaseObjectPrivate;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;
enum  {
	OBJECTS_LABEL_0_PROPERTY,
	OBJECTS_LABEL_NAME_PROPERTY,
	OBJECTS_LABEL_COLOR_PROPERTY,
	OBJECTS_LABEL_ITEM_ORDER_PROPERTY,
	OBJECTS_LABEL_IS_DELETED_PROPERTY,
	OBJECTS_LABEL_IS_FAVORITE_PROPERTY,
	OBJECTS_LABEL_TODOIST_PROPERTY,
	OBJECTS_LABEL_LABEL_COUNT_PROPERTY,
	OBJECTS_LABEL_NUM_PROPERTIES
};
static GParamSpec* objects_label_properties[OBJECTS_LABEL_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
#define __vala_JsonNode_free0(var) ((var == NULL) ? NULL : (var = (_vala_JsonNode_free (var), NULL)))

#define OBJECTS_TYPE_ITEM_LABEL (objects_item_label_get_type ())
#define OBJECTS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabel))
#define OBJECTS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))
#define OBJECTS_IS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_IS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_ITEM_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))

typedef struct _ObjectsItemLabel ObjectsItemLabel;
typedef struct _ObjectsItemLabelClass ObjectsItemLabelClass;
enum  {
	OBJECTS_LABEL_LABEL_COUNT_UPDATED_SIGNAL,
	OBJECTS_LABEL_NUM_SIGNALS
};
static guint objects_label_signals[OBJECTS_LABEL_NUM_SIGNALS] = {0};

struct _ObjectsBaseObject {
	GObject parent_instance;
	ObjectsBaseObjectPrivate * priv;
};

struct _ObjectsBaseObjectClass {
	GObjectClass parent_class;
	gchar* (*get_update_json) (ObjectsBaseObject* self, const gchar* uuid, const gchar* temp_id);
	gchar* (*get_add_json) (ObjectsBaseObject* self, const gchar* temp_id, const gchar* uuid);
};

struct _ObjectsLabel {
	ObjectsBaseObject parent_instance;
	ObjectsLabelPrivate * priv;
};

struct _ObjectsLabelClass {
	ObjectsBaseObjectClass parent_class;
};

struct _ObjectsLabelPrivate {
	gchar* _name;
	gchar* _color;
	gint _item_order;
	gboolean _is_deleted;
	gboolean _is_favorite;
	gboolean _todoist;
	gint* _label_count;
};

static gint ObjectsLabel_private_offset;
static gpointer objects_label_parent_class = NULL;
extern ServicesDatabase* planner_database;

GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
gchar* objects_base_object_get_add_json (ObjectsBaseObject* self,
                                         const gchar* temp_id,
                                         const gchar* uuid);
gchar* objects_base_object_get_update_json (ObjectsBaseObject* self,
                                            const gchar* uuid,
                                            const gchar* temp_id);
static gint objects_label_update_label_count (ObjectsLabel* self);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
GeeArrayList* services_database_get_items_by_label (ServicesDatabase* self,
                                                    ObjectsLabel* label,
                                                    gboolean checked);
ObjectsLabel* objects_label_new_from_json (JsonNode* node);
ObjectsLabel* objects_label_construct_from_json (GType object_type,
                                                 JsonNode* node);
ObjectsBaseObject* objects_base_object_new (void);
ObjectsBaseObject* objects_base_object_construct (GType object_type);
void objects_base_object_set_id (ObjectsBaseObject* self,
                                 gint64 value);
void objects_label_update_from_json (ObjectsLabel* self,
                                     JsonNode* node);
void objects_label_set_todoist (ObjectsLabel* self,
                                gboolean value);
void objects_label_set_name (ObjectsLabel* self,
                             const gchar* value);
void objects_label_set_color (ObjectsLabel* self,
                              const gchar* value);
void objects_label_set_is_favorite (ObjectsLabel* self,
                                    gboolean value);
void objects_label_set_is_deleted (ObjectsLabel* self,
                                   gboolean value);
void objects_label_set_item_order (ObjectsLabel* self,
                                   gint value);
static gchar* objects_label_real_get_add_json (ObjectsBaseObject* base,
                                        const gchar* temp_id,
                                        const gchar* uuid);
static gchar* objects_label_real_get_update_json (ObjectsBaseObject* base,
                                           const gchar* uuid,
                                           const gchar* temp_id);
gint64 objects_base_object_get_id (ObjectsBaseObject* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gchar* util_get_encode_text (Util* self,
                             const gchar* text);
const gchar* objects_label_get_name (ObjectsLabel* self);
const gchar* objects_label_get_color (ObjectsLabel* self);
gint objects_label_get_item_order (ObjectsLabel* self);
gboolean objects_label_get_is_favorite (ObjectsLabel* self);
static void _vala_JsonNode_free (JsonNode* self);
ObjectsLabel* objects_label_new (void);
ObjectsLabel* objects_label_construct (GType object_type);
gboolean objects_label_get_is_deleted (ObjectsLabel* self);
gboolean objects_label_get_todoist (ObjectsLabel* self);
gint objects_label_get_label_count (ObjectsLabel* self);
static gint* _int_dup (gint* self);
void objects_label_set_label_count (ObjectsLabel* self,
                                    gint value);
static GObject * objects_label_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties);
static void _objects_label___lambda6_ (ObjectsLabel* self);
static void __objects_label___lambda6__objects_base_object_deleted (ObjectsBaseObject* _sender,
                                                             gpointer self);
static void _objects_label___lambda7_ (ObjectsLabel* self,
                                ObjectsItem* item);
GType objects_item_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItemLabel, g_object_unref)
GeeHashMap* objects_item_get_labels (ObjectsItem* self);
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
static void __objects_label___lambda7__services_database_item_added (ServicesDatabase* _sender,
                                                              ObjectsItem* item,
                                                              gboolean insert,
                                                              gpointer self);
static void _objects_label___lambda8_ (ObjectsLabel* self,
                                ObjectsItem* item);
static void __objects_label___lambda8__services_database_item_deleted (ServicesDatabase* _sender,
                                                                ObjectsItem* item,
                                                                gpointer self);
static void _objects_label___lambda9_ (ObjectsLabel* self,
                                ObjectsItem* item);
static void __objects_label___lambda9__services_database_item_updated (ServicesDatabase* _sender,
                                                                ObjectsItem* item,
                                                                gint64 update_id,
                                                                gpointer self);
static void _objects_label___lambda10_ (ObjectsLabel* self,
                                 ObjectsItemLabel* item_label);
ObjectsLabel* objects_item_label_get_label (ObjectsItemLabel* self);
static void __objects_label___lambda10__services_database_item_label_added (ServicesDatabase* _sender,
                                                                     ObjectsItemLabel* item_label,
                                                                     gpointer self);
static void _objects_label___lambda11_ (ObjectsLabel* self,
                                 ObjectsItemLabel* item_label);
static void __objects_label___lambda11__services_database_item_label_deleted (ServicesDatabase* _sender,
                                                                       ObjectsItemLabel* item_label,
                                                                       gpointer self);
static void objects_label_finalize (GObject * obj);
static GType objects_label_get_type_once (void);
static void _vala_objects_label_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec);
static void _vala_objects_label_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec);

static inline gpointer
objects_label_get_instance_private (ObjectsLabel* self)
{
	return G_STRUCT_MEMBER_P (self, ObjectsLabel_private_offset);
}

static gint
objects_label_update_label_count (ObjectsLabel* self)
{
	ServicesDatabase* _tmp0_;
	GeeArrayList* _tmp1_;
	GeeArrayList* _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
	gint result = 0;
#line 88 "../src/Objects/Label.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 89 "../src/Objects/Label.vala"
	_tmp0_ = planner_database;
#line 89 "../src/Objects/Label.vala"
	_tmp1_ = services_database_get_items_by_label (_tmp0_, self, FALSE);
#line 89 "../src/Objects/Label.vala"
	_tmp2_ = _tmp1_;
#line 89 "../src/Objects/Label.vala"
	_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
#line 89 "../src/Objects/Label.vala"
	_tmp4_ = _tmp3_;
#line 89 "../src/Objects/Label.vala"
	_tmp5_ = _tmp4_;
#line 89 "../src/Objects/Label.vala"
	_g_object_unref0 (_tmp2_);
#line 89 "../src/Objects/Label.vala"
	result = _tmp5_;
#line 89 "../src/Objects/Label.vala"
	return result;
#line 298 "Label.c"
}

ObjectsLabel*
objects_label_construct_from_json (GType object_type,
                                   JsonNode* node)
{
	ObjectsLabel * self = NULL;
	JsonObject* _tmp0_;
#line 92 "../src/Objects/Label.vala"
	g_return_val_if_fail (node != NULL, NULL);
#line 92 "../src/Objects/Label.vala"
	self = (ObjectsLabel*) objects_base_object_construct (object_type);
#line 93 "../src/Objects/Label.vala"
	_tmp0_ = json_node_get_object (node);
#line 93 "../src/Objects/Label.vala"
	objects_base_object_set_id ((ObjectsBaseObject*) self, json_object_get_int_member (_tmp0_, "id"));
#line 94 "../src/Objects/Label.vala"
	objects_label_update_from_json (self, node);
#line 95 "../src/Objects/Label.vala"
	objects_label_set_todoist (self, TRUE);
#line 92 "../src/Objects/Label.vala"
	return self;
#line 321 "Label.c"
}

ObjectsLabel*
objects_label_new_from_json (JsonNode* node)
{
#line 92 "../src/Objects/Label.vala"
	return objects_label_construct_from_json (OBJECTS_TYPE_LABEL, node);
#line 329 "Label.c"
}

void
objects_label_update_from_json (ObjectsLabel* self,
                                JsonNode* node)
{
	JsonObject* _tmp0_;
	const gchar* _tmp1_;
	JsonObject* _tmp2_;
	JsonObject* _tmp5_;
	JsonObject* _tmp7_;
	JsonObject* _tmp9_;
#line 98 "../src/Objects/Label.vala"
	g_return_if_fail (self != NULL);
#line 98 "../src/Objects/Label.vala"
	g_return_if_fail (node != NULL);
#line 99 "../src/Objects/Label.vala"
	_tmp0_ = json_node_get_object (node);
#line 99 "../src/Objects/Label.vala"
	_tmp1_ = json_object_get_string_member (_tmp0_, "name");
#line 99 "../src/Objects/Label.vala"
	objects_label_set_name (self, _tmp1_);
#line 101 "../src/Objects/Label.vala"
	_tmp2_ = json_node_get_object (node);
#line 101 "../src/Objects/Label.vala"
	if (!json_object_get_null_member (_tmp2_, "color")) {
#line 356 "Label.c"
		JsonObject* _tmp3_;
		const gchar* _tmp4_;
#line 102 "../src/Objects/Label.vala"
		_tmp3_ = json_node_get_object (node);
#line 102 "../src/Objects/Label.vala"
		_tmp4_ = json_object_get_string_member (_tmp3_, "color");
#line 102 "../src/Objects/Label.vala"
		objects_label_set_color (self, _tmp4_);
#line 365 "Label.c"
	}
#line 105 "../src/Objects/Label.vala"
	_tmp5_ = json_node_get_object (node);
#line 105 "../src/Objects/Label.vala"
	if (!json_object_get_null_member (_tmp5_, "is_favorite")) {
#line 371 "Label.c"
		JsonObject* _tmp6_;
#line 106 "../src/Objects/Label.vala"
		_tmp6_ = json_node_get_object (node);
#line 106 "../src/Objects/Label.vala"
		objects_label_set_is_favorite (self, json_object_get_boolean_member (_tmp6_, "is_favorite"));
#line 377 "Label.c"
	}
#line 109 "../src/Objects/Label.vala"
	_tmp7_ = json_node_get_object (node);
#line 109 "../src/Objects/Label.vala"
	if (!json_object_get_null_member (_tmp7_, "is_deleted")) {
#line 383 "Label.c"
		JsonObject* _tmp8_;
#line 110 "../src/Objects/Label.vala"
		_tmp8_ = json_node_get_object (node);
#line 110 "../src/Objects/Label.vala"
		objects_label_set_is_deleted (self, json_object_get_boolean_member (_tmp8_, "is_deleted"));
#line 389 "Label.c"
	}
#line 113 "../src/Objects/Label.vala"
	_tmp9_ = json_node_get_object (node);
#line 113 "../src/Objects/Label.vala"
	if (!json_object_get_null_member (_tmp9_, "item_order")) {
#line 395 "Label.c"
		JsonObject* _tmp10_;
#line 114 "../src/Objects/Label.vala"
		_tmp10_ = json_node_get_object (node);
#line 114 "../src/Objects/Label.vala"
		objects_label_set_item_order (self, (gint) ((gint32) json_object_get_int_member (_tmp10_, "item_order")));
#line 401 "Label.c"
	}
}

static gchar*
objects_label_real_get_add_json (ObjectsBaseObject* base,
                                 const gchar* temp_id,
                                 const gchar* uuid)
{
	ObjectsLabel * self;
	gchar* _tmp0_;
	gchar* result = NULL;
#line 118 "../src/Objects/Label.vala"
	self = (ObjectsLabel*) base;
#line 118 "../src/Objects/Label.vala"
	g_return_val_if_fail (temp_id != NULL, NULL);
#line 118 "../src/Objects/Label.vala"
	g_return_val_if_fail (uuid != NULL, NULL);
#line 119 "../src/Objects/Label.vala"
	_tmp0_ = objects_base_object_get_update_json ((ObjectsBaseObject*) self, uuid, temp_id);
#line 119 "../src/Objects/Label.vala"
	result = _tmp0_;
#line 119 "../src/Objects/Label.vala"
	return result;
#line 425 "Label.c"
}

static void
_vala_JsonNode_free (JsonNode* self)
{
#line 166 "../src/Objects/Label.vala"
	g_boxed_free (json_node_get_type (), self);
#line 433 "Label.c"
}

static gchar*
objects_label_real_get_update_json (ObjectsBaseObject* base,
                                    const gchar* uuid,
                                    const gchar* temp_id)
{
	ObjectsLabel * self;
	JsonBuilder* builder = NULL;
	JsonBuilder* _tmp0_;
	JsonBuilder* _tmp1_;
	JsonBuilder* _tmp2_;
	JsonBuilder* _tmp3_;
	const gchar* _tmp4_ = NULL;
	JsonBuilder* _tmp5_;
	JsonBuilder* _tmp6_;
	JsonBuilder* _tmp7_;
	JsonBuilder* _tmp10_;
	JsonBuilder* _tmp11_;
	JsonBuilder* _tmp16_;
	JsonBuilder* _tmp17_;
	Util* _tmp18_;
	Util* _tmp19_;
	const gchar* _tmp20_;
	gchar* _tmp21_;
	gchar* _tmp22_;
	JsonBuilder* _tmp23_;
	JsonBuilder* _tmp24_;
	const gchar* _tmp25_;
	JsonBuilder* _tmp26_;
	JsonBuilder* _tmp27_;
	gint _tmp28_;
	JsonBuilder* _tmp29_;
	JsonBuilder* _tmp30_;
	gboolean _tmp31_;
	JsonBuilder* _tmp32_;
	JsonBuilder* _tmp33_;
	JsonBuilder* _tmp34_;
	JsonGenerator* generator = NULL;
	JsonGenerator* _tmp35_;
	JsonNode* root = NULL;
	JsonBuilder* _tmp36_;
	JsonNode* _tmp37_;
	gchar* _tmp38_;
	gchar* result = NULL;
#line 121 "../src/Objects/Label.vala"
	self = (ObjectsLabel*) base;
#line 121 "../src/Objects/Label.vala"
	g_return_val_if_fail (uuid != NULL, NULL);
#line 122 "../src/Objects/Label.vala"
	_tmp0_ = json_builder_new ();
#line 122 "../src/Objects/Label.vala"
	builder = _tmp0_;
#line 123 "../src/Objects/Label.vala"
	_tmp1_ = builder;
#line 123 "../src/Objects/Label.vala"
	json_builder_begin_array (_tmp1_);
#line 124 "../src/Objects/Label.vala"
	_tmp2_ = builder;
#line 124 "../src/Objects/Label.vala"
	json_builder_begin_object (_tmp2_);
#line 127 "../src/Objects/Label.vala"
	_tmp3_ = builder;
#line 127 "../src/Objects/Label.vala"
	json_builder_set_member_name (_tmp3_, "type");
#line 128 "../src/Objects/Label.vala"
	if (temp_id == NULL) {
#line 128 "../src/Objects/Label.vala"
		_tmp4_ = "label_update";
#line 503 "Label.c"
	} else {
#line 128 "../src/Objects/Label.vala"
		_tmp4_ = "label_add";
#line 507 "Label.c"
	}
#line 128 "../src/Objects/Label.vala"
	_tmp5_ = builder;
#line 128 "../src/Objects/Label.vala"
	json_builder_add_string_value (_tmp5_, _tmp4_);
#line 130 "../src/Objects/Label.vala"
	_tmp6_ = builder;
#line 130 "../src/Objects/Label.vala"
	json_builder_set_member_name (_tmp6_, "uuid");
#line 131 "../src/Objects/Label.vala"
	_tmp7_ = builder;
#line 131 "../src/Objects/Label.vala"
	json_builder_add_string_value (_tmp7_, uuid);
#line 133 "../src/Objects/Label.vala"
	if (temp_id != NULL) {
#line 523 "Label.c"
		JsonBuilder* _tmp8_;
		JsonBuilder* _tmp9_;
#line 134 "../src/Objects/Label.vala"
		_tmp8_ = builder;
#line 134 "../src/Objects/Label.vala"
		json_builder_set_member_name (_tmp8_, "temp_id");
#line 135 "../src/Objects/Label.vala"
		_tmp9_ = builder;
#line 135 "../src/Objects/Label.vala"
		json_builder_add_string_value (_tmp9_, temp_id);
#line 534 "Label.c"
	}
#line 138 "../src/Objects/Label.vala"
	_tmp10_ = builder;
#line 138 "../src/Objects/Label.vala"
	json_builder_set_member_name (_tmp10_, "args");
#line 139 "../src/Objects/Label.vala"
	_tmp11_ = builder;
#line 139 "../src/Objects/Label.vala"
	json_builder_begin_object (_tmp11_);
#line 141 "../src/Objects/Label.vala"
	if (temp_id == NULL) {
#line 546 "Label.c"
		JsonBuilder* _tmp12_;
		JsonBuilder* _tmp13_;
		gint64 _tmp14_;
		gint64 _tmp15_;
#line 142 "../src/Objects/Label.vala"
		_tmp12_ = builder;
#line 142 "../src/Objects/Label.vala"
		json_builder_set_member_name (_tmp12_, "id");
#line 143 "../src/Objects/Label.vala"
		_tmp13_ = builder;
#line 143 "../src/Objects/Label.vala"
		_tmp14_ = objects_base_object_get_id ((ObjectsBaseObject*) self);
#line 143 "../src/Objects/Label.vala"
		_tmp15_ = _tmp14_;
#line 143 "../src/Objects/Label.vala"
		json_builder_add_int_value (_tmp13_, _tmp15_);
#line 563 "Label.c"
	}
#line 146 "../src/Objects/Label.vala"
	_tmp16_ = builder;
#line 146 "../src/Objects/Label.vala"
	json_builder_set_member_name (_tmp16_, "name");
#line 147 "../src/Objects/Label.vala"
	_tmp17_ = builder;
#line 147 "../src/Objects/Label.vala"
	_tmp18_ = util_get_default ();
#line 147 "../src/Objects/Label.vala"
	_tmp19_ = _tmp18_;
#line 147 "../src/Objects/Label.vala"
	_tmp20_ = self->priv->_name;
#line 147 "../src/Objects/Label.vala"
	_tmp21_ = util_get_encode_text (_tmp19_, _tmp20_);
#line 147 "../src/Objects/Label.vala"
	_tmp22_ = _tmp21_;
#line 147 "../src/Objects/Label.vala"
	json_builder_add_string_value (_tmp17_, _tmp22_);
#line 147 "../src/Objects/Label.vala"
	_g_free0 (_tmp22_);
#line 147 "../src/Objects/Label.vala"
	_g_object_unref0 (_tmp19_);
#line 149 "../src/Objects/Label.vala"
	_tmp23_ = builder;
#line 149 "../src/Objects/Label.vala"
	json_builder_set_member_name (_tmp23_, "color");
#line 150 "../src/Objects/Label.vala"
	_tmp24_ = builder;
#line 150 "../src/Objects/Label.vala"
	_tmp25_ = self->priv->_color;
#line 150 "../src/Objects/Label.vala"
	json_builder_add_string_value (_tmp24_, _tmp25_);
#line 152 "../src/Objects/Label.vala"
	_tmp26_ = builder;
#line 152 "../src/Objects/Label.vala"
	json_builder_set_member_name (_tmp26_, "item_order");
#line 153 "../src/Objects/Label.vala"
	_tmp27_ = builder;
#line 153 "../src/Objects/Label.vala"
	_tmp28_ = self->priv->_item_order;
#line 153 "../src/Objects/Label.vala"
	json_builder_add_int_value (_tmp27_, (gint64) _tmp28_);
#line 155 "../src/Objects/Label.vala"
	_tmp29_ = builder;
#line 155 "../src/Objects/Label.vala"
	json_builder_set_member_name (_tmp29_, "is_favorite");
#line 156 "../src/Objects/Label.vala"
	_tmp30_ = builder;
#line 156 "../src/Objects/Label.vala"
	_tmp31_ = self->priv->_is_favorite;
#line 156 "../src/Objects/Label.vala"
	json_builder_add_boolean_value (_tmp30_, _tmp31_);
#line 158 "../src/Objects/Label.vala"
	_tmp32_ = builder;
#line 158 "../src/Objects/Label.vala"
	json_builder_end_object (_tmp32_);
#line 159 "../src/Objects/Label.vala"
	_tmp33_ = builder;
#line 159 "../src/Objects/Label.vala"
	json_builder_end_object (_tmp33_);
#line 160 "../src/Objects/Label.vala"
	_tmp34_ = builder;
#line 160 "../src/Objects/Label.vala"
	json_builder_end_array (_tmp34_);
#line 162 "../src/Objects/Label.vala"
	_tmp35_ = json_generator_new ();
#line 162 "../src/Objects/Label.vala"
	generator = _tmp35_;
#line 163 "../src/Objects/Label.vala"
	_tmp36_ = builder;
#line 163 "../src/Objects/Label.vala"
	_tmp37_ = json_builder_get_root (_tmp36_);
#line 163 "../src/Objects/Label.vala"
	root = _tmp37_;
#line 164 "../src/Objects/Label.vala"
	json_generator_set_root (generator, root);
#line 166 "../src/Objects/Label.vala"
	_tmp38_ = json_generator_to_data (generator, NULL);
#line 166 "../src/Objects/Label.vala"
	result = _tmp38_;
#line 166 "../src/Objects/Label.vala"
	__vala_JsonNode_free0 (root);
#line 166 "../src/Objects/Label.vala"
	_g_object_unref0 (generator);
#line 166 "../src/Objects/Label.vala"
	_g_object_unref0 (builder);
#line 166 "../src/Objects/Label.vala"
	return result;
#line 653 "Label.c"
}

ObjectsLabel*
objects_label_construct (GType object_type)
{
	ObjectsLabel * self = NULL;
#line 22 "../src/Objects/Label.vala"
	self = (ObjectsLabel*) objects_base_object_construct (object_type);
#line 22 "../src/Objects/Label.vala"
	return self;
#line 664 "Label.c"
}

ObjectsLabel*
objects_label_new (void)
{
#line 22 "../src/Objects/Label.vala"
	return objects_label_construct (OBJECTS_TYPE_LABEL);
#line 672 "Label.c"
}

const gchar*
objects_label_get_name (ObjectsLabel* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 23 "../src/Objects/Label.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "../src/Objects/Label.vala"
	_tmp0_ = self->priv->_name;
#line 23 "../src/Objects/Label.vala"
	result = _tmp0_;
#line 23 "../src/Objects/Label.vala"
	return result;
#line 688 "Label.c"
}

void
objects_label_set_name (ObjectsLabel* self,
                        const gchar* value)
{
	gchar* old_value;
#line 23 "../src/Objects/Label.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/Objects/Label.vala"
	old_value = objects_label_get_name (self);
#line 23 "../src/Objects/Label.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 702 "Label.c"
		gchar* _tmp0_;
#line 23 "../src/Objects/Label.vala"
		_tmp0_ = g_strdup (value);
#line 23 "../src/Objects/Label.vala"
		_g_free0 (self->priv->_name);
#line 23 "../src/Objects/Label.vala"
		self->priv->_name = _tmp0_;
#line 23 "../src/Objects/Label.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_label_properties[OBJECTS_LABEL_NAME_PROPERTY]);
#line 712 "Label.c"
	}
}

const gchar*
objects_label_get_color (ObjectsLabel* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 24 "../src/Objects/Label.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 24 "../src/Objects/Label.vala"
	_tmp0_ = self->priv->_color;
#line 24 "../src/Objects/Label.vala"
	result = _tmp0_;
#line 24 "../src/Objects/Label.vala"
	return result;
#line 729 "Label.c"
}

void
objects_label_set_color (ObjectsLabel* self,
                         const gchar* value)
{
	gchar* old_value;
#line 24 "../src/Objects/Label.vala"
	g_return_if_fail (self != NULL);
#line 24 "../src/Objects/Label.vala"
	old_value = objects_label_get_color (self);
#line 24 "../src/Objects/Label.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 743 "Label.c"
		gchar* _tmp0_;
#line 24 "../src/Objects/Label.vala"
		_tmp0_ = g_strdup (value);
#line 24 "../src/Objects/Label.vala"
		_g_free0 (self->priv->_color);
#line 24 "../src/Objects/Label.vala"
		self->priv->_color = _tmp0_;
#line 24 "../src/Objects/Label.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_label_properties[OBJECTS_LABEL_COLOR_PROPERTY]);
#line 753 "Label.c"
	}
}

gint
objects_label_get_item_order (ObjectsLabel* self)
{
	gint result;
#line 25 "../src/Objects/Label.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 25 "../src/Objects/Label.vala"
	result = self->priv->_item_order;
#line 25 "../src/Objects/Label.vala"
	return result;
#line 767 "Label.c"
}

void
objects_label_set_item_order (ObjectsLabel* self,
                              gint value)
{
	gint old_value;
#line 25 "../src/Objects/Label.vala"
	g_return_if_fail (self != NULL);
#line 25 "../src/Objects/Label.vala"
	old_value = objects_label_get_item_order (self);
#line 25 "../src/Objects/Label.vala"
	if (old_value != value) {
#line 25 "../src/Objects/Label.vala"
		self->priv->_item_order = value;
#line 25 "../src/Objects/Label.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_label_properties[OBJECTS_LABEL_ITEM_ORDER_PROPERTY]);
#line 785 "Label.c"
	}
}

gboolean
objects_label_get_is_deleted (ObjectsLabel* self)
{
	gboolean result;
#line 26 "../src/Objects/Label.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 26 "../src/Objects/Label.vala"
	result = self->priv->_is_deleted;
#line 26 "../src/Objects/Label.vala"
	return result;
#line 799 "Label.c"
}

void
objects_label_set_is_deleted (ObjectsLabel* self,
                              gboolean value)
{
	gboolean old_value;
#line 26 "../src/Objects/Label.vala"
	g_return_if_fail (self != NULL);
#line 26 "../src/Objects/Label.vala"
	old_value = objects_label_get_is_deleted (self);
#line 26 "../src/Objects/Label.vala"
	if (old_value != value) {
#line 26 "../src/Objects/Label.vala"
		self->priv->_is_deleted = value;
#line 26 "../src/Objects/Label.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_label_properties[OBJECTS_LABEL_IS_DELETED_PROPERTY]);
#line 817 "Label.c"
	}
}

gboolean
objects_label_get_is_favorite (ObjectsLabel* self)
{
	gboolean result;
#line 27 "../src/Objects/Label.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 27 "../src/Objects/Label.vala"
	result = self->priv->_is_favorite;
#line 27 "../src/Objects/Label.vala"
	return result;
#line 831 "Label.c"
}

void
objects_label_set_is_favorite (ObjectsLabel* self,
                               gboolean value)
{
	gboolean old_value;
#line 27 "../src/Objects/Label.vala"
	g_return_if_fail (self != NULL);
#line 27 "../src/Objects/Label.vala"
	old_value = objects_label_get_is_favorite (self);
#line 27 "../src/Objects/Label.vala"
	if (old_value != value) {
#line 27 "../src/Objects/Label.vala"
		self->priv->_is_favorite = value;
#line 27 "../src/Objects/Label.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_label_properties[OBJECTS_LABEL_IS_FAVORITE_PROPERTY]);
#line 849 "Label.c"
	}
}

gboolean
objects_label_get_todoist (ObjectsLabel* self)
{
	gboolean result;
#line 28 "../src/Objects/Label.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 28 "../src/Objects/Label.vala"
	result = self->priv->_todoist;
#line 28 "../src/Objects/Label.vala"
	return result;
#line 863 "Label.c"
}

void
objects_label_set_todoist (ObjectsLabel* self,
                           gboolean value)
{
	gboolean old_value;
#line 28 "../src/Objects/Label.vala"
	g_return_if_fail (self != NULL);
#line 28 "../src/Objects/Label.vala"
	old_value = objects_label_get_todoist (self);
#line 28 "../src/Objects/Label.vala"
	if (old_value != value) {
#line 28 "../src/Objects/Label.vala"
		self->priv->_todoist = value;
#line 28 "../src/Objects/Label.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_label_properties[OBJECTS_LABEL_TODOIST_PROPERTY]);
#line 881 "Label.c"
	}
}

static gint*
_int_dup (gint* self)
{
	gint* dup;
#line 34 "../src/Objects/Label.vala"
	dup = g_new0 (gint, 1);
#line 34 "../src/Objects/Label.vala"
	memcpy (dup, self, sizeof (gint));
#line 34 "../src/Objects/Label.vala"
	return dup;
#line 895 "Label.c"
}

static gpointer
__int_dup0 (gpointer self)
{
#line 34 "../src/Objects/Label.vala"
	return self ? _int_dup (self) : NULL;
#line 903 "Label.c"
}

gint
objects_label_get_label_count (ObjectsLabel* self)
{
	gint result;
	gint* _tmp0_;
	gint* _tmp3_;
#line 32 "../src/Objects/Label.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 33 "../src/Objects/Label.vala"
	_tmp0_ = self->priv->_label_count;
#line 33 "../src/Objects/Label.vala"
	if (_tmp0_ == NULL) {
#line 918 "Label.c"
		gint _tmp1_;
		gint* _tmp2_;
#line 34 "../src/Objects/Label.vala"
		_tmp1_ = objects_label_update_label_count (self);
#line 34 "../src/Objects/Label.vala"
		_tmp2_ = __int_dup0 (&_tmp1_);
#line 34 "../src/Objects/Label.vala"
		_g_free0 (self->priv->_label_count);
#line 34 "../src/Objects/Label.vala"
		self->priv->_label_count = _tmp2_;
#line 929 "Label.c"
	}
#line 37 "../src/Objects/Label.vala"
	_tmp3_ = self->priv->_label_count;
#line 37 "../src/Objects/Label.vala"
	result = *_tmp3_;
#line 37 "../src/Objects/Label.vala"
	return result;
#line 937 "Label.c"
}

void
objects_label_set_label_count (ObjectsLabel* self,
                               gint value)
{
	gint* _tmp0_;
#line 40 "../src/Objects/Label.vala"
	g_return_if_fail (self != NULL);
#line 41 "../src/Objects/Label.vala"
	_tmp0_ = __int_dup0 (&value);
#line 41 "../src/Objects/Label.vala"
	_g_free0 (self->priv->_label_count);
#line 41 "../src/Objects/Label.vala"
	self->priv->_label_count = _tmp0_;
#line 40 "../src/Objects/Label.vala"
	g_object_notify_by_pspec ((GObject *) self, objects_label_properties[OBJECTS_LABEL_LABEL_COUNT_PROPERTY]);
#line 955 "Label.c"
}

static void
_objects_label___lambda6_ (ObjectsLabel* self)
{
	ServicesDatabase* _tmp0_;
#line 49 "../src/Objects/Label.vala"
	_tmp0_ = planner_database;
#line 49 "../src/Objects/Label.vala"
	g_signal_emit_by_name (_tmp0_, "label-deleted", self);
#line 966 "Label.c"
}

static void
__objects_label___lambda6__objects_base_object_deleted (ObjectsBaseObject* _sender,
                                                        gpointer self)
{
#line 48 "../src/Objects/Label.vala"
	_objects_label___lambda6_ ((ObjectsLabel*) self);
#line 975 "Label.c"
}

static void
_objects_label___lambda7_ (ObjectsLabel* self,
                           ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 52 "../src/Objects/Label.vala"
	g_return_if_fail (item != NULL);
#line 53 "../src/Objects/Label.vala"
	_tmp0_ = objects_item_get_labels (item);
#line 53 "../src/Objects/Label.vala"
	_tmp1_ = _tmp0_;
#line 53 "../src/Objects/Label.vala"
	_tmp2_ = objects_base_object_get_id_string ((ObjectsBaseObject*) self);
#line 53 "../src/Objects/Label.vala"
	_tmp3_ = _tmp2_;
#line 53 "../src/Objects/Label.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp1_, _tmp3_)) {
#line 998 "Label.c"
		gint _tmp4_;
		gint* _tmp5_;
#line 54 "../src/Objects/Label.vala"
		_tmp4_ = objects_label_update_label_count (self);
#line 54 "../src/Objects/Label.vala"
		_tmp5_ = __int_dup0 (&_tmp4_);
#line 54 "../src/Objects/Label.vala"
		_g_free0 (self->priv->_label_count);
#line 54 "../src/Objects/Label.vala"
		self->priv->_label_count = _tmp5_;
#line 55 "../src/Objects/Label.vala"
		g_signal_emit (self, objects_label_signals[OBJECTS_LABEL_LABEL_COUNT_UPDATED_SIGNAL], 0);
#line 1011 "Label.c"
	}
}

static void
__objects_label___lambda7__services_database_item_added (ServicesDatabase* _sender,
                                                         ObjectsItem* item,
                                                         gboolean insert,
                                                         gpointer self)
{
#line 52 "../src/Objects/Label.vala"
	_objects_label___lambda7_ ((ObjectsLabel*) self, item);
#line 1023 "Label.c"
}

static void
_objects_label___lambda8_ (ObjectsLabel* self,
                           ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 59 "../src/Objects/Label.vala"
	g_return_if_fail (item != NULL);
#line 60 "../src/Objects/Label.vala"
	_tmp0_ = objects_item_get_labels (item);
#line 60 "../src/Objects/Label.vala"
	_tmp1_ = _tmp0_;
#line 60 "../src/Objects/Label.vala"
	_tmp2_ = objects_base_object_get_id_string ((ObjectsBaseObject*) self);
#line 60 "../src/Objects/Label.vala"
	_tmp3_ = _tmp2_;
#line 60 "../src/Objects/Label.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp1_, _tmp3_)) {
#line 1046 "Label.c"
		gint _tmp4_;
		gint* _tmp5_;
#line 61 "../src/Objects/Label.vala"
		_tmp4_ = objects_label_update_label_count (self);
#line 61 "../src/Objects/Label.vala"
		_tmp5_ = __int_dup0 (&_tmp4_);
#line 61 "../src/Objects/Label.vala"
		_g_free0 (self->priv->_label_count);
#line 61 "../src/Objects/Label.vala"
		self->priv->_label_count = _tmp5_;
#line 62 "../src/Objects/Label.vala"
		g_signal_emit (self, objects_label_signals[OBJECTS_LABEL_LABEL_COUNT_UPDATED_SIGNAL], 0);
#line 1059 "Label.c"
	}
}

static void
__objects_label___lambda8__services_database_item_deleted (ServicesDatabase* _sender,
                                                           ObjectsItem* item,
                                                           gpointer self)
{
#line 59 "../src/Objects/Label.vala"
	_objects_label___lambda8_ ((ObjectsLabel*) self, item);
#line 1070 "Label.c"
}

static void
_objects_label___lambda9_ (ObjectsLabel* self,
                           ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 66 "../src/Objects/Label.vala"
	g_return_if_fail (item != NULL);
#line 67 "../src/Objects/Label.vala"
	_tmp0_ = objects_item_get_labels (item);
#line 67 "../src/Objects/Label.vala"
	_tmp1_ = _tmp0_;
#line 67 "../src/Objects/Label.vala"
	_tmp2_ = objects_base_object_get_id_string ((ObjectsBaseObject*) self);
#line 67 "../src/Objects/Label.vala"
	_tmp3_ = _tmp2_;
#line 67 "../src/Objects/Label.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp1_, _tmp3_)) {
#line 1093 "Label.c"
		gint _tmp4_;
		gint* _tmp5_;
#line 68 "../src/Objects/Label.vala"
		_tmp4_ = objects_label_update_label_count (self);
#line 68 "../src/Objects/Label.vala"
		_tmp5_ = __int_dup0 (&_tmp4_);
#line 68 "../src/Objects/Label.vala"
		_g_free0 (self->priv->_label_count);
#line 68 "../src/Objects/Label.vala"
		self->priv->_label_count = _tmp5_;
#line 69 "../src/Objects/Label.vala"
		g_signal_emit (self, objects_label_signals[OBJECTS_LABEL_LABEL_COUNT_UPDATED_SIGNAL], 0);
#line 1106 "Label.c"
	}
}

static void
__objects_label___lambda9__services_database_item_updated (ServicesDatabase* _sender,
                                                           ObjectsItem* item,
                                                           gint64 update_id,
                                                           gpointer self)
{
#line 66 "../src/Objects/Label.vala"
	_objects_label___lambda9_ ((ObjectsLabel*) self, item);
#line 1118 "Label.c"
}

static void
_objects_label___lambda10_ (ObjectsLabel* self,
                            ObjectsItemLabel* item_label)
{
	ObjectsLabel* _tmp0_;
	ObjectsLabel* _tmp1_;
	gint64 _tmp2_;
	gint64 _tmp3_;
	gint64 _tmp4_;
	gint64 _tmp5_;
#line 73 "../src/Objects/Label.vala"
	g_return_if_fail (item_label != NULL);
#line 74 "../src/Objects/Label.vala"
	_tmp0_ = objects_item_label_get_label (item_label);
#line 74 "../src/Objects/Label.vala"
	_tmp1_ = _tmp0_;
#line 74 "../src/Objects/Label.vala"
	_tmp2_ = objects_base_object_get_id ((ObjectsBaseObject*) _tmp1_);
#line 74 "../src/Objects/Label.vala"
	_tmp3_ = _tmp2_;
#line 74 "../src/Objects/Label.vala"
	_tmp4_ = objects_base_object_get_id ((ObjectsBaseObject*) self);
#line 74 "../src/Objects/Label.vala"
	_tmp5_ = _tmp4_;
#line 74 "../src/Objects/Label.vala"
	if (_tmp3_ == _tmp5_) {
#line 1147 "Label.c"
		gint _tmp6_;
		gint* _tmp7_;
#line 75 "../src/Objects/Label.vala"
		_tmp6_ = objects_label_update_label_count (self);
#line 75 "../src/Objects/Label.vala"
		_tmp7_ = __int_dup0 (&_tmp6_);
#line 75 "../src/Objects/Label.vala"
		_g_free0 (self->priv->_label_count);
#line 75 "../src/Objects/Label.vala"
		self->priv->_label_count = _tmp7_;
#line 76 "../src/Objects/Label.vala"
		g_signal_emit (self, objects_label_signals[OBJECTS_LABEL_LABEL_COUNT_UPDATED_SIGNAL], 0);
#line 1160 "Label.c"
	}
}

static void
__objects_label___lambda10__services_database_item_label_added (ServicesDatabase* _sender,
                                                                ObjectsItemLabel* item_label,
                                                                gpointer self)
{
#line 73 "../src/Objects/Label.vala"
	_objects_label___lambda10_ ((ObjectsLabel*) self, item_label);
#line 1171 "Label.c"
}

static void
_objects_label___lambda11_ (ObjectsLabel* self,
                            ObjectsItemLabel* item_label)
{
	ObjectsLabel* _tmp0_;
	ObjectsLabel* _tmp1_;
	gint64 _tmp2_;
	gint64 _tmp3_;
	gint64 _tmp4_;
	gint64 _tmp5_;
#line 80 "../src/Objects/Label.vala"
	g_return_if_fail (item_label != NULL);
#line 81 "../src/Objects/Label.vala"
	_tmp0_ = objects_item_label_get_label (item_label);
#line 81 "../src/Objects/Label.vala"
	_tmp1_ = _tmp0_;
#line 81 "../src/Objects/Label.vala"
	_tmp2_ = objects_base_object_get_id ((ObjectsBaseObject*) _tmp1_);
#line 81 "../src/Objects/Label.vala"
	_tmp3_ = _tmp2_;
#line 81 "../src/Objects/Label.vala"
	_tmp4_ = objects_base_object_get_id ((ObjectsBaseObject*) self);
#line 81 "../src/Objects/Label.vala"
	_tmp5_ = _tmp4_;
#line 81 "../src/Objects/Label.vala"
	if (_tmp3_ == _tmp5_) {
#line 1200 "Label.c"
		gint _tmp6_;
		gint* _tmp7_;
#line 82 "../src/Objects/Label.vala"
		_tmp6_ = objects_label_update_label_count (self);
#line 82 "../src/Objects/Label.vala"
		_tmp7_ = __int_dup0 (&_tmp6_);
#line 82 "../src/Objects/Label.vala"
		_g_free0 (self->priv->_label_count);
#line 82 "../src/Objects/Label.vala"
		self->priv->_label_count = _tmp7_;
#line 83 "../src/Objects/Label.vala"
		g_signal_emit (self, objects_label_signals[OBJECTS_LABEL_LABEL_COUNT_UPDATED_SIGNAL], 0);
#line 1213 "Label.c"
	}
}

static void
__objects_label___lambda11__services_database_item_label_deleted (ServicesDatabase* _sender,
                                                                  ObjectsItemLabel* item_label,
                                                                  gpointer self)
{
#line 80 "../src/Objects/Label.vala"
	_objects_label___lambda11_ ((ObjectsLabel*) self, item_label);
#line 1224 "Label.c"
}

static GObject *
objects_label_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ObjectsLabel * self;
	ServicesDatabase* _tmp0_;
	ServicesDatabase* _tmp1_;
	ServicesDatabase* _tmp2_;
	ServicesDatabase* _tmp3_;
	ServicesDatabase* _tmp4_;
#line 47 "../src/Objects/Label.vala"
	parent_class = G_OBJECT_CLASS (objects_label_parent_class);
#line 47 "../src/Objects/Label.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 47 "../src/Objects/Label.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_LABEL, ObjectsLabel);
#line 48 "../src/Objects/Label.vala"
	g_signal_connect_object ((ObjectsBaseObject*) self, "deleted", (GCallback) __objects_label___lambda6__objects_base_object_deleted, self, 0);
#line 52 "../src/Objects/Label.vala"
	_tmp0_ = planner_database;
#line 52 "../src/Objects/Label.vala"
	g_signal_connect_object (_tmp0_, "item-added", (GCallback) __objects_label___lambda7__services_database_item_added, self, 0);
#line 59 "../src/Objects/Label.vala"
	_tmp1_ = planner_database;
#line 59 "../src/Objects/Label.vala"
	g_signal_connect_object (_tmp1_, "item-deleted", (GCallback) __objects_label___lambda8__services_database_item_deleted, self, 0);
#line 66 "../src/Objects/Label.vala"
	_tmp2_ = planner_database;
#line 66 "../src/Objects/Label.vala"
	g_signal_connect_object (_tmp2_, "item-updated", (GCallback) __objects_label___lambda9__services_database_item_updated, self, 0);
#line 73 "../src/Objects/Label.vala"
	_tmp3_ = planner_database;
#line 73 "../src/Objects/Label.vala"
	g_signal_connect_object (_tmp3_, "item-label-added", (GCallback) __objects_label___lambda10__services_database_item_label_added, self, 0);
#line 80 "../src/Objects/Label.vala"
	_tmp4_ = planner_database;
#line 80 "../src/Objects/Label.vala"
	g_signal_connect_object (_tmp4_, "item-label-deleted", (GCallback) __objects_label___lambda11__services_database_item_label_deleted, self, 0);
#line 47 "../src/Objects/Label.vala"
	return obj;
#line 1270 "Label.c"
}

static void
objects_label_class_init (ObjectsLabelClass * klass,
                          gpointer klass_data)
{
#line 22 "../src/Objects/Label.vala"
	objects_label_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Objects/Label.vala"
	g_type_class_adjust_private_offset (klass, &ObjectsLabel_private_offset);
#line 22 "../src/Objects/Label.vala"
	((ObjectsBaseObjectClass *) klass)->get_add_json = (gchar* (*) (ObjectsBaseObject*, const gchar*, const gchar*)) objects_label_real_get_add_json;
#line 22 "../src/Objects/Label.vala"
	((ObjectsBaseObjectClass *) klass)->get_update_json = (gchar* (*) (ObjectsBaseObject*, const gchar*, const gchar*)) objects_label_real_get_update_json;
#line 22 "../src/Objects/Label.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_objects_label_get_property;
#line 22 "../src/Objects/Label.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_objects_label_set_property;
#line 22 "../src/Objects/Label.vala"
	G_OBJECT_CLASS (klass)->constructor = objects_label_constructor;
#line 22 "../src/Objects/Label.vala"
	G_OBJECT_CLASS (klass)->finalize = objects_label_finalize;
#line 22 "../src/Objects/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_LABEL_NAME_PROPERTY, objects_label_properties[OBJECTS_LABEL_NAME_PROPERTY] = g_param_spec_string ("name", "name", "name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_LABEL_COLOR_PROPERTY, objects_label_properties[OBJECTS_LABEL_COLOR_PROPERTY] = g_param_spec_string ("color", "color", "color", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_LABEL_ITEM_ORDER_PROPERTY, objects_label_properties[OBJECTS_LABEL_ITEM_ORDER_PROPERTY] = g_param_spec_int ("item-order", "item-order", "item-order", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_LABEL_IS_DELETED_PROPERTY, objects_label_properties[OBJECTS_LABEL_IS_DELETED_PROPERTY] = g_param_spec_boolean ("is-deleted", "is-deleted", "is-deleted", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_LABEL_IS_FAVORITE_PROPERTY, objects_label_properties[OBJECTS_LABEL_IS_FAVORITE_PROPERTY] = g_param_spec_boolean ("is-favorite", "is-favorite", "is-favorite", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_LABEL_TODOIST_PROPERTY, objects_label_properties[OBJECTS_LABEL_TODOIST_PROPERTY] = g_param_spec_boolean ("todoist", "todoist", "todoist", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_LABEL_LABEL_COUNT_PROPERTY, objects_label_properties[OBJECTS_LABEL_LABEL_COUNT_PROPERTY] = g_param_spec_int ("label-count", "label-count", "label-count", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/Label.vala"
	objects_label_signals[OBJECTS_LABEL_LABEL_COUNT_UPDATED_SIGNAL] = g_signal_new ("label-count-updated", OBJECTS_TYPE_LABEL, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 1309 "Label.c"
}

static void
objects_label_instance_init (ObjectsLabel * self,
                             gpointer klass)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 22 "../src/Objects/Label.vala"
	self->priv = objects_label_get_instance_private (self);
#line 23 "../src/Objects/Label.vala"
	_tmp0_ = g_strdup ("");
#line 23 "../src/Objects/Label.vala"
	self->priv->_name = _tmp0_;
#line 24 "../src/Objects/Label.vala"
	_tmp1_ = g_strdup ("");
#line 24 "../src/Objects/Label.vala"
	self->priv->_color = _tmp1_;
#line 25 "../src/Objects/Label.vala"
	self->priv->_item_order = 0;
#line 26 "../src/Objects/Label.vala"
	self->priv->_is_deleted = FALSE;
#line 27 "../src/Objects/Label.vala"
	self->priv->_is_favorite = FALSE;
#line 28 "../src/Objects/Label.vala"
	self->priv->_todoist = FALSE;
#line 30 "../src/Objects/Label.vala"
	self->priv->_label_count = NULL;
#line 1338 "Label.c"
}

static void
objects_label_finalize (GObject * obj)
{
	ObjectsLabel * self;
#line 22 "../src/Objects/Label.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_LABEL, ObjectsLabel);
#line 23 "../src/Objects/Label.vala"
	_g_free0 (self->priv->_name);
#line 24 "../src/Objects/Label.vala"
	_g_free0 (self->priv->_color);
#line 30 "../src/Objects/Label.vala"
	_g_free0 (self->priv->_label_count);
#line 22 "../src/Objects/Label.vala"
	G_OBJECT_CLASS (objects_label_parent_class)->finalize (obj);
#line 1355 "Label.c"
}

static GType
objects_label_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ObjectsLabelClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_label_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsLabel), 0, (GInstanceInitFunc) objects_label_instance_init, NULL };
	GType objects_label_type_id;
	objects_label_type_id = g_type_register_static (OBJECTS_TYPE_BASE_OBJECT, "ObjectsLabel", &g_define_type_info, 0);
	ObjectsLabel_private_offset = g_type_add_instance_private (objects_label_type_id, sizeof (ObjectsLabelPrivate));
	return objects_label_type_id;
}

GType
objects_label_get_type (void)
{
	static volatile gsize objects_label_type_id__volatile = 0;
	if (g_once_init_enter (&objects_label_type_id__volatile)) {
		GType objects_label_type_id;
		objects_label_type_id = objects_label_get_type_once ();
		g_once_init_leave (&objects_label_type_id__volatile, objects_label_type_id);
	}
	return objects_label_type_id__volatile;
}

static void
_vala_objects_label_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec)
{
	ObjectsLabel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_LABEL, ObjectsLabel);
#line 22 "../src/Objects/Label.vala"
	switch (property_id) {
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_NAME_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		g_value_set_string (value, objects_label_get_name (self));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_COLOR_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		g_value_set_string (value, objects_label_get_color (self));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_ITEM_ORDER_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		g_value_set_int (value, objects_label_get_item_order (self));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_IS_DELETED_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		g_value_set_boolean (value, objects_label_get_is_deleted (self));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_IS_FAVORITE_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		g_value_set_boolean (value, objects_label_get_is_favorite (self));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_TODOIST_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		g_value_set_boolean (value, objects_label_get_todoist (self));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_LABEL_COUNT_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		g_value_set_int (value, objects_label_get_label_count (self));
#line 22 "../src/Objects/Label.vala"
		break;
#line 1432 "Label.c"
		default:
#line 22 "../src/Objects/Label.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Objects/Label.vala"
		break;
#line 1438 "Label.c"
	}
}

static void
_vala_objects_label_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec)
{
	ObjectsLabel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_LABEL, ObjectsLabel);
#line 22 "../src/Objects/Label.vala"
	switch (property_id) {
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_NAME_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		objects_label_set_name (self, g_value_get_string (value));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_COLOR_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		objects_label_set_color (self, g_value_get_string (value));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_ITEM_ORDER_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		objects_label_set_item_order (self, g_value_get_int (value));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_IS_DELETED_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		objects_label_set_is_deleted (self, g_value_get_boolean (value));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_IS_FAVORITE_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		objects_label_set_is_favorite (self, g_value_get_boolean (value));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_TODOIST_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		objects_label_set_todoist (self, g_value_get_boolean (value));
#line 22 "../src/Objects/Label.vala"
		break;
#line 22 "../src/Objects/Label.vala"
		case OBJECTS_LABEL_LABEL_COUNT_PROPERTY:
#line 22 "../src/Objects/Label.vala"
		objects_label_set_label_count (self, g_value_get_int (value));
#line 22 "../src/Objects/Label.vala"
		break;
#line 1494 "Label.c"
		default:
#line 22 "../src/Objects/Label.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Objects/Label.vala"
		break;
#line 1500 "Label.c"
	}
}

