/* TodoistOAuth.c generated by valac 0.50.10, the Vala compiler
 * generated from TodoistOAuth.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <handy.h>
#include <glib-object.h>
#include <webkit2/webkit2.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gtk/gtk.h>
#include <glib/gi18n-lib.h>
#include <granite.h>

#define DIALOGS_TYPE_TODOIST_OAUTH (dialogs_todoist_oauth_get_type ())
#define DIALOGS_TODOIST_OAUTH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_TODOIST_OAUTH, DialogsTodoistOAuth))
#define DIALOGS_TODOIST_OAUTH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_TODOIST_OAUTH, DialogsTodoistOAuthClass))
#define DIALOGS_IS_TODOIST_OAUTH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_TODOIST_OAUTH))
#define DIALOGS_IS_TODOIST_OAUTH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_TODOIST_OAUTH))
#define DIALOGS_TODOIST_OAUTH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_TODOIST_OAUTH, DialogsTodoistOAuthClass))

typedef struct _DialogsTodoistOAuth DialogsTodoistOAuth;
typedef struct _DialogsTodoistOAuthClass DialogsTodoistOAuthClass;
typedef struct _DialogsTodoistOAuthPrivate DialogsTodoistOAuthPrivate;
enum  {
	DIALOGS_TODOIST_OAUTH_0_PROPERTY,
	DIALOGS_TODOIST_OAUTH_NUM_PROPERTIES
};
static GParamSpec* dialogs_todoist_oauth_properties[DIALOGS_TODOIST_OAUTH_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;

#define TYPE_PLANNER (planner_get_type ())
#define PLANNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PLANNER, Planner))
#define PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_PLANNER, PlannerClass))
#define IS_PLANNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PLANNER))
#define IS_PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_PLANNER))
#define PLANNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PLANNER, PlannerClass))

typedef struct _Planner Planner;
typedef struct _PlannerClass PlannerClass;
typedef struct _PlannerPrivate PlannerPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;
typedef struct _Block32Data Block32Data;

#define SERVICES_TYPE_TODOIST (services_todoist_get_type ())
#define SERVICES_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_TODOIST, ServicesTodoist))
#define SERVICES_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_TODOIST, ServicesTodoistClass))
#define SERVICES_IS_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_TODOIST))
#define SERVICES_IS_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_TODOIST))
#define SERVICES_TODOIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_TODOIST, ServicesTodoistClass))

typedef struct _ServicesTodoist ServicesTodoist;
typedef struct _ServicesTodoistClass ServicesTodoistClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

struct _DialogsTodoistOAuth {
	HdyWindow parent_instance;
	DialogsTodoistOAuthPrivate * priv;
};

struct _DialogsTodoistOAuthClass {
	HdyWindowClass parent_class;
};

struct _DialogsTodoistOAuthPrivate {
	WebKitWebView* webview;
	gchar* OAUTH_OPEN_URL;
	gchar* STATE;
};

struct _Planner {
	GtkApplication parent_instance;
	PlannerPrivate * priv;
	MainWindow* main_window;
};

struct _PlannerClass {
	GtkApplicationClass parent_class;
};

struct _Block32Data {
	int _ref_count_;
	DialogsTodoistOAuth* self;
	GtkLabel* info_label;
	GtkSpinner* spinner;
	GtkStack* stack;
};

static gint DialogsTodoistOAuth_private_offset;
static gpointer dialogs_todoist_oauth_parent_class = NULL;
extern ServicesTodoist* planner_todoist;

GType dialogs_todoist_oauth_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsTodoistOAuth, g_object_unref)
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gchar* util_generate_string (Util* self);
DialogsTodoistOAuth* dialogs_todoist_oauth_new (void);
DialogsTodoistOAuth* dialogs_todoist_oauth_construct (GType object_type);
GType planner_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Planner, g_object_unref)
Planner* planner_get_instance (void);
GType main_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MainWindow, g_object_unref)
static GObject * dialogs_todoist_oauth_constructor (GType type,
                                             guint n_construct_properties,
                                             GObjectConstructParam * construct_properties);
static Block32Data* block32_data_ref (Block32Data* _data32_);
static void block32_data_unref (void * _userdata_);
#define CONSTANTS_TODOIST_CLIENT_ID "b0dd7d3714314b1dbbdab9ee03b6b432"
#define CONSTANTS_TODOIST_SCOPE "data:read_write,data:delete,project:delete"
static void _dialogs_todoist_oauth___lambda12_ (Block32Data* _data32_,
                                         WebKitLoadEvent load_event);
GType services_todoist_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesTodoist, g_object_unref)
void services_todoist_get_todoist_token (ServicesTodoist* self,
                                         const gchar* url);
static void __dialogs_todoist_oauth___lambda12__webkit_web_view_load_changed (WebKitWebView* _sender,
                                                                       WebKitLoadEvent load_event,
                                                                       gpointer self);
static gboolean _dialogs_todoist_oauth___lambda16_ (Block32Data* _data32_,
                                             WebKitLoadEvent load_event,
                                             const gchar* failing_uri,
                                             GError* _error);
static gboolean __dialogs_todoist_oauth___lambda16__webkit_web_view_load_failed (WebKitWebView* _sender,
                                                                          WebKitLoadEvent load_event,
                                                                          const gchar* failing_uri,
                                                                          GError* _error_,
                                                                          gpointer self);
static void _dialogs_todoist_oauth___lambda17_ (Block32Data* _data32_);
static void __dialogs_todoist_oauth___lambda17__services_todoist_first_sync_started (ServicesTodoist* _sender,
                                                                              gpointer self);
static void _dialogs_todoist_oauth___lambda18_ (DialogsTodoistOAuth* self);
static void __dialogs_todoist_oauth___lambda18__services_todoist_first_sync_finished (ServicesTodoist* _sender,
                                                                               gpointer self);
static void dialogs_todoist_oauth_finalize (GObject * obj);
static GType dialogs_todoist_oauth_get_type_once (void);
static gint _vala_array_length (gpointer array);

static inline gpointer
dialogs_todoist_oauth_get_instance_private (DialogsTodoistOAuth* self)
{
	return G_STRUCT_MEMBER_P (self, DialogsTodoistOAuth_private_offset);
}

DialogsTodoistOAuth*
dialogs_todoist_oauth_construct (GType object_type)
{
	DialogsTodoistOAuth * self = NULL;
	Planner* _tmp0_;
	Planner* _tmp1_;
	MainWindow* _tmp2_;
	GtkWidget* _tmp3_;
#line 28 "../src/Dialogs/TodoistOAuth.vala"
	_tmp0_ = planner_get_instance ();
#line 28 "../src/Dialogs/TodoistOAuth.vala"
	_tmp1_ = _tmp0_;
#line 28 "../src/Dialogs/TodoistOAuth.vala"
	_tmp2_ = _tmp1_->main_window;
#line 28 "../src/Dialogs/TodoistOAuth.vala"
	_tmp3_ = gtk_widget_get_toplevel ((GtkWidget*) _tmp2_);
#line 28 "../src/Dialogs/TodoistOAuth.vala"
	self = (DialogsTodoistOAuth*) g_object_new (object_type, "transient-for", G_TYPE_CHECK_INSTANCE_CAST (_tmp3_, gtk_window_get_type (), GtkWindow), "deletable", TRUE, "resizable", TRUE, "destroy-with-parent", TRUE, "window-position", GTK_WIN_POS_CENTER_ON_PARENT, "modal", TRUE, "title", _ ("Todoist Sync"), "height-request", 720, "width-request", 600, NULL);
#line 27 "../src/Dialogs/TodoistOAuth.vala"
	return self;
#line 208 "TodoistOAuth.c"
}

DialogsTodoistOAuth*
dialogs_todoist_oauth_new (void)
{
#line 27 "../src/Dialogs/TodoistOAuth.vala"
	return dialogs_todoist_oauth_construct (DIALOGS_TYPE_TODOIST_OAUTH);
#line 216 "TodoistOAuth.c"
}

static Block32Data*
block32_data_ref (Block32Data* _data32_)
{
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	g_atomic_int_inc (&_data32_->_ref_count_);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	return _data32_;
#line 226 "TodoistOAuth.c"
}

static void
block32_data_unref (void * _userdata_)
{
	Block32Data* _data32_;
	_data32_ = (Block32Data*) _userdata_;
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	if (g_atomic_int_dec_and_test (&_data32_->_ref_count_)) {
#line 236 "TodoistOAuth.c"
		DialogsTodoistOAuth* self;
#line 41 "../src/Dialogs/TodoistOAuth.vala"
		self = _data32_->self;
#line 41 "../src/Dialogs/TodoistOAuth.vala"
		_g_object_unref0 (_data32_->stack);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
		_g_object_unref0 (_data32_->spinner);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
		_g_object_unref0 (_data32_->info_label);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
		_g_object_unref0 (self);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
		g_slice_free (Block32Data, _data32_);
#line 250 "TodoistOAuth.c"
	}
}

static gboolean
string_contains (const gchar* self,
                 const gchar* needle)
{
	gchar* _tmp0_;
	gboolean result = FALSE;
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (needle != NULL, FALSE);
#line 1531 "glib-2.0.vapi"
	_tmp0_ = strstr ((gchar*) self, (gchar*) needle);
#line 1531 "glib-2.0.vapi"
	result = _tmp0_ != NULL;
#line 1531 "glib-2.0.vapi"
	return result;
#line 270 "TodoistOAuth.c"
}

static void
_dialogs_todoist_oauth___lambda12_ (Block32Data* _data32_,
                                    WebKitLoadEvent load_event)
{
	DialogsTodoistOAuth* self;
	gchar* redirect_uri = NULL;
	WebKitWebView* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_;
	gboolean _tmp3_ = FALSE;
	const gchar* _tmp4_;
	const gchar* _tmp13_;
#line 108 "../src/Dialogs/TodoistOAuth.vala"
	self = _data32_->self;
#line 109 "../src/Dialogs/TodoistOAuth.vala"
	_tmp0_ = self->priv->webview;
#line 109 "../src/Dialogs/TodoistOAuth.vala"
	_tmp1_ = webkit_web_view_get_uri (_tmp0_);
#line 109 "../src/Dialogs/TodoistOAuth.vala"
	_tmp2_ = g_strdup (_tmp1_);
#line 109 "../src/Dialogs/TodoistOAuth.vala"
	redirect_uri = _tmp2_;
#line 110 "../src/Dialogs/TodoistOAuth.vala"
	_tmp4_ = redirect_uri;
#line 110 "../src/Dialogs/TodoistOAuth.vala"
	if (string_contains (_tmp4_, "https://github.com/alainm23/planner?code=")) {
#line 299 "TodoistOAuth.c"
		const gchar* _tmp5_;
		const gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
#line 111 "../src/Dialogs/TodoistOAuth.vala"
		_tmp5_ = redirect_uri;
#line 111 "../src/Dialogs/TodoistOAuth.vala"
		_tmp6_ = self->priv->STATE;
#line 111 "../src/Dialogs/TodoistOAuth.vala"
		_tmp7_ = g_strdup_printf ("&state=%s", _tmp6_);
#line 111 "../src/Dialogs/TodoistOAuth.vala"
		_tmp8_ = _tmp7_;
#line 111 "../src/Dialogs/TodoistOAuth.vala"
		_tmp3_ = string_contains (_tmp5_, _tmp8_);
#line 111 "../src/Dialogs/TodoistOAuth.vala"
		_g_free0 (_tmp8_);
#line 316 "TodoistOAuth.c"
	} else {
#line 110 "../src/Dialogs/TodoistOAuth.vala"
		_tmp3_ = FALSE;
#line 320 "TodoistOAuth.c"
	}
#line 110 "../src/Dialogs/TodoistOAuth.vala"
	if (_tmp3_) {
#line 324 "TodoistOAuth.c"
		GtkLabel* _tmp9_;
		WebKitWebView* _tmp10_;
		ServicesTodoist* _tmp11_;
		const gchar* _tmp12_;
#line 112 "../src/Dialogs/TodoistOAuth.vala"
		_tmp9_ = _data32_->info_label;
#line 112 "../src/Dialogs/TodoistOAuth.vala"
		gtk_label_set_label (_tmp9_, _ ("Synchronizingâ¦ Wait a moment please."));
#line 113 "../src/Dialogs/TodoistOAuth.vala"
		_tmp10_ = self->priv->webview;
#line 113 "../src/Dialogs/TodoistOAuth.vala"
		webkit_web_view_stop_loading (_tmp10_);
#line 114 "../src/Dialogs/TodoistOAuth.vala"
		_tmp11_ = planner_todoist;
#line 114 "../src/Dialogs/TodoistOAuth.vala"
		_tmp12_ = redirect_uri;
#line 114 "../src/Dialogs/TodoistOAuth.vala"
		services_todoist_get_todoist_token (_tmp11_, _tmp12_);
#line 343 "TodoistOAuth.c"
	}
#line 117 "../src/Dialogs/TodoistOAuth.vala"
	_tmp13_ = redirect_uri;
#line 117 "../src/Dialogs/TodoistOAuth.vala"
	if (string_contains (_tmp13_, "https://github.com/alainm23/planner?error=access_denied")) {
#line 118 "../src/Dialogs/TodoistOAuth.vala"
		g_debug ("TodoistOAuth.vala:118: access_denied");
#line 119 "../src/Dialogs/TodoistOAuth.vala"
		gtk_widget_destroy ((GtkWidget*) self);
#line 353 "TodoistOAuth.c"
	}
#line 122 "../src/Dialogs/TodoistOAuth.vala"
	if (load_event == WEBKIT_LOAD_FINISHED) {
#line 357 "TodoistOAuth.c"
		GtkLabel* _tmp14_;
		GtkSpinner* _tmp15_;
		GtkSpinner* _tmp16_;
#line 123 "../src/Dialogs/TodoistOAuth.vala"
		_tmp14_ = _data32_->info_label;
#line 123 "../src/Dialogs/TodoistOAuth.vala"
		gtk_label_set_label (_tmp14_, _ ("Please enter your credentialsâ¦"));
#line 124 "../src/Dialogs/TodoistOAuth.vala"
		_tmp15_ = _data32_->spinner;
#line 124 "../src/Dialogs/TodoistOAuth.vala"
		gtk_spinner_stop (_tmp15_);
#line 125 "../src/Dialogs/TodoistOAuth.vala"
		_tmp16_ = _data32_->spinner;
#line 125 "../src/Dialogs/TodoistOAuth.vala"
		gtk_widget_hide ((GtkWidget*) _tmp16_);
#line 127 "../src/Dialogs/TodoistOAuth.vala"
		_g_free0 (redirect_uri);
#line 127 "../src/Dialogs/TodoistOAuth.vala"
		return;
#line 377 "TodoistOAuth.c"
	}
#line 130 "../src/Dialogs/TodoistOAuth.vala"
	if (load_event == WEBKIT_LOAD_STARTED) {
#line 381 "TodoistOAuth.c"
		GtkLabel* _tmp17_;
		GtkSpinner* _tmp18_;
		GtkSpinner* _tmp19_;
#line 131 "../src/Dialogs/TodoistOAuth.vala"
		_tmp17_ = _data32_->info_label;
#line 131 "../src/Dialogs/TodoistOAuth.vala"
		gtk_label_set_label (_tmp17_, _ ("Loadingâ¦"));
#line 132 "../src/Dialogs/TodoistOAuth.vala"
		_tmp18_ = _data32_->spinner;
#line 132 "../src/Dialogs/TodoistOAuth.vala"
		gtk_spinner_start (_tmp18_);
#line 133 "../src/Dialogs/TodoistOAuth.vala"
		_tmp19_ = _data32_->spinner;
#line 133 "../src/Dialogs/TodoistOAuth.vala"
		gtk_widget_show ((GtkWidget*) _tmp19_);
#line 135 "../src/Dialogs/TodoistOAuth.vala"
		_g_free0 (redirect_uri);
#line 135 "../src/Dialogs/TodoistOAuth.vala"
		return;
#line 401 "TodoistOAuth.c"
	}
#line 138 "../src/Dialogs/TodoistOAuth.vala"
	_g_free0 (redirect_uri);
#line 138 "../src/Dialogs/TodoistOAuth.vala"
	return;
#line 407 "TodoistOAuth.c"
}

static void
__dialogs_todoist_oauth___lambda12__webkit_web_view_load_changed (WebKitWebView* _sender,
                                                                  WebKitLoadEvent load_event,
                                                                  gpointer self)
{
#line 108 "../src/Dialogs/TodoistOAuth.vala"
	_dialogs_todoist_oauth___lambda12_ (self, load_event);
#line 417 "TodoistOAuth.c"
}

static gpointer
_g_error_copy0 (gpointer self)
{
#line 142 "../src/Dialogs/TodoistOAuth.vala"
	return self ? g_error_copy (self) : NULL;
#line 425 "TodoistOAuth.c"
}

static gboolean
_dialogs_todoist_oauth___lambda16_ (Block32Data* _data32_,
                                    WebKitLoadEvent load_event,
                                    const gchar* failing_uri,
                                    GError* _error)
{
	DialogsTodoistOAuth* self;
	GError* _error_ = NULL;
	GError* _tmp0_;
	GError* _tmp1_;
	const gchar* _tmp2_;
	GCompareFunc _tmp3_;
	const gchar* _tmp4_;
	gboolean result = FALSE;
#line 141 "../src/Dialogs/TodoistOAuth.vala"
	self = _data32_->self;
#line 141 "../src/Dialogs/TodoistOAuth.vala"
	g_return_val_if_fail (failing_uri != NULL, FALSE);
#line 141 "../src/Dialogs/TodoistOAuth.vala"
	g_return_val_if_fail (_error != NULL, FALSE);
#line 142 "../src/Dialogs/TodoistOAuth.vala"
	_tmp0_ = _g_error_copy0 ((GError*) _error);
#line 142 "../src/Dialogs/TodoistOAuth.vala"
	_error_ = _tmp0_;
#line 143 "../src/Dialogs/TodoistOAuth.vala"
	_tmp1_ = _error_;
#line 143 "../src/Dialogs/TodoistOAuth.vala"
	_tmp2_ = _tmp1_->message;
#line 143 "../src/Dialogs/TodoistOAuth.vala"
	g_warning ("TodoistOAuth.vala:143: Loading uri '%s' failed, error : %s", failing_uri, _tmp2_);
#line 144 "../src/Dialogs/TodoistOAuth.vala"
	_tmp3_ = ((GCompareFunc) g_strcmp0);
#line 144 "../src/Dialogs/TodoistOAuth.vala"
	_tmp4_ = self->priv->OAUTH_OPEN_URL;
#line 144 "../src/Dialogs/TodoistOAuth.vala"
	if (_tmp3_ (failing_uri, _tmp4_) == 0) {
#line 464 "TodoistOAuth.c"
		GtkLabel* _tmp5_;
		GtkStack* _tmp6_;
#line 145 "../src/Dialogs/TodoistOAuth.vala"
		_tmp5_ = _data32_->info_label;
#line 145 "../src/Dialogs/TodoistOAuth.vala"
		gtk_label_set_label (_tmp5_, _ ("Network Is Not Available"));
#line 146 "../src/Dialogs/TodoistOAuth.vala"
		_tmp6_ = _data32_->stack;
#line 146 "../src/Dialogs/TodoistOAuth.vala"
		gtk_stack_set_visible_child_name (_tmp6_, "error_view");
#line 475 "TodoistOAuth.c"
	}
#line 149 "../src/Dialogs/TodoistOAuth.vala"
	result = TRUE;
#line 149 "../src/Dialogs/TodoistOAuth.vala"
	_g_error_free0 (_error_);
#line 149 "../src/Dialogs/TodoistOAuth.vala"
	return result;
#line 483 "TodoistOAuth.c"
}

static gboolean
__dialogs_todoist_oauth___lambda16__webkit_web_view_load_failed (WebKitWebView* _sender,
                                                                 WebKitLoadEvent load_event,
                                                                 const gchar* failing_uri,
                                                                 GError* _error_,
                                                                 gpointer self)
{
	gboolean result;
	result = _dialogs_todoist_oauth___lambda16_ (self, load_event, failing_uri, _error_);
#line 141 "../src/Dialogs/TodoistOAuth.vala"
	return result;
#line 497 "TodoistOAuth.c"
}

static void
_dialogs_todoist_oauth___lambda17_ (Block32Data* _data32_)
{
	DialogsTodoistOAuth* self;
	GtkStack* _tmp0_;
#line 152 "../src/Dialogs/TodoistOAuth.vala"
	self = _data32_->self;
#line 153 "../src/Dialogs/TodoistOAuth.vala"
	_tmp0_ = _data32_->stack;
#line 153 "../src/Dialogs/TodoistOAuth.vala"
	gtk_stack_set_visible_child_name (_tmp0_, "spinner-view");
#line 511 "TodoistOAuth.c"
}

static void
__dialogs_todoist_oauth___lambda17__services_todoist_first_sync_started (ServicesTodoist* _sender,
                                                                         gpointer self)
{
#line 152 "../src/Dialogs/TodoistOAuth.vala"
	_dialogs_todoist_oauth___lambda17_ (self);
#line 520 "TodoistOAuth.c"
}

static void
_dialogs_todoist_oauth___lambda18_ (DialogsTodoistOAuth* self)
{
#line 157 "../src/Dialogs/TodoistOAuth.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 528 "TodoistOAuth.c"
}

static void
__dialogs_todoist_oauth___lambda18__services_todoist_first_sync_finished (ServicesTodoist* _sender,
                                                                          gpointer self)
{
#line 156 "../src/Dialogs/TodoistOAuth.vala"
	_dialogs_todoist_oauth___lambda18_ ((DialogsTodoistOAuth*) self);
#line 537 "TodoistOAuth.c"
}

static GObject *
dialogs_todoist_oauth_constructor (GType type,
                                   guint n_construct_properties,
                                   GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	DialogsTodoistOAuth * self;
	Block32Data* _data32_;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_;
	GtkStyleContext* dialog_context = NULL;
	GtkStyleContext* _tmp3_;
	GtkStyleContext* _tmp4_;
	GtkStyleContext* _tmp5_;
	GtkLabel* _tmp6_;
	GtkSpinner* _tmp7_;
	GtkSpinner* _tmp8_;
	GtkStyleContext* _tmp9_;
	GtkSpinner* _tmp10_;
	GtkGrid* container_grid = NULL;
	GtkGrid* _tmp11_;
	GtkGrid* _tmp12_;
	GtkGrid* _tmp13_;
	GtkGrid* _tmp14_;
	GtkGrid* _tmp15_;
	GtkSpinner* _tmp16_;
	GtkGrid* _tmp17_;
	GtkLabel* _tmp18_;
	WebKitWebView* _tmp19_;
	WebKitWebView* _tmp20_;
	WebKitWebContext* _tmp21_;
	gchar** _tmp22_;
	gchar** _tmp23_;
	WebKitWebContext* _tmp24_;
	GtkScrolledWindow* scrolled = NULL;
	GtkScrolledWindow* _tmp25_;
	GtkScrolledWindow* _tmp26_;
	WebKitWebView* _tmp27_;
	WebKitWebView* _tmp28_;
	const gchar* _tmp29_;
	GraniteWidgetsAlertView* alert_view = NULL;
	GraniteWidgetsAlertView* _tmp30_;
	GtkSpinner* spinner_loading = NULL;
	GtkSpinner* _tmp31_;
	GtkSpinner* _tmp32_;
	GtkSpinner* _tmp33_;
	GtkSpinner* _tmp34_;
	GtkSpinner* _tmp35_;
	GtkSpinner* _tmp36_;
	GtkSpinner* _tmp37_;
	GtkStack* _tmp38_;
	GtkStack* _tmp39_;
	GtkStack* _tmp40_;
	GtkStack* _tmp41_;
	GtkScrolledWindow* _tmp42_;
	GtkStack* _tmp43_;
	GraniteWidgetsAlertView* _tmp44_;
	GtkStack* _tmp45_;
	GtkSpinner* _tmp46_;
	HdyHeaderBar* header = NULL;
	HdyHeaderBar* _tmp47_;
	HdyHeaderBar* _tmp48_;
	HdyHeaderBar* _tmp49_;
	HdyHeaderBar* _tmp50_;
	GtkStyleContext* _tmp51_;
	HdyHeaderBar* _tmp52_;
	GtkGrid* _tmp53_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp54_;
	GtkGrid* _tmp55_;
	GtkGrid* _tmp56_;
	HdyHeaderBar* _tmp57_;
	GtkGrid* _tmp58_;
	GtkStack* _tmp59_;
	GtkGrid* _tmp60_;
	WebKitWebView* _tmp61_;
	WebKitWebView* _tmp62_;
	ServicesTodoist* _tmp63_;
	ServicesTodoist* _tmp64_;
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	parent_class = G_OBJECT_CLASS (dialogs_todoist_oauth_parent_class);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_TYPE_TODOIST_OAUTH, DialogsTodoistOAuth);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	_data32_ = g_slice_new0 (Block32Data);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	_data32_->_ref_count_ = 1;
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	_data32_->self = g_object_ref (self);
#line 42 "../src/Dialogs/TodoistOAuth.vala"
	_tmp0_ = self->priv->OAUTH_OPEN_URL;
#line 42 "../src/Dialogs/TodoistOAuth.vala"
	_tmp1_ = self->priv->STATE;
#line 42 "../src/Dialogs/TodoistOAuth.vala"
	_tmp2_ = g_strdup_printf (_tmp0_, CONSTANTS_TODOIST_CLIENT_ID, CONSTANTS_TODOIST_SCOPE, _tmp1_);
#line 42 "../src/Dialogs/TodoistOAuth.vala"
	_g_free0 (self->priv->OAUTH_OPEN_URL);
#line 42 "../src/Dialogs/TodoistOAuth.vala"
	self->priv->OAUTH_OPEN_URL = _tmp2_;
#line 44 "../src/Dialogs/TodoistOAuth.vala"
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 44 "../src/Dialogs/TodoistOAuth.vala"
	dialog_context = _tmp3_;
#line 45 "../src/Dialogs/TodoistOAuth.vala"
	_tmp4_ = dialog_context;
#line 45 "../src/Dialogs/TodoistOAuth.vala"
	gtk_style_context_add_class (_tmp4_, GTK_STYLE_CLASS_VIEW);
#line 46 "../src/Dialogs/TodoistOAuth.vala"
	_tmp5_ = dialog_context;
#line 46 "../src/Dialogs/TodoistOAuth.vala"
	gtk_style_context_add_class (_tmp5_, "app");
#line 48 "../src/Dialogs/TodoistOAuth.vala"
	_tmp6_ = (GtkLabel*) gtk_label_new (_ ("Loadingâ¦"));
#line 48 "../src/Dialogs/TodoistOAuth.vala"
	g_object_ref_sink (_tmp6_);
#line 48 "../src/Dialogs/TodoistOAuth.vala"
	_data32_->info_label = _tmp6_;
#line 50 "../src/Dialogs/TodoistOAuth.vala"
	_tmp7_ = (GtkSpinner*) gtk_spinner_new ();
#line 50 "../src/Dialogs/TodoistOAuth.vala"
	g_object_ref_sink (_tmp7_);
#line 50 "../src/Dialogs/TodoistOAuth.vala"
	_data32_->spinner = _tmp7_;
#line 51 "../src/Dialogs/TodoistOAuth.vala"
	_tmp8_ = _data32_->spinner;
#line 51 "../src/Dialogs/TodoistOAuth.vala"
	_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
#line 51 "../src/Dialogs/TodoistOAuth.vala"
	gtk_style_context_add_class (_tmp9_, "text-color");
#line 52 "../src/Dialogs/TodoistOAuth.vala"
	_tmp10_ = _data32_->spinner;
#line 52 "../src/Dialogs/TodoistOAuth.vala"
	gtk_spinner_start (_tmp10_);
#line 54 "../src/Dialogs/TodoistOAuth.vala"
	_tmp11_ = (GtkGrid*) gtk_grid_new ();
#line 54 "../src/Dialogs/TodoistOAuth.vala"
	g_object_ref_sink (_tmp11_);
#line 54 "../src/Dialogs/TodoistOAuth.vala"
	container_grid = _tmp11_;
#line 55 "../src/Dialogs/TodoistOAuth.vala"
	_tmp12_ = container_grid;
#line 55 "../src/Dialogs/TodoistOAuth.vala"
	gtk_container_set_border_width ((GtkContainer*) _tmp12_, (guint) 6);
#line 56 "../src/Dialogs/TodoistOAuth.vala"
	_tmp13_ = container_grid;
#line 56 "../src/Dialogs/TodoistOAuth.vala"
	gtk_grid_set_column_spacing (_tmp13_, 6);
#line 57 "../src/Dialogs/TodoistOAuth.vala"
	_tmp14_ = container_grid;
#line 57 "../src/Dialogs/TodoistOAuth.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp14_, GTK_ALIGN_CENTER);
#line 58 "../src/Dialogs/TodoistOAuth.vala"
	_tmp15_ = container_grid;
#line 58 "../src/Dialogs/TodoistOAuth.vala"
	_tmp16_ = _data32_->spinner;
#line 58 "../src/Dialogs/TodoistOAuth.vala"
	gtk_container_add ((GtkContainer*) _tmp15_, (GtkWidget*) _tmp16_);
#line 59 "../src/Dialogs/TodoistOAuth.vala"
	_tmp17_ = container_grid;
#line 59 "../src/Dialogs/TodoistOAuth.vala"
	_tmp18_ = _data32_->info_label;
#line 59 "../src/Dialogs/TodoistOAuth.vala"
	gtk_container_add ((GtkContainer*) _tmp17_, (GtkWidget*) _tmp18_);
#line 61 "../src/Dialogs/TodoistOAuth.vala"
	_tmp19_ = (WebKitWebView*) webkit_web_view_new ();
#line 61 "../src/Dialogs/TodoistOAuth.vala"
	g_object_ref_sink (_tmp19_);
#line 61 "../src/Dialogs/TodoistOAuth.vala"
	_g_object_unref0 (self->priv->webview);
#line 61 "../src/Dialogs/TodoistOAuth.vala"
	self->priv->webview = _tmp19_;
#line 62 "../src/Dialogs/TodoistOAuth.vala"
	_tmp20_ = self->priv->webview;
#line 62 "../src/Dialogs/TodoistOAuth.vala"
	g_object_set ((GtkWidget*) _tmp20_, "expand", TRUE, NULL);
#line 63 "../src/Dialogs/TodoistOAuth.vala"
	_tmp21_ = webkit_web_context_get_default ();
#line 63 "../src/Dialogs/TodoistOAuth.vala"
	_tmp23_ = _tmp22_ = g_get_language_names ();
#line 63 "../src/Dialogs/TodoistOAuth.vala"
	webkit_web_context_set_preferred_languages (_tmp21_, _tmp23_);
#line 64 "../src/Dialogs/TodoistOAuth.vala"
	_tmp24_ = webkit_web_context_get_default ();
#line 64 "../src/Dialogs/TodoistOAuth.vala"
	webkit_web_context_set_tls_errors_policy (_tmp24_, WEBKIT_TLS_ERRORS_POLICY_IGNORE);
#line 66 "../src/Dialogs/TodoistOAuth.vala"
	_tmp25_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 66 "../src/Dialogs/TodoistOAuth.vala"
	g_object_ref_sink (_tmp25_);
#line 66 "../src/Dialogs/TodoistOAuth.vala"
	scrolled = _tmp25_;
#line 67 "../src/Dialogs/TodoistOAuth.vala"
	_tmp26_ = scrolled;
#line 67 "../src/Dialogs/TodoistOAuth.vala"
	_tmp27_ = self->priv->webview;
#line 67 "../src/Dialogs/TodoistOAuth.vala"
	gtk_container_add ((GtkContainer*) _tmp26_, (GtkWidget*) _tmp27_);
#line 69 "../src/Dialogs/TodoistOAuth.vala"
	_tmp28_ = self->priv->webview;
#line 69 "../src/Dialogs/TodoistOAuth.vala"
	_tmp29_ = self->priv->OAUTH_OPEN_URL;
#line 69 "../src/Dialogs/TodoistOAuth.vala"
	webkit_web_view_load_uri (_tmp28_, _tmp29_);
#line 72 "../src/Dialogs/TodoistOAuth.vala"
	_tmp30_ = granite_widgets_alert_view_new (_ ("Network Is Not Available"), _ ("Connect to the Internet to connect with Todoist"), "network-error");
#line 72 "../src/Dialogs/TodoistOAuth.vala"
	g_object_ref_sink (_tmp30_);
#line 72 "../src/Dialogs/TodoistOAuth.vala"
	alert_view = _tmp30_;
#line 79 "../src/Dialogs/TodoistOAuth.vala"
	_tmp31_ = (GtkSpinner*) gtk_spinner_new ();
#line 79 "../src/Dialogs/TodoistOAuth.vala"
	g_object_ref_sink (_tmp31_);
#line 79 "../src/Dialogs/TodoistOAuth.vala"
	spinner_loading = _tmp31_;
#line 80 "../src/Dialogs/TodoistOAuth.vala"
	_tmp32_ = spinner_loading;
#line 80 "../src/Dialogs/TodoistOAuth.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp32_, GTK_ALIGN_CENTER);
#line 81 "../src/Dialogs/TodoistOAuth.vala"
	_tmp33_ = spinner_loading;
#line 81 "../src/Dialogs/TodoistOAuth.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp33_, GTK_ALIGN_CENTER);
#line 82 "../src/Dialogs/TodoistOAuth.vala"
	_tmp34_ = spinner_loading;
#line 82 "../src/Dialogs/TodoistOAuth.vala"
	g_object_set ((GtkWidget*) _tmp34_, "width-request", 50, NULL);
#line 83 "../src/Dialogs/TodoistOAuth.vala"
	_tmp35_ = spinner_loading;
#line 83 "../src/Dialogs/TodoistOAuth.vala"
	g_object_set ((GtkWidget*) _tmp35_, "height-request", 50, NULL);
#line 84 "../src/Dialogs/TodoistOAuth.vala"
	_tmp36_ = spinner_loading;
#line 84 "../src/Dialogs/TodoistOAuth.vala"
	g_object_set (_tmp36_, "active", TRUE, NULL);
#line 85 "../src/Dialogs/TodoistOAuth.vala"
	_tmp37_ = spinner_loading;
#line 85 "../src/Dialogs/TodoistOAuth.vala"
	gtk_spinner_start (_tmp37_);
#line 87 "../src/Dialogs/TodoistOAuth.vala"
	_tmp38_ = (GtkStack*) gtk_stack_new ();
#line 87 "../src/Dialogs/TodoistOAuth.vala"
	g_object_ref_sink (_tmp38_);
#line 87 "../src/Dialogs/TodoistOAuth.vala"
	_data32_->stack = _tmp38_;
#line 88 "../src/Dialogs/TodoistOAuth.vala"
	_tmp39_ = _data32_->stack;
#line 88 "../src/Dialogs/TodoistOAuth.vala"
	g_object_set ((GtkWidget*) _tmp39_, "expand", TRUE, NULL);
#line 89 "../src/Dialogs/TodoistOAuth.vala"
	_tmp40_ = _data32_->stack;
#line 89 "../src/Dialogs/TodoistOAuth.vala"
	gtk_stack_set_transition_type (_tmp40_, GTK_STACK_TRANSITION_TYPE_CROSSFADE);
#line 91 "../src/Dialogs/TodoistOAuth.vala"
	_tmp41_ = _data32_->stack;
#line 91 "../src/Dialogs/TodoistOAuth.vala"
	_tmp42_ = scrolled;
#line 91 "../src/Dialogs/TodoistOAuth.vala"
	gtk_stack_add_named (_tmp41_, (GtkWidget*) _tmp42_, "web_view");
#line 92 "../src/Dialogs/TodoistOAuth.vala"
	_tmp43_ = _data32_->stack;
#line 92 "../src/Dialogs/TodoistOAuth.vala"
	_tmp44_ = alert_view;
#line 92 "../src/Dialogs/TodoistOAuth.vala"
	gtk_stack_add_named (_tmp43_, (GtkWidget*) _tmp44_, "error_view");
#line 93 "../src/Dialogs/TodoistOAuth.vala"
	_tmp45_ = _data32_->stack;
#line 93 "../src/Dialogs/TodoistOAuth.vala"
	_tmp46_ = spinner_loading;
#line 93 "../src/Dialogs/TodoistOAuth.vala"
	gtk_stack_add_named (_tmp45_, (GtkWidget*) _tmp46_, "spinner-view");
#line 95 "../src/Dialogs/TodoistOAuth.vala"
	_tmp47_ = (HdyHeaderBar*) hdy_header_bar_new ();
#line 95 "../src/Dialogs/TodoistOAuth.vala"
	g_object_ref_sink (_tmp47_);
#line 95 "../src/Dialogs/TodoistOAuth.vala"
	header = _tmp47_;
#line 96 "../src/Dialogs/TodoistOAuth.vala"
	_tmp48_ = header;
#line 96 "../src/Dialogs/TodoistOAuth.vala"
	hdy_header_bar_set_has_subtitle (_tmp48_, FALSE);
#line 97 "../src/Dialogs/TodoistOAuth.vala"
	_tmp49_ = header;
#line 97 "../src/Dialogs/TodoistOAuth.vala"
	hdy_header_bar_set_show_close_button (_tmp49_, TRUE);
#line 98 "../src/Dialogs/TodoistOAuth.vala"
	_tmp50_ = header;
#line 98 "../src/Dialogs/TodoistOAuth.vala"
	_tmp51_ = gtk_widget_get_style_context ((GtkWidget*) _tmp50_);
#line 98 "../src/Dialogs/TodoistOAuth.vala"
	gtk_style_context_add_class (_tmp51_, GTK_STYLE_CLASS_FLAT);
#line 99 "../src/Dialogs/TodoistOAuth.vala"
	_tmp52_ = header;
#line 99 "../src/Dialogs/TodoistOAuth.vala"
	_tmp53_ = container_grid;
#line 99 "../src/Dialogs/TodoistOAuth.vala"
	hdy_header_bar_set_custom_title (_tmp52_, (GtkWidget*) _tmp53_);
#line 101 "../src/Dialogs/TodoistOAuth.vala"
	_tmp54_ = (GtkGrid*) gtk_grid_new ();
#line 101 "../src/Dialogs/TodoistOAuth.vala"
	g_object_ref_sink (_tmp54_);
#line 101 "../src/Dialogs/TodoistOAuth.vala"
	main_grid = _tmp54_;
#line 102 "../src/Dialogs/TodoistOAuth.vala"
	_tmp55_ = main_grid;
#line 102 "../src/Dialogs/TodoistOAuth.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp55_, GTK_ORIENTATION_VERTICAL);
#line 103 "../src/Dialogs/TodoistOAuth.vala"
	_tmp56_ = main_grid;
#line 103 "../src/Dialogs/TodoistOAuth.vala"
	_tmp57_ = header;
#line 103 "../src/Dialogs/TodoistOAuth.vala"
	gtk_container_add ((GtkContainer*) _tmp56_, (GtkWidget*) _tmp57_);
#line 104 "../src/Dialogs/TodoistOAuth.vala"
	_tmp58_ = main_grid;
#line 104 "../src/Dialogs/TodoistOAuth.vala"
	_tmp59_ = _data32_->stack;
#line 104 "../src/Dialogs/TodoistOAuth.vala"
	gtk_container_add ((GtkContainer*) _tmp58_, (GtkWidget*) _tmp59_);
#line 106 "../src/Dialogs/TodoistOAuth.vala"
	_tmp60_ = main_grid;
#line 106 "../src/Dialogs/TodoistOAuth.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp60_);
#line 108 "../src/Dialogs/TodoistOAuth.vala"
	_tmp61_ = self->priv->webview;
#line 108 "../src/Dialogs/TodoistOAuth.vala"
	g_signal_connect_data (_tmp61_, "load-changed", (GCallback) __dialogs_todoist_oauth___lambda12__webkit_web_view_load_changed, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
#line 141 "../src/Dialogs/TodoistOAuth.vala"
	_tmp62_ = self->priv->webview;
#line 141 "../src/Dialogs/TodoistOAuth.vala"
	g_signal_connect_data (_tmp62_, "load-failed", (GCallback) __dialogs_todoist_oauth___lambda16__webkit_web_view_load_failed, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
#line 152 "../src/Dialogs/TodoistOAuth.vala"
	_tmp63_ = planner_todoist;
#line 152 "../src/Dialogs/TodoistOAuth.vala"
	g_signal_connect_data (_tmp63_, "first-sync-started", (GCallback) __dialogs_todoist_oauth___lambda17__services_todoist_first_sync_started, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
#line 156 "../src/Dialogs/TodoistOAuth.vala"
	_tmp64_ = planner_todoist;
#line 156 "../src/Dialogs/TodoistOAuth.vala"
	g_signal_connect_object (_tmp64_, "first-sync-finished", (GCallback) __dialogs_todoist_oauth___lambda18__services_todoist_first_sync_finished, self, 0);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	_g_object_unref0 (main_grid);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	_g_object_unref0 (header);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	_g_object_unref0 (spinner_loading);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	_g_object_unref0 (alert_view);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	_g_object_unref0 (scrolled);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	_g_object_unref0 (container_grid);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	block32_data_unref (_data32_);
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	_data32_ = NULL;
#line 41 "../src/Dialogs/TodoistOAuth.vala"
	return obj;
#line 901 "TodoistOAuth.c"
}

static void
dialogs_todoist_oauth_class_init (DialogsTodoistOAuthClass * klass,
                                  gpointer klass_data)
{
#line 22 "../src/Dialogs/TodoistOAuth.vala"
	dialogs_todoist_oauth_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Dialogs/TodoistOAuth.vala"
	g_type_class_adjust_private_offset (klass, &DialogsTodoistOAuth_private_offset);
#line 22 "../src/Dialogs/TodoistOAuth.vala"
	G_OBJECT_CLASS (klass)->constructor = dialogs_todoist_oauth_constructor;
#line 22 "../src/Dialogs/TodoistOAuth.vala"
	G_OBJECT_CLASS (klass)->finalize = dialogs_todoist_oauth_finalize;
#line 916 "TodoistOAuth.c"
}

static void
dialogs_todoist_oauth_instance_init (DialogsTodoistOAuth * self,
                                     gpointer klass)
{
	gchar* _tmp0_;
	Util* _tmp1_;
	Util* _tmp2_;
	gchar* _tmp3_;
#line 22 "../src/Dialogs/TodoistOAuth.vala"
	self->priv = dialogs_todoist_oauth_get_instance_private (self);
#line 24 "../src/Dialogs/TodoistOAuth.vala"
	_tmp0_ = g_strdup ("https://todoist.com/oauth/authorize?client_id=%s&scope=%s&state=%s");
#line 24 "../src/Dialogs/TodoistOAuth.vala"
	self->priv->OAUTH_OPEN_URL = _tmp0_;
#line 25 "../src/Dialogs/TodoistOAuth.vala"
	_tmp1_ = util_get_default ();
#line 25 "../src/Dialogs/TodoistOAuth.vala"
	_tmp2_ = _tmp1_;
#line 25 "../src/Dialogs/TodoistOAuth.vala"
	_tmp3_ = util_generate_string (_tmp2_);
#line 25 "../src/Dialogs/TodoistOAuth.vala"
	self->priv->STATE = _tmp3_;
#line 25 "../src/Dialogs/TodoistOAuth.vala"
	_g_object_unref0 (_tmp2_);
#line 943 "TodoistOAuth.c"
}

static void
dialogs_todoist_oauth_finalize (GObject * obj)
{
	DialogsTodoistOAuth * self;
#line 22 "../src/Dialogs/TodoistOAuth.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_TYPE_TODOIST_OAUTH, DialogsTodoistOAuth);
#line 23 "../src/Dialogs/TodoistOAuth.vala"
	_g_object_unref0 (self->priv->webview);
#line 24 "../src/Dialogs/TodoistOAuth.vala"
	_g_free0 (self->priv->OAUTH_OPEN_URL);
#line 25 "../src/Dialogs/TodoistOAuth.vala"
	_g_free0 (self->priv->STATE);
#line 22 "../src/Dialogs/TodoistOAuth.vala"
	G_OBJECT_CLASS (dialogs_todoist_oauth_parent_class)->finalize (obj);
#line 960 "TodoistOAuth.c"
}

static GType
dialogs_todoist_oauth_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (DialogsTodoistOAuthClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) dialogs_todoist_oauth_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (DialogsTodoistOAuth), 0, (GInstanceInitFunc) dialogs_todoist_oauth_instance_init, NULL };
	GType dialogs_todoist_oauth_type_id;
	dialogs_todoist_oauth_type_id = g_type_register_static (hdy_window_get_type (), "DialogsTodoistOAuth", &g_define_type_info, 0);
	DialogsTodoistOAuth_private_offset = g_type_add_instance_private (dialogs_todoist_oauth_type_id, sizeof (DialogsTodoistOAuthPrivate));
	return dialogs_todoist_oauth_type_id;
}

GType
dialogs_todoist_oauth_get_type (void)
{
	static volatile gsize dialogs_todoist_oauth_type_id__volatile = 0;
	if (g_once_init_enter (&dialogs_todoist_oauth_type_id__volatile)) {
		GType dialogs_todoist_oauth_type_id;
		dialogs_todoist_oauth_type_id = dialogs_todoist_oauth_get_type_once ();
		g_once_init_leave (&dialogs_todoist_oauth_type_id__volatile, dialogs_todoist_oauth_type_id);
	}
	return dialogs_todoist_oauth_type_id__volatile;
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}

