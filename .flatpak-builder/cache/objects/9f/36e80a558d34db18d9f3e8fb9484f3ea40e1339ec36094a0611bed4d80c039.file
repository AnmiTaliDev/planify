/* FilterPaneRow.c generated by valac 0.50.10, the Vala compiler
 * generated from FilterPaneRow.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib/gi18n-lib.h>
#include <gee.h>
#include <gio/gio.h>
#include <gdk/gdk.h>

#define LAYOUTS_TYPE_FILTER_PANE_ROW (layouts_filter_pane_row_get_type ())
#define LAYOUTS_FILTER_PANE_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_FILTER_PANE_ROW, LayoutsFilterPaneRow))
#define LAYOUTS_FILTER_PANE_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_FILTER_PANE_ROW, LayoutsFilterPaneRowClass))
#define LAYOUTS_IS_FILTER_PANE_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_FILTER_PANE_ROW))
#define LAYOUTS_IS_FILTER_PANE_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_FILTER_PANE_ROW))
#define LAYOUTS_FILTER_PANE_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_FILTER_PANE_ROW, LayoutsFilterPaneRowClass))

typedef struct _LayoutsFilterPaneRow LayoutsFilterPaneRow;
typedef struct _LayoutsFilterPaneRowClass LayoutsFilterPaneRowClass;
typedef struct _LayoutsFilterPaneRowPrivate LayoutsFilterPaneRowPrivate;
typedef enum  {
	FILTER_TYPE_TODAY,
	FILTER_TYPE_INBOX,
	FILTER_TYPE_SCHEDULED,
	FILTER_TYPE_PINBOARD
} FilterType;

#define TYPE_FILTER_TYPE (filter_type_get_type ())

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;
enum  {
	LAYOUTS_FILTER_PANE_ROW_0_PROPERTY,
	LAYOUTS_FILTER_PANE_ROW_FILTER_TYPE_PROPERTY,
	LAYOUTS_FILTER_PANE_ROW_NUM_PROPERTIES
};
static GParamSpec* layouts_filter_pane_row_properties[LAYOUTS_FILTER_PANE_ROW_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block4Data Block4Data;
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;
typedef struct _Block5Data Block5Data;

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;
typedef enum  {
	PANE_TYPE_FILTER,
	PANE_TYPE_FAVORITE,
	PANE_TYPE_PROJECT,
	PANE_TYPE_LABEL,
	PANE_TYPE_TASKLIST
} PaneType;

#define TYPE_PANE_TYPE (pane_type_get_type ())

struct _LayoutsFilterPaneRow {
	GtkFlowBoxChild parent_instance;
	LayoutsFilterPaneRowPrivate * priv;
	gchar* title;
	gchar* icon_name;
};

struct _LayoutsFilterPaneRowClass {
	GtkFlowBoxChildClass parent_class;
};

struct _LayoutsFilterPaneRowPrivate {
	FilterType _filter_type;
	WidgetsDynamicIcon* title_image;
	GtkLabel* title_label;
	GtkLabel* count_label;
	GtkEventBox* content_eventbox;
};

struct _Block4Data {
	int _ref_count_;
	LayoutsFilterPaneRow* self;
	GDateTime* date;
};

struct _Block5Data {
	int _ref_count_;
	LayoutsFilterPaneRow* self;
	ObjectsProject* inbox_project;
};

static gint LayoutsFilterPaneRow_private_offset;
static gpointer layouts_filter_pane_row_parent_class = NULL;
extern ServicesDatabase* planner_database;
extern GSettings* planner_settings;
extern ServicesEventBus* planner_event_bus;

GType layouts_filter_pane_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsFilterPaneRow, g_object_unref)
GType filter_type_get_type (void) G_GNUC_CONST;
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
LayoutsFilterPaneRow* layouts_filter_pane_row_new (FilterType filter_type);
LayoutsFilterPaneRow* layouts_filter_pane_row_construct (GType object_type,
                                                         FilterType filter_type);
static void layouts_filter_pane_row_build_filter_data (LayoutsFilterPaneRow* self);
FilterType layouts_filter_pane_row_get_filter_type (LayoutsFilterPaneRow* self);
void widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                            const gchar* icon_name);
static void layouts_filter_pane_row_update_count_label (LayoutsFilterPaneRow* self,
                                                 gint count);
void layouts_filter_pane_row_init (LayoutsFilterPaneRow* self);
static Block4Data* block4_data_ref (Block4Data* _data4_);
static void block4_data_unref (void * _userdata_);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
GeeArrayList* services_database_get_items_by_date (ServicesDatabase* self,
                                                   GDateTime* date,
                                                   gboolean checked);
static void ___lambda169_ (Block4Data* _data4_);
static void ____lambda169__services_database_item_added (ServicesDatabase* _sender,
                                                  ObjectsItem* item,
                                                  gboolean insert,
                                                  gpointer self);
static void ___lambda170_ (Block4Data* _data4_);
static void ____lambda170__services_database_item_deleted (ServicesDatabase* _sender,
                                                    ObjectsItem* item,
                                                    gpointer self);
static void ___lambda171_ (Block4Data* _data4_);
static void ____lambda171__services_database_item_updated (ServicesDatabase* _sender,
                                                    ObjectsItem* item,
                                                    gint64 update_id,
                                                    gpointer self);
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
static Block5Data* block5_data_ref (Block5Data* _data5_);
static void block5_data_unref (void * _userdata_);
ObjectsProject* services_database_get_project (ServicesDatabase* self,
                                               gint64 id);
gint objects_project_get_project_count (ObjectsProject* self);
static void ____lambda172_ (Block5Data* _data5_);
static void _____lambda172__objects_project_project_count_updated (ObjectsProject* _sender,
                                                            gpointer self);
GeeArrayList* services_database_get_items_by_scheduled (ServicesDatabase* self,
                                                        gboolean checked);
static void _____lambda173_ (LayoutsFilterPaneRow* self);
static void ______lambda173__services_database_item_added (ServicesDatabase* _sender,
                                                    ObjectsItem* item,
                                                    gboolean insert,
                                                    gpointer self);
static void _____lambda174_ (LayoutsFilterPaneRow* self);
static void ______lambda174__services_database_item_deleted (ServicesDatabase* _sender,
                                                      ObjectsItem* item,
                                                      gpointer self);
static void _____lambda175_ (LayoutsFilterPaneRow* self);
static void ______lambda175__services_database_item_updated (ServicesDatabase* _sender,
                                                      ObjectsItem* item,
                                                      gint64 update_id,
                                                      gpointer self);
GeeArrayList* services_database_get_items_pinned (ServicesDatabase* self,
                                                  gboolean checked);
static void ______lambda176_ (LayoutsFilterPaneRow* self);
static void _______lambda176__services_database_item_added (ServicesDatabase* _sender,
                                                     ObjectsItem* item,
                                                     gboolean insert,
                                                     gpointer self);
static void ______lambda177_ (LayoutsFilterPaneRow* self);
static void _______lambda177__services_database_item_deleted (ServicesDatabase* _sender,
                                                       ObjectsItem* item,
                                                       gpointer self);
static void ______lambda178_ (LayoutsFilterPaneRow* self);
static void _______lambda178__services_database_item_updated (ServicesDatabase* _sender,
                                                       ObjectsItem* item,
                                                       gint64 update_id,
                                                       gpointer self);
static void layouts_filter_pane_row_set_filter_type (LayoutsFilterPaneRow* self,
                                              FilterType value);
static GObject * layouts_filter_pane_row_constructor (GType type,
                                               guint n_construct_properties,
                                               GObjectConstructParam * construct_properties);
gchar* filter_type_to_string (FilterType self);
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
static gboolean _layouts_filter_pane_row___lambda179_ (LayoutsFilterPaneRow* self,
                                                GtkWidget* sender,
                                                GdkEventButton* evt);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
GType pane_type_get_type (void) G_GNUC_CONST;
static gboolean __layouts_filter_pane_row___lambda179__gtk_widget_button_press_event (GtkWidget* _sender,
                                                                               GdkEventButton* event,
                                                                               gpointer self);
static void _layouts_filter_pane_row___lambda180_ (LayoutsFilterPaneRow* self,
                                            PaneType pane_type,
                                            const gchar* id);
static void __layouts_filter_pane_row___lambda180__services_event_bus_pane_selected (ServicesEventBus* _sender,
                                                                              PaneType panel_type,
                                                                              const gchar* id,
                                                                              gpointer self);
static void layouts_filter_pane_row_finalize (GObject * obj);
static GType layouts_filter_pane_row_get_type_once (void);
static void _vala_layouts_filter_pane_row_get_property (GObject * object,
                                                 guint property_id,
                                                 GValue * value,
                                                 GParamSpec * pspec);
static void _vala_layouts_filter_pane_row_set_property (GObject * object,
                                                 guint property_id,
                                                 const GValue * value,
                                                 GParamSpec * pspec);

static inline gpointer
layouts_filter_pane_row_get_instance_private (LayoutsFilterPaneRow* self)
{
	return G_STRUCT_MEMBER_P (self, LayoutsFilterPaneRow_private_offset);
}

LayoutsFilterPaneRow*
layouts_filter_pane_row_construct (GType object_type,
                                   FilterType filter_type)
{
	LayoutsFilterPaneRow * self = NULL;
#line 13 "../src/Layouts/FilterPaneRow.vala"
	self = (LayoutsFilterPaneRow*) g_object_new (object_type, "filter-type", filter_type, NULL);
#line 12 "../src/Layouts/FilterPaneRow.vala"
	return self;
#line 285 "FilterPaneRow.c"
}

LayoutsFilterPaneRow*
layouts_filter_pane_row_new (FilterType filter_type)
{
#line 12 "../src/Layouts/FilterPaneRow.vala"
	return layouts_filter_pane_row_construct (LAYOUTS_TYPE_FILTER_PANE_ROW, filter_type);
#line 293 "FilterPaneRow.c"
}

static void
layouts_filter_pane_row_build_filter_data (LayoutsFilterPaneRow* self)
{
	FilterType _tmp0_;
#line 80 "../src/Layouts/FilterPaneRow.vala"
	g_return_if_fail (self != NULL);
#line 81 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = self->priv->_filter_type;
#line 81 "../src/Layouts/FilterPaneRow.vala"
	if (_tmp0_ == FILTER_TYPE_TODAY) {
#line 306 "FilterPaneRow.c"
		GtkLabel* _tmp1_;
		WidgetsDynamicIcon* _tmp2_;
#line 82 "../src/Layouts/FilterPaneRow.vala"
		_tmp1_ = self->priv->title_label;
#line 82 "../src/Layouts/FilterPaneRow.vala"
		gtk_label_set_label (_tmp1_, _ ("Today"));
#line 83 "../src/Layouts/FilterPaneRow.vala"
		_tmp2_ = self->priv->title_image;
#line 83 "../src/Layouts/FilterPaneRow.vala"
		widgets_dynamic_icon_update_icon_name (_tmp2_, "planner-today");
#line 317 "FilterPaneRow.c"
	} else {
		FilterType _tmp3_;
#line 84 "../src/Layouts/FilterPaneRow.vala"
		_tmp3_ = self->priv->_filter_type;
#line 84 "../src/Layouts/FilterPaneRow.vala"
		if (_tmp3_ == FILTER_TYPE_INBOX) {
#line 324 "FilterPaneRow.c"
			GtkLabel* _tmp4_;
			WidgetsDynamicIcon* _tmp5_;
#line 85 "../src/Layouts/FilterPaneRow.vala"
			_tmp4_ = self->priv->title_label;
#line 85 "../src/Layouts/FilterPaneRow.vala"
			gtk_label_set_label (_tmp4_, _ ("Inbox"));
#line 86 "../src/Layouts/FilterPaneRow.vala"
			_tmp5_ = self->priv->title_image;
#line 86 "../src/Layouts/FilterPaneRow.vala"
			widgets_dynamic_icon_update_icon_name (_tmp5_, "planner-inbox");
#line 335 "FilterPaneRow.c"
		} else {
			FilterType _tmp6_;
#line 87 "../src/Layouts/FilterPaneRow.vala"
			_tmp6_ = self->priv->_filter_type;
#line 87 "../src/Layouts/FilterPaneRow.vala"
			if (_tmp6_ == FILTER_TYPE_SCHEDULED) {
#line 342 "FilterPaneRow.c"
				GtkLabel* _tmp7_;
				WidgetsDynamicIcon* _tmp8_;
#line 88 "../src/Layouts/FilterPaneRow.vala"
				_tmp7_ = self->priv->title_label;
#line 88 "../src/Layouts/FilterPaneRow.vala"
				gtk_label_set_label (_tmp7_, _ ("Scheduled"));
#line 89 "../src/Layouts/FilterPaneRow.vala"
				_tmp8_ = self->priv->title_image;
#line 89 "../src/Layouts/FilterPaneRow.vala"
				widgets_dynamic_icon_update_icon_name (_tmp8_, "planner-scheduled");
#line 353 "FilterPaneRow.c"
			} else {
				FilterType _tmp9_;
#line 90 "../src/Layouts/FilterPaneRow.vala"
				_tmp9_ = self->priv->_filter_type;
#line 90 "../src/Layouts/FilterPaneRow.vala"
				if (_tmp9_ == FILTER_TYPE_PINBOARD) {
#line 360 "FilterPaneRow.c"
					GtkLabel* _tmp10_;
					WidgetsDynamicIcon* _tmp11_;
#line 91 "../src/Layouts/FilterPaneRow.vala"
					_tmp10_ = self->priv->title_label;
#line 91 "../src/Layouts/FilterPaneRow.vala"
					gtk_label_set_label (_tmp10_, _ ("Pinboard"));
#line 92 "../src/Layouts/FilterPaneRow.vala"
					_tmp11_ = self->priv->title_image;
#line 92 "../src/Layouts/FilterPaneRow.vala"
					widgets_dynamic_icon_update_icon_name (_tmp11_, "planner-pin-tack");
#line 371 "FilterPaneRow.c"
				}
			}
		}
	}
}

static void
layouts_filter_pane_row_update_count_label (LayoutsFilterPaneRow* self,
                                            gint count)
{
	GtkLabel* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
#line 96 "../src/Layouts/FilterPaneRow.vala"
	g_return_if_fail (self != NULL);
#line 97 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = self->priv->count_label;
#line 97 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = g_strdup_printf ("%i", count);
#line 97 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = _tmp1_;
#line 97 "../src/Layouts/FilterPaneRow.vala"
	gtk_label_set_label (_tmp0_, _tmp2_);
#line 97 "../src/Layouts/FilterPaneRow.vala"
	_g_free0 (_tmp2_);
#line 397 "FilterPaneRow.c"
}

static Block4Data*
block4_data_ref (Block4Data* _data4_)
{
#line 101 "../src/Layouts/FilterPaneRow.vala"
	g_atomic_int_inc (&_data4_->_ref_count_);
#line 101 "../src/Layouts/FilterPaneRow.vala"
	return _data4_;
#line 407 "FilterPaneRow.c"
}

static void
block4_data_unref (void * _userdata_)
{
	Block4Data* _data4_;
	_data4_ = (Block4Data*) _userdata_;
#line 101 "../src/Layouts/FilterPaneRow.vala"
	if (g_atomic_int_dec_and_test (&_data4_->_ref_count_)) {
#line 417 "FilterPaneRow.c"
		LayoutsFilterPaneRow* self;
#line 101 "../src/Layouts/FilterPaneRow.vala"
		self = _data4_->self;
#line 101 "../src/Layouts/FilterPaneRow.vala"
		_g_date_time_unref0 (_data4_->date);
#line 101 "../src/Layouts/FilterPaneRow.vala"
		_g_object_unref0 (self);
#line 101 "../src/Layouts/FilterPaneRow.vala"
		g_slice_free (Block4Data, _data4_);
#line 427 "FilterPaneRow.c"
	}
}

static void
___lambda169_ (Block4Data* _data4_)
{
	LayoutsFilterPaneRow* self;
	ServicesDatabase* _tmp0_;
	GDateTime* _tmp1_;
	GeeArrayList* _tmp2_;
	GeeArrayList* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
#line 105 "../src/Layouts/FilterPaneRow.vala"
	self = _data4_->self;
#line 106 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = planner_database;
#line 106 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = _data4_->date;
#line 106 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = services_database_get_items_by_date (_tmp0_, _tmp1_, FALSE);
#line 106 "../src/Layouts/FilterPaneRow.vala"
	_tmp3_ = _tmp2_;
#line 106 "../src/Layouts/FilterPaneRow.vala"
	_tmp4_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp3_);
#line 106 "../src/Layouts/FilterPaneRow.vala"
	_tmp5_ = _tmp4_;
#line 106 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_update_count_label (self, _tmp5_);
#line 106 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (_tmp3_);
#line 459 "FilterPaneRow.c"
}

static void
____lambda169__services_database_item_added (ServicesDatabase* _sender,
                                             ObjectsItem* item,
                                             gboolean insert,
                                             gpointer self)
{
#line 105 "../src/Layouts/FilterPaneRow.vala"
	___lambda169_ (self);
#line 470 "FilterPaneRow.c"
}

static void
___lambda170_ (Block4Data* _data4_)
{
	LayoutsFilterPaneRow* self;
	ServicesDatabase* _tmp0_;
	GDateTime* _tmp1_;
	GeeArrayList* _tmp2_;
	GeeArrayList* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
#line 109 "../src/Layouts/FilterPaneRow.vala"
	self = _data4_->self;
#line 110 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = planner_database;
#line 110 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = _data4_->date;
#line 110 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = services_database_get_items_by_date (_tmp0_, _tmp1_, FALSE);
#line 110 "../src/Layouts/FilterPaneRow.vala"
	_tmp3_ = _tmp2_;
#line 110 "../src/Layouts/FilterPaneRow.vala"
	_tmp4_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp3_);
#line 110 "../src/Layouts/FilterPaneRow.vala"
	_tmp5_ = _tmp4_;
#line 110 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_update_count_label (self, _tmp5_);
#line 110 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (_tmp3_);
#line 501 "FilterPaneRow.c"
}

static void
____lambda170__services_database_item_deleted (ServicesDatabase* _sender,
                                               ObjectsItem* item,
                                               gpointer self)
{
#line 109 "../src/Layouts/FilterPaneRow.vala"
	___lambda170_ (self);
#line 511 "FilterPaneRow.c"
}

static void
___lambda171_ (Block4Data* _data4_)
{
	LayoutsFilterPaneRow* self;
	ServicesDatabase* _tmp0_;
	GDateTime* _tmp1_;
	GeeArrayList* _tmp2_;
	GeeArrayList* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
#line 113 "../src/Layouts/FilterPaneRow.vala"
	self = _data4_->self;
#line 114 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = planner_database;
#line 114 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = _data4_->date;
#line 114 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = services_database_get_items_by_date (_tmp0_, _tmp1_, FALSE);
#line 114 "../src/Layouts/FilterPaneRow.vala"
	_tmp3_ = _tmp2_;
#line 114 "../src/Layouts/FilterPaneRow.vala"
	_tmp4_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp3_);
#line 114 "../src/Layouts/FilterPaneRow.vala"
	_tmp5_ = _tmp4_;
#line 114 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_update_count_label (self, _tmp5_);
#line 114 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (_tmp3_);
#line 542 "FilterPaneRow.c"
}

static void
____lambda171__services_database_item_updated (ServicesDatabase* _sender,
                                               ObjectsItem* item,
                                               gint64 update_id,
                                               gpointer self)
{
#line 113 "../src/Layouts/FilterPaneRow.vala"
	___lambda171_ (self);
#line 553 "FilterPaneRow.c"
}

static Block5Data*
block5_data_ref (Block5Data* _data5_)
{
#line 116 "../src/Layouts/FilterPaneRow.vala"
	g_atomic_int_inc (&_data5_->_ref_count_);
#line 116 "../src/Layouts/FilterPaneRow.vala"
	return _data5_;
#line 563 "FilterPaneRow.c"
}

static void
block5_data_unref (void * _userdata_)
{
	Block5Data* _data5_;
	_data5_ = (Block5Data*) _userdata_;
#line 116 "../src/Layouts/FilterPaneRow.vala"
	if (g_atomic_int_dec_and_test (&_data5_->_ref_count_)) {
#line 573 "FilterPaneRow.c"
		LayoutsFilterPaneRow* self;
#line 116 "../src/Layouts/FilterPaneRow.vala"
		self = _data5_->self;
#line 116 "../src/Layouts/FilterPaneRow.vala"
		_g_object_unref0 (_data5_->inbox_project);
#line 116 "../src/Layouts/FilterPaneRow.vala"
		_g_object_unref0 (self);
#line 116 "../src/Layouts/FilterPaneRow.vala"
		g_slice_free (Block5Data, _data5_);
#line 583 "FilterPaneRow.c"
	}
}

static void
____lambda172_ (Block5Data* _data5_)
{
	LayoutsFilterPaneRow* self;
	ObjectsProject* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
#line 120 "../src/Layouts/FilterPaneRow.vala"
	self = _data5_->self;
#line 121 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = _data5_->inbox_project;
#line 121 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = objects_project_get_project_count (_tmp0_);
#line 121 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = _tmp1_;
#line 121 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_update_count_label (self, _tmp2_);
#line 604 "FilterPaneRow.c"
}

static void
_____lambda172__objects_project_project_count_updated (ObjectsProject* _sender,
                                                       gpointer self)
{
#line 120 "../src/Layouts/FilterPaneRow.vala"
	____lambda172_ (self);
#line 613 "FilterPaneRow.c"
}

static void
_____lambda173_ (LayoutsFilterPaneRow* self)
{
	ServicesDatabase* _tmp0_;
	GeeArrayList* _tmp1_;
	GeeArrayList* _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
#line 127 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = planner_database;
#line 127 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = services_database_get_items_by_scheduled (_tmp0_, FALSE);
#line 127 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = _tmp1_;
#line 127 "../src/Layouts/FilterPaneRow.vala"
	_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
#line 127 "../src/Layouts/FilterPaneRow.vala"
	_tmp4_ = _tmp3_;
#line 127 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_update_count_label (self, _tmp4_);
#line 127 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (_tmp2_);
#line 638 "FilterPaneRow.c"
}

static void
______lambda173__services_database_item_added (ServicesDatabase* _sender,
                                               ObjectsItem* item,
                                               gboolean insert,
                                               gpointer self)
{
#line 126 "../src/Layouts/FilterPaneRow.vala"
	_____lambda173_ ((LayoutsFilterPaneRow*) self);
#line 649 "FilterPaneRow.c"
}

static void
_____lambda174_ (LayoutsFilterPaneRow* self)
{
	ServicesDatabase* _tmp0_;
	GeeArrayList* _tmp1_;
	GeeArrayList* _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
#line 131 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = planner_database;
#line 131 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = services_database_get_items_by_scheduled (_tmp0_, FALSE);
#line 131 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = _tmp1_;
#line 131 "../src/Layouts/FilterPaneRow.vala"
	_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
#line 131 "../src/Layouts/FilterPaneRow.vala"
	_tmp4_ = _tmp3_;
#line 131 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_update_count_label (self, _tmp4_);
#line 131 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (_tmp2_);
#line 674 "FilterPaneRow.c"
}

static void
______lambda174__services_database_item_deleted (ServicesDatabase* _sender,
                                                 ObjectsItem* item,
                                                 gpointer self)
{
#line 130 "../src/Layouts/FilterPaneRow.vala"
	_____lambda174_ ((LayoutsFilterPaneRow*) self);
#line 684 "FilterPaneRow.c"
}

static void
_____lambda175_ (LayoutsFilterPaneRow* self)
{
	ServicesDatabase* _tmp0_;
	GeeArrayList* _tmp1_;
	GeeArrayList* _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
#line 135 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = planner_database;
#line 135 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = services_database_get_items_by_scheduled (_tmp0_, FALSE);
#line 135 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = _tmp1_;
#line 135 "../src/Layouts/FilterPaneRow.vala"
	_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
#line 135 "../src/Layouts/FilterPaneRow.vala"
	_tmp4_ = _tmp3_;
#line 135 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_update_count_label (self, _tmp4_);
#line 135 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (_tmp2_);
#line 709 "FilterPaneRow.c"
}

static void
______lambda175__services_database_item_updated (ServicesDatabase* _sender,
                                                 ObjectsItem* item,
                                                 gint64 update_id,
                                                 gpointer self)
{
#line 134 "../src/Layouts/FilterPaneRow.vala"
	_____lambda175_ ((LayoutsFilterPaneRow*) self);
#line 720 "FilterPaneRow.c"
}

static void
______lambda176_ (LayoutsFilterPaneRow* self)
{
	ServicesDatabase* _tmp0_;
	GeeArrayList* _tmp1_;
	GeeArrayList* _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
#line 141 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = planner_database;
#line 141 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = services_database_get_items_pinned (_tmp0_, FALSE);
#line 141 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = _tmp1_;
#line 141 "../src/Layouts/FilterPaneRow.vala"
	_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
#line 141 "../src/Layouts/FilterPaneRow.vala"
	_tmp4_ = _tmp3_;
#line 141 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_update_count_label (self, _tmp4_);
#line 141 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (_tmp2_);
#line 745 "FilterPaneRow.c"
}

static void
_______lambda176__services_database_item_added (ServicesDatabase* _sender,
                                                ObjectsItem* item,
                                                gboolean insert,
                                                gpointer self)
{
#line 140 "../src/Layouts/FilterPaneRow.vala"
	______lambda176_ ((LayoutsFilterPaneRow*) self);
#line 756 "FilterPaneRow.c"
}

static void
______lambda177_ (LayoutsFilterPaneRow* self)
{
	ServicesDatabase* _tmp0_;
	GeeArrayList* _tmp1_;
	GeeArrayList* _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
#line 145 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = planner_database;
#line 145 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = services_database_get_items_pinned (_tmp0_, FALSE);
#line 145 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = _tmp1_;
#line 145 "../src/Layouts/FilterPaneRow.vala"
	_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
#line 145 "../src/Layouts/FilterPaneRow.vala"
	_tmp4_ = _tmp3_;
#line 145 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_update_count_label (self, _tmp4_);
#line 145 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (_tmp2_);
#line 781 "FilterPaneRow.c"
}

static void
_______lambda177__services_database_item_deleted (ServicesDatabase* _sender,
                                                  ObjectsItem* item,
                                                  gpointer self)
{
#line 144 "../src/Layouts/FilterPaneRow.vala"
	______lambda177_ ((LayoutsFilterPaneRow*) self);
#line 791 "FilterPaneRow.c"
}

static void
______lambda178_ (LayoutsFilterPaneRow* self)
{
	ServicesDatabase* _tmp0_;
	GeeArrayList* _tmp1_;
	GeeArrayList* _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
#line 149 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = planner_database;
#line 149 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = services_database_get_items_pinned (_tmp0_, FALSE);
#line 149 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = _tmp1_;
#line 149 "../src/Layouts/FilterPaneRow.vala"
	_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
#line 149 "../src/Layouts/FilterPaneRow.vala"
	_tmp4_ = _tmp3_;
#line 149 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_update_count_label (self, _tmp4_);
#line 149 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (_tmp2_);
#line 816 "FilterPaneRow.c"
}

static void
_______lambda178__services_database_item_updated (ServicesDatabase* _sender,
                                                  ObjectsItem* item,
                                                  gint64 update_id,
                                                  gpointer self)
{
#line 148 "../src/Layouts/FilterPaneRow.vala"
	______lambda178_ ((LayoutsFilterPaneRow*) self);
#line 827 "FilterPaneRow.c"
}

void
layouts_filter_pane_row_init (LayoutsFilterPaneRow* self)
{
	FilterType _tmp0_;
#line 100 "../src/Layouts/FilterPaneRow.vala"
	g_return_if_fail (self != NULL);
#line 101 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = self->priv->_filter_type;
#line 101 "../src/Layouts/FilterPaneRow.vala"
	if (_tmp0_ == FILTER_TYPE_TODAY) {
#line 840 "FilterPaneRow.c"
		Block4Data* _data4_;
		GDateTime* _tmp1_;
		ServicesDatabase* _tmp2_;
		GDateTime* _tmp3_;
		GeeArrayList* _tmp4_;
		GeeArrayList* _tmp5_;
		gint _tmp6_;
		gint _tmp7_;
		ServicesDatabase* _tmp8_;
		ServicesDatabase* _tmp9_;
		ServicesDatabase* _tmp10_;
#line 101 "../src/Layouts/FilterPaneRow.vala"
		_data4_ = g_slice_new0 (Block4Data);
#line 101 "../src/Layouts/FilterPaneRow.vala"
		_data4_->_ref_count_ = 1;
#line 101 "../src/Layouts/FilterPaneRow.vala"
		_data4_->self = g_object_ref (self);
#line 102 "../src/Layouts/FilterPaneRow.vala"
		_tmp1_ = g_date_time_new_now_local ();
#line 102 "../src/Layouts/FilterPaneRow.vala"
		_data4_->date = _tmp1_;
#line 103 "../src/Layouts/FilterPaneRow.vala"
		_tmp2_ = planner_database;
#line 103 "../src/Layouts/FilterPaneRow.vala"
		_tmp3_ = _data4_->date;
#line 103 "../src/Layouts/FilterPaneRow.vala"
		_tmp4_ = services_database_get_items_by_date (_tmp2_, _tmp3_, FALSE);
#line 103 "../src/Layouts/FilterPaneRow.vala"
		_tmp5_ = _tmp4_;
#line 103 "../src/Layouts/FilterPaneRow.vala"
		_tmp6_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp5_);
#line 103 "../src/Layouts/FilterPaneRow.vala"
		_tmp7_ = _tmp6_;
#line 103 "../src/Layouts/FilterPaneRow.vala"
		layouts_filter_pane_row_update_count_label (self, _tmp7_);
#line 103 "../src/Layouts/FilterPaneRow.vala"
		_g_object_unref0 (_tmp5_);
#line 105 "../src/Layouts/FilterPaneRow.vala"
		_tmp8_ = planner_database;
#line 105 "../src/Layouts/FilterPaneRow.vala"
		g_signal_connect_data (_tmp8_, "item-added", (GCallback) ____lambda169__services_database_item_added, block4_data_ref (_data4_), (GClosureNotify) block4_data_unref, 0);
#line 109 "../src/Layouts/FilterPaneRow.vala"
		_tmp9_ = planner_database;
#line 109 "../src/Layouts/FilterPaneRow.vala"
		g_signal_connect_data (_tmp9_, "item-deleted", (GCallback) ____lambda170__services_database_item_deleted, block4_data_ref (_data4_), (GClosureNotify) block4_data_unref, 0);
#line 113 "../src/Layouts/FilterPaneRow.vala"
		_tmp10_ = planner_database;
#line 113 "../src/Layouts/FilterPaneRow.vala"
		g_signal_connect_data (_tmp10_, "item-updated", (GCallback) ____lambda171__services_database_item_updated, block4_data_ref (_data4_), (GClosureNotify) block4_data_unref, 0);
#line 101 "../src/Layouts/FilterPaneRow.vala"
		block4_data_unref (_data4_);
#line 101 "../src/Layouts/FilterPaneRow.vala"
		_data4_ = NULL;
#line 894 "FilterPaneRow.c"
	} else {
		FilterType _tmp11_;
#line 116 "../src/Layouts/FilterPaneRow.vala"
		_tmp11_ = self->priv->_filter_type;
#line 116 "../src/Layouts/FilterPaneRow.vala"
		if (_tmp11_ == FILTER_TYPE_INBOX) {
#line 901 "FilterPaneRow.c"
			Block5Data* _data5_;
			ServicesDatabase* _tmp12_;
			GSettings* _tmp13_;
			ObjectsProject* _tmp14_;
			ObjectsProject* _tmp15_;
			gint _tmp16_;
			gint _tmp17_;
			ObjectsProject* _tmp18_;
#line 116 "../src/Layouts/FilterPaneRow.vala"
			_data5_ = g_slice_new0 (Block5Data);
#line 116 "../src/Layouts/FilterPaneRow.vala"
			_data5_->_ref_count_ = 1;
#line 116 "../src/Layouts/FilterPaneRow.vala"
			_data5_->self = g_object_ref (self);
#line 117 "../src/Layouts/FilterPaneRow.vala"
			_tmp12_ = planner_database;
#line 117 "../src/Layouts/FilterPaneRow.vala"
			_tmp13_ = planner_settings;
#line 117 "../src/Layouts/FilterPaneRow.vala"
			_tmp14_ = services_database_get_project (_tmp12_, g_settings_get_int64 (_tmp13_, "inbox-project-id"));
#line 117 "../src/Layouts/FilterPaneRow.vala"
			_data5_->inbox_project = _tmp14_;
#line 118 "../src/Layouts/FilterPaneRow.vala"
			_tmp15_ = _data5_->inbox_project;
#line 118 "../src/Layouts/FilterPaneRow.vala"
			_tmp16_ = objects_project_get_project_count (_tmp15_);
#line 118 "../src/Layouts/FilterPaneRow.vala"
			_tmp17_ = _tmp16_;
#line 118 "../src/Layouts/FilterPaneRow.vala"
			layouts_filter_pane_row_update_count_label (self, _tmp17_);
#line 120 "../src/Layouts/FilterPaneRow.vala"
			_tmp18_ = _data5_->inbox_project;
#line 120 "../src/Layouts/FilterPaneRow.vala"
			g_signal_connect_data (_tmp18_, "project-count-updated", (GCallback) _____lambda172__objects_project_project_count_updated, block5_data_ref (_data5_), (GClosureNotify) block5_data_unref, 0);
#line 116 "../src/Layouts/FilterPaneRow.vala"
			block5_data_unref (_data5_);
#line 116 "../src/Layouts/FilterPaneRow.vala"
			_data5_ = NULL;
#line 940 "FilterPaneRow.c"
		} else {
			FilterType _tmp19_;
#line 123 "../src/Layouts/FilterPaneRow.vala"
			_tmp19_ = self->priv->_filter_type;
#line 123 "../src/Layouts/FilterPaneRow.vala"
			if (_tmp19_ == FILTER_TYPE_SCHEDULED) {
#line 947 "FilterPaneRow.c"
				ServicesDatabase* _tmp20_;
				GeeArrayList* _tmp21_;
				GeeArrayList* _tmp22_;
				gint _tmp23_;
				gint _tmp24_;
				ServicesDatabase* _tmp25_;
				ServicesDatabase* _tmp26_;
				ServicesDatabase* _tmp27_;
#line 124 "../src/Layouts/FilterPaneRow.vala"
				_tmp20_ = planner_database;
#line 124 "../src/Layouts/FilterPaneRow.vala"
				_tmp21_ = services_database_get_items_by_scheduled (_tmp20_, FALSE);
#line 124 "../src/Layouts/FilterPaneRow.vala"
				_tmp22_ = _tmp21_;
#line 124 "../src/Layouts/FilterPaneRow.vala"
				_tmp23_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp22_);
#line 124 "../src/Layouts/FilterPaneRow.vala"
				_tmp24_ = _tmp23_;
#line 124 "../src/Layouts/FilterPaneRow.vala"
				layouts_filter_pane_row_update_count_label (self, _tmp24_);
#line 124 "../src/Layouts/FilterPaneRow.vala"
				_g_object_unref0 (_tmp22_);
#line 126 "../src/Layouts/FilterPaneRow.vala"
				_tmp25_ = planner_database;
#line 126 "../src/Layouts/FilterPaneRow.vala"
				g_signal_connect_object (_tmp25_, "item-added", (GCallback) ______lambda173__services_database_item_added, self, 0);
#line 130 "../src/Layouts/FilterPaneRow.vala"
				_tmp26_ = planner_database;
#line 130 "../src/Layouts/FilterPaneRow.vala"
				g_signal_connect_object (_tmp26_, "item-deleted", (GCallback) ______lambda174__services_database_item_deleted, self, 0);
#line 134 "../src/Layouts/FilterPaneRow.vala"
				_tmp27_ = planner_database;
#line 134 "../src/Layouts/FilterPaneRow.vala"
				g_signal_connect_object (_tmp27_, "item-updated", (GCallback) ______lambda175__services_database_item_updated, self, 0);
#line 982 "FilterPaneRow.c"
			} else {
				FilterType _tmp28_;
#line 137 "../src/Layouts/FilterPaneRow.vala"
				_tmp28_ = self->priv->_filter_type;
#line 137 "../src/Layouts/FilterPaneRow.vala"
				if (_tmp28_ == FILTER_TYPE_PINBOARD) {
#line 989 "FilterPaneRow.c"
					ServicesDatabase* _tmp29_;
					GeeArrayList* _tmp30_;
					GeeArrayList* _tmp31_;
					gint _tmp32_;
					gint _tmp33_;
					ServicesDatabase* _tmp34_;
					ServicesDatabase* _tmp35_;
					ServicesDatabase* _tmp36_;
#line 138 "../src/Layouts/FilterPaneRow.vala"
					_tmp29_ = planner_database;
#line 138 "../src/Layouts/FilterPaneRow.vala"
					_tmp30_ = services_database_get_items_pinned (_tmp29_, FALSE);
#line 138 "../src/Layouts/FilterPaneRow.vala"
					_tmp31_ = _tmp30_;
#line 138 "../src/Layouts/FilterPaneRow.vala"
					_tmp32_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp31_);
#line 138 "../src/Layouts/FilterPaneRow.vala"
					_tmp33_ = _tmp32_;
#line 138 "../src/Layouts/FilterPaneRow.vala"
					layouts_filter_pane_row_update_count_label (self, _tmp33_);
#line 138 "../src/Layouts/FilterPaneRow.vala"
					_g_object_unref0 (_tmp31_);
#line 140 "../src/Layouts/FilterPaneRow.vala"
					_tmp34_ = planner_database;
#line 140 "../src/Layouts/FilterPaneRow.vala"
					g_signal_connect_object (_tmp34_, "item-added", (GCallback) _______lambda176__services_database_item_added, self, 0);
#line 144 "../src/Layouts/FilterPaneRow.vala"
					_tmp35_ = planner_database;
#line 144 "../src/Layouts/FilterPaneRow.vala"
					g_signal_connect_object (_tmp35_, "item-deleted", (GCallback) _______lambda177__services_database_item_deleted, self, 0);
#line 148 "../src/Layouts/FilterPaneRow.vala"
					_tmp36_ = planner_database;
#line 148 "../src/Layouts/FilterPaneRow.vala"
					g_signal_connect_object (_tmp36_, "item-updated", (GCallback) _______lambda178__services_database_item_updated, self, 0);
#line 1024 "FilterPaneRow.c"
				}
			}
		}
	}
}

FilterType
layouts_filter_pane_row_get_filter_type (LayoutsFilterPaneRow* self)
{
	FilterType result;
	FilterType _tmp0_;
#line 2 "../src/Layouts/FilterPaneRow.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 2 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = self->priv->_filter_type;
#line 2 "../src/Layouts/FilterPaneRow.vala"
	result = _tmp0_;
#line 2 "../src/Layouts/FilterPaneRow.vala"
	return result;
#line 1044 "FilterPaneRow.c"
}

static void
layouts_filter_pane_row_set_filter_type (LayoutsFilterPaneRow* self,
                                         FilterType value)
{
	FilterType old_value;
#line 2 "../src/Layouts/FilterPaneRow.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Layouts/FilterPaneRow.vala"
	old_value = layouts_filter_pane_row_get_filter_type (self);
#line 2 "../src/Layouts/FilterPaneRow.vala"
	if (old_value != value) {
#line 2 "../src/Layouts/FilterPaneRow.vala"
		self->priv->_filter_type = value;
#line 2 "../src/Layouts/FilterPaneRow.vala"
		g_object_notify_by_pspec ((GObject *) self, layouts_filter_pane_row_properties[LAYOUTS_FILTER_PANE_ROW_FILTER_TYPE_PROPERTY]);
#line 1062 "FilterPaneRow.c"
	}
}

static gboolean
_layouts_filter_pane_row___lambda179_ (LayoutsFilterPaneRow* self,
                                       GtkWidget* sender,
                                       GdkEventButton* evt)
{
	gboolean _tmp0_ = FALSE;
	GdkEventType _tmp1_;
	gboolean result = FALSE;
#line 57 "../src/Layouts/FilterPaneRow.vala"
	g_return_val_if_fail (sender != NULL, FALSE);
#line 57 "../src/Layouts/FilterPaneRow.vala"
	g_return_val_if_fail (evt != NULL, FALSE);
#line 58 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = evt->type;
#line 58 "../src/Layouts/FilterPaneRow.vala"
	if (_tmp1_ == GDK_BUTTON_PRESS) {
#line 58 "../src/Layouts/FilterPaneRow.vala"
		_tmp0_ = evt->button == ((guint) 1);
#line 1084 "FilterPaneRow.c"
	} else {
#line 58 "../src/Layouts/FilterPaneRow.vala"
		_tmp0_ = FALSE;
#line 1088 "FilterPaneRow.c"
	}
#line 58 "../src/Layouts/FilterPaneRow.vala"
	if (_tmp0_) {
#line 1092 "FilterPaneRow.c"
		ServicesEventBus* _tmp2_;
		FilterType _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
#line 59 "../src/Layouts/FilterPaneRow.vala"
		_tmp2_ = planner_event_bus;
#line 59 "../src/Layouts/FilterPaneRow.vala"
		_tmp3_ = self->priv->_filter_type;
#line 59 "../src/Layouts/FilterPaneRow.vala"
		_tmp4_ = filter_type_to_string (_tmp3_);
#line 59 "../src/Layouts/FilterPaneRow.vala"
		_tmp5_ = _tmp4_;
#line 59 "../src/Layouts/FilterPaneRow.vala"
		g_signal_emit_by_name (_tmp2_, "pane-selected", PANE_TYPE_FILTER, _tmp5_);
#line 59 "../src/Layouts/FilterPaneRow.vala"
		_g_free0 (_tmp5_);
#line 1109 "FilterPaneRow.c"
	} else {
		gboolean _tmp6_ = FALSE;
		GdkEventType _tmp7_;
#line 60 "../src/Layouts/FilterPaneRow.vala"
		_tmp7_ = evt->type;
#line 60 "../src/Layouts/FilterPaneRow.vala"
		if (_tmp7_ == GDK_BUTTON_PRESS) {
#line 60 "../src/Layouts/FilterPaneRow.vala"
			_tmp6_ = evt->button == ((guint) 3);
#line 1119 "FilterPaneRow.c"
		} else {
#line 60 "../src/Layouts/FilterPaneRow.vala"
			_tmp6_ = FALSE;
#line 1123 "FilterPaneRow.c"
		}
#line 60 "../src/Layouts/FilterPaneRow.vala"
		if (_tmp6_) {
#line 1127 "FilterPaneRow.c"
		}
	}
#line 64 "../src/Layouts/FilterPaneRow.vala"
	result = FALSE;
#line 64 "../src/Layouts/FilterPaneRow.vala"
	return result;
#line 1134 "FilterPaneRow.c"
}

static gboolean
__layouts_filter_pane_row___lambda179__gtk_widget_button_press_event (GtkWidget* _sender,
                                                                      GdkEventButton* event,
                                                                      gpointer self)
{
	gboolean result;
	result = _layouts_filter_pane_row___lambda179_ ((LayoutsFilterPaneRow*) self, _sender, event);
#line 57 "../src/Layouts/FilterPaneRow.vala"
	return result;
#line 1146 "FilterPaneRow.c"
}

static void
_layouts_filter_pane_row___lambda180_ (LayoutsFilterPaneRow* self,
                                       PaneType pane_type,
                                       const gchar* id)
{
	gboolean _tmp0_ = FALSE;
#line 67 "../src/Layouts/FilterPaneRow.vala"
	g_return_if_fail (id != NULL);
#line 68 "../src/Layouts/FilterPaneRow.vala"
	if (pane_type == PANE_TYPE_FILTER) {
#line 1159 "FilterPaneRow.c"
		FilterType _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
#line 68 "../src/Layouts/FilterPaneRow.vala"
		_tmp1_ = self->priv->_filter_type;
#line 68 "../src/Layouts/FilterPaneRow.vala"
		_tmp2_ = filter_type_to_string (_tmp1_);
#line 68 "../src/Layouts/FilterPaneRow.vala"
		_tmp3_ = _tmp2_;
#line 68 "../src/Layouts/FilterPaneRow.vala"
		_tmp0_ = g_strcmp0 (_tmp3_, id) == 0;
#line 68 "../src/Layouts/FilterPaneRow.vala"
		_g_free0 (_tmp3_);
#line 1173 "FilterPaneRow.c"
	} else {
#line 68 "../src/Layouts/FilterPaneRow.vala"
		_tmp0_ = FALSE;
#line 1177 "FilterPaneRow.c"
	}
#line 68 "../src/Layouts/FilterPaneRow.vala"
	if (_tmp0_) {
#line 1181 "FilterPaneRow.c"
		GtkStyleContext* _tmp4_;
		FilterType _tmp5_;
		gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
#line 69 "../src/Layouts/FilterPaneRow.vala"
		_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 69 "../src/Layouts/FilterPaneRow.vala"
		_tmp5_ = self->priv->_filter_type;
#line 69 "../src/Layouts/FilterPaneRow.vala"
		_tmp6_ = filter_type_to_string (_tmp5_);
#line 69 "../src/Layouts/FilterPaneRow.vala"
		_tmp7_ = _tmp6_;
#line 69 "../src/Layouts/FilterPaneRow.vala"
		_tmp8_ = g_strdup_printf ("filter-pane-row-%s-selected", _tmp7_);
#line 69 "../src/Layouts/FilterPaneRow.vala"
		_tmp9_ = _tmp8_;
#line 69 "../src/Layouts/FilterPaneRow.vala"
		gtk_style_context_add_class (_tmp4_, _tmp9_);
#line 69 "../src/Layouts/FilterPaneRow.vala"
		_g_free0 (_tmp9_);
#line 69 "../src/Layouts/FilterPaneRow.vala"
		_g_free0 (_tmp7_);
#line 1206 "FilterPaneRow.c"
	} else {
		GtkStyleContext* _tmp10_;
		FilterType _tmp11_;
		gchar* _tmp12_;
		gchar* _tmp13_;
		gchar* _tmp14_;
		gchar* _tmp15_;
#line 73 "../src/Layouts/FilterPaneRow.vala"
		_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 73 "../src/Layouts/FilterPaneRow.vala"
		_tmp11_ = self->priv->_filter_type;
#line 73 "../src/Layouts/FilterPaneRow.vala"
		_tmp12_ = filter_type_to_string (_tmp11_);
#line 73 "../src/Layouts/FilterPaneRow.vala"
		_tmp13_ = _tmp12_;
#line 73 "../src/Layouts/FilterPaneRow.vala"
		_tmp14_ = g_strdup_printf ("filter-pane-row-%s-selected", _tmp13_);
#line 73 "../src/Layouts/FilterPaneRow.vala"
		_tmp15_ = _tmp14_;
#line 73 "../src/Layouts/FilterPaneRow.vala"
		gtk_style_context_remove_class (_tmp10_, _tmp15_);
#line 73 "../src/Layouts/FilterPaneRow.vala"
		_g_free0 (_tmp15_);
#line 73 "../src/Layouts/FilterPaneRow.vala"
		_g_free0 (_tmp13_);
#line 1232 "FilterPaneRow.c"
	}
}

static void
__layouts_filter_pane_row___lambda180__services_event_bus_pane_selected (ServicesEventBus* _sender,
                                                                         PaneType panel_type,
                                                                         const gchar* id,
                                                                         gpointer self)
{
#line 67 "../src/Layouts/FilterPaneRow.vala"
	_layouts_filter_pane_row___lambda180_ ((LayoutsFilterPaneRow*) self, panel_type, id);
#line 1244 "FilterPaneRow.c"
}

static GObject *
layouts_filter_pane_row_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	LayoutsFilterPaneRow * self;
	GtkStyleContext* _tmp0_;
	FilterType _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	WidgetsDynamicIcon* _tmp6_ = NULL;
	WidgetsDynamicIcon* _tmp7_;
	GtkLabel* _tmp8_ = NULL;
	GtkLabel* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkLabel* _tmp11_ = NULL;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp12_ = NULL;
	GtkGrid* _tmp13_;
	GtkLabel* _tmp14_;
	GtkGrid* _tmp15_;
	WidgetsDynamicIcon* _tmp16_;
	GtkGrid* _tmp17_;
	GtkLabel* _tmp18_;
	GtkEventBox* _tmp19_;
	GtkEventBox* _tmp20_;
	GtkStyleContext* _tmp21_;
	GtkEventBox* _tmp22_;
	GtkGrid* _tmp23_;
	GtkEventBox* _tmp24_;
	GtkEventBox* _tmp25_;
	ServicesEventBus* _tmp26_;
#line 18 "../src/Layouts/FilterPaneRow.vala"
	parent_class = G_OBJECT_CLASS (layouts_filter_pane_row_parent_class);
#line 18 "../src/Layouts/FilterPaneRow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 18 "../src/Layouts/FilterPaneRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, LAYOUTS_TYPE_FILTER_PANE_ROW, LayoutsFilterPaneRow);
#line 19 "../src/Layouts/FilterPaneRow.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 19 "../src/Layouts/FilterPaneRow.vala"
	_tmp1_ = self->priv->_filter_type;
#line 19 "../src/Layouts/FilterPaneRow.vala"
	_tmp2_ = filter_type_to_string (_tmp1_);
#line 19 "../src/Layouts/FilterPaneRow.vala"
	_tmp3_ = _tmp2_;
#line 19 "../src/Layouts/FilterPaneRow.vala"
	_tmp4_ = g_strdup_printf ("filter-pane-row-%s", _tmp3_);
#line 19 "../src/Layouts/FilterPaneRow.vala"
	_tmp5_ = _tmp4_;
#line 19 "../src/Layouts/FilterPaneRow.vala"
	gtk_style_context_add_class (_tmp0_, _tmp5_);
#line 19 "../src/Layouts/FilterPaneRow.vala"
	_g_free0 (_tmp5_);
#line 19 "../src/Layouts/FilterPaneRow.vala"
	_g_free0 (_tmp3_);
#line 21 "../src/Layouts/FilterPaneRow.vala"
	_tmp6_ = widgets_dynamic_icon_new ();
#line 21 "../src/Layouts/FilterPaneRow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp6_, TRUE);
#line 21 "../src/Layouts/FilterPaneRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp6_, GTK_ALIGN_END);
#line 21 "../src/Layouts/FilterPaneRow.vala"
	g_object_ref_sink (_tmp6_);
#line 21 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (self->priv->title_image);
#line 21 "../src/Layouts/FilterPaneRow.vala"
	self->priv->title_image = _tmp6_;
#line 25 "../src/Layouts/FilterPaneRow.vala"
	_tmp7_ = self->priv->title_image;
#line 25 "../src/Layouts/FilterPaneRow.vala"
	widgets_dynamic_icon_set_size (_tmp7_, 19);
#line 27 "../src/Layouts/FilterPaneRow.vala"
	_tmp8_ = (GtkLabel*) gtk_label_new (NULL);
#line 27 "../src/Layouts/FilterPaneRow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp8_, TRUE);
#line 27 "../src/Layouts/FilterPaneRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp8_, GTK_ALIGN_START);
#line 27 "../src/Layouts/FilterPaneRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp8_, 3);
#line 27 "../src/Layouts/FilterPaneRow.vala"
	g_object_ref_sink (_tmp8_);
#line 27 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (self->priv->title_label);
#line 27 "../src/Layouts/FilterPaneRow.vala"
	self->priv->title_label = _tmp8_;
#line 33 "../src/Layouts/FilterPaneRow.vala"
	_tmp9_ = self->priv->title_label;
#line 33 "../src/Layouts/FilterPaneRow.vala"
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
#line 33 "../src/Layouts/FilterPaneRow.vala"
	gtk_style_context_add_class (_tmp10_, "font-bold");
#line 35 "../src/Layouts/FilterPaneRow.vala"
	_tmp11_ = (GtkLabel*) gtk_label_new (NULL);
#line 35 "../src/Layouts/FilterPaneRow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp11_, TRUE);
#line 35 "../src/Layouts/FilterPaneRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp11_, GTK_ALIGN_START);
#line 35 "../src/Layouts/FilterPaneRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp11_, 3);
#line 35 "../src/Layouts/FilterPaneRow.vala"
	g_object_ref_sink (_tmp11_);
#line 35 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (self->priv->count_label);
#line 35 "../src/Layouts/FilterPaneRow.vala"
	self->priv->count_label = _tmp11_;
#line 41 "../src/Layouts/FilterPaneRow.vala"
	_tmp12_ = (GtkGrid*) gtk_grid_new ();
#line 41 "../src/Layouts/FilterPaneRow.vala"
	gtk_grid_set_column_spacing (_tmp12_, 6);
#line 41 "../src/Layouts/FilterPaneRow.vala"
	g_object_set ((GtkWidget*) _tmp12_, "margin", 3, NULL);
#line 41 "../src/Layouts/FilterPaneRow.vala"
	g_object_ref_sink (_tmp12_);
#line 41 "../src/Layouts/FilterPaneRow.vala"
	main_grid = _tmp12_;
#line 45 "../src/Layouts/FilterPaneRow.vala"
	_tmp13_ = main_grid;
#line 45 "../src/Layouts/FilterPaneRow.vala"
	_tmp14_ = self->priv->title_label;
#line 45 "../src/Layouts/FilterPaneRow.vala"
	gtk_grid_attach (_tmp13_, (GtkWidget*) _tmp14_, 0, 0, 1, 1);
#line 46 "../src/Layouts/FilterPaneRow.vala"
	_tmp15_ = main_grid;
#line 46 "../src/Layouts/FilterPaneRow.vala"
	_tmp16_ = self->priv->title_image;
#line 46 "../src/Layouts/FilterPaneRow.vala"
	gtk_grid_attach (_tmp15_, (GtkWidget*) _tmp16_, 1, 0, 1, 1);
#line 47 "../src/Layouts/FilterPaneRow.vala"
	_tmp17_ = main_grid;
#line 47 "../src/Layouts/FilterPaneRow.vala"
	_tmp18_ = self->priv->count_label;
#line 47 "../src/Layouts/FilterPaneRow.vala"
	gtk_grid_attach (_tmp17_, (GtkWidget*) _tmp18_, 0, 1, 2, 2);
#line 49 "../src/Layouts/FilterPaneRow.vala"
	_tmp19_ = (GtkEventBox*) gtk_event_box_new ();
#line 49 "../src/Layouts/FilterPaneRow.vala"
	g_object_ref_sink (_tmp19_);
#line 49 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (self->priv->content_eventbox);
#line 49 "../src/Layouts/FilterPaneRow.vala"
	self->priv->content_eventbox = _tmp19_;
#line 50 "../src/Layouts/FilterPaneRow.vala"
	_tmp20_ = self->priv->content_eventbox;
#line 50 "../src/Layouts/FilterPaneRow.vala"
	_tmp21_ = gtk_widget_get_style_context ((GtkWidget*) _tmp20_);
#line 50 "../src/Layouts/FilterPaneRow.vala"
	gtk_style_context_add_class (_tmp21_, "transition");
#line 51 "../src/Layouts/FilterPaneRow.vala"
	_tmp22_ = self->priv->content_eventbox;
#line 51 "../src/Layouts/FilterPaneRow.vala"
	_tmp23_ = main_grid;
#line 51 "../src/Layouts/FilterPaneRow.vala"
	gtk_container_add ((GtkContainer*) _tmp22_, (GtkWidget*) _tmp23_);
#line 53 "../src/Layouts/FilterPaneRow.vala"
	_tmp24_ = self->priv->content_eventbox;
#line 53 "../src/Layouts/FilterPaneRow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp24_);
#line 55 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_build_filter_data (self);
#line 57 "../src/Layouts/FilterPaneRow.vala"
	_tmp25_ = self->priv->content_eventbox;
#line 57 "../src/Layouts/FilterPaneRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp25_, "button-press-event", (GCallback) __layouts_filter_pane_row___lambda179__gtk_widget_button_press_event, self, 0);
#line 67 "../src/Layouts/FilterPaneRow.vala"
	_tmp26_ = planner_event_bus;
#line 67 "../src/Layouts/FilterPaneRow.vala"
	g_signal_connect_object (_tmp26_, "pane-selected", (GCallback) __layouts_filter_pane_row___lambda180__services_event_bus_pane_selected, self, 0);
#line 18 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (main_grid);
#line 18 "../src/Layouts/FilterPaneRow.vala"
	return obj;
#line 1423 "FilterPaneRow.c"
}

static void
layouts_filter_pane_row_class_init (LayoutsFilterPaneRowClass * klass,
                                    gpointer klass_data)
{
#line 1 "../src/Layouts/FilterPaneRow.vala"
	layouts_filter_pane_row_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Layouts/FilterPaneRow.vala"
	g_type_class_adjust_private_offset (klass, &LayoutsFilterPaneRow_private_offset);
#line 1 "../src/Layouts/FilterPaneRow.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_layouts_filter_pane_row_get_property;
#line 1 "../src/Layouts/FilterPaneRow.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_layouts_filter_pane_row_set_property;
#line 1 "../src/Layouts/FilterPaneRow.vala"
	G_OBJECT_CLASS (klass)->constructor = layouts_filter_pane_row_constructor;
#line 1 "../src/Layouts/FilterPaneRow.vala"
	G_OBJECT_CLASS (klass)->finalize = layouts_filter_pane_row_finalize;
#line 1 "../src/Layouts/FilterPaneRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), LAYOUTS_FILTER_PANE_ROW_FILTER_TYPE_PROPERTY, layouts_filter_pane_row_properties[LAYOUTS_FILTER_PANE_ROW_FILTER_TYPE_PROPERTY] = g_param_spec_enum ("filter-type", "filter-type", "filter-type", TYPE_FILTER_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1444 "FilterPaneRow.c"
}

static void
layouts_filter_pane_row_instance_init (LayoutsFilterPaneRow * self,
                                       gpointer klass)
{
#line 1 "../src/Layouts/FilterPaneRow.vala"
	self->priv = layouts_filter_pane_row_get_instance_private (self);
#line 1453 "FilterPaneRow.c"
}

static void
layouts_filter_pane_row_finalize (GObject * obj)
{
	LayoutsFilterPaneRow * self;
#line 1 "../src/Layouts/FilterPaneRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, LAYOUTS_TYPE_FILTER_PANE_ROW, LayoutsFilterPaneRow);
#line 4 "../src/Layouts/FilterPaneRow.vala"
	_g_free0 (self->title);
#line 5 "../src/Layouts/FilterPaneRow.vala"
	_g_free0 (self->icon_name);
#line 7 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (self->priv->title_image);
#line 8 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (self->priv->title_label);
#line 9 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (self->priv->count_label);
#line 10 "../src/Layouts/FilterPaneRow.vala"
	_g_object_unref0 (self->priv->content_eventbox);
#line 1 "../src/Layouts/FilterPaneRow.vala"
	G_OBJECT_CLASS (layouts_filter_pane_row_parent_class)->finalize (obj);
#line 1476 "FilterPaneRow.c"
}

static GType
layouts_filter_pane_row_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (LayoutsFilterPaneRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) layouts_filter_pane_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (LayoutsFilterPaneRow), 0, (GInstanceInitFunc) layouts_filter_pane_row_instance_init, NULL };
	GType layouts_filter_pane_row_type_id;
	layouts_filter_pane_row_type_id = g_type_register_static (gtk_flow_box_child_get_type (), "LayoutsFilterPaneRow", &g_define_type_info, 0);
	LayoutsFilterPaneRow_private_offset = g_type_add_instance_private (layouts_filter_pane_row_type_id, sizeof (LayoutsFilterPaneRowPrivate));
	return layouts_filter_pane_row_type_id;
}

GType
layouts_filter_pane_row_get_type (void)
{
	static volatile gsize layouts_filter_pane_row_type_id__volatile = 0;
	if (g_once_init_enter (&layouts_filter_pane_row_type_id__volatile)) {
		GType layouts_filter_pane_row_type_id;
		layouts_filter_pane_row_type_id = layouts_filter_pane_row_get_type_once ();
		g_once_init_leave (&layouts_filter_pane_row_type_id__volatile, layouts_filter_pane_row_type_id);
	}
	return layouts_filter_pane_row_type_id__volatile;
}

static void
_vala_layouts_filter_pane_row_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec)
{
	LayoutsFilterPaneRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, LAYOUTS_TYPE_FILTER_PANE_ROW, LayoutsFilterPaneRow);
#line 1 "../src/Layouts/FilterPaneRow.vala"
	switch (property_id) {
#line 1 "../src/Layouts/FilterPaneRow.vala"
		case LAYOUTS_FILTER_PANE_ROW_FILTER_TYPE_PROPERTY:
#line 1 "../src/Layouts/FilterPaneRow.vala"
		g_value_set_enum (value, layouts_filter_pane_row_get_filter_type (self));
#line 1 "../src/Layouts/FilterPaneRow.vala"
		break;
#line 1517 "FilterPaneRow.c"
		default:
#line 1 "../src/Layouts/FilterPaneRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Layouts/FilterPaneRow.vala"
		break;
#line 1523 "FilterPaneRow.c"
	}
}

static void
_vala_layouts_filter_pane_row_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec)
{
	LayoutsFilterPaneRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, LAYOUTS_TYPE_FILTER_PANE_ROW, LayoutsFilterPaneRow);
#line 1 "../src/Layouts/FilterPaneRow.vala"
	switch (property_id) {
#line 1 "../src/Layouts/FilterPaneRow.vala"
		case LAYOUTS_FILTER_PANE_ROW_FILTER_TYPE_PROPERTY:
#line 1 "../src/Layouts/FilterPaneRow.vala"
		layouts_filter_pane_row_set_filter_type (self, g_value_get_enum (value));
#line 1 "../src/Layouts/FilterPaneRow.vala"
		break;
#line 1543 "FilterPaneRow.c"
		default:
#line 1 "../src/Layouts/FilterPaneRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Layouts/FilterPaneRow.vala"
		break;
#line 1549 "FilterPaneRow.c"
	}
}

