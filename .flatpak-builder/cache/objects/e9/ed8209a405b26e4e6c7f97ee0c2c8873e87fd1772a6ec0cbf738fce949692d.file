/* ItemLabelChild.c generated by valac 0.50.10, the Vala compiler
 * generated from ItemLabelChild.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <granite.h>

#define WIDGETS_TYPE_ITEM_LABEL_CHILD (widgets_item_label_child_get_type ())
#define WIDGETS_ITEM_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ITEM_LABEL_CHILD, WidgetsItemLabelChild))
#define WIDGETS_ITEM_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ITEM_LABEL_CHILD, WidgetsItemLabelChildClass))
#define WIDGETS_IS_ITEM_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ITEM_LABEL_CHILD))
#define WIDGETS_IS_ITEM_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ITEM_LABEL_CHILD))
#define WIDGETS_ITEM_LABEL_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ITEM_LABEL_CHILD, WidgetsItemLabelChildClass))

typedef struct _WidgetsItemLabelChild WidgetsItemLabelChild;
typedef struct _WidgetsItemLabelChildClass WidgetsItemLabelChildClass;
typedef struct _WidgetsItemLabelChildPrivate WidgetsItemLabelChildPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM_LABEL (objects_item_label_get_type ())
#define OBJECTS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabel))
#define OBJECTS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))
#define OBJECTS_IS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_IS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_ITEM_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))

typedef struct _ObjectsItemLabel ObjectsItemLabel;
typedef struct _ObjectsItemLabelClass ObjectsItemLabelClass;
enum  {
	WIDGETS_ITEM_LABEL_CHILD_0_PROPERTY,
	WIDGETS_ITEM_LABEL_CHILD_ITEM_LABEL_PROPERTY,
	WIDGETS_ITEM_LABEL_CHILD_NUM_PROPERTIES
};
static GParamSpec* widgets_item_label_child_properties[WIDGETS_ITEM_LABEL_CHILD_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
#define _g_free0(var) (var = (g_free (var), NULL))

struct _WidgetsItemLabelChild {
	GtkFlowBoxChild parent_instance;
	WidgetsItemLabelChildPrivate * priv;
};

struct _WidgetsItemLabelChildClass {
	GtkFlowBoxChildClass parent_class;
};

struct _WidgetsItemLabelChildPrivate {
	ObjectsItemLabel* _item_label;
	GtkLabel* name_label;
	GtkRevealer* main_revealer;
};

static gint WidgetsItemLabelChild_private_offset;
static gpointer widgets_item_label_child_parent_class = NULL;

GType widgets_item_label_child_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsItemLabelChild, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItemLabel, g_object_unref)
WidgetsItemLabelChild* widgets_item_label_child_new (ObjectsItemLabel* item_label);
WidgetsItemLabelChild* widgets_item_label_child_construct (GType object_type,
                                                           ObjectsItemLabel* item_label);
void widgets_item_label_child_update_request (WidgetsItemLabelChild* self);
ObjectsItemLabel* widgets_item_label_child_get_item_label (WidgetsItemLabelChild* self);
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
ObjectsLabel* objects_item_label_get_label (ObjectsItemLabel* self);
const gchar* objects_label_get_name (ObjectsLabel* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
void util_set_widget_color (Util* self,
                            const gchar* color,
                            GtkWidget* widget);
gchar* util_get_color (Util* self,
                       const gchar* key);
const gchar* objects_label_get_color (ObjectsLabel* self);
void widgets_item_label_child_hide_destroy (WidgetsItemLabelChild* self);
static gboolean __lambda57_ (WidgetsItemLabelChild* self);
static gboolean ___lambda57__gsource_func (gpointer self);
static void widgets_item_label_child_set_item_label (WidgetsItemLabelChild* self,
                                              ObjectsItemLabel* value);
static GObject * widgets_item_label_child_constructor (GType type,
                                                guint n_construct_properties,
                                                GObjectConstructParam * construct_properties);
static gboolean _widgets_item_label_child___lambda58_ (WidgetsItemLabelChild* self);
static gboolean __widgets_item_label_child___lambda58__gsource_func (gpointer self);
static void _widgets_item_label_child___lambda59_ (WidgetsItemLabelChild* self);
static void __widgets_item_label_child___lambda59__objects_base_object_deleted (ObjectsBaseObject* _sender,
                                                                         gpointer self);
static void _widgets_item_label_child_update_request_objects_base_object_updated (ObjectsBaseObject* _sender,
                                                                           gpointer self);
static void widgets_item_label_child_finalize (GObject * obj);
static GType widgets_item_label_child_get_type_once (void);
static void _vala_widgets_item_label_child_get_property (GObject * object,
                                                  guint property_id,
                                                  GValue * value,
                                                  GParamSpec * pspec);
static void _vala_widgets_item_label_child_set_property (GObject * object,
                                                  guint property_id,
                                                  const GValue * value,
                                                  GParamSpec * pspec);

static inline gpointer
widgets_item_label_child_get_instance_private (WidgetsItemLabelChild* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsItemLabelChild_private_offset);
}

WidgetsItemLabelChild*
widgets_item_label_child_construct (GType object_type,
                                    ObjectsItemLabel* item_label)
{
	WidgetsItemLabelChild * self = NULL;
#line 28 "../src/Widgets/ItemLabelChild.vala"
	g_return_val_if_fail (item_label != NULL, NULL);
#line 29 "../src/Widgets/ItemLabelChild.vala"
	self = (WidgetsItemLabelChild*) g_object_new (object_type, "item-label", item_label, "halign", GTK_ALIGN_START, NULL);
#line 28 "../src/Widgets/ItemLabelChild.vala"
	return self;
#line 177 "ItemLabelChild.c"
}

WidgetsItemLabelChild*
widgets_item_label_child_new (ObjectsItemLabel* item_label)
{
#line 28 "../src/Widgets/ItemLabelChild.vala"
	return widgets_item_label_child_construct (WIDGETS_TYPE_ITEM_LABEL_CHILD, item_label);
#line 185 "ItemLabelChild.c"
}

void
widgets_item_label_child_update_request (WidgetsItemLabelChild* self)
{
	GtkLabel* _tmp0_;
	ObjectsItemLabel* _tmp1_;
	ObjectsLabel* _tmp2_;
	ObjectsLabel* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	Util* _tmp6_;
	Util* _tmp7_;
	Util* _tmp8_;
	Util* _tmp9_;
	ObjectsItemLabel* _tmp10_;
	ObjectsLabel* _tmp11_;
	ObjectsLabel* _tmp12_;
	const gchar* _tmp13_;
	const gchar* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
#line 68 "../src/Widgets/ItemLabelChild.vala"
	g_return_if_fail (self != NULL);
#line 69 "../src/Widgets/ItemLabelChild.vala"
	_tmp0_ = self->priv->name_label;
#line 69 "../src/Widgets/ItemLabelChild.vala"
	_tmp1_ = self->priv->_item_label;
#line 69 "../src/Widgets/ItemLabelChild.vala"
	_tmp2_ = objects_item_label_get_label (_tmp1_);
#line 69 "../src/Widgets/ItemLabelChild.vala"
	_tmp3_ = _tmp2_;
#line 69 "../src/Widgets/ItemLabelChild.vala"
	_tmp4_ = objects_label_get_name (_tmp3_);
#line 69 "../src/Widgets/ItemLabelChild.vala"
	_tmp5_ = _tmp4_;
#line 69 "../src/Widgets/ItemLabelChild.vala"
	gtk_label_set_label (_tmp0_, _tmp5_);
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp6_ = util_get_default ();
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp7_ = _tmp6_;
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp8_ = util_get_default ();
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp9_ = _tmp8_;
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp10_ = self->priv->_item_label;
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp11_ = objects_item_label_get_label (_tmp10_);
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp12_ = _tmp11_;
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp13_ = objects_label_get_color (_tmp12_);
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp14_ = _tmp13_;
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp15_ = util_get_color (_tmp9_, _tmp14_);
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_tmp16_ = _tmp15_;
#line 70 "../src/Widgets/ItemLabelChild.vala"
	util_set_widget_color (_tmp7_, _tmp16_, (GtkWidget*) self);
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_g_free0 (_tmp16_);
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_g_object_unref0 (_tmp9_);
#line 70 "../src/Widgets/ItemLabelChild.vala"
	_g_object_unref0 (_tmp7_);
#line 254 "ItemLabelChild.c"
}

static gboolean
__lambda57_ (WidgetsItemLabelChild* self)
{
	gboolean result = FALSE;
#line 76 "../src/Widgets/ItemLabelChild.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 77 "../src/Widgets/ItemLabelChild.vala"
	result = G_SOURCE_REMOVE;
#line 77 "../src/Widgets/ItemLabelChild.vala"
	return result;
#line 267 "ItemLabelChild.c"
}

static gboolean
___lambda57__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda57_ ((WidgetsItemLabelChild*) self);
#line 75 "../src/Widgets/ItemLabelChild.vala"
	return result;
#line 277 "ItemLabelChild.c"
}

void
widgets_item_label_child_hide_destroy (WidgetsItemLabelChild* self)
{
	GtkRevealer* _tmp0_;
	GtkRevealer* _tmp1_;
	guint _tmp2_;
	guint _tmp3_;
#line 73 "../src/Widgets/ItemLabelChild.vala"
	g_return_if_fail (self != NULL);
#line 74 "../src/Widgets/ItemLabelChild.vala"
	_tmp0_ = self->priv->main_revealer;
#line 74 "../src/Widgets/ItemLabelChild.vala"
	gtk_revealer_set_reveal_child (_tmp0_, FALSE);
#line 75 "../src/Widgets/ItemLabelChild.vala"
	_tmp1_ = self->priv->main_revealer;
#line 75 "../src/Widgets/ItemLabelChild.vala"
	_tmp2_ = gtk_revealer_get_transition_duration (_tmp1_);
#line 75 "../src/Widgets/ItemLabelChild.vala"
	_tmp3_ = _tmp2_;
#line 75 "../src/Widgets/ItemLabelChild.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp3_, ___lambda57__gsource_func, g_object_ref (self), g_object_unref);
#line 301 "ItemLabelChild.c"
}

ObjectsItemLabel*
widgets_item_label_child_get_item_label (WidgetsItemLabelChild* self)
{
	ObjectsItemLabel* result;
	ObjectsItemLabel* _tmp0_;
#line 23 "../src/Widgets/ItemLabelChild.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "../src/Widgets/ItemLabelChild.vala"
	_tmp0_ = self->priv->_item_label;
#line 23 "../src/Widgets/ItemLabelChild.vala"
	result = _tmp0_;
#line 23 "../src/Widgets/ItemLabelChild.vala"
	return result;
#line 317 "ItemLabelChild.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 23 "../src/Widgets/ItemLabelChild.vala"
	return self ? g_object_ref (self) : NULL;
#line 325 "ItemLabelChild.c"
}

static void
widgets_item_label_child_set_item_label (WidgetsItemLabelChild* self,
                                         ObjectsItemLabel* value)
{
	ObjectsItemLabel* old_value;
#line 23 "../src/Widgets/ItemLabelChild.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/Widgets/ItemLabelChild.vala"
	old_value = widgets_item_label_child_get_item_label (self);
#line 23 "../src/Widgets/ItemLabelChild.vala"
	if (old_value != value) {
#line 339 "ItemLabelChild.c"
		ObjectsItemLabel* _tmp0_;
#line 23 "../src/Widgets/ItemLabelChild.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 23 "../src/Widgets/ItemLabelChild.vala"
		_g_object_unref0 (self->priv->_item_label);
#line 23 "../src/Widgets/ItemLabelChild.vala"
		self->priv->_item_label = _tmp0_;
#line 23 "../src/Widgets/ItemLabelChild.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_item_label_child_properties[WIDGETS_ITEM_LABEL_CHILD_ITEM_LABEL_PROPERTY]);
#line 349 "ItemLabelChild.c"
	}
}

static gboolean
_widgets_item_label_child___lambda58_ (WidgetsItemLabelChild* self)
{
	GtkRevealer* _tmp0_;
	gboolean result = FALSE;
#line 57 "../src/Widgets/ItemLabelChild.vala"
	_tmp0_ = self->priv->main_revealer;
#line 57 "../src/Widgets/ItemLabelChild.vala"
	gtk_revealer_set_reveal_child (_tmp0_, TRUE);
#line 58 "../src/Widgets/ItemLabelChild.vala"
	result = G_SOURCE_REMOVE;
#line 58 "../src/Widgets/ItemLabelChild.vala"
	return result;
#line 366 "ItemLabelChild.c"
}

static gboolean
__widgets_item_label_child___lambda58__gsource_func (gpointer self)
{
	gboolean result;
	result = _widgets_item_label_child___lambda58_ ((WidgetsItemLabelChild*) self);
#line 56 "../src/Widgets/ItemLabelChild.vala"
	return result;
#line 376 "ItemLabelChild.c"
}

static void
_widgets_item_label_child___lambda59_ (WidgetsItemLabelChild* self)
{
#line 62 "../src/Widgets/ItemLabelChild.vala"
	widgets_item_label_child_hide_destroy (self);
#line 384 "ItemLabelChild.c"
}

static void
__widgets_item_label_child___lambda59__objects_base_object_deleted (ObjectsBaseObject* _sender,
                                                                    gpointer self)
{
#line 61 "../src/Widgets/ItemLabelChild.vala"
	_widgets_item_label_child___lambda59_ ((WidgetsItemLabelChild*) self);
#line 393 "ItemLabelChild.c"
}

static void
_widgets_item_label_child_update_request_objects_base_object_updated (ObjectsBaseObject* _sender,
                                                                      gpointer self)
{
#line 65 "../src/Widgets/ItemLabelChild.vala"
	widgets_item_label_child_update_request ((WidgetsItemLabelChild*) self);
#line 402 "ItemLabelChild.c"
}

static GObject *
widgets_item_label_child_constructor (GType type,
                                      guint n_construct_properties,
                                      GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsItemLabelChild * self;
	GtkStyleContext* _tmp0_;
	GtkLabel* _tmp1_;
	GtkLabel* _tmp2_;
	GtkLabel* _tmp3_;
	GtkStyleContext* _tmp4_;
	GtkGrid* labelrow_grid = NULL;
	GtkGrid* _tmp5_ = NULL;
	GtkGrid* _tmp6_;
	GtkLabel* _tmp7_;
	GtkRevealer* _tmp8_ = NULL;
	GtkRevealer* _tmp9_;
	GtkGrid* _tmp10_;
	GtkRevealer* _tmp11_;
	GtkRevealer* _tmp12_;
	guint _tmp13_;
	guint _tmp14_;
	ObjectsItemLabel* _tmp15_;
	ObjectsItemLabel* _tmp16_;
	ObjectsLabel* _tmp17_;
	ObjectsLabel* _tmp18_;
#line 35 "../src/Widgets/ItemLabelChild.vala"
	parent_class = G_OBJECT_CLASS (widgets_item_label_child_parent_class);
#line 35 "../src/Widgets/ItemLabelChild.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 35 "../src/Widgets/ItemLabelChild.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_ITEM_LABEL_CHILD, WidgetsItemLabelChild);
#line 36 "../src/Widgets/ItemLabelChild.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 36 "../src/Widgets/ItemLabelChild.vala"
	gtk_style_context_add_class (_tmp0_, "item-label-child");
#line 38 "../src/Widgets/ItemLabelChild.vala"
	_tmp1_ = (GtkLabel*) gtk_label_new (NULL);
#line 38 "../src/Widgets/ItemLabelChild.vala"
	g_object_ref_sink (_tmp1_);
#line 38 "../src/Widgets/ItemLabelChild.vala"
	_g_object_unref0 (self->priv->name_label);
#line 38 "../src/Widgets/ItemLabelChild.vala"
	self->priv->name_label = _tmp1_;
#line 39 "../src/Widgets/ItemLabelChild.vala"
	_tmp2_ = self->priv->name_label;
#line 39 "../src/Widgets/ItemLabelChild.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp2_, GTK_ALIGN_CENTER);
#line 40 "../src/Widgets/ItemLabelChild.vala"
	_tmp3_ = self->priv->name_label;
#line 40 "../src/Widgets/ItemLabelChild.vala"
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
#line 40 "../src/Widgets/ItemLabelChild.vala"
	gtk_style_context_add_class (_tmp4_, GRANITE_STYLE_CLASS_SMALL_LABEL);
#line 42 "../src/Widgets/ItemLabelChild.vala"
	_tmp5_ = (GtkGrid*) gtk_grid_new ();
#line 42 "../src/Widgets/ItemLabelChild.vala"
	gtk_grid_set_column_spacing (_tmp5_, 6);
#line 42 "../src/Widgets/ItemLabelChild.vala"
	g_object_set ((GtkWidget*) _tmp5_, "margin", 3, NULL);
#line 42 "../src/Widgets/ItemLabelChild.vala"
	g_object_ref_sink (_tmp5_);
#line 42 "../src/Widgets/ItemLabelChild.vala"
	labelrow_grid = _tmp5_;
#line 46 "../src/Widgets/ItemLabelChild.vala"
	_tmp6_ = labelrow_grid;
#line 46 "../src/Widgets/ItemLabelChild.vala"
	_tmp7_ = self->priv->name_label;
#line 46 "../src/Widgets/ItemLabelChild.vala"
	gtk_container_add ((GtkContainer*) _tmp6_, (GtkWidget*) _tmp7_);
#line 48 "../src/Widgets/ItemLabelChild.vala"
	_tmp8_ = (GtkRevealer*) gtk_revealer_new ();
#line 48 "../src/Widgets/ItemLabelChild.vala"
	gtk_revealer_set_transition_type (_tmp8_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT);
#line 48 "../src/Widgets/ItemLabelChild.vala"
	g_object_ref_sink (_tmp8_);
#line 48 "../src/Widgets/ItemLabelChild.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 48 "../src/Widgets/ItemLabelChild.vala"
	self->priv->main_revealer = _tmp8_;
#line 51 "../src/Widgets/ItemLabelChild.vala"
	_tmp9_ = self->priv->main_revealer;
#line 51 "../src/Widgets/ItemLabelChild.vala"
	_tmp10_ = labelrow_grid;
#line 51 "../src/Widgets/ItemLabelChild.vala"
	gtk_container_add ((GtkContainer*) _tmp9_, (GtkWidget*) _tmp10_);
#line 53 "../src/Widgets/ItemLabelChild.vala"
	_tmp11_ = self->priv->main_revealer;
#line 53 "../src/Widgets/ItemLabelChild.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp11_);
#line 54 "../src/Widgets/ItemLabelChild.vala"
	widgets_item_label_child_update_request (self);
#line 56 "../src/Widgets/ItemLabelChild.vala"
	_tmp12_ = self->priv->main_revealer;
#line 56 "../src/Widgets/ItemLabelChild.vala"
	_tmp13_ = gtk_revealer_get_transition_duration (_tmp12_);
#line 56 "../src/Widgets/ItemLabelChild.vala"
	_tmp14_ = _tmp13_;
#line 56 "../src/Widgets/ItemLabelChild.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp14_, __widgets_item_label_child___lambda58__gsource_func, g_object_ref (self), g_object_unref);
#line 61 "../src/Widgets/ItemLabelChild.vala"
	_tmp15_ = self->priv->_item_label;
#line 61 "../src/Widgets/ItemLabelChild.vala"
	g_signal_connect_object ((ObjectsBaseObject*) _tmp15_, "deleted", (GCallback) __widgets_item_label_child___lambda59__objects_base_object_deleted, self, 0);
#line 65 "../src/Widgets/ItemLabelChild.vala"
	_tmp16_ = self->priv->_item_label;
#line 65 "../src/Widgets/ItemLabelChild.vala"
	_tmp17_ = objects_item_label_get_label (_tmp16_);
#line 65 "../src/Widgets/ItemLabelChild.vala"
	_tmp18_ = _tmp17_;
#line 65 "../src/Widgets/ItemLabelChild.vala"
	g_signal_connect_object ((ObjectsBaseObject*) _tmp18_, "updated", (GCallback) _widgets_item_label_child_update_request_objects_base_object_updated, self, 0);
#line 35 "../src/Widgets/ItemLabelChild.vala"
	_g_object_unref0 (labelrow_grid);
#line 35 "../src/Widgets/ItemLabelChild.vala"
	return obj;
#line 523 "ItemLabelChild.c"
}

static void
widgets_item_label_child_class_init (WidgetsItemLabelChildClass * klass,
                                     gpointer klass_data)
{
#line 22 "../src/Widgets/ItemLabelChild.vala"
	widgets_item_label_child_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Widgets/ItemLabelChild.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsItemLabelChild_private_offset);
#line 22 "../src/Widgets/ItemLabelChild.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_item_label_child_get_property;
#line 22 "../src/Widgets/ItemLabelChild.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_item_label_child_set_property;
#line 22 "../src/Widgets/ItemLabelChild.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_item_label_child_constructor;
#line 22 "../src/Widgets/ItemLabelChild.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_item_label_child_finalize;
#line 22 "../src/Widgets/ItemLabelChild.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ITEM_LABEL_CHILD_ITEM_LABEL_PROPERTY, widgets_item_label_child_properties[WIDGETS_ITEM_LABEL_CHILD_ITEM_LABEL_PROPERTY] = g_param_spec_object ("item-label", "item-label", "item-label", OBJECTS_TYPE_ITEM_LABEL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 544 "ItemLabelChild.c"
}

static void
widgets_item_label_child_instance_init (WidgetsItemLabelChild * self,
                                        gpointer klass)
{
#line 22 "../src/Widgets/ItemLabelChild.vala"
	self->priv = widgets_item_label_child_get_instance_private (self);
#line 553 "ItemLabelChild.c"
}

static void
widgets_item_label_child_finalize (GObject * obj)
{
	WidgetsItemLabelChild * self;
#line 22 "../src/Widgets/ItemLabelChild.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_ITEM_LABEL_CHILD, WidgetsItemLabelChild);
#line 23 "../src/Widgets/ItemLabelChild.vala"
	_g_object_unref0 (self->priv->_item_label);
#line 25 "../src/Widgets/ItemLabelChild.vala"
	_g_object_unref0 (self->priv->name_label);
#line 26 "../src/Widgets/ItemLabelChild.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 22 "../src/Widgets/ItemLabelChild.vala"
	G_OBJECT_CLASS (widgets_item_label_child_parent_class)->finalize (obj);
#line 570 "ItemLabelChild.c"
}

static GType
widgets_item_label_child_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsItemLabelChildClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_item_label_child_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsItemLabelChild), 0, (GInstanceInitFunc) widgets_item_label_child_instance_init, NULL };
	GType widgets_item_label_child_type_id;
	widgets_item_label_child_type_id = g_type_register_static (gtk_flow_box_child_get_type (), "WidgetsItemLabelChild", &g_define_type_info, 0);
	WidgetsItemLabelChild_private_offset = g_type_add_instance_private (widgets_item_label_child_type_id, sizeof (WidgetsItemLabelChildPrivate));
	return widgets_item_label_child_type_id;
}

GType
widgets_item_label_child_get_type (void)
{
	static volatile gsize widgets_item_label_child_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_item_label_child_type_id__volatile)) {
		GType widgets_item_label_child_type_id;
		widgets_item_label_child_type_id = widgets_item_label_child_get_type_once ();
		g_once_init_leave (&widgets_item_label_child_type_id__volatile, widgets_item_label_child_type_id);
	}
	return widgets_item_label_child_type_id__volatile;
}

static void
_vala_widgets_item_label_child_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec)
{
	WidgetsItemLabelChild * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_ITEM_LABEL_CHILD, WidgetsItemLabelChild);
#line 22 "../src/Widgets/ItemLabelChild.vala"
	switch (property_id) {
#line 22 "../src/Widgets/ItemLabelChild.vala"
		case WIDGETS_ITEM_LABEL_CHILD_ITEM_LABEL_PROPERTY:
#line 22 "../src/Widgets/ItemLabelChild.vala"
		g_value_set_object (value, widgets_item_label_child_get_item_label (self));
#line 22 "../src/Widgets/ItemLabelChild.vala"
		break;
#line 611 "ItemLabelChild.c"
		default:
#line 22 "../src/Widgets/ItemLabelChild.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Widgets/ItemLabelChild.vala"
		break;
#line 617 "ItemLabelChild.c"
	}
}

static void
_vala_widgets_item_label_child_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec)
{
	WidgetsItemLabelChild * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_ITEM_LABEL_CHILD, WidgetsItemLabelChild);
#line 22 "../src/Widgets/ItemLabelChild.vala"
	switch (property_id) {
#line 22 "../src/Widgets/ItemLabelChild.vala"
		case WIDGETS_ITEM_LABEL_CHILD_ITEM_LABEL_PROPERTY:
#line 22 "../src/Widgets/ItemLabelChild.vala"
		widgets_item_label_child_set_item_label (self, g_value_get_object (value));
#line 22 "../src/Widgets/ItemLabelChild.vala"
		break;
#line 637 "ItemLabelChild.c"
		default:
#line 22 "../src/Widgets/ItemLabelChild.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Widgets/ItemLabelChild.vala"
		break;
#line 643 "ItemLabelChild.c"
	}
}

