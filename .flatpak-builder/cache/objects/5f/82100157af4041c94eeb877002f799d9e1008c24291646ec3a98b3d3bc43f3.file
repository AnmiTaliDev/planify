/* ScheduledHeader.c generated by valac 0.50.10, the Vala compiler
 * generated from ScheduledHeader.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>

#define VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER (views_scheduled_scheduled_header_get_type ())
#define VIEWS_SCHEDULED_SCHEDULED_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER, ViewsScheduledScheduledHeader))
#define VIEWS_SCHEDULED_SCHEDULED_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER, ViewsScheduledScheduledHeaderClass))
#define VIEWS_SCHEDULED_IS_SCHEDULED_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER))
#define VIEWS_SCHEDULED_IS_SCHEDULED_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER))
#define VIEWS_SCHEDULED_SCHEDULED_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER, ViewsScheduledScheduledHeaderClass))

typedef struct _ViewsScheduledScheduledHeader ViewsScheduledScheduledHeader;
typedef struct _ViewsScheduledScheduledHeaderClass ViewsScheduledScheduledHeaderClass;
typedef struct _ViewsScheduledScheduledHeaderPrivate ViewsScheduledScheduledHeaderPrivate;

#define VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY (views_scheduled_scheduled_day_get_type ())
#define VIEWS_SCHEDULED_SCHEDULED_DAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, ViewsScheduledScheduledDay))
#define VIEWS_SCHEDULED_SCHEDULED_DAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, ViewsScheduledScheduledDayClass))
#define VIEWS_SCHEDULED_IS_SCHEDULED_DAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY))
#define VIEWS_SCHEDULED_IS_SCHEDULED_DAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY))
#define VIEWS_SCHEDULED_SCHEDULED_DAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, ViewsScheduledScheduledDayClass))

typedef struct _ViewsScheduledScheduledDay ViewsScheduledScheduledDay;
typedef struct _ViewsScheduledScheduledDayClass ViewsScheduledScheduledDayClass;
enum  {
	VIEWS_SCHEDULED_SCHEDULED_HEADER_0_PROPERTY,
	VIEWS_SCHEDULED_SCHEDULED_HEADER_DATE_PROPERTY,
	VIEWS_SCHEDULED_SCHEDULED_HEADER_NUM_PROPERTIES
};
static GParamSpec* views_scheduled_scheduled_header_properties[VIEWS_SCHEDULED_SCHEDULED_HEADER_NUM_PROPERTIES];
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define OBJECTS_TYPE_DUE_DATE (objects_due_date_get_type ())
#define OBJECTS_DUE_DATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_DUE_DATE, ObjectsDueDate))
#define OBJECTS_DUE_DATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_DUE_DATE, ObjectsDueDateClass))
#define OBJECTS_IS_DUE_DATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_DUE_DATE))
#define OBJECTS_IS_DUE_DATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_DUE_DATE))
#define OBJECTS_DUE_DATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_DUE_DATE, ObjectsDueDateClass))

typedef struct _ObjectsDueDate ObjectsDueDate;
typedef struct _ObjectsDueDateClass ObjectsDueDateClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
typedef struct _Block29Data Block29Data;
enum  {
	VIEWS_SCHEDULED_SCHEDULED_HEADER_DATE_SELECTED_SIGNAL,
	VIEWS_SCHEDULED_SCHEDULED_HEADER_NUM_SIGNALS
};
static guint views_scheduled_scheduled_header_signals[VIEWS_SCHEDULED_SCHEDULED_HEADER_NUM_SIGNALS] = {0};

struct _ViewsScheduledScheduledHeader {
	GtkEventBox parent_instance;
	ViewsScheduledScheduledHeaderPrivate * priv;
};

struct _ViewsScheduledScheduledHeaderClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsScheduledScheduledHeaderPrivate {
	GDateTime* _date;
	GeeHashMap* days_map;
};

struct _Block29Data {
	int _ref_count_;
	ViewsScheduledScheduledHeader* self;
	ViewsScheduledScheduledDay* scheduled_day;
};

static gint ViewsScheduledScheduledHeader_private_offset;
static gpointer views_scheduled_scheduled_header_parent_class = NULL;
extern ServicesDatabase* planner_database;

GType views_scheduled_scheduled_header_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsScheduledScheduledHeader, g_object_unref)
GType views_scheduled_scheduled_day_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsScheduledScheduledDay, g_object_unref)
ViewsScheduledScheduledHeader* views_scheduled_scheduled_header_new (GDateTime* date);
ViewsScheduledScheduledHeader* views_scheduled_scheduled_header_construct (GType object_type,
                                                                           GDateTime* date);
static guint views_scheduled_scheduled_header_day_hash (ViewsScheduledScheduledHeader* self,
                                                 GDateTime* date);
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
static void views_scheduled_scheduled_header_add_component_dots (ViewsScheduledScheduledHeader* self,
                                                          ObjectsItem* item);
gboolean objects_item_get_has_due (ObjectsItem* self);
GType objects_due_date_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsDueDate, g_object_unref)
ObjectsDueDate* objects_item_get_due (ObjectsItem* self);
GDateTime* objects_due_date_get_datetime (ObjectsDueDate* self);
gboolean views_scheduled_scheduled_day_has_component (ViewsScheduledScheduledDay* self,
                                                      const gchar* id);
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
void views_scheduled_scheduled_day_add_component_dot (ViewsScheduledScheduledDay* self,
                                                      ObjectsItem* item);
static void views_scheduled_scheduled_header_remove_component_dots (ViewsScheduledScheduledHeader* self,
                                                             ObjectsItem* item);
void views_scheduled_scheduled_day_remove_component_dot (ViewsScheduledScheduledDay* self,
                                                         const gchar* id);
GDateTime* views_scheduled_scheduled_header_get_date (ViewsScheduledScheduledHeader* self);
static void views_scheduled_scheduled_header_set_date (ViewsScheduledScheduledHeader* self,
                                                GDateTime* value);
static GObject * views_scheduled_scheduled_header_constructor (GType type,
                                                        guint n_construct_properties,
                                                        GObjectConstructParam * construct_properties);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
static void _views_scheduled_scheduled_header_add_component_dots_services_database_item_added (ServicesDatabase* _sender,
                                                                                        ObjectsItem* item,
                                                                                        gboolean insert,
                                                                                        gpointer self);
static void _views_scheduled_scheduled_header_remove_component_dots_services_database_item_deleted (ServicesDatabase* _sender,
                                                                                             ObjectsItem* item,
                                                                                             gpointer self);
static void _views_scheduled_scheduled_header_add_component_dots_services_database_item_updated (ServicesDatabase* _sender,
                                                                                          ObjectsItem* item,
                                                                                          gint64 update_id,
                                                                                          gpointer self);
static Block29Data* block29_data_ref (Block29Data* _data29_);
static void block29_data_unref (void * _userdata_);
ViewsScheduledScheduledDay* views_scheduled_scheduled_day_new (GDateTime* date);
ViewsScheduledScheduledDay* views_scheduled_scheduled_day_construct (GType object_type,
                                                                     GDateTime* date);
static void _views_scheduled_scheduled_header______lambda252_ (Block29Data* _data29_);
GDateTime* views_scheduled_scheduled_day_get_date (ViewsScheduledScheduledDay* self);
static void __views_scheduled_scheduled_header______lambda252__gtk_button_clicked (GtkButton* _sender,
                                                                            gpointer self);
GeeArrayList* services_database_get_items_by_date (ServicesDatabase* self,
                                                   GDateTime* date,
                                                   gboolean checked);
static void views_scheduled_scheduled_header_finalize (GObject * obj);
static GType views_scheduled_scheduled_header_get_type_once (void);
static void _vala_views_scheduled_scheduled_header_get_property (GObject * object,
                                                          guint property_id,
                                                          GValue * value,
                                                          GParamSpec * pspec);
static void _vala_views_scheduled_scheduled_header_set_property (GObject * object,
                                                          guint property_id,
                                                          const GValue * value,
                                                          GParamSpec * pspec);

static inline gpointer
views_scheduled_scheduled_header_get_instance_private (ViewsScheduledScheduledHeader* self)
{
	return G_STRUCT_MEMBER_P (self, ViewsScheduledScheduledHeader_private_offset);
}

ViewsScheduledScheduledHeader*
views_scheduled_scheduled_header_construct (GType object_type,
                                            GDateTime* date)
{
	ViewsScheduledScheduledHeader * self = NULL;
#line 7 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_return_val_if_fail (date != NULL, NULL);
#line 8 "../src/Views/Scheduled/ScheduledHeader.vala"
	self = (ViewsScheduledScheduledHeader*) g_object_new (object_type, "date", date, "expand", TRUE, NULL);
#line 7 "../src/Views/Scheduled/ScheduledHeader.vala"
	return self;
#line 199 "ScheduledHeader.c"
}

ViewsScheduledScheduledHeader*
views_scheduled_scheduled_header_new (GDateTime* date)
{
#line 7 "../src/Views/Scheduled/ScheduledHeader.vala"
	return views_scheduled_scheduled_header_construct (VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER, date);
#line 207 "ScheduledHeader.c"
}

static guint
views_scheduled_scheduled_header_day_hash (ViewsScheduledScheduledHeader* self,
                                           GDateTime* date)
{
	guint result = 0U;
#line 52 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 52 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_return_val_if_fail (date != NULL, 0U);
#line 53 "../src/Views/Scheduled/ScheduledHeader.vala"
	result = (guint) (((g_date_time_get_year (date) * 10000) + (g_date_time_get_month (date) * 100)) + g_date_time_get_day_of_month (date));
#line 53 "../src/Views/Scheduled/ScheduledHeader.vala"
	return result;
#line 223 "ScheduledHeader.c"
}

static void
views_scheduled_scheduled_header_add_component_dots (ViewsScheduledScheduledHeader* self,
                                                     ObjectsItem* item)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 56 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_return_if_fail (self != NULL);
#line 56 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_return_if_fail (item != NULL);
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp1_ = objects_item_get_has_due (item);
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp2_ = _tmp1_;
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
	if (_tmp2_) {
#line 243 "ScheduledHeader.c"
		GeeHashMap* _tmp3_;
		ObjectsDueDate* _tmp4_;
		ObjectsDueDate* _tmp5_;
		GDateTime* _tmp6_;
		GDateTime* _tmp7_;
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp3_ = self->priv->days_map;
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp4_ = objects_item_get_due (item);
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp5_ = _tmp4_;
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp6_ = objects_due_date_get_datetime (_tmp5_);
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp7_ = _tmp6_;
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp0_ = gee_abstract_map_has_key ((GeeAbstractMap*) _tmp3_, (gpointer) ((guintptr) views_scheduled_scheduled_header_day_hash (self, _tmp7_)));
#line 261 "ScheduledHeader.c"
	} else {
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp0_ = FALSE;
#line 265 "ScheduledHeader.c"
	}
#line 57 "../src/Views/Scheduled/ScheduledHeader.vala"
	if (_tmp0_) {
#line 269 "ScheduledHeader.c"
		GeeHashMap* _tmp8_;
		ObjectsDueDate* _tmp9_;
		ObjectsDueDate* _tmp10_;
		GDateTime* _tmp11_;
		GDateTime* _tmp12_;
		gpointer _tmp13_;
		ViewsScheduledScheduledDay* _tmp14_;
		const gchar* _tmp15_;
		const gchar* _tmp16_;
		gboolean _tmp17_;
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp8_ = self->priv->days_map;
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp9_ = objects_item_get_due (item);
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp10_ = _tmp9_;
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp11_ = objects_due_date_get_datetime (_tmp10_);
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp12_ = _tmp11_;
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp13_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp8_, (gpointer) ((guintptr) views_scheduled_scheduled_header_day_hash (self, _tmp12_)));
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp14_ = (ViewsScheduledScheduledDay*) _tmp13_;
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp15_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp16_ = _tmp15_;
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp17_ = !views_scheduled_scheduled_day_has_component (_tmp14_, _tmp16_);
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		_g_object_unref0 (_tmp14_);
#line 58 "../src/Views/Scheduled/ScheduledHeader.vala"
		if (_tmp17_) {
#line 304 "ScheduledHeader.c"
			GeeHashMap* _tmp18_;
			ObjectsDueDate* _tmp19_;
			ObjectsDueDate* _tmp20_;
			GDateTime* _tmp21_;
			GDateTime* _tmp22_;
			gpointer _tmp23_;
			ViewsScheduledScheduledDay* _tmp24_;
#line 59 "../src/Views/Scheduled/ScheduledHeader.vala"
			_tmp18_ = self->priv->days_map;
#line 59 "../src/Views/Scheduled/ScheduledHeader.vala"
			_tmp19_ = objects_item_get_due (item);
#line 59 "../src/Views/Scheduled/ScheduledHeader.vala"
			_tmp20_ = _tmp19_;
#line 59 "../src/Views/Scheduled/ScheduledHeader.vala"
			_tmp21_ = objects_due_date_get_datetime (_tmp20_);
#line 59 "../src/Views/Scheduled/ScheduledHeader.vala"
			_tmp22_ = _tmp21_;
#line 59 "../src/Views/Scheduled/ScheduledHeader.vala"
			_tmp23_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp18_, (gpointer) ((guintptr) views_scheduled_scheduled_header_day_hash (self, _tmp22_)));
#line 59 "../src/Views/Scheduled/ScheduledHeader.vala"
			_tmp24_ = (ViewsScheduledScheduledDay*) _tmp23_;
#line 59 "../src/Views/Scheduled/ScheduledHeader.vala"
			views_scheduled_scheduled_day_add_component_dot (_tmp24_, item);
#line 59 "../src/Views/Scheduled/ScheduledHeader.vala"
			_g_object_unref0 (_tmp24_);
#line 330 "ScheduledHeader.c"
		}
	}
}

static void
views_scheduled_scheduled_header_remove_component_dots (ViewsScheduledScheduledHeader* self,
                                                        ObjectsItem* item)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 64 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_return_if_fail (self != NULL);
#line 64 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_return_if_fail (item != NULL);
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp1_ = objects_item_get_has_due (item);
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp2_ = _tmp1_;
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
	if (_tmp2_) {
#line 352 "ScheduledHeader.c"
		GeeHashMap* _tmp3_;
		ObjectsDueDate* _tmp4_;
		ObjectsDueDate* _tmp5_;
		GDateTime* _tmp6_;
		GDateTime* _tmp7_;
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp3_ = self->priv->days_map;
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp4_ = objects_item_get_due (item);
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp5_ = _tmp4_;
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp6_ = objects_due_date_get_datetime (_tmp5_);
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp7_ = _tmp6_;
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp0_ = gee_abstract_map_has_key ((GeeAbstractMap*) _tmp3_, (gpointer) ((guintptr) views_scheduled_scheduled_header_day_hash (self, _tmp7_)));
#line 370 "ScheduledHeader.c"
	} else {
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp0_ = FALSE;
#line 374 "ScheduledHeader.c"
	}
#line 65 "../src/Views/Scheduled/ScheduledHeader.vala"
	if (_tmp0_) {
#line 378 "ScheduledHeader.c"
		GeeHashMap* _tmp8_;
		ObjectsDueDate* _tmp9_;
		ObjectsDueDate* _tmp10_;
		GDateTime* _tmp11_;
		GDateTime* _tmp12_;
		gpointer _tmp13_;
		ViewsScheduledScheduledDay* _tmp14_;
		const gchar* _tmp15_;
		const gchar* _tmp16_;
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp8_ = self->priv->days_map;
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp9_ = objects_item_get_due (item);
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp10_ = _tmp9_;
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp11_ = objects_due_date_get_datetime (_tmp10_);
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp12_ = _tmp11_;
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp13_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp8_, (gpointer) ((guintptr) views_scheduled_scheduled_header_day_hash (self, _tmp12_)));
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp14_ = (ViewsScheduledScheduledDay*) _tmp13_;
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp15_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp16_ = _tmp15_;
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		views_scheduled_scheduled_day_remove_component_dot (_tmp14_, _tmp16_);
#line 66 "../src/Views/Scheduled/ScheduledHeader.vala"
		_g_object_unref0 (_tmp14_);
#line 410 "ScheduledHeader.c"
	}
}

GDateTime*
views_scheduled_scheduled_header_get_date (ViewsScheduledScheduledHeader* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp0_ = self->priv->_date;
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
	result = _tmp0_;
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
	return result;
#line 427 "ScheduledHeader.c"
}

static gpointer
_g_date_time_ref0 (gpointer self)
{
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
	return self ? g_date_time_ref (self) : NULL;
#line 435 "ScheduledHeader.c"
}

static void
views_scheduled_scheduled_header_set_date (ViewsScheduledScheduledHeader* self,
                                           GDateTime* value)
{
	GDateTime* old_value;
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
	old_value = views_scheduled_scheduled_header_get_date (self);
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
	if (old_value != value) {
#line 449 "ScheduledHeader.c"
		GDateTime* _tmp0_;
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
		_tmp0_ = _g_date_time_ref0 (value);
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
		_g_date_time_unref0 (self->priv->_date);
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
		self->priv->_date = _tmp0_;
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
		g_object_notify_by_pspec ((GObject *) self, views_scheduled_scheduled_header_properties[VIEWS_SCHEDULED_SCHEDULED_HEADER_DATE_PROPERTY]);
#line 459 "ScheduledHeader.c"
	}
}

static void
_views_scheduled_scheduled_header_add_component_dots_services_database_item_added (ServicesDatabase* _sender,
                                                                                   ObjectsItem* item,
                                                                                   gboolean insert,
                                                                                   gpointer self)
{
#line 20 "../src/Views/Scheduled/ScheduledHeader.vala"
	views_scheduled_scheduled_header_add_component_dots ((ViewsScheduledScheduledHeader*) self, item);
#line 471 "ScheduledHeader.c"
}

static void
_views_scheduled_scheduled_header_remove_component_dots_services_database_item_deleted (ServicesDatabase* _sender,
                                                                                        ObjectsItem* item,
                                                                                        gpointer self)
{
#line 21 "../src/Views/Scheduled/ScheduledHeader.vala"
	views_scheduled_scheduled_header_remove_component_dots ((ViewsScheduledScheduledHeader*) self, item);
#line 481 "ScheduledHeader.c"
}

static void
_views_scheduled_scheduled_header_add_component_dots_services_database_item_updated (ServicesDatabase* _sender,
                                                                                     ObjectsItem* item,
                                                                                     gint64 update_id,
                                                                                     gpointer self)
{
#line 22 "../src/Views/Scheduled/ScheduledHeader.vala"
	views_scheduled_scheduled_header_add_component_dots ((ViewsScheduledScheduledHeader*) self, item);
#line 492 "ScheduledHeader.c"
}

static Block29Data*
block29_data_ref (Block29Data* _data29_)
{
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_atomic_int_inc (&_data29_->_ref_count_);
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
	return _data29_;
#line 502 "ScheduledHeader.c"
}

static void
block29_data_unref (void * _userdata_)
{
	Block29Data* _data29_;
	_data29_ = (Block29Data*) _userdata_;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
	if (g_atomic_int_dec_and_test (&_data29_->_ref_count_)) {
#line 512 "ScheduledHeader.c"
		ViewsScheduledScheduledHeader* self;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
		self = _data29_->self;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
		_g_object_unref0 (_data29_->scheduled_day);
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
		_g_object_unref0 (self);
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
		g_slice_free (Block29Data, _data29_);
#line 522 "ScheduledHeader.c"
	}
}

static void
_views_scheduled_scheduled_header______lambda252_ (Block29Data* _data29_)
{
	ViewsScheduledScheduledHeader* self;
	ViewsScheduledScheduledDay* _tmp0_;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
#line 34 "../src/Views/Scheduled/ScheduledHeader.vala"
	self = _data29_->self;
#line 35 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp0_ = _data29_->scheduled_day;
#line 35 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp1_ = views_scheduled_scheduled_day_get_date (_tmp0_);
#line 35 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp2_ = _tmp1_;
#line 35 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_signal_emit (self, views_scheduled_scheduled_header_signals[VIEWS_SCHEDULED_SCHEDULED_HEADER_DATE_SELECTED_SIGNAL], 0, _tmp2_);
#line 543 "ScheduledHeader.c"
}

static void
__views_scheduled_scheduled_header______lambda252__gtk_button_clicked (GtkButton* _sender,
                                                                       gpointer self)
{
#line 34 "../src/Views/Scheduled/ScheduledHeader.vala"
	_views_scheduled_scheduled_header______lambda252_ (self);
#line 552 "ScheduledHeader.c"
}

static GObject *
views_scheduled_scheduled_header_constructor (GType type,
                                              guint n_construct_properties,
                                              GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsScheduledScheduledHeader * self;
	GeeHashMap* _tmp0_;
	gint day_of_week = 0;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
	GDateTime* _tmp4_;
	ServicesDatabase* _tmp5_;
	ServicesDatabase* _tmp6_;
	ServicesDatabase* _tmp7_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp8_ = NULL;
	GtkGrid* _tmp9_;
#line 14 "../src/Views/Scheduled/ScheduledHeader.vala"
	parent_class = G_OBJECT_CLASS (views_scheduled_scheduled_header_parent_class);
#line 14 "../src/Views/Scheduled/ScheduledHeader.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 14 "../src/Views/Scheduled/ScheduledHeader.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER, ViewsScheduledScheduledHeader);
#line 15 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp0_ = gee_hash_map_new (G_TYPE_UINT, NULL, NULL, VIEWS_SCHEDULED_TYPE_SCHEDULED_DAY, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 15 "../src/Views/Scheduled/ScheduledHeader.vala"
	_g_object_unref0 (self->priv->days_map);
#line 15 "../src/Views/Scheduled/ScheduledHeader.vala"
	self->priv->days_map = _tmp0_;
#line 17 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp1_ = self->priv->_date;
#line 17 "../src/Views/Scheduled/ScheduledHeader.vala"
	day_of_week = g_date_time_get_day_of_week (_tmp1_);
#line 18 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp2_ = self->priv->_date;
#line 18 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp3_ = g_date_time_add_days (_tmp2_, (-day_of_week) + 1);
#line 18 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp4_ = _tmp3_;
#line 18 "../src/Views/Scheduled/ScheduledHeader.vala"
	views_scheduled_scheduled_header_set_date (self, _tmp4_);
#line 18 "../src/Views/Scheduled/ScheduledHeader.vala"
	_g_date_time_unref0 (_tmp4_);
#line 20 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp5_ = planner_database;
#line 20 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_signal_connect_object (_tmp5_, "item-added", (GCallback) _views_scheduled_scheduled_header_add_component_dots_services_database_item_added, self, 0);
#line 21 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp6_ = planner_database;
#line 21 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_signal_connect_object (_tmp6_, "item-deleted", (GCallback) _views_scheduled_scheduled_header_remove_component_dots_services_database_item_deleted, self, 0);
#line 22 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp7_ = planner_database;
#line 22 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_signal_connect_object (_tmp7_, "item-updated", (GCallback) _views_scheduled_scheduled_header_add_component_dots_services_database_item_updated, self, 0);
#line 24 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp8_ = (GtkGrid*) gtk_grid_new ();
#line 24 "../src/Views/Scheduled/ScheduledHeader.vala"
	gtk_grid_set_column_homogeneous (_tmp8_, TRUE);
#line 24 "../src/Views/Scheduled/ScheduledHeader.vala"
	gtk_grid_set_column_spacing (_tmp8_, 6);
#line 24 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_object_set ((GtkWidget*) _tmp8_, "expand", TRUE, NULL);
#line 24 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_object_ref_sink (_tmp8_);
#line 24 "../src/Views/Scheduled/ScheduledHeader.vala"
	main_grid = _tmp8_;
#line 30 "../src/Views/Scheduled/ScheduledHeader.vala"
	_tmp9_ = main_grid;
#line 30 "../src/Views/Scheduled/ScheduledHeader.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp9_);
#line 629 "ScheduledHeader.c"
	{
		gint i = 0;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
		i = 0;
#line 634 "ScheduledHeader.c"
		{
			gboolean _tmp10_ = FALSE;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
			_tmp10_ = TRUE;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
			while (TRUE) {
#line 641 "ScheduledHeader.c"
				Block29Data* _data29_;
				GDateTime* _tmp12_;
				ViewsScheduledScheduledDay* _tmp13_;
				ViewsScheduledScheduledDay* _tmp14_;
				GeeHashMap* _tmp15_;
				GDateTime* _tmp16_;
				ViewsScheduledScheduledDay* _tmp17_;
				GtkGrid* _tmp18_;
				ViewsScheduledScheduledDay* _tmp19_;
				GtkGrid* _tmp20_;
				GDateTime* _tmp32_;
				GDateTime* _tmp33_;
				GDateTime* _tmp34_;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
				_data29_ = g_slice_new0 (Block29Data);
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
				_data29_->_ref_count_ = 1;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
				_data29_->self = g_object_ref (self);
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
				if (!_tmp10_) {
#line 663 "ScheduledHeader.c"
					gint _tmp11_;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
					_tmp11_ = i;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
					i = _tmp11_ + 1;
#line 669 "ScheduledHeader.c"
				}
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp10_ = FALSE;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
				if (!(i < 7)) {
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
					block29_data_unref (_data29_);
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
					_data29_ = NULL;
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
					break;
#line 681 "ScheduledHeader.c"
				}
#line 33 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp12_ = self->priv->_date;
#line 33 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp13_ = views_scheduled_scheduled_day_new (_tmp12_);
#line 33 "../src/Views/Scheduled/ScheduledHeader.vala"
				g_object_ref_sink (_tmp13_);
#line 33 "../src/Views/Scheduled/ScheduledHeader.vala"
				_data29_->scheduled_day = _tmp13_;
#line 34 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp14_ = _data29_->scheduled_day;
#line 34 "../src/Views/Scheduled/ScheduledHeader.vala"
				g_signal_connect_data ((GtkButton*) _tmp14_, "clicked", (GCallback) __views_scheduled_scheduled_header______lambda252__gtk_button_clicked, block29_data_ref (_data29_), (GClosureNotify) block29_data_unref, 0);
#line 38 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp15_ = self->priv->days_map;
#line 38 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp16_ = self->priv->_date;
#line 38 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp17_ = _data29_->scheduled_day;
#line 38 "../src/Views/Scheduled/ScheduledHeader.vala"
				gee_abstract_map_set ((GeeAbstractMap*) _tmp15_, (gpointer) ((guintptr) views_scheduled_scheduled_header_day_hash (self, _tmp16_)), _tmp17_);
#line 39 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp18_ = main_grid;
#line 39 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp19_ = _data29_->scheduled_day;
#line 39 "../src/Views/Scheduled/ScheduledHeader.vala"
				gtk_container_add ((GtkContainer*) _tmp18_, (GtkWidget*) _tmp19_);
#line 40 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp20_ = main_grid;
#line 40 "../src/Views/Scheduled/ScheduledHeader.vala"
				gtk_widget_show_all ((GtkWidget*) _tmp20_);
#line 713 "ScheduledHeader.c"
				{
					GeeArrayList* _item_list = NULL;
					ServicesDatabase* _tmp21_;
					GDateTime* _tmp22_;
					GeeArrayList* _tmp23_;
					gint _item_size = 0;
					GeeArrayList* _tmp24_;
					gint _tmp25_;
					gint _tmp26_;
					gint _item_index = 0;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					_tmp21_ = planner_database;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					_tmp22_ = self->priv->_date;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					_tmp23_ = services_database_get_items_by_date (_tmp21_, _tmp22_, FALSE);
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					_item_list = _tmp23_;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					_tmp24_ = _item_list;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					_tmp25_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp24_);
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					_tmp26_ = _tmp25_;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					_item_size = _tmp26_;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					_item_index = -1;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					while (TRUE) {
#line 744 "ScheduledHeader.c"
						gint _tmp27_;
						gint _tmp28_;
						ObjectsItem* item = NULL;
						GeeArrayList* _tmp29_;
						gpointer _tmp30_;
						ObjectsItem* _tmp31_;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
						_item_index = _item_index + 1;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
						_tmp27_ = _item_index;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
						_tmp28_ = _item_size;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
						if (!(_tmp27_ < _tmp28_)) {
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
							break;
#line 761 "ScheduledHeader.c"
						}
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
						_tmp29_ = _item_list;
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
						_tmp30_ = gee_abstract_list_get ((GeeAbstractList*) _tmp29_, _item_index);
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
						item = (ObjectsItem*) _tmp30_;
#line 43 "../src/Views/Scheduled/ScheduledHeader.vala"
						_tmp31_ = item;
#line 43 "../src/Views/Scheduled/ScheduledHeader.vala"
						views_scheduled_scheduled_header_add_component_dots (self, _tmp31_);
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
						_g_object_unref0 (item);
#line 775 "ScheduledHeader.c"
					}
#line 42 "../src/Views/Scheduled/ScheduledHeader.vala"
					_g_object_unref0 (_item_list);
#line 779 "ScheduledHeader.c"
				}
#line 46 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp32_ = self->priv->_date;
#line 46 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp33_ = g_date_time_add_days (_tmp32_, 1);
#line 46 "../src/Views/Scheduled/ScheduledHeader.vala"
				_tmp34_ = _tmp33_;
#line 46 "../src/Views/Scheduled/ScheduledHeader.vala"
				views_scheduled_scheduled_header_set_date (self, _tmp34_);
#line 46 "../src/Views/Scheduled/ScheduledHeader.vala"
				_g_date_time_unref0 (_tmp34_);
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
				block29_data_unref (_data29_);
#line 32 "../src/Views/Scheduled/ScheduledHeader.vala"
				_data29_ = NULL;
#line 795 "ScheduledHeader.c"
			}
		}
	}
#line 49 "../src/Views/Scheduled/ScheduledHeader.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 14 "../src/Views/Scheduled/ScheduledHeader.vala"
	_g_object_unref0 (main_grid);
#line 14 "../src/Views/Scheduled/ScheduledHeader.vala"
	return obj;
#line 805 "ScheduledHeader.c"
}

static void
views_scheduled_scheduled_header_class_init (ViewsScheduledScheduledHeaderClass * klass,
                                             gpointer klass_data)
{
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	views_scheduled_scheduled_header_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_type_class_adjust_private_offset (klass, &ViewsScheduledScheduledHeader_private_offset);
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_views_scheduled_scheduled_header_get_property;
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_views_scheduled_scheduled_header_set_property;
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	G_OBJECT_CLASS (klass)->constructor = views_scheduled_scheduled_header_constructor;
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	G_OBJECT_CLASS (klass)->finalize = views_scheduled_scheduled_header_finalize;
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_SCHEDULED_SCHEDULED_HEADER_DATE_PROPERTY, views_scheduled_scheduled_header_properties[VIEWS_SCHEDULED_SCHEDULED_HEADER_DATE_PROPERTY] = g_param_spec_boxed ("date", "date", "date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	views_scheduled_scheduled_header_signals[VIEWS_SCHEDULED_SCHEDULED_HEADER_DATE_SELECTED_SIGNAL] = g_signal_new ("date-selected", VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOXED, G_TYPE_NONE, 1, G_TYPE_DATE_TIME);
#line 828 "ScheduledHeader.c"
}

static void
views_scheduled_scheduled_header_instance_init (ViewsScheduledScheduledHeader * self,
                                                gpointer klass)
{
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	self->priv = views_scheduled_scheduled_header_get_instance_private (self);
#line 837 "ScheduledHeader.c"
}

static void
views_scheduled_scheduled_header_finalize (GObject * obj)
{
	ViewsScheduledScheduledHeader * self;
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER, ViewsScheduledScheduledHeader);
#line 2 "../src/Views/Scheduled/ScheduledHeader.vala"
	_g_date_time_unref0 (self->priv->_date);
#line 5 "../src/Views/Scheduled/ScheduledHeader.vala"
	_g_object_unref0 (self->priv->days_map);
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	G_OBJECT_CLASS (views_scheduled_scheduled_header_parent_class)->finalize (obj);
#line 852 "ScheduledHeader.c"
}

static GType
views_scheduled_scheduled_header_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ViewsScheduledScheduledHeaderClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_scheduled_scheduled_header_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsScheduledScheduledHeader), 0, (GInstanceInitFunc) views_scheduled_scheduled_header_instance_init, NULL };
	GType views_scheduled_scheduled_header_type_id;
	views_scheduled_scheduled_header_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsScheduledScheduledHeader", &g_define_type_info, 0);
	ViewsScheduledScheduledHeader_private_offset = g_type_add_instance_private (views_scheduled_scheduled_header_type_id, sizeof (ViewsScheduledScheduledHeaderPrivate));
	return views_scheduled_scheduled_header_type_id;
}

GType
views_scheduled_scheduled_header_get_type (void)
{
	static volatile gsize views_scheduled_scheduled_header_type_id__volatile = 0;
	if (g_once_init_enter (&views_scheduled_scheduled_header_type_id__volatile)) {
		GType views_scheduled_scheduled_header_type_id;
		views_scheduled_scheduled_header_type_id = views_scheduled_scheduled_header_get_type_once ();
		g_once_init_leave (&views_scheduled_scheduled_header_type_id__volatile, views_scheduled_scheduled_header_type_id);
	}
	return views_scheduled_scheduled_header_type_id__volatile;
}

static void
_vala_views_scheduled_scheduled_header_get_property (GObject * object,
                                                     guint property_id,
                                                     GValue * value,
                                                     GParamSpec * pspec)
{
	ViewsScheduledScheduledHeader * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER, ViewsScheduledScheduledHeader);
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	switch (property_id) {
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
		case VIEWS_SCHEDULED_SCHEDULED_HEADER_DATE_PROPERTY:
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
		g_value_set_boxed (value, views_scheduled_scheduled_header_get_date (self));
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
		break;
#line 893 "ScheduledHeader.c"
		default:
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
		break;
#line 899 "ScheduledHeader.c"
	}
}

static void
_vala_views_scheduled_scheduled_header_set_property (GObject * object,
                                                     guint property_id,
                                                     const GValue * value,
                                                     GParamSpec * pspec)
{
	ViewsScheduledScheduledHeader * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_SCHEDULED_TYPE_SCHEDULED_HEADER, ViewsScheduledScheduledHeader);
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
	switch (property_id) {
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
		case VIEWS_SCHEDULED_SCHEDULED_HEADER_DATE_PROPERTY:
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
		views_scheduled_scheduled_header_set_date (self, g_value_get_boxed (value));
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
		break;
#line 919 "ScheduledHeader.c"
		default:
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/Scheduled/ScheduledHeader.vala"
		break;
#line 925 "ScheduledHeader.c"
	}
}

