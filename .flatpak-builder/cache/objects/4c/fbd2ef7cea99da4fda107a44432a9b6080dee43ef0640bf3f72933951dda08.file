/* LabelPicker.c generated by valac 0.50.10, the Vala compiler
 * generated from LabelPicker.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <handy.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gtk/gtk.h>
#include <granite.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>

#define DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER (dialogs_label_picker_label_picker_get_type ())
#define DIALOGS_LABEL_PICKER_LABEL_PICKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPicker))
#define DIALOGS_LABEL_PICKER_LABEL_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPickerClass))
#define DIALOGS_LABEL_PICKER_IS_LABEL_PICKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER))
#define DIALOGS_LABEL_PICKER_IS_LABEL_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER))
#define DIALOGS_LABEL_PICKER_LABEL_PICKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPickerClass))

typedef struct _DialogsLabelPickerLabelPicker DialogsLabelPickerLabelPicker;
typedef struct _DialogsLabelPickerLabelPickerClass DialogsLabelPickerLabelPickerClass;
typedef struct _DialogsLabelPickerLabelPickerPrivate DialogsLabelPickerLabelPickerPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;
enum  {
	DIALOGS_LABEL_PICKER_LABEL_PICKER_0_PROPERTY,
	DIALOGS_LABEL_PICKER_LABEL_PICKER_ITEM_PROPERTY,
	DIALOGS_LABEL_PICKER_LABEL_PICKER_NUM_PROPERTIES
};
static GParamSpec* dialogs_label_picker_label_picker_properties[DIALOGS_LABEL_PICKER_LABEL_PICKER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_PLANNER (planner_get_type ())
#define PLANNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PLANNER, Planner))
#define PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_PLANNER, PlannerClass))
#define IS_PLANNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PLANNER))
#define IS_PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_PLANNER))
#define PLANNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PLANNER, PlannerClass))

typedef struct _Planner Planner;
typedef struct _PlannerClass PlannerClass;
typedef struct _PlannerPrivate PlannerPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW (dialogs_label_picker_label_row_get_type ())
#define DIALOGS_LABEL_PICKER_LABEL_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRow))
#define DIALOGS_LABEL_PICKER_LABEL_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRowClass))
#define DIALOGS_LABEL_PICKER_IS_LABEL_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW))
#define DIALOGS_LABEL_PICKER_IS_LABEL_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW))
#define DIALOGS_LABEL_PICKER_LABEL_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRowClass))

typedef struct _DialogsLabelPickerLabelRow DialogsLabelPickerLabelRow;
typedef struct _DialogsLabelPickerLabelRowClass DialogsLabelPickerLabelRowClass;

#define OBJECTS_TYPE_ITEM_LABEL (objects_item_label_get_type ())
#define OBJECTS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabel))
#define OBJECTS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))
#define OBJECTS_IS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_IS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_ITEM_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))

typedef struct _ObjectsItemLabel ObjectsItemLabel;
typedef struct _ObjectsItemLabelClass ObjectsItemLabelClass;
#define _g_free0(var) (var = (g_free (var), NULL))
enum  {
	DIALOGS_LABEL_PICKER_LABEL_PICKER_LABELS_CHANGED_SIGNAL,
	DIALOGS_LABEL_PICKER_LABEL_PICKER_NUM_SIGNALS
};
static guint dialogs_label_picker_label_picker_signals[DIALOGS_LABEL_PICKER_LABEL_PICKER_NUM_SIGNALS] = {0};

struct _DialogsLabelPickerLabelPicker {
	HdyWindow parent_instance;
	DialogsLabelPickerLabelPickerPrivate * priv;
	GeeHashMap* labels_map;
};

struct _DialogsLabelPickerLabelPickerClass {
	HdyWindowClass parent_class;
};

struct _DialogsLabelPickerLabelPickerPrivate {
	ObjectsItem* _item;
	GtkSearchEntry* search_entry;
	GtkListBox* listbox;
	GtkButton* cancel_clear_button;
};

struct _Planner {
	GtkApplication parent_instance;
	PlannerPrivate * priv;
	MainWindow* main_window;
};

struct _PlannerClass {
	GtkApplicationClass parent_class;
};

static gint DialogsLabelPickerLabelPicker_private_offset;
static gpointer dialogs_label_picker_label_picker_parent_class = NULL;
extern ServicesDatabase* planner_database;

GType dialogs_label_picker_label_picker_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsLabelPickerLabelPicker, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
DialogsLabelPickerLabelPicker* dialogs_label_picker_label_picker_new (ObjectsItem* item);
DialogsLabelPickerLabelPicker* dialogs_label_picker_label_picker_construct (GType object_type,
                                                                            ObjectsItem* item);
GType planner_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Planner, g_object_unref)
Planner* planner_get_instance (void);
GType main_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MainWindow, g_object_unref)
static void dialogs_label_picker_label_picker_add_all_labels (DialogsLabelPickerLabelPicker* self);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
GeeArrayList* services_database_get_labels (ServicesDatabase* self);
GType dialogs_label_picker_label_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsLabelPickerLabelRow, g_object_unref)
ObjectsItem* dialogs_label_picker_label_picker_get_item (DialogsLabelPickerLabelPicker* self);
GType objects_item_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItemLabel, g_object_unref)
GeeHashMap* objects_item_get_labels (ObjectsItem* self);
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
DialogsLabelPickerLabelRow* dialogs_label_picker_label_row_new (ObjectsLabel* label,
                                                                gboolean active);
DialogsLabelPickerLabelRow* dialogs_label_picker_label_row_construct (GType object_type,
                                                                      ObjectsLabel* label,
                                                                      gboolean active);
static void dialogs_label_picker_label_picker_checked_toggled (DialogsLabelPickerLabelPicker* self,
                                                        ObjectsLabel* label,
                                                        gboolean active);
static void _dialogs_label_picker_label_picker_checked_toggled_dialogs_label_picker_label_row_checked_toggled (DialogsLabelPickerLabelRow* _sender,
                                                                                                        ObjectsLabel* label,
                                                                                                        gboolean active,
                                                                                                        gpointer self);
static void dialogs_label_picker_label_picker_hide_destroy (DialogsLabelPickerLabelPicker* self);
static gboolean __lambda63_ (DialogsLabelPickerLabelPicker* self);
static gboolean ___lambda63__gsource_func (gpointer self);
void dialogs_label_picker_label_picker_popup (DialogsLabelPickerLabelPicker* self);
static GtkWidget* dialogs_label_picker_label_picker_get_placeholder (DialogsLabelPickerLabelPicker* self);
static gboolean dialogs_label_picker_label_picker_filter_func (DialogsLabelPickerLabelPicker* self,
                                                        GtkListBoxRow* row);
ObjectsLabel* dialogs_label_picker_label_row_get_label (DialogsLabelPickerLabelRow* self);
const gchar* objects_label_get_name (ObjectsLabel* self);
static void dialogs_label_picker_label_picker_set_item (DialogsLabelPickerLabelPicker* self,
                                                 ObjectsItem* value);
static GObject * dialogs_label_picker_label_picker_constructor (GType type,
                                                         guint n_construct_properties,
                                                         GObjectConstructParam * construct_properties);
ObjectsLabel* objects_item_label_get_label (ObjectsItemLabel* self);
static gboolean _dialogs_label_picker_label_picker_filter_func_gtk_list_box_filter_func (GtkListBoxRow* row,
                                                                                  gpointer self);
static gboolean _dialogs_label_picker_label_picker___lambda64_ (DialogsLabelPickerLabelPicker* self);
static gboolean __dialogs_label_picker_label_picker___lambda64__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                                     GdkEventFocus* event,
                                                                                     gpointer self);
static gboolean _dialogs_label_picker_label_picker___lambda65_ (DialogsLabelPickerLabelPicker* self,
                                                         GdkEventKey* key);
static gboolean __dialogs_label_picker_label_picker___lambda65__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                                       GdkEventKey* event,
                                                                                       gpointer self);
static void _dialogs_label_picker_label_picker___lambda66_ (DialogsLabelPickerLabelPicker* self);
static void __dialogs_label_picker_label_picker___lambda66__gtk_button_clicked (GtkButton* _sender,
                                                                         gpointer self);
static void _dialogs_label_picker_label_picker___lambda67_ (DialogsLabelPickerLabelPicker* self);
static void __dialogs_label_picker_label_picker___lambda67__gtk_button_clicked (GtkButton* _sender,
                                                                         gpointer self);
static void _dialogs_label_picker_label_picker___lambda68_ (DialogsLabelPickerLabelPicker* self);
static void __dialogs_label_picker_label_picker___lambda68__gtk_search_entry_search_changed (GtkSearchEntry* _sender,
                                                                                      gpointer self);
static void dialogs_label_picker_label_picker_finalize (GObject * obj);
static GType dialogs_label_picker_label_picker_get_type_once (void);
static void _vala_dialogs_label_picker_label_picker_get_property (GObject * object,
                                                           guint property_id,
                                                           GValue * value,
                                                           GParamSpec * pspec);
static void _vala_dialogs_label_picker_label_picker_set_property (GObject * object,
                                                           guint property_id,
                                                           const GValue * value,
                                                           GParamSpec * pspec);

static inline gpointer
dialogs_label_picker_label_picker_get_instance_private (DialogsLabelPickerLabelPicker* self)
{
	return G_STRUCT_MEMBER_P (self, DialogsLabelPickerLabelPicker_private_offset);
}

DialogsLabelPickerLabelPicker*
dialogs_label_picker_label_picker_construct (GType object_type,
                                             ObjectsItem* item)
{
	DialogsLabelPickerLabelPicker * self = NULL;
	Planner* _tmp0_;
	Planner* _tmp1_;
	MainWindow* _tmp2_;
	GtkWidget* _tmp3_;
#line 33 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_val_if_fail (item != NULL, NULL);
#line 34 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp0_ = planner_get_instance ();
#line 34 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp1_ = _tmp0_;
#line 34 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp2_ = _tmp1_->main_window;
#line 34 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp3_ = gtk_widget_get_toplevel ((GtkWidget*) _tmp2_);
#line 34 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	self = (DialogsLabelPickerLabelPicker*) g_object_new (object_type, "item", item, "transient-for", G_TYPE_CHECK_INSTANCE_CAST (_tmp3_, gtk_window_get_type (), GtkWindow), "destroy-with-parent", TRUE, "window-position", GTK_WIN_POS_MOUSE, "resizable", FALSE, NULL);
#line 33 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return self;
#line 287 "LabelPicker.c"
}

DialogsLabelPickerLabelPicker*
dialogs_label_picker_label_picker_new (ObjectsItem* item)
{
#line 33 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return dialogs_label_picker_label_picker_construct (DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, item);
#line 295 "LabelPicker.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return self ? g_object_ref (self) : NULL;
#line 303 "LabelPicker.c"
}

static void
_dialogs_label_picker_label_picker_checked_toggled_dialogs_label_picker_label_row_checked_toggled (DialogsLabelPickerLabelRow* _sender,
                                                                                                   ObjectsLabel* label,
                                                                                                   gboolean active,
                                                                                                   gpointer self)
{
#line 178 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	dialogs_label_picker_label_picker_checked_toggled ((DialogsLabelPickerLabelPicker*) self, label, active);
#line 314 "LabelPicker.c"
}

static void
dialogs_label_picker_label_picker_add_all_labels (DialogsLabelPickerLabelPicker* self)
{
#line 175 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_if_fail (self != NULL);
#line 322 "LabelPicker.c"
	{
		GeeArrayList* _label_list = NULL;
		ServicesDatabase* _tmp0_;
		GeeArrayList* _tmp1_;
		GeeArrayList* _tmp2_;
		GeeArrayList* _tmp3_;
		gint _label_size = 0;
		GeeArrayList* _tmp4_;
		gint _tmp5_;
		gint _tmp6_;
		gint _label_index = 0;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp0_ = planner_database;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp1_ = services_database_get_labels (_tmp0_);
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp2_ = _tmp1_;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp3_ = _g_object_ref0 (_tmp2_);
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_label_list = _tmp3_;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp4_ = _label_list;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp5_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp4_);
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp6_ = _tmp5_;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_label_size = _tmp6_;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_label_index = -1;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		while (TRUE) {
#line 356 "LabelPicker.c"
			gint _tmp7_;
			gint _tmp8_;
			ObjectsLabel* label = NULL;
			GeeArrayList* _tmp9_;
			gpointer _tmp10_;
			DialogsLabelPickerLabelRow* row = NULL;
			ObjectsLabel* _tmp11_;
			ObjectsItem* _tmp12_;
			GeeHashMap* _tmp13_;
			GeeHashMap* _tmp14_;
			ObjectsLabel* _tmp15_;
			const gchar* _tmp16_;
			const gchar* _tmp17_;
			DialogsLabelPickerLabelRow* _tmp18_;
			DialogsLabelPickerLabelRow* _tmp19_;
			GtkListBox* _tmp20_;
			DialogsLabelPickerLabelRow* _tmp21_;
			GtkListBox* _tmp22_;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_label_index = _label_index + 1;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp7_ = _label_index;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp8_ = _label_size;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			if (!(_tmp7_ < _tmp8_)) {
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
				break;
#line 385 "LabelPicker.c"
			}
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp9_ = _label_list;
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp10_ = gee_abstract_list_get ((GeeAbstractList*) _tmp9_, _label_index);
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			label = (ObjectsLabel*) _tmp10_;
#line 177 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp11_ = label;
#line 177 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp12_ = self->priv->_item;
#line 177 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp13_ = objects_item_get_labels (_tmp12_);
#line 177 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp14_ = _tmp13_;
#line 177 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp15_ = label;
#line 177 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp16_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp15_);
#line 177 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp17_ = _tmp16_;
#line 177 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp18_ = dialogs_label_picker_label_row_new (_tmp11_, gee_abstract_map_has_key ((GeeAbstractMap*) _tmp14_, _tmp17_));
#line 177 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			g_object_ref_sink (_tmp18_);
#line 177 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			row = _tmp18_;
#line 178 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp19_ = row;
#line 178 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			g_signal_connect_object (_tmp19_, "checked-toggled", (GCallback) _dialogs_label_picker_label_picker_checked_toggled_dialogs_label_picker_label_row_checked_toggled, self, 0);
#line 180 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp20_ = self->priv->listbox;
#line 180 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp21_ = row;
#line 180 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			gtk_container_add ((GtkContainer*) _tmp20_, (GtkWidget*) _tmp21_);
#line 181 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp22_ = self->priv->listbox;
#line 181 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			gtk_widget_show_all ((GtkWidget*) _tmp22_);
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_g_object_unref0 (row);
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_g_object_unref0 (label);
#line 431 "LabelPicker.c"
		}
#line 176 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_g_object_unref0 (_label_list);
#line 435 "LabelPicker.c"
	}
}

static gboolean
__lambda63_ (DialogsLabelPickerLabelPicker* self)
{
	gboolean result = FALSE;
#line 189 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 190 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	result = G_SOURCE_REMOVE;
#line 190 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return result;
#line 449 "LabelPicker.c"
}

static gboolean
___lambda63__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda63_ ((DialogsLabelPickerLabelPicker*) self);
#line 188 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return result;
#line 459 "LabelPicker.c"
}

static void
dialogs_label_picker_label_picker_hide_destroy (DialogsLabelPickerLabelPicker* self)
{
#line 185 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_if_fail (self != NULL);
#line 186 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_hide ((GtkWidget*) self);
#line 188 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 500, ___lambda63__gsource_func, g_object_ref (self), g_object_unref);
#line 471 "LabelPicker.c"
}

void
dialogs_label_picker_label_picker_popup (DialogsLabelPickerLabelPicker* self)
{
#line 194 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_if_fail (self != NULL);
#line 195 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 481 "LabelPicker.c"
}

static GtkWidget*
dialogs_label_picker_label_picker_get_placeholder (DialogsLabelPickerLabelPicker* self)
{
	GtkLabel* message_label = NULL;
	GtkLabel* _tmp0_ = NULL;
	GtkStyleContext* message_label_context = NULL;
	GtkStyleContext* _tmp1_;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp2_ = NULL;
	GtkWidget* result = NULL;
#line 206 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 207 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp0_ = (GtkLabel*) gtk_label_new ("Your list of filters will show up here. Create one by entering the nam" \
"e and pressing the Enter key");
#line 207 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_set (_tmp0_, "wrap", TRUE, NULL);
#line 207 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_label_set_justify (_tmp0_, GTK_JUSTIFY_CENTER);
#line 207 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp0_);
#line 207 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	message_label = _tmp0_;
#line 212 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) message_label);
#line 212 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	message_label_context = _tmp1_;
#line 213 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (message_label_context, "dim-label");
#line 214 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (message_label_context, GRANITE_STYLE_CLASS_SMALL_LABEL);
#line 216 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp2_ = (GtkGrid*) gtk_grid_new ();
#line 216 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_set ((GtkWidget*) _tmp2_, "margin", 6, NULL);
#line 216 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp2_, GTK_ALIGN_CENTER);
#line 216 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp2_);
#line 216 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	grid = _tmp2_;
#line 220 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_container_add ((GtkContainer*) grid, (GtkWidget*) message_label);
#line 221 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_show_all ((GtkWidget*) grid);
#line 223 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	result = (GtkWidget*) grid;
#line 223 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (message_label);
#line 223 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return result;
#line 534 "LabelPicker.c"
}

static void
dialogs_label_picker_label_picker_checked_toggled (DialogsLabelPickerLabelPicker* self,
                                                   ObjectsLabel* label,
                                                   gboolean active)
{
#line 226 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_if_fail (self != NULL);
#line 226 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_if_fail (label != NULL);
#line 227 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	if (active) {
#line 548 "LabelPicker.c"
		GeeHashMap* _tmp0_;
		const gchar* _tmp1_;
		const gchar* _tmp2_;
#line 228 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp0_ = self->labels_map;
#line 228 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp1_ = objects_base_object_get_id_string ((ObjectsBaseObject*) label);
#line 228 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp2_ = _tmp1_;
#line 228 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		if (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp0_, _tmp2_)) {
#line 560 "LabelPicker.c"
			GeeHashMap* _tmp3_;
			const gchar* _tmp4_;
			const gchar* _tmp5_;
#line 229 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp3_ = self->labels_map;
#line 229 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp4_ = objects_base_object_get_id_string ((ObjectsBaseObject*) label);
#line 229 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp5_ = _tmp4_;
#line 229 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			gee_abstract_map_set ((GeeAbstractMap*) _tmp3_, _tmp5_, label);
#line 572 "LabelPicker.c"
		}
	} else {
		GeeHashMap* _tmp6_;
		const gchar* _tmp7_;
		const gchar* _tmp8_;
#line 232 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp6_ = self->labels_map;
#line 232 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp7_ = objects_base_object_get_id_string ((ObjectsBaseObject*) label);
#line 232 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp8_ = _tmp7_;
#line 232 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp6_, _tmp8_)) {
#line 586 "LabelPicker.c"
			GeeHashMap* _tmp9_;
			const gchar* _tmp10_;
			const gchar* _tmp11_;
#line 233 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp9_ = self->labels_map;
#line 233 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp10_ = objects_base_object_get_id_string ((ObjectsBaseObject*) label);
#line 233 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp11_ = _tmp10_;
#line 233 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			gee_abstract_map_unset ((GeeAbstractMap*) _tmp9_, _tmp11_, NULL);
#line 598 "LabelPicker.c"
		}
	}
}

static gboolean
string_contains (const gchar* self,
                 const gchar* needle)
{
	gchar* _tmp0_;
	gboolean result = FALSE;
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (needle != NULL, FALSE);
#line 1531 "glib-2.0.vapi"
	_tmp0_ = strstr ((gchar*) self, (gchar*) needle);
#line 1531 "glib-2.0.vapi"
	result = _tmp0_ != NULL;
#line 1531 "glib-2.0.vapi"
	return result;
#line 619 "LabelPicker.c"
}

static gboolean
dialogs_label_picker_label_picker_filter_func (DialogsLabelPickerLabelPicker* self,
                                               GtkListBoxRow* row)
{
	ObjectsLabel* label = NULL;
	ObjectsLabel* _tmp0_;
	ObjectsLabel* _tmp1_;
	ObjectsLabel* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	GtkSearchEntry* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	gboolean _tmp12_;
	gboolean result = FALSE;
#line 238 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 238 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 239 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp0_ = dialogs_label_picker_label_row_get_label (G_TYPE_CHECK_INSTANCE_CAST (row, DIALOGS_LABEL_PICKER_TYPE_LABEL_ROW, DialogsLabelPickerLabelRow));
#line 239 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp1_ = _tmp0_;
#line 239 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp2_ = _g_object_ref0 (_tmp1_);
#line 239 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	label = _tmp2_;
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp3_ = objects_label_get_name (label);
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp4_ = _tmp3_;
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp5_ = g_utf8_strdown (_tmp4_, (gssize) -1);
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp6_ = _tmp5_;
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp7_ = self->priv->search_entry;
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp8_ = gtk_entry_get_text ((GtkEntry*) _tmp7_);
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp9_ = _tmp8_;
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp10_ = g_utf8_strdown (_tmp9_, (gssize) -1);
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp11_ = _tmp10_;
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp12_ = string_contains (_tmp6_, _tmp11_);
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_free0 (_tmp11_);
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_free0 (_tmp6_);
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	result = _tmp12_;
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (label);
#line 240 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return result;
#line 683 "LabelPicker.c"
}

ObjectsItem*
dialogs_label_picker_label_picker_get_item (DialogsLabelPickerLabelPicker* self)
{
	ObjectsItem* result;
	ObjectsItem* _tmp0_;
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp0_ = self->priv->_item;
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	result = _tmp0_;
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return result;
#line 699 "LabelPicker.c"
}

static void
dialogs_label_picker_label_picker_set_item (DialogsLabelPickerLabelPicker* self,
                                            ObjectsItem* value)
{
	ObjectsItem* old_value;
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	old_value = dialogs_label_picker_label_picker_get_item (self);
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	if (old_value != value) {
#line 713 "LabelPicker.c"
		ObjectsItem* _tmp0_;
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_g_object_unref0 (self->priv->_item);
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		self->priv->_item = _tmp0_;
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		g_object_notify_by_pspec ((GObject *) self, dialogs_label_picker_label_picker_properties[DIALOGS_LABEL_PICKER_LABEL_PICKER_ITEM_PROPERTY]);
#line 723 "LabelPicker.c"
	}
}

static gboolean
_dialogs_label_picker_label_picker_filter_func_gtk_list_box_filter_func (GtkListBoxRow* row,
                                                                         gpointer self)
{
	gboolean result;
	result = dialogs_label_picker_label_picker_filter_func ((DialogsLabelPickerLabelPicker*) self, row);
#line 105 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return result;
#line 735 "LabelPicker.c"
}

static gboolean
_dialogs_label_picker_label_picker___lambda64_ (DialogsLabelPickerLabelPicker* self)
{
	gboolean result = FALSE;
#line 147 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	dialogs_label_picker_label_picker_hide_destroy (self);
#line 148 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	result = FALSE;
#line 148 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return result;
#line 748 "LabelPicker.c"
}

static gboolean
__dialogs_label_picker_label_picker___lambda64__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                            GdkEventFocus* event,
                                                                            gpointer self)
{
	gboolean result;
	result = _dialogs_label_picker_label_picker___lambda64_ ((DialogsLabelPickerLabelPicker*) self);
#line 146 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return result;
#line 760 "LabelPicker.c"
}

static gboolean
_dialogs_label_picker_label_picker___lambda65_ (DialogsLabelPickerLabelPicker* self,
                                                GdkEventKey* key)
{
	gboolean result = FALSE;
#line 151 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_return_val_if_fail (key != NULL, FALSE);
#line 152 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	if (key->keyval == ((guint) 65307)) {
#line 153 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		dialogs_label_picker_label_picker_hide_destroy (self);
#line 774 "LabelPicker.c"
	}
#line 156 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	result = FALSE;
#line 156 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return result;
#line 780 "LabelPicker.c"
}

static gboolean
__dialogs_label_picker_label_picker___lambda65__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                              GdkEventKey* event,
                                                                              gpointer self)
{
	gboolean result;
	result = _dialogs_label_picker_label_picker___lambda65_ ((DialogsLabelPickerLabelPicker*) self, event);
#line 151 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return result;
#line 792 "LabelPicker.c"
}

static void
_dialogs_label_picker_label_picker___lambda66_ (DialogsLabelPickerLabelPicker* self)
{
	GeeHashMap* _tmp0_;
#line 160 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp0_ = self->labels_map;
#line 160 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_signal_emit (self, dialogs_label_picker_label_picker_signals[DIALOGS_LABEL_PICKER_LABEL_PICKER_LABELS_CHANGED_SIGNAL], 0, _tmp0_);
#line 161 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	dialogs_label_picker_label_picker_hide_destroy (self);
#line 805 "LabelPicker.c"
}

static void
__dialogs_label_picker_label_picker___lambda66__gtk_button_clicked (GtkButton* _sender,
                                                                    gpointer self)
{
#line 159 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_dialogs_label_picker_label_picker___lambda66_ ((DialogsLabelPickerLabelPicker*) self);
#line 814 "LabelPicker.c"
}

static void
_dialogs_label_picker_label_picker___lambda67_ (DialogsLabelPickerLabelPicker* self)
{
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp1_;
#line 165 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp0_ = self->labels_map;
#line 165 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gee_abstract_map_clear ((GeeAbstractMap*) _tmp0_);
#line 166 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp1_ = self->labels_map;
#line 166 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_signal_emit (self, dialogs_label_picker_label_picker_signals[DIALOGS_LABEL_PICKER_LABEL_PICKER_LABELS_CHANGED_SIGNAL], 0, _tmp1_);
#line 167 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	dialogs_label_picker_label_picker_hide_destroy (self);
#line 832 "LabelPicker.c"
}

static void
__dialogs_label_picker_label_picker___lambda67__gtk_button_clicked (GtkButton* _sender,
                                                                    gpointer self)
{
#line 164 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_dialogs_label_picker_label_picker___lambda67_ ((DialogsLabelPickerLabelPicker*) self);
#line 841 "LabelPicker.c"
}

static void
_dialogs_label_picker_label_picker___lambda68_ (DialogsLabelPickerLabelPicker* self)
{
	GtkListBox* _tmp0_;
#line 171 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp0_ = self->priv->listbox;
#line 171 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_list_box_invalidate_filter (_tmp0_);
#line 852 "LabelPicker.c"
}

static void
__dialogs_label_picker_label_picker___lambda68__gtk_search_entry_search_changed (GtkSearchEntry* _sender,
                                                                                 gpointer self)
{
#line 170 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_dialogs_label_picker_label_picker___lambda68_ ((DialogsLabelPickerLabelPicker*) self);
#line 861 "LabelPicker.c"
}

static GObject *
dialogs_label_picker_label_picker_constructor (GType type,
                                               guint n_construct_properties,
                                               GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	DialogsLabelPickerLabelPicker * self;
	GeeHashMap* _tmp0_;
	HdyHeaderBar* headerbar = NULL;
	HdyHeaderBar* _tmp21_ = NULL;
	HdyHeaderBar* _tmp22_;
	GtkStyleContext* _tmp23_;
	HdyHeaderBar* _tmp24_;
	GtkStyleContext* _tmp25_;
	GtkButton* done_button = NULL;
	GtkButton* _tmp26_ = NULL;
	GtkButton* _tmp27_;
	GtkStyleContext* _tmp28_;
	GtkButton* _tmp29_;
	GtkStyleContext* _tmp30_;
	GtkButton* _tmp31_;
	GtkStyleContext* _tmp32_;
	GtkButton* _tmp33_ = NULL;
	GtkButton* _tmp34_;
	GtkStyleContext* _tmp35_;
	GtkButton* _tmp36_;
	GtkStyleContext* _tmp37_;
	GtkLabel* title_label = NULL;
	GtkLabel* _tmp38_;
	GtkLabel* _tmp39_;
	GtkStyleContext* _tmp40_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp41_ = NULL;
	GtkBox* _tmp42_;
	GtkButton* _tmp43_;
	GtkBox* _tmp44_;
	GtkLabel* _tmp45_;
	GtkBox* _tmp46_;
	GtkButton* _tmp47_;
	HdyHeaderBar* _tmp48_;
	GtkBox* _tmp49_;
	gchar* _tmp50_;
	GtkSearchEntry* _tmp51_ = NULL;
	GtkSearchEntry* _tmp52_;
	GtkStyleContext* _tmp53_;
	GtkListBox* _tmp54_ = NULL;
	GtkListBox* _tmp55_;
	GtkWidget* _tmp56_;
	GtkWidget* _tmp57_;
	GtkListBox* _tmp58_;
	GtkStyleContext* listbox_context = NULL;
	GtkListBox* _tmp59_;
	GtkStyleContext* _tmp60_;
	GtkStyleContext* _tmp61_;
	GtkStyleContext* _tmp62_;
	GtkScrolledWindow* listbox_scrolled = NULL;
	GtkScrolledWindow* _tmp63_ = NULL;
	GtkScrolledWindow* _tmp64_;
	GtkListBox* _tmp65_;
	GtkGrid* content_grid = NULL;
	GtkGrid* _tmp66_ = NULL;
	GtkGrid* _tmp67_;
	GtkScrolledWindow* _tmp68_;
	GtkStyleContext* content_grid_context = NULL;
	GtkGrid* _tmp69_;
	GtkStyleContext* _tmp70_;
	GtkStyleContext* _tmp71_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp72_ = NULL;
	GtkGrid* _tmp73_;
	HdyHeaderBar* _tmp74_;
	GtkGrid* _tmp75_;
	GtkSearchEntry* _tmp76_;
	GtkGrid* _tmp77_;
	GtkGrid* _tmp78_;
	GtkStyleContext* main_grid_context = NULL;
	GtkGrid* _tmp79_;
	GtkStyleContext* _tmp80_;
	GtkStyleContext* _tmp81_;
	GtkGrid* _tmp82_;
	GtkButton* _tmp83_;
	GtkButton* _tmp84_;
	GtkSearchEntry* _tmp85_;
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	parent_class = G_OBJECT_CLASS (dialogs_label_picker_label_picker_parent_class);
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPicker);
#line 44 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp0_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, OBJECTS_TYPE_LABEL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 44 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (self->labels_map);
#line 44 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	self->labels_map = _tmp0_;
#line 960 "LabelPicker.c"
	{
		GeeIterator* _entry_it = NULL;
		ObjectsItem* _tmp1_;
		GeeHashMap* _tmp2_;
		GeeHashMap* _tmp3_;
		GeeSet* _tmp4_;
		GeeSet* _tmp5_;
		GeeSet* _tmp6_;
		GeeIterator* _tmp7_;
		GeeIterator* _tmp8_;
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp1_ = self->priv->_item;
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp2_ = objects_item_get_labels (_tmp1_);
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp3_ = _tmp2_;
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp4_ = gee_abstract_map_get_entries ((GeeAbstractMap*) _tmp3_);
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp5_ = _tmp4_;
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp6_ = _tmp5_;
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp7_ = gee_iterable_iterator ((GeeIterable*) _tmp6_);
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_tmp8_ = _tmp7_;
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_g_object_unref0 (_tmp6_);
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_entry_it = _tmp8_;
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		while (TRUE) {
#line 993 "LabelPicker.c"
			GeeIterator* _tmp9_;
			GeeMapEntry* entry = NULL;
			GeeIterator* _tmp10_;
			gpointer _tmp11_;
			GeeHashMap* _tmp12_;
			GeeMapEntry* _tmp13_;
			gconstpointer _tmp14_;
			gconstpointer _tmp15_;
			GeeMapEntry* _tmp16_;
			gconstpointer _tmp17_;
			gconstpointer _tmp18_;
			ObjectsLabel* _tmp19_;
			ObjectsLabel* _tmp20_;
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp9_ = _entry_it;
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			if (!gee_iterator_next (_tmp9_)) {
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
				break;
#line 1013 "LabelPicker.c"
			}
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp10_ = _entry_it;
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp11_ = gee_iterator_get (_tmp10_);
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			entry = (GeeMapEntry*) _tmp11_;
#line 47 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp12_ = self->labels_map;
#line 47 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp13_ = entry;
#line 47 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp14_ = gee_map_entry_get_key (_tmp13_);
#line 47 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp15_ = _tmp14_;
#line 47 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp16_ = entry;
#line 47 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp17_ = gee_map_entry_get_value (_tmp16_);
#line 47 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp18_ = _tmp17_;
#line 47 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp19_ = objects_item_label_get_label ((ObjectsItemLabel*) _tmp18_);
#line 47 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_tmp20_ = _tmp19_;
#line 47 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			gee_abstract_map_set ((GeeAbstractMap*) _tmp12_, (const gchar*) _tmp15_, _tmp20_);
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
			_g_object_unref0 (entry);
#line 1043 "LabelPicker.c"
		}
#line 46 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		_g_object_unref0 (_entry_it);
#line 1047 "LabelPicker.c"
	}
#line 50 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp21_ = (HdyHeaderBar*) hdy_header_bar_new ();
#line 50 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	hdy_header_bar_set_has_subtitle (_tmp21_, FALSE);
#line 50 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	hdy_header_bar_set_show_close_button (_tmp21_, FALSE);
#line 50 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp21_, TRUE);
#line 50 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp21_);
#line 50 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	headerbar = _tmp21_;
#line 55 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp22_ = headerbar;
#line 55 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp23_ = gtk_widget_get_style_context ((GtkWidget*) _tmp22_);
#line 55 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp23_, GTK_STYLE_CLASS_FLAT);
#line 56 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp24_ = headerbar;
#line 56 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp25_ = gtk_widget_get_style_context ((GtkWidget*) _tmp24_);
#line 56 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp25_, "default-decoration");
#line 58 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp26_ = (GtkButton*) gtk_button_new_with_label (_ ("Done"));
#line 58 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp26_, GTK_ALIGN_CENTER);
#line 58 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp26_, GTK_ALIGN_CENTER);
#line 58 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp26_, FALSE);
#line 58 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp26_);
#line 58 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	done_button = _tmp26_;
#line 63 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp27_ = done_button;
#line 63 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp28_ = gtk_widget_get_style_context ((GtkWidget*) _tmp27_);
#line 63 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp28_, GTK_STYLE_CLASS_FLAT);
#line 64 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp29_ = done_button;
#line 64 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp30_ = gtk_widget_get_style_context ((GtkWidget*) _tmp29_);
#line 64 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp30_, "primary-color");
#line 65 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp31_ = done_button;
#line 65 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp32_ = gtk_widget_get_style_context ((GtkWidget*) _tmp31_);
#line 65 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp32_, GRANITE_STYLE_CLASS_SMALL_LABEL);
#line 67 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp33_ = (GtkButton*) gtk_button_new_with_label (_ ("Clear"));
#line 67 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp33_, GTK_ALIGN_CENTER);
#line 67 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp33_, GTK_ALIGN_CENTER);
#line 67 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp33_, FALSE);
#line 67 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp33_);
#line 67 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (self->priv->cancel_clear_button);
#line 67 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	self->priv->cancel_clear_button = _tmp33_;
#line 72 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp34_ = self->priv->cancel_clear_button;
#line 72 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp35_ = gtk_widget_get_style_context ((GtkWidget*) _tmp34_);
#line 72 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp35_, GTK_STYLE_CLASS_FLAT);
#line 73 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp36_ = self->priv->cancel_clear_button;
#line 73 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp37_ = gtk_widget_get_style_context ((GtkWidget*) _tmp36_);
#line 73 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp37_, GRANITE_STYLE_CLASS_SMALL_LABEL);
#line 75 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp38_ = (GtkLabel*) gtk_label_new (_ ("Labels"));
#line 75 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp38_);
#line 75 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	title_label = _tmp38_;
#line 76 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp39_ = title_label;
#line 76 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp40_ = gtk_widget_get_style_context ((GtkWidget*) _tmp39_);
#line 76 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp40_, "h4");
#line 78 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp41_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 78 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp41_, TRUE);
#line 78 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp41_, 3);
#line 78 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp41_, 3);
#line 78 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp41_);
#line 78 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	header_box = _tmp41_;
#line 83 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp42_ = header_box;
#line 83 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp43_ = self->priv->cancel_clear_button;
#line 83 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_box_pack_start (_tmp42_, (GtkWidget*) _tmp43_, FALSE, FALSE, (guint) 0);
#line 84 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp44_ = header_box;
#line 84 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp45_ = title_label;
#line 84 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_box_set_center_widget (_tmp44_, (GtkWidget*) _tmp45_);
#line 85 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp46_ = header_box;
#line 85 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp47_ = done_button;
#line 85 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_box_pack_end (_tmp46_, (GtkWidget*) _tmp47_, FALSE, FALSE, (guint) 0);
#line 87 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp48_ = headerbar;
#line 87 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp49_ = header_box;
#line 87 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	hdy_header_bar_set_custom_title (_tmp48_, (GtkWidget*) _tmp49_);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp50_ = g_strdup (_ ("Search or Create"));
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp51_ = (GtkSearchEntry*) gtk_search_entry_new ();
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_entry_set_placeholder_text ((GtkEntry*) _tmp51_, _tmp50_);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_free0 (_tmp50_);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp51_, GTK_ALIGN_CENTER);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp51_, TRUE);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp51_, 12);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp51_, 12);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp51_, 3);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp51_, 12);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp51_);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (self->priv->search_entry);
#line 89 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	self->priv->search_entry = _tmp51_;
#line 99 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp52_ = self->priv->search_entry;
#line 99 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp53_ = gtk_widget_get_style_context ((GtkWidget*) _tmp52_);
#line 99 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp53_, "border-radius-6");
#line 101 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp54_ = (GtkListBox*) gtk_list_box_new ();
#line 101 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp54_, TRUE);
#line 101 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp54_);
#line 101 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (self->priv->listbox);
#line 101 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	self->priv->listbox = _tmp54_;
#line 104 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp55_ = self->priv->listbox;
#line 104 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp56_ = dialogs_label_picker_label_picker_get_placeholder (self);
#line 104 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp57_ = _tmp56_;
#line 104 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_list_box_set_placeholder (_tmp55_, _tmp57_);
#line 104 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (_tmp57_);
#line 105 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp58_ = self->priv->listbox;
#line 105 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_list_box_set_filter_func (_tmp58_, _dialogs_label_picker_label_picker_filter_func_gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 107 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp59_ = self->priv->listbox;
#line 107 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp60_ = gtk_widget_get_style_context ((GtkWidget*) _tmp59_);
#line 107 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	listbox_context = _tmp60_;
#line 108 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp61_ = listbox_context;
#line 108 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp61_, "picker-background");
#line 109 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp62_ = listbox_context;
#line 109 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp62_, "listbox-separator-3");
#line 111 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp63_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 111 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_set (_tmp63_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
#line 111 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_set (_tmp63_, "vscrollbar-policy", GTK_POLICY_NEVER, NULL);
#line 111 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_set ((GtkWidget*) _tmp63_, "expand", TRUE, NULL);
#line 111 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_set ((GtkWidget*) _tmp63_, "height-request", 64, NULL);
#line 111 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp63_);
#line 111 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	listbox_scrolled = _tmp63_;
#line 117 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp64_ = listbox_scrolled;
#line 117 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp65_ = self->priv->listbox;
#line 117 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_container_add ((GtkContainer*) _tmp64_, (GtkWidget*) _tmp65_);
#line 119 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp66_ = (GtkGrid*) gtk_grid_new ();
#line 119 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp66_, GTK_ORIENTATION_VERTICAL);
#line 119 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp66_, TRUE);
#line 119 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_set ((GtkWidget*) _tmp66_, "margin", 9, NULL);
#line 119 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp66_, 0);
#line 119 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp66_, 12);
#line 119 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp66_);
#line 119 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	content_grid = _tmp66_;
#line 127 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp67_ = content_grid;
#line 127 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp68_ = listbox_scrolled;
#line 127 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_container_add ((GtkContainer*) _tmp67_, (GtkWidget*) _tmp68_);
#line 129 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp69_ = content_grid;
#line 129 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp70_ = gtk_widget_get_style_context ((GtkWidget*) _tmp69_);
#line 129 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	content_grid_context = _tmp70_;
#line 130 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp71_ = content_grid_context;
#line 130 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp71_, "picker-content");
#line 132 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp72_ = (GtkGrid*) gtk_grid_new ();
#line 132 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp72_, GTK_ORIENTATION_VERTICAL);
#line 132 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_set ((GtkWidget*) _tmp72_, "width-request", 225, NULL);
#line 132 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_ref_sink (_tmp72_);
#line 132 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	main_grid = _tmp72_;
#line 136 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp73_ = main_grid;
#line 136 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp74_ = headerbar;
#line 136 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_container_add ((GtkContainer*) _tmp73_, (GtkWidget*) _tmp74_);
#line 137 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp75_ = main_grid;
#line 137 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp76_ = self->priv->search_entry;
#line 137 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_container_add ((GtkContainer*) _tmp75_, (GtkWidget*) _tmp76_);
#line 138 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp77_ = main_grid;
#line 138 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp78_ = content_grid;
#line 138 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_container_add ((GtkContainer*) _tmp77_, (GtkWidget*) _tmp78_);
#line 140 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp79_ = main_grid;
#line 140 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp80_ = gtk_widget_get_style_context ((GtkWidget*) _tmp79_);
#line 140 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	main_grid_context = _tmp80_;
#line 141 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp81_ = main_grid_context;
#line 141 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_style_context_add_class (_tmp81_, "picker");
#line 143 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp82_ = main_grid;
#line 143 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp82_);
#line 144 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	dialogs_label_picker_label_picker_add_all_labels (self);
#line 146 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_signal_connect_object ((GtkWidget*) self, "focus-out-event", (GCallback) __dialogs_label_picker_label_picker___lambda64__gtk_widget_focus_out_event, self, 0);
#line 151 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_signal_connect_object ((GtkWidget*) self, "key-release-event", (GCallback) __dialogs_label_picker_label_picker___lambda65__gtk_widget_key_release_event, self, 0);
#line 159 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp83_ = done_button;
#line 159 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_signal_connect_object (_tmp83_, "clicked", (GCallback) __dialogs_label_picker_label_picker___lambda66__gtk_button_clicked, self, 0);
#line 164 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp84_ = self->priv->cancel_clear_button;
#line 164 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_signal_connect_object (_tmp84_, "clicked", (GCallback) __dialogs_label_picker_label_picker___lambda67__gtk_button_clicked, self, 0);
#line 170 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_tmp85_ = self->priv->search_entry;
#line 170 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_signal_connect_object (_tmp85_, "search-changed", (GCallback) __dialogs_label_picker_label_picker___lambda68__gtk_search_entry_search_changed, self, 0);
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (main_grid);
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (content_grid);
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (listbox_scrolled);
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (header_box);
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (title_label);
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (done_button);
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (headerbar);
#line 43 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	return obj;
#line 1375 "LabelPicker.c"
}

static void
dialogs_label_picker_label_picker_class_init (DialogsLabelPickerLabelPickerClass * klass,
                                              gpointer klass_data)
{
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	dialogs_label_picker_label_picker_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_type_class_adjust_private_offset (klass, &DialogsLabelPickerLabelPicker_private_offset);
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_dialogs_label_picker_label_picker_get_property;
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_dialogs_label_picker_label_picker_set_property;
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	G_OBJECT_CLASS (klass)->constructor = dialogs_label_picker_label_picker_constructor;
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	G_OBJECT_CLASS (klass)->finalize = dialogs_label_picker_label_picker_finalize;
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_LABEL_PICKER_LABEL_PICKER_ITEM_PROPERTY, dialogs_label_picker_label_picker_properties[DIALOGS_LABEL_PICKER_LABEL_PICKER_ITEM_PROPERTY] = g_param_spec_object ("item", "item", "item", OBJECTS_TYPE_ITEM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	dialogs_label_picker_label_picker_signals[DIALOGS_LABEL_PICKER_LABEL_PICKER_LABELS_CHANGED_SIGNAL] = g_signal_new ("labels-changed", DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, GEE_TYPE_HASH_MAP);
#line 1398 "LabelPicker.c"
}

static void
dialogs_label_picker_label_picker_instance_init (DialogsLabelPickerLabelPicker * self,
                                                 gpointer klass)
{
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	self->priv = dialogs_label_picker_label_picker_get_instance_private (self);
#line 1407 "LabelPicker.c"
}

static void
dialogs_label_picker_label_picker_finalize (GObject * obj)
{
	DialogsLabelPickerLabelPicker * self;
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPicker);
#line 23 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (self->priv->_item);
#line 25 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (self->priv->search_entry);
#line 26 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (self->priv->listbox);
#line 28 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (self->priv->cancel_clear_button);
#line 29 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	_g_object_unref0 (self->labels_map);
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	G_OBJECT_CLASS (dialogs_label_picker_label_picker_parent_class)->finalize (obj);
#line 1428 "LabelPicker.c"
}

static GType
dialogs_label_picker_label_picker_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (DialogsLabelPickerLabelPickerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) dialogs_label_picker_label_picker_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (DialogsLabelPickerLabelPicker), 0, (GInstanceInitFunc) dialogs_label_picker_label_picker_instance_init, NULL };
	GType dialogs_label_picker_label_picker_type_id;
	dialogs_label_picker_label_picker_type_id = g_type_register_static (hdy_window_get_type (), "DialogsLabelPickerLabelPicker", &g_define_type_info, 0);
	DialogsLabelPickerLabelPicker_private_offset = g_type_add_instance_private (dialogs_label_picker_label_picker_type_id, sizeof (DialogsLabelPickerLabelPickerPrivate));
	return dialogs_label_picker_label_picker_type_id;
}

GType
dialogs_label_picker_label_picker_get_type (void)
{
	static volatile gsize dialogs_label_picker_label_picker_type_id__volatile = 0;
	if (g_once_init_enter (&dialogs_label_picker_label_picker_type_id__volatile)) {
		GType dialogs_label_picker_label_picker_type_id;
		dialogs_label_picker_label_picker_type_id = dialogs_label_picker_label_picker_get_type_once ();
		g_once_init_leave (&dialogs_label_picker_label_picker_type_id__volatile, dialogs_label_picker_label_picker_type_id);
	}
	return dialogs_label_picker_label_picker_type_id__volatile;
}

static void
_vala_dialogs_label_picker_label_picker_get_property (GObject * object,
                                                      guint property_id,
                                                      GValue * value,
                                                      GParamSpec * pspec)
{
	DialogsLabelPickerLabelPicker * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPicker);
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		case DIALOGS_LABEL_PICKER_LABEL_PICKER_ITEM_PROPERTY:
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		g_value_set_object (value, dialogs_label_picker_label_picker_get_item (self));
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		break;
#line 1469 "LabelPicker.c"
		default:
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		break;
#line 1475 "LabelPicker.c"
	}
}

static void
_vala_dialogs_label_picker_label_picker_set_property (GObject * object,
                                                      guint property_id,
                                                      const GValue * value,
                                                      GParamSpec * pspec)
{
	DialogsLabelPickerLabelPicker * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPicker);
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		case DIALOGS_LABEL_PICKER_LABEL_PICKER_ITEM_PROPERTY:
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		dialogs_label_picker_label_picker_set_item (self, g_value_get_object (value));
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		break;
#line 1495 "LabelPicker.c"
		default:
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/LabelPicker/LabelPicker.vala"
		break;
#line 1501 "LabelPicker.c"
	}
}

