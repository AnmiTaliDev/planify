/* List.c generated by valac 0.50.10, the Vala compiler
 * generated from List.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <gee.h>

#define VIEWS_TYPE_LIST (views_list_get_type ())
#define VIEWS_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_LIST, ViewsList))
#define VIEWS_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_LIST, ViewsListClass))
#define VIEWS_IS_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_LIST))
#define VIEWS_IS_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_LIST))
#define VIEWS_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_LIST, ViewsListClass))

typedef struct _ViewsList ViewsList;
typedef struct _ViewsListClass ViewsListClass;
typedef struct _ViewsListPrivate ViewsListPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define LAYOUTS_TYPE_SECTION_ROW (layouts_section_row_get_type ())
#define LAYOUTS_SECTION_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_SECTION_ROW, LayoutsSectionRow))
#define LAYOUTS_SECTION_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_SECTION_ROW, LayoutsSectionRowClass))
#define LAYOUTS_IS_SECTION_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_SECTION_ROW))
#define LAYOUTS_IS_SECTION_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_SECTION_ROW))
#define LAYOUTS_SECTION_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_SECTION_ROW, LayoutsSectionRowClass))

typedef struct _LayoutsSectionRow LayoutsSectionRow;
typedef struct _LayoutsSectionRowClass LayoutsSectionRowClass;
enum  {
	VIEWS_LIST_0_PROPERTY,
	VIEWS_LIST_PROJECT_PROPERTY,
	VIEWS_LIST_NUM_PROPERTIES
};
static GParamSpec* views_list_properties[VIEWS_LIST_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_SECTION (objects_section_get_type ())
#define OBJECTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_SECTION, ObjectsSection))
#define OBJECTS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_SECTION, ObjectsSectionClass))
#define OBJECTS_IS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_SECTION))
#define OBJECTS_IS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_SECTION))
#define OBJECTS_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_SECTION, ObjectsSectionClass))

typedef struct _ObjectsSection ObjectsSection;
typedef struct _ObjectsSectionClass ObjectsSectionClass;

struct _ViewsList {
	GtkEventBox parent_instance;
	ViewsListPrivate * priv;
};

struct _ViewsListClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsListPrivate {
	ObjectsProject* _project;
	GtkListBox* listbox;
	LayoutsSectionRow* inbox_section;
};

static gint ViewsList_private_offset;
static gpointer views_list_parent_class = NULL;

GType views_list_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsList, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
GType layouts_section_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsSectionRow, g_object_unref)
ViewsList* views_list_new (ObjectsProject* project);
ViewsList* views_list_construct (GType object_type,
                                 ObjectsProject* project);
void views_list_add_sections (ViewsList* self);
ObjectsProject* views_list_get_project (ViewsList* self);
LayoutsSectionRow* layouts_section_row_new_for_project (ObjectsProject* project);
LayoutsSectionRow* layouts_section_row_construct_for_project (GType object_type,
                                                              ObjectsProject* project);
GType objects_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsSection, g_object_unref)
GeeArrayList* objects_project_get_sections (ObjectsProject* self);
static void views_list_add_section (ViewsList* self,
                             ObjectsSection* section);
LayoutsSectionRow* layouts_section_row_new (ObjectsSection* section);
LayoutsSectionRow* layouts_section_row_construct (GType object_type,
                                                  ObjectsSection* section);
gint objects_section_get_section_order (ObjectsSection* self);
void views_list_prepare_new_item (ViewsList* self);
void layouts_section_row_prepare_new_item (LayoutsSectionRow* self);
static void views_list_set_project (ViewsList* self,
                             ObjectsProject* value);
static GObject * views_list_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties);
static void _views_list___lambda317_ (ViewsList* self,
                               ObjectsSection* section);
static void __views_list___lambda317__objects_project_section_added (ObjectsProject* _sender,
                                                              ObjectsSection* section,
                                                              gpointer self);
static void views_list_finalize (GObject * obj);
static GType views_list_get_type_once (void);
static void _vala_views_list_get_property (GObject * object,
                                    guint property_id,
                                    GValue * value,
                                    GParamSpec * pspec);
static void _vala_views_list_set_property (GObject * object,
                                    guint property_id,
                                    const GValue * value,
                                    GParamSpec * pspec);

static inline gpointer
views_list_get_instance_private (ViewsList* self)
{
	return G_STRUCT_MEMBER_P (self, ViewsList_private_offset);
}

ViewsList*
views_list_construct (GType object_type,
                      ObjectsProject* project)
{
	ViewsList * self = NULL;
#line 7 "../src/Views/List.vala"
	g_return_val_if_fail (project != NULL, NULL);
#line 8 "../src/Views/List.vala"
	self = (ViewsList*) g_object_new (object_type, "project", project, NULL);
#line 7 "../src/Views/List.vala"
	return self;
#line 151 "List.c"
}

ViewsList*
views_list_new (ObjectsProject* project)
{
#line 7 "../src/Views/List.vala"
	return views_list_construct (VIEWS_TYPE_LIST, project);
#line 159 "List.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 49 "../src/Views/List.vala"
	return self ? g_object_ref (self) : NULL;
#line 167 "List.c"
}

void
views_list_add_sections (ViewsList* self)
{
	GtkListBox* _tmp0_;
	GList* _tmp1_;
	ObjectsProject* _tmp3_;
	LayoutsSectionRow* _tmp4_;
	GtkListBox* _tmp5_;
	LayoutsSectionRow* _tmp6_;
#line 42 "../src/Views/List.vala"
	g_return_if_fail (self != NULL);
#line 43 "../src/Views/List.vala"
	_tmp0_ = self->priv->listbox;
#line 43 "../src/Views/List.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 185 "List.c"
	{
		GList* child_collection = NULL;
		GList* child_it = NULL;
#line 43 "../src/Views/List.vala"
		child_collection = _tmp1_;
#line 43 "../src/Views/List.vala"
		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
#line 193 "List.c"
			GtkWidget* child = NULL;
#line 43 "../src/Views/List.vala"
			child = (GtkWidget*) child_it->data;
#line 197 "List.c"
			{
				GtkWidget* _tmp2_;
#line 44 "../src/Views/List.vala"
				_tmp2_ = child;
#line 44 "../src/Views/List.vala"
				gtk_widget_destroy (_tmp2_);
#line 204 "List.c"
			}
		}
#line 43 "../src/Views/List.vala"
		(child_collection == NULL) ? NULL : (child_collection = (g_list_free (child_collection), NULL));
#line 209 "List.c"
	}
#line 47 "../src/Views/List.vala"
	_tmp3_ = self->priv->_project;
#line 47 "../src/Views/List.vala"
	_tmp4_ = layouts_section_row_new_for_project (_tmp3_);
#line 47 "../src/Views/List.vala"
	g_object_ref_sink (_tmp4_);
#line 47 "../src/Views/List.vala"
	_g_object_unref0 (self->priv->inbox_section);
#line 47 "../src/Views/List.vala"
	self->priv->inbox_section = _tmp4_;
#line 48 "../src/Views/List.vala"
	_tmp5_ = self->priv->listbox;
#line 48 "../src/Views/List.vala"
	_tmp6_ = self->priv->inbox_section;
#line 48 "../src/Views/List.vala"
	gtk_container_add ((GtkContainer*) _tmp5_, (GtkWidget*) _tmp6_);
#line 227 "List.c"
	{
		GeeArrayList* _section_list = NULL;
		ObjectsProject* _tmp7_;
		GeeArrayList* _tmp8_;
		GeeArrayList* _tmp9_;
		GeeArrayList* _tmp10_;
		gint _section_size = 0;
		GeeArrayList* _tmp11_;
		gint _tmp12_;
		gint _tmp13_;
		gint _section_index = 0;
#line 49 "../src/Views/List.vala"
		_tmp7_ = self->priv->_project;
#line 49 "../src/Views/List.vala"
		_tmp8_ = objects_project_get_sections (_tmp7_);
#line 49 "../src/Views/List.vala"
		_tmp9_ = _tmp8_;
#line 49 "../src/Views/List.vala"
		_tmp10_ = _g_object_ref0 (_tmp9_);
#line 49 "../src/Views/List.vala"
		_section_list = _tmp10_;
#line 49 "../src/Views/List.vala"
		_tmp11_ = _section_list;
#line 49 "../src/Views/List.vala"
		_tmp12_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp11_);
#line 49 "../src/Views/List.vala"
		_tmp13_ = _tmp12_;
#line 49 "../src/Views/List.vala"
		_section_size = _tmp13_;
#line 49 "../src/Views/List.vala"
		_section_index = -1;
#line 49 "../src/Views/List.vala"
		while (TRUE) {
#line 261 "List.c"
			gint _tmp14_;
			gint _tmp15_;
			ObjectsSection* section = NULL;
			GeeArrayList* _tmp16_;
			gpointer _tmp17_;
			ObjectsSection* _tmp18_;
#line 49 "../src/Views/List.vala"
			_section_index = _section_index + 1;
#line 49 "../src/Views/List.vala"
			_tmp14_ = _section_index;
#line 49 "../src/Views/List.vala"
			_tmp15_ = _section_size;
#line 49 "../src/Views/List.vala"
			if (!(_tmp14_ < _tmp15_)) {
#line 49 "../src/Views/List.vala"
				break;
#line 278 "List.c"
			}
#line 49 "../src/Views/List.vala"
			_tmp16_ = _section_list;
#line 49 "../src/Views/List.vala"
			_tmp17_ = gee_abstract_list_get ((GeeAbstractList*) _tmp16_, _section_index);
#line 49 "../src/Views/List.vala"
			section = (ObjectsSection*) _tmp17_;
#line 50 "../src/Views/List.vala"
			_tmp18_ = section;
#line 50 "../src/Views/List.vala"
			views_list_add_section (self, _tmp18_);
#line 49 "../src/Views/List.vala"
			_g_object_unref0 (section);
#line 292 "List.c"
		}
#line 49 "../src/Views/List.vala"
		_g_object_unref0 (_section_list);
#line 296 "List.c"
	}
}

static void
views_list_add_section (ViewsList* self,
                        ObjectsSection* section)
{
	LayoutsSectionRow* row = NULL;
	LayoutsSectionRow* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	GtkListBox* _tmp9_;
#line 54 "../src/Views/List.vala"
	g_return_if_fail (self != NULL);
#line 54 "../src/Views/List.vala"
	g_return_if_fail (section != NULL);
#line 55 "../src/Views/List.vala"
	_tmp0_ = layouts_section_row_new (section);
#line 55 "../src/Views/List.vala"
	g_object_ref_sink (_tmp0_);
#line 55 "../src/Views/List.vala"
	row = _tmp0_;
#line 57 "../src/Views/List.vala"
	_tmp1_ = objects_section_get_section_order (section);
#line 57 "../src/Views/List.vala"
	_tmp2_ = _tmp1_;
#line 57 "../src/Views/List.vala"
	if (_tmp2_ <= -1) {
#line 325 "List.c"
		GtkListBox* _tmp3_;
		LayoutsSectionRow* _tmp4_;
#line 58 "../src/Views/List.vala"
		_tmp3_ = self->priv->listbox;
#line 58 "../src/Views/List.vala"
		_tmp4_ = row;
#line 58 "../src/Views/List.vala"
		gtk_container_add ((GtkContainer*) _tmp3_, (GtkWidget*) _tmp4_);
#line 334 "List.c"
	} else {
		GtkListBox* _tmp5_;
		LayoutsSectionRow* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
#line 60 "../src/Views/List.vala"
		_tmp5_ = self->priv->listbox;
#line 60 "../src/Views/List.vala"
		_tmp6_ = row;
#line 60 "../src/Views/List.vala"
		_tmp7_ = objects_section_get_section_order (section);
#line 60 "../src/Views/List.vala"
		_tmp8_ = _tmp7_;
#line 60 "../src/Views/List.vala"
		gtk_list_box_insert (_tmp5_, (GtkWidget*) _tmp6_, _tmp8_);
#line 350 "List.c"
	}
#line 63 "../src/Views/List.vala"
	_tmp9_ = self->priv->listbox;
#line 63 "../src/Views/List.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp9_);
#line 54 "../src/Views/List.vala"
	_g_object_unref0 (row);
#line 358 "List.c"
}

void
views_list_prepare_new_item (ViewsList* self)
{
	LayoutsSectionRow* _tmp0_;
#line 66 "../src/Views/List.vala"
	g_return_if_fail (self != NULL);
#line 67 "../src/Views/List.vala"
	_tmp0_ = self->priv->inbox_section;
#line 67 "../src/Views/List.vala"
	layouts_section_row_prepare_new_item (_tmp0_);
#line 371 "List.c"
}

ObjectsProject*
views_list_get_project (ViewsList* self)
{
	ObjectsProject* result;
	ObjectsProject* _tmp0_;
#line 2 "../src/Views/List.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Views/List.vala"
	_tmp0_ = self->priv->_project;
#line 2 "../src/Views/List.vala"
	result = _tmp0_;
#line 2 "../src/Views/List.vala"
	return result;
#line 387 "List.c"
}

static void
views_list_set_project (ViewsList* self,
                        ObjectsProject* value)
{
	ObjectsProject* old_value;
#line 2 "../src/Views/List.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Views/List.vala"
	old_value = views_list_get_project (self);
#line 2 "../src/Views/List.vala"
	if (old_value != value) {
#line 401 "List.c"
		ObjectsProject* _tmp0_;
#line 2 "../src/Views/List.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 2 "../src/Views/List.vala"
		_g_object_unref0 (self->priv->_project);
#line 2 "../src/Views/List.vala"
		self->priv->_project = _tmp0_;
#line 2 "../src/Views/List.vala"
		g_object_notify_by_pspec ((GObject *) self, views_list_properties[VIEWS_LIST_PROJECT_PROPERTY]);
#line 411 "List.c"
	}
}

static void
_views_list___lambda317_ (ViewsList* self,
                          ObjectsSection* section)
{
#line 37 "../src/Views/List.vala"
	g_return_if_fail (section != NULL);
#line 38 "../src/Views/List.vala"
	views_list_add_section (self, section);
#line 423 "List.c"
}

static void
__views_list___lambda317__objects_project_section_added (ObjectsProject* _sender,
                                                         ObjectsSection* section,
                                                         gpointer self)
{
#line 37 "../src/Views/List.vala"
	_views_list___lambda317_ ((ViewsList*) self, section);
#line 433 "List.c"
}

static GObject *
views_list_constructor (GType type,
                        guint n_construct_properties,
                        GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsList * self;
	GtkListBox* _tmp0_ = NULL;
	GtkStyleContext* listbox_context = NULL;
	GtkListBox* _tmp1_;
	GtkStyleContext* _tmp2_;
	GtkStyleContext* _tmp3_;
	GtkStyleContext* _tmp4_;
	GtkGrid* listbox_grid = NULL;
	GtkGrid* _tmp5_;
	GtkGrid* _tmp6_;
	GtkListBox* _tmp7_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp8_ = NULL;
	GtkGrid* _tmp9_;
	GtkGrid* _tmp10_;
	GtkGrid* _tmp11_;
	ObjectsProject* _tmp12_;
#line 13 "../src/Views/List.vala"
	parent_class = G_OBJECT_CLASS (views_list_parent_class);
#line 13 "../src/Views/List.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 13 "../src/Views/List.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_LIST, ViewsList);
#line 14 "../src/Views/List.vala"
	_tmp0_ = (GtkListBox*) gtk_list_box_new ();
#line 14 "../src/Views/List.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp0_, GTK_ALIGN_START);
#line 14 "../src/Views/List.vala"
	gtk_list_box_set_activate_on_single_click (_tmp0_, TRUE);
#line 14 "../src/Views/List.vala"
	gtk_list_box_set_selection_mode (_tmp0_, GTK_SELECTION_SINGLE);
#line 14 "../src/Views/List.vala"
	g_object_set ((GtkWidget*) _tmp0_, "expand", TRUE, NULL);
#line 14 "../src/Views/List.vala"
	g_object_ref_sink (_tmp0_);
#line 14 "../src/Views/List.vala"
	_g_object_unref0 (self->priv->listbox);
#line 14 "../src/Views/List.vala"
	self->priv->listbox = _tmp0_;
#line 21 "../src/Views/List.vala"
	_tmp1_ = self->priv->listbox;
#line 21 "../src/Views/List.vala"
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) _tmp1_);
#line 21 "../src/Views/List.vala"
	listbox_context = _tmp2_;
#line 22 "../src/Views/List.vala"
	_tmp3_ = listbox_context;
#line 22 "../src/Views/List.vala"
	gtk_style_context_add_class (_tmp3_, "listbox-background");
#line 23 "../src/Views/List.vala"
	_tmp4_ = listbox_context;
#line 23 "../src/Views/List.vala"
	gtk_style_context_add_class (_tmp4_, "listbox-separator-12");
#line 25 "../src/Views/List.vala"
	_tmp5_ = (GtkGrid*) gtk_grid_new ();
#line 25 "../src/Views/List.vala"
	g_object_ref_sink (_tmp5_);
#line 25 "../src/Views/List.vala"
	listbox_grid = _tmp5_;
#line 26 "../src/Views/List.vala"
	_tmp6_ = listbox_grid;
#line 26 "../src/Views/List.vala"
	_tmp7_ = self->priv->listbox;
#line 26 "../src/Views/List.vala"
	gtk_container_add ((GtkContainer*) _tmp6_, (GtkWidget*) _tmp7_);
#line 28 "../src/Views/List.vala"
	_tmp8_ = (GtkGrid*) gtk_grid_new ();
#line 28 "../src/Views/List.vala"
	g_object_set ((GtkWidget*) _tmp8_, "expand", TRUE, NULL);
#line 28 "../src/Views/List.vala"
	g_object_ref_sink (_tmp8_);
#line 28 "../src/Views/List.vala"
	main_grid = _tmp8_;
#line 31 "../src/Views/List.vala"
	_tmp9_ = main_grid;
#line 31 "../src/Views/List.vala"
	_tmp10_ = listbox_grid;
#line 31 "../src/Views/List.vala"
	gtk_container_add ((GtkContainer*) _tmp9_, (GtkWidget*) _tmp10_);
#line 33 "../src/Views/List.vala"
	_tmp11_ = main_grid;
#line 33 "../src/Views/List.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp11_);
#line 35 "../src/Views/List.vala"
	views_list_add_sections (self);
#line 37 "../src/Views/List.vala"
	_tmp12_ = self->priv->_project;
#line 37 "../src/Views/List.vala"
	g_signal_connect_object (_tmp12_, "section-added", (GCallback) __views_list___lambda317__objects_project_section_added, self, 0);
#line 13 "../src/Views/List.vala"
	_g_object_unref0 (main_grid);
#line 13 "../src/Views/List.vala"
	_g_object_unref0 (listbox_grid);
#line 13 "../src/Views/List.vala"
	return obj;
#line 538 "List.c"
}

static void
views_list_class_init (ViewsListClass * klass,
                       gpointer klass_data)
{
#line 1 "../src/Views/List.vala"
	views_list_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Views/List.vala"
	g_type_class_adjust_private_offset (klass, &ViewsList_private_offset);
#line 1 "../src/Views/List.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_views_list_get_property;
#line 1 "../src/Views/List.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_views_list_set_property;
#line 1 "../src/Views/List.vala"
	G_OBJECT_CLASS (klass)->constructor = views_list_constructor;
#line 1 "../src/Views/List.vala"
	G_OBJECT_CLASS (klass)->finalize = views_list_finalize;
#line 1 "../src/Views/List.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_LIST_PROJECT_PROPERTY, views_list_properties[VIEWS_LIST_PROJECT_PROPERTY] = g_param_spec_object ("project", "project", "project", OBJECTS_TYPE_PROJECT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 559 "List.c"
}

static void
views_list_instance_init (ViewsList * self,
                          gpointer klass)
{
#line 1 "../src/Views/List.vala"
	self->priv = views_list_get_instance_private (self);
#line 568 "List.c"
}

static void
views_list_finalize (GObject * obj)
{
	ViewsList * self;
#line 1 "../src/Views/List.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_LIST, ViewsList);
#line 2 "../src/Views/List.vala"
	_g_object_unref0 (self->priv->_project);
#line 4 "../src/Views/List.vala"
	_g_object_unref0 (self->priv->listbox);
#line 5 "../src/Views/List.vala"
	_g_object_unref0 (self->priv->inbox_section);
#line 1 "../src/Views/List.vala"
	G_OBJECT_CLASS (views_list_parent_class)->finalize (obj);
#line 585 "List.c"
}

static GType
views_list_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ViewsListClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_list_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsList), 0, (GInstanceInitFunc) views_list_instance_init, NULL };
	GType views_list_type_id;
	views_list_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsList", &g_define_type_info, 0);
	ViewsList_private_offset = g_type_add_instance_private (views_list_type_id, sizeof (ViewsListPrivate));
	return views_list_type_id;
}

GType
views_list_get_type (void)
{
	static volatile gsize views_list_type_id__volatile = 0;
	if (g_once_init_enter (&views_list_type_id__volatile)) {
		GType views_list_type_id;
		views_list_type_id = views_list_get_type_once ();
		g_once_init_leave (&views_list_type_id__volatile, views_list_type_id);
	}
	return views_list_type_id__volatile;
}

static void
_vala_views_list_get_property (GObject * object,
                               guint property_id,
                               GValue * value,
                               GParamSpec * pspec)
{
	ViewsList * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_LIST, ViewsList);
#line 1 "../src/Views/List.vala"
	switch (property_id) {
#line 1 "../src/Views/List.vala"
		case VIEWS_LIST_PROJECT_PROPERTY:
#line 1 "../src/Views/List.vala"
		g_value_set_object (value, views_list_get_project (self));
#line 1 "../src/Views/List.vala"
		break;
#line 626 "List.c"
		default:
#line 1 "../src/Views/List.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/List.vala"
		break;
#line 632 "List.c"
	}
}

static void
_vala_views_list_set_property (GObject * object,
                               guint property_id,
                               const GValue * value,
                               GParamSpec * pspec)
{
	ViewsList * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_LIST, ViewsList);
#line 1 "../src/Views/List.vala"
	switch (property_id) {
#line 1 "../src/Views/List.vala"
		case VIEWS_LIST_PROJECT_PROPERTY:
#line 1 "../src/Views/List.vala"
		views_list_set_project (self, g_value_get_object (value));
#line 1 "../src/Views/List.vala"
		break;
#line 652 "List.c"
		default:
#line 1 "../src/Views/List.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/List.vala"
		break;
#line 658 "List.c"
	}
}

