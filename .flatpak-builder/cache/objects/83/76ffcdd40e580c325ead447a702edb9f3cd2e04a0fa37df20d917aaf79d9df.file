/* Settings.c generated by valac 0.50.10, the Vala compiler
 * generated from Settings.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <handy.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gtk/gtk.h>
#include <glib/gi18n-lib.h>
#include <gio/gio.h>
#include <gdk/gdk.h>

#define DIALOGS_SETTINGS_TYPE_SETTINGS (dialogs_settings_settings_get_type ())
#define DIALOGS_SETTINGS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS, DialogsSettingsSettings))
#define DIALOGS_SETTINGS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_SETTINGS_TYPE_SETTINGS, DialogsSettingsSettingsClass))
#define DIALOGS_SETTINGS_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS))
#define DIALOGS_SETTINGS_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_SETTINGS_TYPE_SETTINGS))
#define DIALOGS_SETTINGS_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS, DialogsSettingsSettingsClass))

typedef struct _DialogsSettingsSettings DialogsSettingsSettings;
typedef struct _DialogsSettingsSettingsClass DialogsSettingsSettingsClass;
typedef struct _DialogsSettingsSettingsPrivate DialogsSettingsSettingsPrivate;
enum  {
	DIALOGS_SETTINGS_SETTINGS_0_PROPERTY,
	DIALOGS_SETTINGS_SETTINGS_VIEW_PROPERTY,
	DIALOGS_SETTINGS_SETTINGS_NUM_PROPERTIES
};
static GParamSpec* dialogs_settings_settings_properties[DIALOGS_SETTINGS_SETTINGS_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define DIALOGS_SETTINGS_TYPE_SETTINGS_ITEM (dialogs_settings_settings_item_get_type ())
#define DIALOGS_SETTINGS_SETTINGS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_ITEM, DialogsSettingsSettingsItem))
#define DIALOGS_SETTINGS_SETTINGS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_SETTINGS_TYPE_SETTINGS_ITEM, DialogsSettingsSettingsItemClass))
#define DIALOGS_SETTINGS_IS_SETTINGS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_ITEM))
#define DIALOGS_SETTINGS_IS_SETTINGS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_SETTINGS_TYPE_SETTINGS_ITEM))
#define DIALOGS_SETTINGS_SETTINGS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_ITEM, DialogsSettingsSettingsItemClass))

typedef struct _DialogsSettingsSettingsItem DialogsSettingsSettingsItem;
typedef struct _DialogsSettingsSettingsItemClass DialogsSettingsSettingsItemClass;
typedef struct _Block37Data Block37Data;

#define DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER (dialogs_settings_settings_header_get_type ())
#define DIALOGS_SETTINGS_SETTINGS_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, DialogsSettingsSettingsHeader))
#define DIALOGS_SETTINGS_SETTINGS_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, DialogsSettingsSettingsHeaderClass))
#define DIALOGS_SETTINGS_IS_SETTINGS_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER))
#define DIALOGS_SETTINGS_IS_SETTINGS_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER))
#define DIALOGS_SETTINGS_SETTINGS_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_HEADER, DialogsSettingsSettingsHeaderClass))

typedef struct _DialogsSettingsSettingsHeader DialogsSettingsSettingsHeader;
typedef struct _DialogsSettingsSettingsHeaderClass DialogsSettingsSettingsHeaderClass;

#define DIALOGS_SETTINGS_TYPE_SETTINGS_CONTENT (dialogs_settings_settings_content_get_type ())
#define DIALOGS_SETTINGS_SETTINGS_CONTENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_CONTENT, DialogsSettingsSettingsContent))
#define DIALOGS_SETTINGS_SETTINGS_CONTENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_SETTINGS_TYPE_SETTINGS_CONTENT, DialogsSettingsSettingsContentClass))
#define DIALOGS_SETTINGS_IS_SETTINGS_CONTENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_CONTENT))
#define DIALOGS_SETTINGS_IS_SETTINGS_CONTENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_SETTINGS_TYPE_SETTINGS_CONTENT))
#define DIALOGS_SETTINGS_SETTINGS_CONTENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_SETTINGS_TYPE_SETTINGS_CONTENT, DialogsSettingsSettingsContentClass))

typedef struct _DialogsSettingsSettingsContent DialogsSettingsSettingsContent;
typedef struct _DialogsSettingsSettingsContentClass DialogsSettingsSettingsContentClass;

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define TYPE_PLANNER (planner_get_type ())
#define PLANNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PLANNER, Planner))
#define PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_PLANNER, PlannerClass))
#define IS_PLANNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PLANNER))
#define IS_PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_PLANNER))
#define PLANNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PLANNER, PlannerClass))

typedef struct _Planner Planner;
typedef struct _PlannerClass PlannerClass;
typedef struct _PlannerPrivate PlannerPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;

struct _DialogsSettingsSettings {
	HdyWindow parent_instance;
	DialogsSettingsSettingsPrivate * priv;
	GeeHashMap* views;
};

struct _DialogsSettingsSettingsClass {
	HdyWindowClass parent_class;
};

struct _DialogsSettingsSettingsPrivate {
	gchar* _view;
	GtkStack* main_stack;
};

struct _Block37Data {
	int _ref_count_;
	DialogsSettingsSettings* self;
	DialogsSettingsSettingsItem* appearance_item;
};

struct _Planner {
	GtkApplication parent_instance;
	PlannerPrivate * priv;
	MainWindow* main_window;
};

struct _PlannerClass {
	GtkApplicationClass parent_class;
};

static gint DialogsSettingsSettings_private_offset;
static gpointer dialogs_settings_settings_parent_class = NULL;
extern GSettings* planner_settings;

GType dialogs_settings_settings_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsSettingsSettings, g_object_unref)
DialogsSettingsSettings* dialogs_settings_settings_new (const gchar* view);
DialogsSettingsSettings* dialogs_settings_settings_construct (GType object_type,
                                                              const gchar* view);
static GtkWidget* dialogs_settings_settings_get_settings_view (DialogsSettingsSettings* self);
GType dialogs_settings_settings_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsSettingsSettingsItem, g_object_unref)
static Block37Data* block37_data_ref (Block37Data* _data37_);
static void block37_data_unref (void * _userdata_);
GType dialogs_settings_settings_header_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsSettingsSettingsHeader, g_object_unref)
DialogsSettingsSettingsHeader* dialogs_settings_settings_header_new (const gchar* title_header,
                                                                     gboolean show_back_button);
DialogsSettingsSettingsHeader* dialogs_settings_settings_header_construct (GType object_type,
                                                                           const gchar* title_header,
                                                                           gboolean show_back_button);
GType dialogs_settings_settings_content_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsSettingsSettingsContent, g_object_unref)
DialogsSettingsSettingsContent* dialogs_settings_settings_content_new (const gchar* title);
DialogsSettingsSettingsContent* dialogs_settings_settings_content_construct (GType object_type,
                                                                             const gchar* title);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gchar* util_get_theme_name (Util* self);
DialogsSettingsSettingsItem* dialogs_settings_settings_item_new (const gchar* icon,
                                                                 const gchar* title,
                                                                 const gchar* description);
DialogsSettingsSettingsItem* dialogs_settings_settings_item_construct (GType object_type,
                                                                       const gchar* icon,
                                                                       const gchar* title,
                                                                       const gchar* description);
void dialogs_settings_settings_content_add_child (DialogsSettingsSettingsContent* self,
                                                  GtkWidget* child);
static void __lambda244_ (DialogsSettingsSettings* self);
void dialogs_settings_settings_hide_destroy (DialogsSettingsSettings* self);
static void ___lambda244__dialogs_settings_settings_header_done_activated (DialogsSettingsSettingsHeader* _sender,
                                                                    gpointer self);
static void __lambda246_ (DialogsSettingsSettings* self);
static void dialogs_settings_settings_go_setting_view (DialogsSettingsSettings* self,
                                                const gchar* view);
static void ___lambda246__dialogs_settings_settings_item_activated (DialogsSettingsSettingsItem* _sender,
                                                             gpointer self);
static void __lambda252_ (DialogsSettingsSettings* self);
static void ___lambda252__dialogs_settings_settings_item_activated (DialogsSettingsSettingsItem* _sender,
                                                             gpointer self);
static void __lambda253_ (DialogsSettingsSettings* self);
static void ___lambda253__dialogs_settings_settings_item_activated (DialogsSettingsSettingsItem* _sender,
                                                             gpointer self);
static void __lambda254_ (DialogsSettingsSettings* self);
static void ___lambda254__dialogs_settings_settings_item_activated (DialogsSettingsSettingsItem* _sender,
                                                             gpointer self);
static void __lambda255_ (Block37Data* _data37_,
                   const gchar* key);
void dialogs_settings_settings_item_set_description (DialogsSettingsSettingsItem* self,
                                                     const gchar* value);
static void ___lambda255__g_settings_changed (GSettings* _sender,
                                       const gchar* key,
                                       gpointer self);
static GtkWidget* dialogs_settings_settings_get_appearance_view (DialogsSettingsSettings* self);
static void __lambda247_ (DialogsSettingsSettings* self);
static void ___lambda247__dialogs_settings_settings_header_done_activated (DialogsSettingsSettingsHeader* _sender,
                                                                    gpointer self);
static void __lambda248_ (DialogsSettingsSettings* self);
static void ___lambda248__dialogs_settings_settings_header_back_activated (DialogsSettingsSettingsHeader* _sender,
                                                                    gpointer self);
static void __lambda249_ (DialogsSettingsSettings* self);
static void ___lambda249__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                              gpointer self);
static void __lambda250_ (DialogsSettingsSettings* self);
static void ___lambda250__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                              gpointer self);
static void __lambda251_ (DialogsSettingsSettings* self);
static void ___lambda251__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                              gpointer self);
static GtkWidget* dialogs_settings_settings_get_setting_view (DialogsSettingsSettings* self,
                                                       const gchar* view);
static gboolean __lambda245_ (DialogsSettingsSettings* self);
static gboolean ___lambda245__gsource_func (gpointer self);
const gchar* dialogs_settings_settings_get_view (DialogsSettingsSettings* self);
static void dialogs_settings_settings_set_view (DialogsSettingsSettings* self,
                                         const gchar* value);
static GObject * dialogs_settings_settings_constructor (GType type,
                                                 guint n_construct_properties,
                                                 GObjectConstructParam * construct_properties);
GType planner_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Planner, g_object_unref)
Planner* planner_get_instance (void);
GType main_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MainWindow, g_object_unref)
static gboolean _dialogs_settings_settings___lambda256_ (DialogsSettingsSettings* self);
static gboolean __dialogs_settings_settings___lambda256__gsource_func (gpointer self);
static gboolean _dialogs_settings_settings___lambda257_ (DialogsSettingsSettings* self);
static gboolean __dialogs_settings_settings___lambda257__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                              GdkEventFocus* event,
                                                                              gpointer self);
static gboolean _dialogs_settings_settings___lambda258_ (DialogsSettingsSettings* self,
                                                  GdkEventKey* key);
static gboolean __dialogs_settings_settings___lambda258__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                                GdkEventKey* event,
                                                                                gpointer self);
static void dialogs_settings_settings_finalize (GObject * obj);
static GType dialogs_settings_settings_get_type_once (void);
static void _vala_dialogs_settings_settings_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);
static void _vala_dialogs_settings_settings_set_property (GObject * object,
                                                   guint property_id,
                                                   const GValue * value,
                                                   GParamSpec * pspec);

static inline gpointer
dialogs_settings_settings_get_instance_private (DialogsSettingsSettings* self)
{
	return G_STRUCT_MEMBER_P (self, DialogsSettingsSettings_private_offset);
}

DialogsSettingsSettings*
dialogs_settings_settings_construct (GType object_type,
                                     const gchar* view)
{
	DialogsSettingsSettings * self = NULL;
#line 28 "../src/Dialogs/Settings/Settings.vala"
	g_return_val_if_fail (view != NULL, NULL);
#line 29 "../src/Dialogs/Settings/Settings.vala"
	self = (DialogsSettingsSettings*) g_object_new (object_type, "view", view, "deletable", TRUE, "resizable", TRUE, "window-position", GTK_WIN_POS_CENTER_ON_PARENT, "modal", TRUE, "width-request", 400, "height-request", 500, NULL);
#line 28 "../src/Dialogs/Settings/Settings.vala"
	return self;
#line 284 "Settings.c"
}

DialogsSettingsSettings*
dialogs_settings_settings_new (const gchar* view)
{
#line 28 "../src/Dialogs/Settings/Settings.vala"
	return dialogs_settings_settings_construct (DIALOGS_SETTINGS_TYPE_SETTINGS, view);
#line 292 "Settings.c"
}

static Block37Data*
block37_data_ref (Block37Data* _data37_)
{
#line 80 "../src/Dialogs/Settings/Settings.vala"
	g_atomic_int_inc (&_data37_->_ref_count_);
#line 80 "../src/Dialogs/Settings/Settings.vala"
	return _data37_;
#line 302 "Settings.c"
}

static void
block37_data_unref (void * _userdata_)
{
	Block37Data* _data37_;
	_data37_ = (Block37Data*) _userdata_;
#line 80 "../src/Dialogs/Settings/Settings.vala"
	if (g_atomic_int_dec_and_test (&_data37_->_ref_count_)) {
#line 312 "Settings.c"
		DialogsSettingsSettings* self;
#line 80 "../src/Dialogs/Settings/Settings.vala"
		self = _data37_->self;
#line 80 "../src/Dialogs/Settings/Settings.vala"
		_g_object_unref0 (_data37_->appearance_item);
#line 80 "../src/Dialogs/Settings/Settings.vala"
		_g_object_unref0 (self);
#line 80 "../src/Dialogs/Settings/Settings.vala"
		g_slice_free (Block37Data, _data37_);
#line 322 "Settings.c"
	}
}

static void
__lambda244_ (DialogsSettingsSettings* self)
{
#line 128 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_hide_destroy (self);
#line 331 "Settings.c"
}

static void
___lambda244__dialogs_settings_settings_header_done_activated (DialogsSettingsSettingsHeader* _sender,
                                                               gpointer self)
{
#line 127 "../src/Dialogs/Settings/Settings.vala"
	__lambda244_ ((DialogsSettingsSettings*) self);
#line 340 "Settings.c"
}

static void
__lambda246_ (DialogsSettingsSettings* self)
{
#line 132 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_go_setting_view (self, "appearance");
#line 348 "Settings.c"
}

static void
___lambda246__dialogs_settings_settings_item_activated (DialogsSettingsSettingsItem* _sender,
                                                        gpointer self)
{
#line 131 "../src/Dialogs/Settings/Settings.vala"
	__lambda246_ ((DialogsSettingsSettings*) self);
#line 357 "Settings.c"
}

static void
__lambda252_ (DialogsSettingsSettings* self)
{
	GError* _inner_error0_ = NULL;
	{
#line 137 "../src/Dialogs/Settings/Settings.vala"
		g_app_info_launch_default_for_uri ("https://github.com/alainm23/planner/issues", NULL, &_inner_error0_);
#line 137 "../src/Dialogs/Settings/Settings.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 369 "Settings.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp0_;
		const gchar* _tmp1_;
#line 136 "../src/Dialogs/Settings/Settings.vala"
		e = _inner_error0_;
#line 136 "../src/Dialogs/Settings/Settings.vala"
		_inner_error0_ = NULL;
#line 139 "../src/Dialogs/Settings/Settings.vala"
		_tmp0_ = e;
#line 139 "../src/Dialogs/Settings/Settings.vala"
		_tmp1_ = _tmp0_->message;
#line 139 "../src/Dialogs/Settings/Settings.vala"
		g_warning ("Settings.vala:139: %s\n", _tmp1_);
#line 136 "../src/Dialogs/Settings/Settings.vala"
		_g_error_free0 (e);
#line 391 "Settings.c"
	}
	__finally0:
#line 136 "../src/Dialogs/Settings/Settings.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 136 "../src/Dialogs/Settings/Settings.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 136 "../src/Dialogs/Settings/Settings.vala"
		g_clear_error (&_inner_error0_);
#line 136 "../src/Dialogs/Settings/Settings.vala"
		return;
#line 402 "Settings.c"
	}
}

static void
___lambda252__dialogs_settings_settings_item_activated (DialogsSettingsSettingsItem* _sender,
                                                        gpointer self)
{
#line 135 "../src/Dialogs/Settings/Settings.vala"
	__lambda252_ ((DialogsSettingsSettings*) self);
#line 412 "Settings.c"
}

static void
__lambda253_ (DialogsSettingsSettings* self)
{
	GError* _inner_error0_ = NULL;
	{
#line 145 "../src/Dialogs/Settings/Settings.vala"
		g_app_info_launch_default_for_uri ("https://twitter.com/planner_todo", NULL, &_inner_error0_);
#line 145 "../src/Dialogs/Settings/Settings.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 424 "Settings.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp0_;
		const gchar* _tmp1_;
#line 144 "../src/Dialogs/Settings/Settings.vala"
		e = _inner_error0_;
#line 144 "../src/Dialogs/Settings/Settings.vala"
		_inner_error0_ = NULL;
#line 147 "../src/Dialogs/Settings/Settings.vala"
		_tmp0_ = e;
#line 147 "../src/Dialogs/Settings/Settings.vala"
		_tmp1_ = _tmp0_->message;
#line 147 "../src/Dialogs/Settings/Settings.vala"
		g_warning ("Settings.vala:147: %s\n", _tmp1_);
#line 144 "../src/Dialogs/Settings/Settings.vala"
		_g_error_free0 (e);
#line 446 "Settings.c"
	}
	__finally0:
#line 144 "../src/Dialogs/Settings/Settings.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 144 "../src/Dialogs/Settings/Settings.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 144 "../src/Dialogs/Settings/Settings.vala"
		g_clear_error (&_inner_error0_);
#line 144 "../src/Dialogs/Settings/Settings.vala"
		return;
#line 457 "Settings.c"
	}
}

static void
___lambda253__dialogs_settings_settings_item_activated (DialogsSettingsSettingsItem* _sender,
                                                        gpointer self)
{
#line 143 "../src/Dialogs/Settings/Settings.vala"
	__lambda253_ ((DialogsSettingsSettings*) self);
#line 467 "Settings.c"
}

static void
__lambda254_ (DialogsSettingsSettings* self)
{
	GError* _inner_error0_ = NULL;
	{
#line 153 "../src/Dialogs/Settings/Settings.vala"
		g_app_info_launch_default_for_uri ("https://useplanner.com/support/", NULL, &_inner_error0_);
#line 153 "../src/Dialogs/Settings/Settings.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 479 "Settings.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp0_;
		const gchar* _tmp1_;
#line 152 "../src/Dialogs/Settings/Settings.vala"
		e = _inner_error0_;
#line 152 "../src/Dialogs/Settings/Settings.vala"
		_inner_error0_ = NULL;
#line 155 "../src/Dialogs/Settings/Settings.vala"
		_tmp0_ = e;
#line 155 "../src/Dialogs/Settings/Settings.vala"
		_tmp1_ = _tmp0_->message;
#line 155 "../src/Dialogs/Settings/Settings.vala"
		g_warning ("Settings.vala:155: %s\n", _tmp1_);
#line 152 "../src/Dialogs/Settings/Settings.vala"
		_g_error_free0 (e);
#line 501 "Settings.c"
	}
	__finally0:
#line 152 "../src/Dialogs/Settings/Settings.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 152 "../src/Dialogs/Settings/Settings.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 152 "../src/Dialogs/Settings/Settings.vala"
		g_clear_error (&_inner_error0_);
#line 152 "../src/Dialogs/Settings/Settings.vala"
		return;
#line 512 "Settings.c"
	}
}

static void
___lambda254__dialogs_settings_settings_item_activated (DialogsSettingsSettingsItem* _sender,
                                                        gpointer self)
{
#line 151 "../src/Dialogs/Settings/Settings.vala"
	__lambda254_ ((DialogsSettingsSettings*) self);
#line 522 "Settings.c"
}

static void
__lambda255_ (Block37Data* _data37_,
              const gchar* key)
{
	DialogsSettingsSettings* self;
#line 159 "../src/Dialogs/Settings/Settings.vala"
	self = _data37_->self;
#line 159 "../src/Dialogs/Settings/Settings.vala"
	g_return_if_fail (key != NULL);
#line 160 "../src/Dialogs/Settings/Settings.vala"
	if (g_strcmp0 (key, "appearance") == 0) {
#line 536 "Settings.c"
		Util* _tmp0_;
		Util* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
#line 161 "../src/Dialogs/Settings/Settings.vala"
		_tmp0_ = util_get_default ();
#line 161 "../src/Dialogs/Settings/Settings.vala"
		_tmp1_ = _tmp0_;
#line 161 "../src/Dialogs/Settings/Settings.vala"
		_tmp2_ = util_get_theme_name (_tmp1_);
#line 161 "../src/Dialogs/Settings/Settings.vala"
		_tmp3_ = _tmp2_;
#line 161 "../src/Dialogs/Settings/Settings.vala"
		dialogs_settings_settings_item_set_description (_data37_->appearance_item, _tmp3_);
#line 161 "../src/Dialogs/Settings/Settings.vala"
		_g_free0 (_tmp3_);
#line 161 "../src/Dialogs/Settings/Settings.vala"
		_g_object_unref0 (_tmp1_);
#line 555 "Settings.c"
	}
}

static void
___lambda255__g_settings_changed (GSettings* _sender,
                                  const gchar* key,
                                  gpointer self)
{
#line 159 "../src/Dialogs/Settings/Settings.vala"
	__lambda255_ (self, key);
#line 566 "Settings.c"
}

static GtkWidget*
dialogs_settings_settings_get_settings_view (DialogsSettingsSettings* self)
{
	Block37Data* _data37_;
	DialogsSettingsSettingsHeader* settings_header = NULL;
	DialogsSettingsSettingsHeader* _tmp0_;
	DialogsSettingsSettingsContent* general_content = NULL;
	DialogsSettingsSettingsContent* _tmp1_;
	Util* _tmp2_;
	Util* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	DialogsSettingsSettingsItem* _tmp6_;
	DialogsSettingsSettingsItem* _tmp7_;
	DialogsSettingsSettingsContent* contact_content = NULL;
	DialogsSettingsSettingsContent* _tmp8_;
	DialogsSettingsSettingsItem* mail_item = NULL;
	DialogsSettingsSettingsItem* _tmp9_;
	DialogsSettingsSettingsItem* twitter_item = NULL;
	DialogsSettingsSettingsItem* _tmp10_;
	DialogsSettingsSettingsItem* support_item = NULL;
	DialogsSettingsSettingsItem* _tmp11_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp12_ = NULL;
	GSettings* _tmp13_;
	GtkWidget* result = NULL;
#line 80 "../src/Dialogs/Settings/Settings.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 80 "../src/Dialogs/Settings/Settings.vala"
	_data37_ = g_slice_new0 (Block37Data);
#line 80 "../src/Dialogs/Settings/Settings.vala"
	_data37_->_ref_count_ = 1;
#line 80 "../src/Dialogs/Settings/Settings.vala"
	_data37_->self = g_object_ref (self);
#line 81 "../src/Dialogs/Settings/Settings.vala"
	_tmp0_ = dialogs_settings_settings_header_new (_ ("Settings"), FALSE);
#line 81 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp0_);
#line 81 "../src/Dialogs/Settings/Settings.vala"
	settings_header = _tmp0_;
#line 83 "../src/Dialogs/Settings/Settings.vala"
	_tmp1_ = dialogs_settings_settings_content_new (_ ("General"));
#line 83 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp1_);
#line 83 "../src/Dialogs/Settings/Settings.vala"
	general_content = _tmp1_;
#line 85 "../src/Dialogs/Settings/Settings.vala"
	_tmp2_ = util_get_default ();
#line 85 "../src/Dialogs/Settings/Settings.vala"
	_tmp3_ = _tmp2_;
#line 85 "../src/Dialogs/Settings/Settings.vala"
	_tmp4_ = util_get_theme_name (_tmp3_);
#line 85 "../src/Dialogs/Settings/Settings.vala"
	_tmp5_ = _tmp4_;
#line 85 "../src/Dialogs/Settings/Settings.vala"
	_tmp6_ = dialogs_settings_settings_item_new ("planner-appearance", _ ("Appearance"), _tmp5_);
#line 85 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp6_);
#line 85 "../src/Dialogs/Settings/Settings.vala"
	_tmp7_ = _tmp6_;
#line 85 "../src/Dialogs/Settings/Settings.vala"
	_g_free0 (_tmp5_);
#line 85 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (_tmp3_);
#line 85 "../src/Dialogs/Settings/Settings.vala"
	_data37_->appearance_item = _tmp7_;
#line 91 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_content_add_child (general_content, (GtkWidget*) _data37_->appearance_item);
#line 93 "../src/Dialogs/Settings/Settings.vala"
	_tmp8_ = dialogs_settings_settings_content_new (_ ("Contact us"));
#line 93 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp8_);
#line 93 "../src/Dialogs/Settings/Settings.vala"
	contact_content = _tmp8_;
#line 95 "../src/Dialogs/Settings/Settings.vala"
	_tmp9_ = dialogs_settings_settings_item_new ("planner-mail", _ ("Contact us"), _ ("Request a feature or ask us a question."));
#line 95 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp9_);
#line 95 "../src/Dialogs/Settings/Settings.vala"
	mail_item = _tmp9_;
#line 101 "../src/Dialogs/Settings/Settings.vala"
	_tmp10_ = dialogs_settings_settings_item_new ("planner-annotation-dots", _ ("Twitter"), _ ("Follow us on."));
#line 101 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp10_);
#line 101 "../src/Dialogs/Settings/Settings.vala"
	twitter_item = _tmp10_;
#line 107 "../src/Dialogs/Settings/Settings.vala"
	_tmp11_ = dialogs_settings_settings_item_new ("planner-heart", _ ("Support & Credits"), _ ("Support us."));
#line 107 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp11_);
#line 107 "../src/Dialogs/Settings/Settings.vala"
	support_item = _tmp11_;
#line 113 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_content_add_child (contact_content, (GtkWidget*) mail_item);
#line 114 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_content_add_child (contact_content, (GtkWidget*) twitter_item);
#line 115 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_content_add_child (contact_content, (GtkWidget*) support_item);
#line 117 "../src/Dialogs/Settings/Settings.vala"
	_tmp12_ = (GtkGrid*) gtk_grid_new ();
#line 117 "../src/Dialogs/Settings/Settings.vala"
	g_object_set ((GtkWidget*) _tmp12_, "expand", TRUE, NULL);
#line 117 "../src/Dialogs/Settings/Settings.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp12_, GTK_ORIENTATION_VERTICAL);
#line 117 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp12_, GTK_ALIGN_START);
#line 117 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp12_);
#line 117 "../src/Dialogs/Settings/Settings.vala"
	main_grid = _tmp12_;
#line 123 "../src/Dialogs/Settings/Settings.vala"
	gtk_container_add ((GtkContainer*) main_grid, (GtkWidget*) settings_header);
#line 124 "../src/Dialogs/Settings/Settings.vala"
	gtk_container_add ((GtkContainer*) main_grid, (GtkWidget*) general_content);
#line 125 "../src/Dialogs/Settings/Settings.vala"
	gtk_container_add ((GtkContainer*) main_grid, (GtkWidget*) contact_content);
#line 127 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object (settings_header, "done-activated", (GCallback) ___lambda244__dialogs_settings_settings_header_done_activated, self, 0);
#line 131 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object (_data37_->appearance_item, "activated", (GCallback) ___lambda246__dialogs_settings_settings_item_activated, self, 0);
#line 135 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object (mail_item, "activated", (GCallback) ___lambda252__dialogs_settings_settings_item_activated, self, 0);
#line 143 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object (twitter_item, "activated", (GCallback) ___lambda253__dialogs_settings_settings_item_activated, self, 0);
#line 151 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object (support_item, "activated", (GCallback) ___lambda254__dialogs_settings_settings_item_activated, self, 0);
#line 159 "../src/Dialogs/Settings/Settings.vala"
	_tmp13_ = planner_settings;
#line 159 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_data (_tmp13_, "changed", (GCallback) ___lambda255__g_settings_changed, block37_data_ref (_data37_), (GClosureNotify) block37_data_unref, 0);
#line 165 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_show_all ((GtkWidget*) main_grid);
#line 166 "../src/Dialogs/Settings/Settings.vala"
	result = (GtkWidget*) main_grid;
#line 166 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (support_item);
#line 166 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (twitter_item);
#line 166 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (mail_item);
#line 166 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (contact_content);
#line 166 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (general_content);
#line 166 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (settings_header);
#line 166 "../src/Dialogs/Settings/Settings.vala"
	block37_data_unref (_data37_);
#line 166 "../src/Dialogs/Settings/Settings.vala"
	_data37_ = NULL;
#line 166 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 721 "Settings.c"
}

static void
__lambda247_ (DialogsSettingsSettings* self)
{
#line 214 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_hide_destroy (self);
#line 729 "Settings.c"
}

static void
___lambda247__dialogs_settings_settings_header_done_activated (DialogsSettingsSettingsHeader* _sender,
                                                               gpointer self)
{
#line 213 "../src/Dialogs/Settings/Settings.vala"
	__lambda247_ ((DialogsSettingsSettings*) self);
#line 738 "Settings.c"
}

static void
__lambda248_ (DialogsSettingsSettings* self)
{
#line 218 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_go_setting_view (self, "settings");
#line 746 "Settings.c"
}

static void
___lambda248__dialogs_settings_settings_header_back_activated (DialogsSettingsSettingsHeader* _sender,
                                                               gpointer self)
{
#line 217 "../src/Dialogs/Settings/Settings.vala"
	__lambda248_ ((DialogsSettingsSettings*) self);
#line 755 "Settings.c"
}

static void
__lambda249_ (DialogsSettingsSettings* self)
{
	GSettings* _tmp0_;
#line 222 "../src/Dialogs/Settings/Settings.vala"
	_tmp0_ = planner_settings;
#line 222 "../src/Dialogs/Settings/Settings.vala"
	g_settings_set_enum (_tmp0_, "appearance", 0);
#line 766 "Settings.c"
}

static void
___lambda249__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                         gpointer self)
{
#line 221 "../src/Dialogs/Settings/Settings.vala"
	__lambda249_ ((DialogsSettingsSettings*) self);
#line 775 "Settings.c"
}

static void
__lambda250_ (DialogsSettingsSettings* self)
{
	GSettings* _tmp0_;
#line 226 "../src/Dialogs/Settings/Settings.vala"
	_tmp0_ = planner_settings;
#line 226 "../src/Dialogs/Settings/Settings.vala"
	g_settings_set_enum (_tmp0_, "appearance", 1);
#line 786 "Settings.c"
}

static void
___lambda250__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                         gpointer self)
{
#line 225 "../src/Dialogs/Settings/Settings.vala"
	__lambda250_ ((DialogsSettingsSettings*) self);
#line 795 "Settings.c"
}

static void
__lambda251_ (DialogsSettingsSettings* self)
{
	GSettings* _tmp0_;
#line 230 "../src/Dialogs/Settings/Settings.vala"
	_tmp0_ = planner_settings;
#line 230 "../src/Dialogs/Settings/Settings.vala"
	g_settings_set_enum (_tmp0_, "appearance", 2);
#line 806 "Settings.c"
}

static void
___lambda251__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                         gpointer self)
{
#line 229 "../src/Dialogs/Settings/Settings.vala"
	__lambda251_ ((DialogsSettingsSettings*) self);
#line 815 "Settings.c"
}

static GtkWidget*
dialogs_settings_settings_get_appearance_view (DialogsSettingsSettings* self)
{
	DialogsSettingsSettingsHeader* settings_header = NULL;
	DialogsSettingsSettingsHeader* _tmp0_;
	DialogsSettingsSettingsContent* content = NULL;
	DialogsSettingsSettingsContent* _tmp1_;
	GtkRadioButton* light_item = NULL;
	GtkRadioButton* _tmp2_ = NULL;
	GtkRadioButton* dark_item = NULL;
	GtkRadioButton* _tmp3_;
	GtkRadioButton* _tmp4_ = NULL;
	GtkRadioButton* dark_blue_item = NULL;
	GtkRadioButton* _tmp5_;
	GtkRadioButton* _tmp6_ = NULL;
	DialogsSettingsSettingsContent* _tmp7_;
	GtkRadioButton* _tmp8_;
	DialogsSettingsSettingsContent* _tmp9_;
	GtkRadioButton* _tmp10_;
	DialogsSettingsSettingsContent* _tmp11_;
	GtkRadioButton* _tmp12_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp13_ = NULL;
	GtkGrid* _tmp14_;
	DialogsSettingsSettingsHeader* _tmp15_;
	GtkGrid* _tmp16_;
	DialogsSettingsSettingsContent* _tmp17_;
	gint appearance = 0;
	GSettings* _tmp18_;
	DialogsSettingsSettingsHeader* _tmp22_;
	DialogsSettingsSettingsHeader* _tmp23_;
	GtkRadioButton* _tmp24_;
	GtkRadioButton* _tmp25_;
	GtkRadioButton* _tmp26_;
	GtkGrid* _tmp27_;
	GtkWidget* result = NULL;
#line 169 "../src/Dialogs/Settings/Settings.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 170 "../src/Dialogs/Settings/Settings.vala"
	_tmp0_ = dialogs_settings_settings_header_new (_ ("Appearance"), TRUE);
#line 170 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp0_);
#line 170 "../src/Dialogs/Settings/Settings.vala"
	settings_header = _tmp0_;
#line 172 "../src/Dialogs/Settings/Settings.vala"
	_tmp1_ = dialogs_settings_settings_content_new (NULL);
#line 172 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp1_);
#line 172 "../src/Dialogs/Settings/Settings.vala"
	content = _tmp1_;
#line 174 "../src/Dialogs/Settings/Settings.vala"
	_tmp2_ = (GtkRadioButton*) gtk_radio_button_new_with_label (NULL, _ ("Light"));
#line 174 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp2_, TRUE);
#line 174 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp2_, 3);
#line 174 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp2_, 6);
#line 174 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp2_);
#line 174 "../src/Dialogs/Settings/Settings.vala"
	light_item = _tmp2_;
#line 179 "../src/Dialogs/Settings/Settings.vala"
	_tmp3_ = light_item;
#line 179 "../src/Dialogs/Settings/Settings.vala"
	_tmp4_ = (GtkRadioButton*) gtk_radio_button_new_with_label_from_widget (_tmp3_, _ ("Dark"));
#line 179 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp4_, TRUE);
#line 179 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp4_, 3);
#line 179 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_margin_left ((GtkWidget*) _tmp4_, 6);
#line 179 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp4_);
#line 179 "../src/Dialogs/Settings/Settings.vala"
	dark_item = _tmp4_;
#line 184 "../src/Dialogs/Settings/Settings.vala"
	_tmp5_ = light_item;
#line 184 "../src/Dialogs/Settings/Settings.vala"
	_tmp6_ = (GtkRadioButton*) gtk_radio_button_new_with_label_from_widget (_tmp5_, _ ("Dark Blue"));
#line 184 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp6_, TRUE);
#line 184 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp6_, 3);
#line 184 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp6_, 6);
#line 184 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp6_, 6);
#line 184 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp6_);
#line 184 "../src/Dialogs/Settings/Settings.vala"
	dark_blue_item = _tmp6_;
#line 191 "../src/Dialogs/Settings/Settings.vala"
	_tmp7_ = content;
#line 191 "../src/Dialogs/Settings/Settings.vala"
	_tmp8_ = light_item;
#line 191 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_content_add_child (_tmp7_, (GtkWidget*) _tmp8_);
#line 192 "../src/Dialogs/Settings/Settings.vala"
	_tmp9_ = content;
#line 192 "../src/Dialogs/Settings/Settings.vala"
	_tmp10_ = dark_item;
#line 192 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_content_add_child (_tmp9_, (GtkWidget*) _tmp10_);
#line 193 "../src/Dialogs/Settings/Settings.vala"
	_tmp11_ = content;
#line 193 "../src/Dialogs/Settings/Settings.vala"
	_tmp12_ = dark_blue_item;
#line 193 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_content_add_child (_tmp11_, (GtkWidget*) _tmp12_);
#line 195 "../src/Dialogs/Settings/Settings.vala"
	_tmp13_ = (GtkGrid*) gtk_grid_new ();
#line 195 "../src/Dialogs/Settings/Settings.vala"
	g_object_set ((GtkWidget*) _tmp13_, "expand", TRUE, NULL);
#line 195 "../src/Dialogs/Settings/Settings.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp13_, GTK_ORIENTATION_VERTICAL);
#line 195 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp13_, GTK_ALIGN_START);
#line 195 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp13_);
#line 195 "../src/Dialogs/Settings/Settings.vala"
	main_grid = _tmp13_;
#line 201 "../src/Dialogs/Settings/Settings.vala"
	_tmp14_ = main_grid;
#line 201 "../src/Dialogs/Settings/Settings.vala"
	_tmp15_ = settings_header;
#line 201 "../src/Dialogs/Settings/Settings.vala"
	gtk_container_add ((GtkContainer*) _tmp14_, (GtkWidget*) _tmp15_);
#line 202 "../src/Dialogs/Settings/Settings.vala"
	_tmp16_ = main_grid;
#line 202 "../src/Dialogs/Settings/Settings.vala"
	_tmp17_ = content;
#line 202 "../src/Dialogs/Settings/Settings.vala"
	gtk_container_add ((GtkContainer*) _tmp16_, (GtkWidget*) _tmp17_);
#line 204 "../src/Dialogs/Settings/Settings.vala"
	_tmp18_ = planner_settings;
#line 204 "../src/Dialogs/Settings/Settings.vala"
	appearance = g_settings_get_enum (_tmp18_, "appearance");
#line 205 "../src/Dialogs/Settings/Settings.vala"
	if (appearance == 0) {
#line 958 "Settings.c"
		GtkRadioButton* _tmp19_;
#line 206 "../src/Dialogs/Settings/Settings.vala"
		_tmp19_ = light_item;
#line 206 "../src/Dialogs/Settings/Settings.vala"
		gtk_toggle_button_set_active ((GtkToggleButton*) _tmp19_, TRUE);
#line 964 "Settings.c"
	} else {
#line 207 "../src/Dialogs/Settings/Settings.vala"
		if (appearance == 1) {
#line 968 "Settings.c"
			GtkRadioButton* _tmp20_;
#line 208 "../src/Dialogs/Settings/Settings.vala"
			_tmp20_ = dark_item;
#line 208 "../src/Dialogs/Settings/Settings.vala"
			gtk_toggle_button_set_active ((GtkToggleButton*) _tmp20_, TRUE);
#line 974 "Settings.c"
		} else {
#line 209 "../src/Dialogs/Settings/Settings.vala"
			if (appearance == 2) {
#line 978 "Settings.c"
				GtkRadioButton* _tmp21_;
#line 210 "../src/Dialogs/Settings/Settings.vala"
				_tmp21_ = dark_blue_item;
#line 210 "../src/Dialogs/Settings/Settings.vala"
				gtk_toggle_button_set_active ((GtkToggleButton*) _tmp21_, TRUE);
#line 984 "Settings.c"
			}
		}
	}
#line 213 "../src/Dialogs/Settings/Settings.vala"
	_tmp22_ = settings_header;
#line 213 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object (_tmp22_, "done-activated", (GCallback) ___lambda247__dialogs_settings_settings_header_done_activated, self, 0);
#line 217 "../src/Dialogs/Settings/Settings.vala"
	_tmp23_ = settings_header;
#line 217 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object (_tmp23_, "back-activated", (GCallback) ___lambda248__dialogs_settings_settings_header_back_activated, self, 0);
#line 221 "../src/Dialogs/Settings/Settings.vala"
	_tmp24_ = light_item;
#line 221 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object ((GtkToggleButton*) _tmp24_, "toggled", (GCallback) ___lambda249__gtk_toggle_button_toggled, self, 0);
#line 225 "../src/Dialogs/Settings/Settings.vala"
	_tmp25_ = dark_item;
#line 225 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object ((GtkToggleButton*) _tmp25_, "toggled", (GCallback) ___lambda250__gtk_toggle_button_toggled, self, 0);
#line 229 "../src/Dialogs/Settings/Settings.vala"
	_tmp26_ = dark_blue_item;
#line 229 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object ((GtkToggleButton*) _tmp26_, "toggled", (GCallback) ___lambda251__gtk_toggle_button_toggled, self, 0);
#line 233 "../src/Dialogs/Settings/Settings.vala"
	_tmp27_ = main_grid;
#line 233 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp27_);
#line 234 "../src/Dialogs/Settings/Settings.vala"
	result = (GtkWidget*) main_grid;
#line 234 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (dark_blue_item);
#line 234 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (dark_item);
#line 234 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (light_item);
#line 234 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (content);
#line 234 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (settings_header);
#line 234 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1026 "Settings.c"
}

static void
dialogs_settings_settings_go_setting_view (DialogsSettingsSettings* self,
                                           const gchar* view)
{
	GeeHashMap* _tmp0_;
	GtkStack* _tmp8_;
#line 237 "../src/Dialogs/Settings/Settings.vala"
	g_return_if_fail (self != NULL);
#line 237 "../src/Dialogs/Settings/Settings.vala"
	g_return_if_fail (view != NULL);
#line 238 "../src/Dialogs/Settings/Settings.vala"
	_tmp0_ = self->views;
#line 238 "../src/Dialogs/Settings/Settings.vala"
	if (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp0_, view)) {
#line 1043 "Settings.c"
		GeeHashMap* _tmp1_;
		GtkWidget* _tmp2_;
		GtkWidget* _tmp3_;
		GtkStack* _tmp4_;
		GeeHashMap* _tmp5_;
		gpointer _tmp6_;
		GtkWidget* _tmp7_;
#line 239 "../src/Dialogs/Settings/Settings.vala"
		_tmp1_ = self->views;
#line 239 "../src/Dialogs/Settings/Settings.vala"
		_tmp2_ = dialogs_settings_settings_get_setting_view (self, view);
#line 239 "../src/Dialogs/Settings/Settings.vala"
		_tmp3_ = _tmp2_;
#line 239 "../src/Dialogs/Settings/Settings.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp1_, view, _tmp3_);
#line 239 "../src/Dialogs/Settings/Settings.vala"
		_g_object_unref0 (_tmp3_);
#line 240 "../src/Dialogs/Settings/Settings.vala"
		_tmp4_ = self->priv->main_stack;
#line 240 "../src/Dialogs/Settings/Settings.vala"
		_tmp5_ = self->views;
#line 240 "../src/Dialogs/Settings/Settings.vala"
		_tmp6_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp5_, view);
#line 240 "../src/Dialogs/Settings/Settings.vala"
		_tmp7_ = (GtkWidget*) _tmp6_;
#line 240 "../src/Dialogs/Settings/Settings.vala"
		gtk_stack_add_named (_tmp4_, _tmp7_, view);
#line 240 "../src/Dialogs/Settings/Settings.vala"
		_g_object_unref0 (_tmp7_);
#line 1073 "Settings.c"
	}
#line 243 "../src/Dialogs/Settings/Settings.vala"
	_tmp8_ = self->priv->main_stack;
#line 243 "../src/Dialogs/Settings/Settings.vala"
	gtk_stack_set_visible_child_name (_tmp8_, view);
#line 1079 "Settings.c"
}

static GtkWidget*
dialogs_settings_settings_get_setting_view (DialogsSettingsSettings* self,
                                            const gchar* view)
{
	GtkWidget* returned = NULL;
	const gchar* _tmp0_;
	GQuark _tmp2_ = 0U;
#line 249 "../src/Dialogs/Settings/Settings.vala"
	static GQuark _tmp1_label0 = 0;
#line 249 "../src/Dialogs/Settings/Settings.vala"
	static GQuark _tmp1_label1 = 0;
#line 1093 "Settings.c"
	GtkWidget* result = NULL;
#line 246 "../src/Dialogs/Settings/Settings.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 246 "../src/Dialogs/Settings/Settings.vala"
	g_return_val_if_fail (view != NULL, NULL);
#line 247 "../src/Dialogs/Settings/Settings.vala"
	returned = NULL;
#line 249 "../src/Dialogs/Settings/Settings.vala"
	_tmp0_ = view;
#line 249 "../src/Dialogs/Settings/Settings.vala"
	_tmp2_ = (NULL == _tmp0_) ? 0 : g_quark_from_string (_tmp0_);
#line 249 "../src/Dialogs/Settings/Settings.vala"
	if (_tmp2_ == ((0 != _tmp1_label0) ? _tmp1_label0 : (_tmp1_label0 = g_quark_from_static_string ("settings")))) {
#line 249 "../src/Dialogs/Settings/Settings.vala"
		switch (0) {
#line 1109 "Settings.c"
			default:
			{
				GtkWidget* _tmp3_;
#line 251 "../src/Dialogs/Settings/Settings.vala"
				_tmp3_ = dialogs_settings_settings_get_settings_view (self);
#line 251 "../src/Dialogs/Settings/Settings.vala"
				_g_object_unref0 (returned);
#line 251 "../src/Dialogs/Settings/Settings.vala"
				returned = _tmp3_;
#line 252 "../src/Dialogs/Settings/Settings.vala"
				break;
#line 1121 "Settings.c"
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label1) ? _tmp1_label1 : (_tmp1_label1 = g_quark_from_static_string ("appearance")))) {
#line 249 "../src/Dialogs/Settings/Settings.vala"
		switch (0) {
#line 1127 "Settings.c"
			default:
			{
				GtkWidget* _tmp4_;
#line 254 "../src/Dialogs/Settings/Settings.vala"
				_tmp4_ = dialogs_settings_settings_get_appearance_view (self);
#line 254 "../src/Dialogs/Settings/Settings.vala"
				_g_object_unref0 (returned);
#line 254 "../src/Dialogs/Settings/Settings.vala"
				returned = _tmp4_;
#line 255 "../src/Dialogs/Settings/Settings.vala"
				break;
#line 1139 "Settings.c"
			}
		}
	}
#line 258 "../src/Dialogs/Settings/Settings.vala"
	result = returned;
#line 258 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1147 "Settings.c"
}

static gboolean
__lambda245_ (DialogsSettingsSettings* self)
{
	gboolean result = FALSE;
#line 265 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 266 "../src/Dialogs/Settings/Settings.vala"
	result = G_SOURCE_REMOVE;
#line 266 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1160 "Settings.c"
}

static gboolean
___lambda245__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda245_ ((DialogsSettingsSettings*) self);
#line 264 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1170 "Settings.c"
}

void
dialogs_settings_settings_hide_destroy (DialogsSettingsSettings* self)
{
#line 261 "../src/Dialogs/Settings/Settings.vala"
	g_return_if_fail (self != NULL);
#line 262 "../src/Dialogs/Settings/Settings.vala"
	gtk_widget_hide ((GtkWidget*) self);
#line 264 "../src/Dialogs/Settings/Settings.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 500, ___lambda245__gsource_func, g_object_ref (self), g_object_unref);
#line 1182 "Settings.c"
}

const gchar*
dialogs_settings_settings_get_view (DialogsSettingsSettings* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 23 "../src/Dialogs/Settings/Settings.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "../src/Dialogs/Settings/Settings.vala"
	_tmp0_ = self->priv->_view;
#line 23 "../src/Dialogs/Settings/Settings.vala"
	result = _tmp0_;
#line 23 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1198 "Settings.c"
}

static void
dialogs_settings_settings_set_view (DialogsSettingsSettings* self,
                                    const gchar* value)
{
	gchar* old_value;
#line 23 "../src/Dialogs/Settings/Settings.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/Dialogs/Settings/Settings.vala"
	old_value = dialogs_settings_settings_get_view (self);
#line 23 "../src/Dialogs/Settings/Settings.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 1212 "Settings.c"
		gchar* _tmp0_;
#line 23 "../src/Dialogs/Settings/Settings.vala"
		_tmp0_ = g_strdup (value);
#line 23 "../src/Dialogs/Settings/Settings.vala"
		_g_free0 (self->priv->_view);
#line 23 "../src/Dialogs/Settings/Settings.vala"
		self->priv->_view = _tmp0_;
#line 23 "../src/Dialogs/Settings/Settings.vala"
		g_object_notify_by_pspec ((GObject *) self, dialogs_settings_settings_properties[DIALOGS_SETTINGS_SETTINGS_VIEW_PROPERTY]);
#line 1222 "Settings.c"
	}
}

static gboolean
_dialogs_settings_settings___lambda256_ (DialogsSettingsSettings* self)
{
	const gchar* _tmp0_;
	gboolean result = FALSE;
#line 62 "../src/Dialogs/Settings/Settings.vala"
	_tmp0_ = self->priv->_view;
#line 62 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_go_setting_view (self, _tmp0_);
#line 63 "../src/Dialogs/Settings/Settings.vala"
	result = G_SOURCE_REMOVE;
#line 63 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1239 "Settings.c"
}

static gboolean
__dialogs_settings_settings___lambda256__gsource_func (gpointer self)
{
	gboolean result;
	result = _dialogs_settings_settings___lambda256_ ((DialogsSettingsSettings*) self);
#line 61 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1249 "Settings.c"
}

static gboolean
_dialogs_settings_settings___lambda257_ (DialogsSettingsSettings* self)
{
	gboolean result = FALSE;
#line 67 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_hide_destroy (self);
#line 68 "../src/Dialogs/Settings/Settings.vala"
	result = FALSE;
#line 68 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1262 "Settings.c"
}

static gboolean
__dialogs_settings_settings___lambda257__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                     GdkEventFocus* event,
                                                                     gpointer self)
{
	gboolean result;
	result = _dialogs_settings_settings___lambda257_ ((DialogsSettingsSettings*) self);
#line 66 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1274 "Settings.c"
}

static gboolean
_dialogs_settings_settings___lambda258_ (DialogsSettingsSettings* self,
                                         GdkEventKey* key)
{
	gboolean result = FALSE;
#line 71 "../src/Dialogs/Settings/Settings.vala"
	g_return_val_if_fail (key != NULL, FALSE);
#line 72 "../src/Dialogs/Settings/Settings.vala"
	if (key->keyval == ((guint) 65307)) {
#line 73 "../src/Dialogs/Settings/Settings.vala"
		dialogs_settings_settings_hide_destroy (self);
#line 1288 "Settings.c"
	}
#line 76 "../src/Dialogs/Settings/Settings.vala"
	result = FALSE;
#line 76 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1294 "Settings.c"
}

static gboolean
__dialogs_settings_settings___lambda258__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                       GdkEventKey* event,
                                                                       gpointer self)
{
	gboolean result;
	result = _dialogs_settings_settings___lambda258_ ((DialogsSettingsSettings*) self, event);
#line 71 "../src/Dialogs/Settings/Settings.vala"
	return result;
#line 1306 "Settings.c"
}

static GObject *
dialogs_settings_settings_constructor (GType type,
                                       guint n_construct_properties,
                                       GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	DialogsSettingsSettings * self;
	GtkStyleContext* main_context = NULL;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	Planner* _tmp2_;
	Planner* _tmp3_;
	MainWindow* _tmp4_;
	GeeHashMap* _tmp5_;
	GtkStack* _tmp6_ = NULL;
	GtkScrolledWindow* stack_scrolled = NULL;
	GtkScrolledWindow* _tmp7_ = NULL;
	GtkScrolledWindow* _tmp8_;
	GtkStack* _tmp9_;
	GtkScrolledWindow* _tmp10_;
	GtkStack* _tmp11_;
	guint _tmp12_;
	guint _tmp13_;
#line 40 "../src/Dialogs/Settings/Settings.vala"
	parent_class = G_OBJECT_CLASS (dialogs_settings_settings_parent_class);
#line 40 "../src/Dialogs/Settings/Settings.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 40 "../src/Dialogs/Settings/Settings.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_SETTINGS_TYPE_SETTINGS, DialogsSettingsSettings);
#line 41 "../src/Dialogs/Settings/Settings.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 41 "../src/Dialogs/Settings/Settings.vala"
	main_context = _tmp0_;
#line 42 "../src/Dialogs/Settings/Settings.vala"
	_tmp1_ = main_context;
#line 42 "../src/Dialogs/Settings/Settings.vala"
	gtk_style_context_add_class (_tmp1_, "picker");
#line 43 "../src/Dialogs/Settings/Settings.vala"
	_tmp2_ = planner_get_instance ();
#line 43 "../src/Dialogs/Settings/Settings.vala"
	_tmp3_ = _tmp2_;
#line 43 "../src/Dialogs/Settings/Settings.vala"
	_tmp4_ = _tmp3_->main_window;
#line 43 "../src/Dialogs/Settings/Settings.vala"
	gtk_window_set_transient_for ((GtkWindow*) self, (GtkWindow*) _tmp4_);
#line 45 "../src/Dialogs/Settings/Settings.vala"
	_tmp5_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, gtk_widget_get_type (), (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 45 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (self->views);
#line 45 "../src/Dialogs/Settings/Settings.vala"
	self->views = _tmp5_;
#line 47 "../src/Dialogs/Settings/Settings.vala"
	_tmp6_ = (GtkStack*) gtk_stack_new ();
#line 47 "../src/Dialogs/Settings/Settings.vala"
	g_object_set ((GtkWidget*) _tmp6_, "expand", TRUE, NULL);
#line 47 "../src/Dialogs/Settings/Settings.vala"
	gtk_stack_set_transition_type (_tmp6_, GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT);
#line 47 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp6_);
#line 47 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 47 "../src/Dialogs/Settings/Settings.vala"
	self->priv->main_stack = _tmp6_;
#line 52 "../src/Dialogs/Settings/Settings.vala"
	_tmp7_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 52 "../src/Dialogs/Settings/Settings.vala"
	g_object_set (_tmp7_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
#line 52 "../src/Dialogs/Settings/Settings.vala"
	g_object_set (_tmp7_, "vscrollbar-policy", GTK_POLICY_NEVER, NULL);
#line 52 "../src/Dialogs/Settings/Settings.vala"
	g_object_set ((GtkWidget*) _tmp7_, "expand", TRUE, NULL);
#line 52 "../src/Dialogs/Settings/Settings.vala"
	g_object_ref_sink (_tmp7_);
#line 52 "../src/Dialogs/Settings/Settings.vala"
	stack_scrolled = _tmp7_;
#line 57 "../src/Dialogs/Settings/Settings.vala"
	_tmp8_ = stack_scrolled;
#line 57 "../src/Dialogs/Settings/Settings.vala"
	_tmp9_ = self->priv->main_stack;
#line 57 "../src/Dialogs/Settings/Settings.vala"
	gtk_container_add ((GtkContainer*) _tmp8_, (GtkWidget*) _tmp9_);
#line 59 "../src/Dialogs/Settings/Settings.vala"
	_tmp10_ = stack_scrolled;
#line 59 "../src/Dialogs/Settings/Settings.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp10_);
#line 61 "../src/Dialogs/Settings/Settings.vala"
	_tmp11_ = self->priv->main_stack;
#line 61 "../src/Dialogs/Settings/Settings.vala"
	_tmp12_ = gtk_stack_get_transition_duration (_tmp11_);
#line 61 "../src/Dialogs/Settings/Settings.vala"
	_tmp13_ = _tmp12_;
#line 61 "../src/Dialogs/Settings/Settings.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp13_, __dialogs_settings_settings___lambda256__gsource_func, g_object_ref (self), g_object_unref);
#line 66 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object ((GtkWidget*) self, "focus-out-event", (GCallback) __dialogs_settings_settings___lambda257__gtk_widget_focus_out_event, self, 0);
#line 71 "../src/Dialogs/Settings/Settings.vala"
	g_signal_connect_object ((GtkWidget*) self, "key-release-event", (GCallback) __dialogs_settings_settings___lambda258__gtk_widget_key_release_event, self, 0);
#line 40 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (stack_scrolled);
#line 40 "../src/Dialogs/Settings/Settings.vala"
	return obj;
#line 1411 "Settings.c"
}

static void
dialogs_settings_settings_class_init (DialogsSettingsSettingsClass * klass,
                                      gpointer klass_data)
{
#line 22 "../src/Dialogs/Settings/Settings.vala"
	dialogs_settings_settings_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Dialogs/Settings/Settings.vala"
	g_type_class_adjust_private_offset (klass, &DialogsSettingsSettings_private_offset);
#line 22 "../src/Dialogs/Settings/Settings.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_dialogs_settings_settings_get_property;
#line 22 "../src/Dialogs/Settings/Settings.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_dialogs_settings_settings_set_property;
#line 22 "../src/Dialogs/Settings/Settings.vala"
	G_OBJECT_CLASS (klass)->constructor = dialogs_settings_settings_constructor;
#line 22 "../src/Dialogs/Settings/Settings.vala"
	G_OBJECT_CLASS (klass)->finalize = dialogs_settings_settings_finalize;
#line 22 "../src/Dialogs/Settings/Settings.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_SETTINGS_SETTINGS_VIEW_PROPERTY, dialogs_settings_settings_properties[DIALOGS_SETTINGS_SETTINGS_VIEW_PROPERTY] = g_param_spec_string ("view", "view", "view", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1432 "Settings.c"
}

static void
dialogs_settings_settings_instance_init (DialogsSettingsSettings * self,
                                         gpointer klass)
{
#line 22 "../src/Dialogs/Settings/Settings.vala"
	self->priv = dialogs_settings_settings_get_instance_private (self);
#line 1441 "Settings.c"
}

static void
dialogs_settings_settings_finalize (GObject * obj)
{
	DialogsSettingsSettings * self;
#line 22 "../src/Dialogs/Settings/Settings.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_SETTINGS_TYPE_SETTINGS, DialogsSettingsSettings);
#line 23 "../src/Dialogs/Settings/Settings.vala"
	_g_free0 (self->priv->_view);
#line 25 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 26 "../src/Dialogs/Settings/Settings.vala"
	_g_object_unref0 (self->views);
#line 22 "../src/Dialogs/Settings/Settings.vala"
	G_OBJECT_CLASS (dialogs_settings_settings_parent_class)->finalize (obj);
#line 1458 "Settings.c"
}

static GType
dialogs_settings_settings_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (DialogsSettingsSettingsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) dialogs_settings_settings_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (DialogsSettingsSettings), 0, (GInstanceInitFunc) dialogs_settings_settings_instance_init, NULL };
	GType dialogs_settings_settings_type_id;
	dialogs_settings_settings_type_id = g_type_register_static (hdy_window_get_type (), "DialogsSettingsSettings", &g_define_type_info, 0);
	DialogsSettingsSettings_private_offset = g_type_add_instance_private (dialogs_settings_settings_type_id, sizeof (DialogsSettingsSettingsPrivate));
	return dialogs_settings_settings_type_id;
}

GType
dialogs_settings_settings_get_type (void)
{
	static volatile gsize dialogs_settings_settings_type_id__volatile = 0;
	if (g_once_init_enter (&dialogs_settings_settings_type_id__volatile)) {
		GType dialogs_settings_settings_type_id;
		dialogs_settings_settings_type_id = dialogs_settings_settings_get_type_once ();
		g_once_init_leave (&dialogs_settings_settings_type_id__volatile, dialogs_settings_settings_type_id);
	}
	return dialogs_settings_settings_type_id__volatile;
}

static void
_vala_dialogs_settings_settings_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	DialogsSettingsSettings * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_SETTINGS_TYPE_SETTINGS, DialogsSettingsSettings);
#line 22 "../src/Dialogs/Settings/Settings.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/Settings/Settings.vala"
		case DIALOGS_SETTINGS_SETTINGS_VIEW_PROPERTY:
#line 22 "../src/Dialogs/Settings/Settings.vala"
		g_value_set_string (value, dialogs_settings_settings_get_view (self));
#line 22 "../src/Dialogs/Settings/Settings.vala"
		break;
#line 1499 "Settings.c"
		default:
#line 22 "../src/Dialogs/Settings/Settings.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/Settings/Settings.vala"
		break;
#line 1505 "Settings.c"
	}
}

static void
_vala_dialogs_settings_settings_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec)
{
	DialogsSettingsSettings * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_SETTINGS_TYPE_SETTINGS, DialogsSettingsSettings);
#line 22 "../src/Dialogs/Settings/Settings.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/Settings/Settings.vala"
		case DIALOGS_SETTINGS_SETTINGS_VIEW_PROPERTY:
#line 22 "../src/Dialogs/Settings/Settings.vala"
		dialogs_settings_settings_set_view (self, g_value_get_string (value));
#line 22 "../src/Dialogs/Settings/Settings.vala"
		break;
#line 1525 "Settings.c"
		default:
#line 22 "../src/Dialogs/Settings/Settings.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/Settings/Settings.vala"
		break;
#line 1531 "Settings.c"
	}
}

