/* LabelButton.c generated by valac 0.50.10, the Vala compiler
 * generated from LabelButton.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <handy.h>

#define WIDGETS_TYPE_LABEL_BUTTON (widgets_label_button_get_type ())
#define WIDGETS_LABEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButton))
#define WIDGETS_LABEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButtonClass))
#define WIDGETS_IS_LABEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_BUTTON))
#define WIDGETS_IS_LABEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_BUTTON))
#define WIDGETS_LABEL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButtonClass))

typedef struct _WidgetsLabelButton WidgetsLabelButton;
typedef struct _WidgetsLabelButtonClass WidgetsLabelButtonClass;
typedef struct _WidgetsLabelButtonPrivate WidgetsLabelButtonPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;
enum  {
	WIDGETS_LABEL_BUTTON_0_PROPERTY,
	WIDGETS_LABEL_BUTTON_ITEM_PROPERTY,
	WIDGETS_LABEL_BUTTON_NUM_PROPERTIES
};
static GParamSpec* widgets_label_button_properties[WIDGETS_LABEL_BUTTON_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;

#define DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER (dialogs_label_picker_label_picker_get_type ())
#define DIALOGS_LABEL_PICKER_LABEL_PICKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPicker))
#define DIALOGS_LABEL_PICKER_LABEL_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPickerClass))
#define DIALOGS_LABEL_PICKER_IS_LABEL_PICKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER))
#define DIALOGS_LABEL_PICKER_IS_LABEL_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER))
#define DIALOGS_LABEL_PICKER_LABEL_PICKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_LABEL_PICKER_TYPE_LABEL_PICKER, DialogsLabelPickerLabelPickerClass))

typedef struct _DialogsLabelPickerLabelPicker DialogsLabelPickerLabelPicker;
typedef struct _DialogsLabelPickerLabelPickerClass DialogsLabelPickerLabelPickerClass;
enum  {
	WIDGETS_LABEL_BUTTON_LABELS_CHANGED_SIGNAL,
	WIDGETS_LABEL_BUTTON_DIALOG_OPEN_SIGNAL,
	WIDGETS_LABEL_BUTTON_NUM_SIGNALS
};
static guint widgets_label_button_signals[WIDGETS_LABEL_BUTTON_NUM_SIGNALS] = {0};

struct _WidgetsLabelButton {
	GtkButton parent_instance;
	WidgetsLabelButtonPrivate * priv;
};

struct _WidgetsLabelButtonClass {
	GtkButtonClass parent_class;
};

struct _WidgetsLabelButtonPrivate {
	ObjectsItem* _item;
};

static gint WidgetsLabelButton_private_offset;
static gpointer widgets_label_button_parent_class = NULL;

GType widgets_label_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsLabelButton, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
WidgetsLabelButton* widgets_label_button_new (ObjectsItem* item);
WidgetsLabelButton* widgets_label_button_construct (GType object_type,
                                                    ObjectsItem* item);
ObjectsItem* widgets_label_button_get_item (WidgetsLabelButton* self);
static void widgets_label_button_set_item (WidgetsLabelButton* self,
                                    ObjectsItem* value);
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
static GObject * widgets_label_button_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
void widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                            const gchar* icon_name);
static void _widgets_label_button___lambda114_ (WidgetsLabelButton* self);
GType dialogs_label_picker_label_picker_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsLabelPickerLabelPicker, g_object_unref)
DialogsLabelPickerLabelPicker* dialogs_label_picker_label_picker_new (ObjectsItem* item);
DialogsLabelPickerLabelPicker* dialogs_label_picker_label_picker_construct (GType object_type,
                                                                            ObjectsItem* item);
static void __lambda115_ (WidgetsLabelButton* self,
                   GeeHashMap* labels);
static void ___lambda115__dialogs_label_picker_label_picker_labels_changed (DialogsLabelPickerLabelPicker* _sender,
                                                                     GeeHashMap* labels_map,
                                                                     gpointer self);
void dialogs_label_picker_label_picker_popup (DialogsLabelPickerLabelPicker* self);
static void __lambda116_ (WidgetsLabelButton* self);
static void ___lambda116__gtk_widget_destroy (GtkWidget* _sender,
                                       gpointer self);
static void __widgets_label_button___lambda114__gtk_button_clicked (GtkButton* _sender,
                                                             gpointer self);
static void widgets_label_button_finalize (GObject * obj);
static GType widgets_label_button_get_type_once (void);
static void _vala_widgets_label_button_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_widgets_label_button_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);

static inline gpointer
widgets_label_button_get_instance_private (WidgetsLabelButton* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsLabelButton_private_offset);
}

WidgetsLabelButton*
widgets_label_button_construct (GType object_type,
                                ObjectsItem* item)
{
	WidgetsLabelButton * self = NULL;
#line 7 "../src/Widgets/LabelButton.vala"
	g_return_val_if_fail (item != NULL, NULL);
#line 8 "../src/Widgets/LabelButton.vala"
	self = (WidgetsLabelButton*) g_object_new (object_type, "item", item, "can-focus", FALSE, "valign", GTK_ALIGN_CENTER, "halign", GTK_ALIGN_CENTER, NULL);
#line 7 "../src/Widgets/LabelButton.vala"
	return self;
#line 173 "LabelButton.c"
}

WidgetsLabelButton*
widgets_label_button_new (ObjectsItem* item)
{
#line 7 "../src/Widgets/LabelButton.vala"
	return widgets_label_button_construct (WIDGETS_TYPE_LABEL_BUTTON, item);
#line 181 "LabelButton.c"
}

ObjectsItem*
widgets_label_button_get_item (WidgetsLabelButton* self)
{
	ObjectsItem* result;
	ObjectsItem* _tmp0_;
#line 2 "../src/Widgets/LabelButton.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Widgets/LabelButton.vala"
	_tmp0_ = self->priv->_item;
#line 2 "../src/Widgets/LabelButton.vala"
	result = _tmp0_;
#line 2 "../src/Widgets/LabelButton.vala"
	return result;
#line 197 "LabelButton.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 2 "../src/Widgets/LabelButton.vala"
	return self ? g_object_ref (self) : NULL;
#line 205 "LabelButton.c"
}

static void
widgets_label_button_set_item (WidgetsLabelButton* self,
                               ObjectsItem* value)
{
	ObjectsItem* old_value;
#line 2 "../src/Widgets/LabelButton.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Widgets/LabelButton.vala"
	old_value = widgets_label_button_get_item (self);
#line 2 "../src/Widgets/LabelButton.vala"
	if (old_value != value) {
#line 219 "LabelButton.c"
		ObjectsItem* _tmp0_;
#line 2 "../src/Widgets/LabelButton.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 2 "../src/Widgets/LabelButton.vala"
		_g_object_unref0 (self->priv->_item);
#line 2 "../src/Widgets/LabelButton.vala"
		self->priv->_item = _tmp0_;
#line 2 "../src/Widgets/LabelButton.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_label_button_properties[WIDGETS_LABEL_BUTTON_ITEM_PROPERTY]);
#line 229 "LabelButton.c"
	}
}

static void
__lambda115_ (WidgetsLabelButton* self,
              GeeHashMap* labels)
{
#line 34 "../src/Widgets/LabelButton.vala"
	g_return_if_fail (labels != NULL);
#line 35 "../src/Widgets/LabelButton.vala"
	g_signal_emit (self, widgets_label_button_signals[WIDGETS_LABEL_BUTTON_LABELS_CHANGED_SIGNAL], 0, labels);
#line 241 "LabelButton.c"
}

static void
___lambda115__dialogs_label_picker_label_picker_labels_changed (DialogsLabelPickerLabelPicker* _sender,
                                                                GeeHashMap* labels_map,
                                                                gpointer self)
{
#line 34 "../src/Widgets/LabelButton.vala"
	__lambda115_ ((WidgetsLabelButton*) self, labels_map);
#line 251 "LabelButton.c"
}

static void
__lambda116_ (WidgetsLabelButton* self)
{
#line 42 "../src/Widgets/LabelButton.vala"
	g_signal_emit (self, widgets_label_button_signals[WIDGETS_LABEL_BUTTON_DIALOG_OPEN_SIGNAL], 0, FALSE);
#line 259 "LabelButton.c"
}

static void
___lambda116__gtk_widget_destroy (GtkWidget* _sender,
                                  gpointer self)
{
#line 41 "../src/Widgets/LabelButton.vala"
	__lambda116_ ((WidgetsLabelButton*) self);
#line 268 "LabelButton.c"
}

static void
_widgets_label_button___lambda114_ (WidgetsLabelButton* self)
{
	DialogsLabelPickerLabelPicker* dialog = NULL;
	ObjectsItem* _tmp0_;
	DialogsLabelPickerLabelPicker* _tmp1_;
	DialogsLabelPickerLabelPicker* _tmp2_;
	DialogsLabelPickerLabelPicker* _tmp3_;
	DialogsLabelPickerLabelPicker* _tmp4_;
#line 32 "../src/Widgets/LabelButton.vala"
	_tmp0_ = self->priv->_item;
#line 32 "../src/Widgets/LabelButton.vala"
	_tmp1_ = dialogs_label_picker_label_picker_new (_tmp0_);
#line 32 "../src/Widgets/LabelButton.vala"
	g_object_ref_sink (_tmp1_);
#line 32 "../src/Widgets/LabelButton.vala"
	dialog = _tmp1_;
#line 34 "../src/Widgets/LabelButton.vala"
	_tmp2_ = dialog;
#line 34 "../src/Widgets/LabelButton.vala"
	g_signal_connect_object (_tmp2_, "labels-changed", (GCallback) ___lambda115__dialogs_label_picker_label_picker_labels_changed, self, 0);
#line 38 "../src/Widgets/LabelButton.vala"
	g_signal_emit (self, widgets_label_button_signals[WIDGETS_LABEL_BUTTON_DIALOG_OPEN_SIGNAL], 0, TRUE);
#line 39 "../src/Widgets/LabelButton.vala"
	_tmp3_ = dialog;
#line 39 "../src/Widgets/LabelButton.vala"
	dialogs_label_picker_label_picker_popup (_tmp3_);
#line 41 "../src/Widgets/LabelButton.vala"
	_tmp4_ = dialog;
#line 41 "../src/Widgets/LabelButton.vala"
	g_signal_connect_object ((GtkWidget*) _tmp4_, "destroy", (GCallback) ___lambda116__gtk_widget_destroy, self, 0);
#line 31 "../src/Widgets/LabelButton.vala"
	_g_object_unref0 (dialog);
#line 304 "LabelButton.c"
}

static void
__widgets_label_button___lambda114__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self)
{
#line 31 "../src/Widgets/LabelButton.vala"
	_widgets_label_button___lambda114_ ((WidgetsLabelButton*) self);
#line 313 "LabelButton.c"
}

static GObject *
widgets_label_button_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsLabelButton * self;
	GtkStyleContext* _tmp0_;
	WidgetsDynamicIcon* tag_image = NULL;
	WidgetsDynamicIcon* _tmp1_;
	WidgetsDynamicIcon* _tmp2_;
	WidgetsDynamicIcon* _tmp3_;
	GtkGrid* button_grid = NULL;
	GtkGrid* _tmp4_ = NULL;
	GtkGrid* _tmp5_;
	WidgetsDynamicIcon* _tmp6_;
	GtkGrid* _tmp7_;
#line 16 "../src/Widgets/LabelButton.vala"
	parent_class = G_OBJECT_CLASS (widgets_label_button_parent_class);
#line 16 "../src/Widgets/LabelButton.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 16 "../src/Widgets/LabelButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButton);
#line 17 "../src/Widgets/LabelButton.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 17 "../src/Widgets/LabelButton.vala"
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_FLAT);
#line 19 "../src/Widgets/LabelButton.vala"
	_tmp1_ = widgets_dynamic_icon_new ();
#line 19 "../src/Widgets/LabelButton.vala"
	g_object_ref_sink (_tmp1_);
#line 19 "../src/Widgets/LabelButton.vala"
	tag_image = _tmp1_;
#line 20 "../src/Widgets/LabelButton.vala"
	_tmp2_ = tag_image;
#line 20 "../src/Widgets/LabelButton.vala"
	widgets_dynamic_icon_set_size (_tmp2_, 19);
#line 21 "../src/Widgets/LabelButton.vala"
	_tmp3_ = tag_image;
#line 21 "../src/Widgets/LabelButton.vala"
	widgets_dynamic_icon_update_icon_name (_tmp3_, "planner-tag");
#line 23 "../src/Widgets/LabelButton.vala"
	_tmp4_ = (GtkGrid*) gtk_grid_new ();
#line 23 "../src/Widgets/LabelButton.vala"
	gtk_grid_set_column_spacing (_tmp4_, 6);
#line 23 "../src/Widgets/LabelButton.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp4_, GTK_ALIGN_CENTER);
#line 23 "../src/Widgets/LabelButton.vala"
	g_object_ref_sink (_tmp4_);
#line 23 "../src/Widgets/LabelButton.vala"
	button_grid = _tmp4_;
#line 27 "../src/Widgets/LabelButton.vala"
	_tmp5_ = button_grid;
#line 27 "../src/Widgets/LabelButton.vala"
	_tmp6_ = tag_image;
#line 27 "../src/Widgets/LabelButton.vala"
	gtk_container_add ((GtkContainer*) _tmp5_, (GtkWidget*) _tmp6_);
#line 29 "../src/Widgets/LabelButton.vala"
	_tmp7_ = button_grid;
#line 29 "../src/Widgets/LabelButton.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp7_);
#line 31 "../src/Widgets/LabelButton.vala"
	g_signal_connect_object ((GtkButton*) self, "clicked", (GCallback) __widgets_label_button___lambda114__gtk_button_clicked, self, 0);
#line 16 "../src/Widgets/LabelButton.vala"
	_g_object_unref0 (button_grid);
#line 16 "../src/Widgets/LabelButton.vala"
	_g_object_unref0 (tag_image);
#line 16 "../src/Widgets/LabelButton.vala"
	return obj;
#line 386 "LabelButton.c"
}

static void
widgets_label_button_class_init (WidgetsLabelButtonClass * klass,
                                 gpointer klass_data)
{
#line 1 "../src/Widgets/LabelButton.vala"
	widgets_label_button_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Widgets/LabelButton.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsLabelButton_private_offset);
#line 1 "../src/Widgets/LabelButton.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_label_button_get_property;
#line 1 "../src/Widgets/LabelButton.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_label_button_set_property;
#line 1 "../src/Widgets/LabelButton.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_label_button_constructor;
#line 1 "../src/Widgets/LabelButton.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_label_button_finalize;
#line 1 "../src/Widgets/LabelButton.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_LABEL_BUTTON_ITEM_PROPERTY, widgets_label_button_properties[WIDGETS_LABEL_BUTTON_ITEM_PROPERTY] = g_param_spec_object ("item", "item", "item", OBJECTS_TYPE_ITEM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Widgets/LabelButton.vala"
	widgets_label_button_signals[WIDGETS_LABEL_BUTTON_LABELS_CHANGED_SIGNAL] = g_signal_new ("labels-changed", WIDGETS_TYPE_LABEL_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, GEE_TYPE_HASH_MAP);
#line 1 "../src/Widgets/LabelButton.vala"
	widgets_label_button_signals[WIDGETS_LABEL_BUTTON_DIALOG_OPEN_SIGNAL] = g_signal_new ("dialog-open", WIDGETS_TYPE_LABEL_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOOLEAN, G_TYPE_NONE, 1, G_TYPE_BOOLEAN);
#line 411 "LabelButton.c"
}

static void
widgets_label_button_instance_init (WidgetsLabelButton * self,
                                    gpointer klass)
{
#line 1 "../src/Widgets/LabelButton.vala"
	self->priv = widgets_label_button_get_instance_private (self);
#line 420 "LabelButton.c"
}

static void
widgets_label_button_finalize (GObject * obj)
{
	WidgetsLabelButton * self;
#line 1 "../src/Widgets/LabelButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButton);
#line 2 "../src/Widgets/LabelButton.vala"
	_g_object_unref0 (self->priv->_item);
#line 1 "../src/Widgets/LabelButton.vala"
	G_OBJECT_CLASS (widgets_label_button_parent_class)->finalize (obj);
#line 433 "LabelButton.c"
}

static GType
widgets_label_button_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsLabelButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_label_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsLabelButton), 0, (GInstanceInitFunc) widgets_label_button_instance_init, NULL };
	GType widgets_label_button_type_id;
	widgets_label_button_type_id = g_type_register_static (gtk_button_get_type (), "WidgetsLabelButton", &g_define_type_info, 0);
	WidgetsLabelButton_private_offset = g_type_add_instance_private (widgets_label_button_type_id, sizeof (WidgetsLabelButtonPrivate));
	return widgets_label_button_type_id;
}

GType
widgets_label_button_get_type (void)
{
	static volatile gsize widgets_label_button_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_label_button_type_id__volatile)) {
		GType widgets_label_button_type_id;
		widgets_label_button_type_id = widgets_label_button_get_type_once ();
		g_once_init_leave (&widgets_label_button_type_id__volatile, widgets_label_button_type_id);
	}
	return widgets_label_button_type_id__volatile;
}

static void
_vala_widgets_label_button_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	WidgetsLabelButton * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButton);
#line 1 "../src/Widgets/LabelButton.vala"
	switch (property_id) {
#line 1 "../src/Widgets/LabelButton.vala"
		case WIDGETS_LABEL_BUTTON_ITEM_PROPERTY:
#line 1 "../src/Widgets/LabelButton.vala"
		g_value_set_object (value, widgets_label_button_get_item (self));
#line 1 "../src/Widgets/LabelButton.vala"
		break;
#line 474 "LabelButton.c"
		default:
#line 1 "../src/Widgets/LabelButton.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/LabelButton.vala"
		break;
#line 480 "LabelButton.c"
	}
}

static void
_vala_widgets_label_button_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	WidgetsLabelButton * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButton);
#line 1 "../src/Widgets/LabelButton.vala"
	switch (property_id) {
#line 1 "../src/Widgets/LabelButton.vala"
		case WIDGETS_LABEL_BUTTON_ITEM_PROPERTY:
#line 1 "../src/Widgets/LabelButton.vala"
		widgets_label_button_set_item (self, g_value_get_object (value));
#line 1 "../src/Widgets/LabelButton.vala"
		break;
#line 500 "LabelButton.c"
		default:
#line 1 "../src/Widgets/LabelButton.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Widgets/LabelButton.vala"
		break;
#line 506 "LabelButton.c"
	}
}

