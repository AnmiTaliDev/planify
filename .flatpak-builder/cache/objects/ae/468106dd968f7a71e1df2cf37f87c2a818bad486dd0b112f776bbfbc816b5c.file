/* CalendarHeader.c generated by valac 0.50.10, the Vala compiler
 * generated from CalendarHeader.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <glib/gi18n-lib.h>
#include <stdlib.h>
#include <string.h>

#define WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER (widgets_calendar_calendar_header_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeader))
#define WIDGETS_CALENDAR_CALENDAR_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeaderClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER))
#define WIDGETS_CALENDAR_IS_CALENDAR_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER))
#define WIDGETS_CALENDAR_CALENDAR_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeaderClass))

typedef struct _WidgetsCalendarCalendarHeader WidgetsCalendarCalendarHeader;
typedef struct _WidgetsCalendarCalendarHeaderClass WidgetsCalendarCalendarHeaderClass;
typedef struct _WidgetsCalendarCalendarHeaderPrivate WidgetsCalendarCalendarHeaderPrivate;
enum  {
	WIDGETS_CALENDAR_CALENDAR_HEADER_0_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_HEADER_DATE_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_HEADER_NUM_PROPERTIES
};
static GParamSpec* widgets_calendar_calendar_header_properties[WIDGETS_CALENDAR_CALENDAR_HEADER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;
enum  {
	WIDGETS_CALENDAR_CALENDAR_HEADER_LEFT_CLICKED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_HEADER_RIGHT_CLICKED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_HEADER_CENTER_CLICKED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_HEADER_NUM_SIGNALS
};
static guint widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_NUM_SIGNALS] = {0};

struct _WidgetsCalendarCalendarHeader {
	GtkBox parent_instance;
	WidgetsCalendarCalendarHeaderPrivate * priv;
};

struct _WidgetsCalendarCalendarHeaderClass {
	GtkBoxClass parent_class;
};

struct _WidgetsCalendarCalendarHeaderPrivate {
	GtkLabel* month_label;
	GtkLabel* year_label;
	GtkButton* left_button;
	GtkButton* right_button;
	GtkButton* center_button;
};

static gint WidgetsCalendarCalendarHeader_private_offset;
static gpointer widgets_calendar_calendar_header_parent_class = NULL;

GType widgets_calendar_calendar_header_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsCalendarCalendarHeader, g_object_unref)
WidgetsCalendarCalendarHeader* widgets_calendar_calendar_header_new (void);
WidgetsCalendarCalendarHeader* widgets_calendar_calendar_header_construct (GType object_type);
void widgets_calendar_calendar_header_set_date (WidgetsCalendarCalendarHeader* self,
                                                GDateTime* value);
static GObject * widgets_calendar_calendar_header_constructor (GType type,
                                                        guint n_construct_properties,
                                                        GObjectConstructParam * construct_properties);
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
void widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                            const gchar* icon_name);
static void _widgets_calendar_calendar_header___lambda83_ (WidgetsCalendarCalendarHeader* self);
static void __widgets_calendar_calendar_header___lambda83__gtk_button_clicked (GtkButton* _sender,
                                                                        gpointer self);
static void _widgets_calendar_calendar_header___lambda84_ (WidgetsCalendarCalendarHeader* self);
static void __widgets_calendar_calendar_header___lambda84__gtk_button_clicked (GtkButton* _sender,
                                                                        gpointer self);
static void _widgets_calendar_calendar_header___lambda85_ (WidgetsCalendarCalendarHeader* self);
static void __widgets_calendar_calendar_header___lambda85__gtk_button_clicked (GtkButton* _sender,
                                                                        gpointer self);
static void widgets_calendar_calendar_header_finalize (GObject * obj);
static GType widgets_calendar_calendar_header_get_type_once (void);
static void _vala_widgets_calendar_calendar_header_set_property (GObject * object,
                                                          guint property_id,
                                                          const GValue * value,
                                                          GParamSpec * pspec);

static inline gpointer
widgets_calendar_calendar_header_get_instance_private (WidgetsCalendarCalendarHeader* self)
{
	return G_STRUCT_MEMBER_P (self, WidgetsCalendarCalendarHeader_private_offset);
}

WidgetsCalendarCalendarHeader*
widgets_calendar_calendar_header_construct (GType object_type)
{
	WidgetsCalendarCalendarHeader * self = NULL;
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	self = (WidgetsCalendarCalendarHeader*) g_object_new (object_type, NULL);
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	return self;
#line 137 "CalendarHeader.c"
}

WidgetsCalendarCalendarHeader*
widgets_calendar_calendar_header_new (void)
{
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	return widgets_calendar_calendar_header_construct (WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER);
#line 145 "CalendarHeader.c"
}

void
widgets_calendar_calendar_header_set_date (WidgetsCalendarCalendarHeader* self,
                                           GDateTime* value)
{
	GtkLabel* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	GtkLabel* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
#line 34 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_return_if_fail (self != NULL);
#line 35 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp0_ = self->priv->month_label;
#line 35 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp1_ = g_date_time_format (value, _ ("%OB"));
#line 35 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp2_ = _tmp1_;
#line 35 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_label_set_label (_tmp0_, _tmp2_);
#line 35 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_free0 (_tmp2_);
#line 36 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp3_ = self->priv->year_label;
#line 36 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp4_ = g_date_time_format (value, _ ("%Y"));
#line 36 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp5_ = _tmp4_;
#line 36 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_label_set_label (_tmp3_, _tmp5_);
#line 36 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_free0 (_tmp5_);
#line 34 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_calendar_calendar_header_properties[WIDGETS_CALENDAR_CALENDAR_HEADER_DATE_PROPERTY]);
#line 182 "CalendarHeader.c"
}

static void
_widgets_calendar_calendar_header___lambda83_ (WidgetsCalendarCalendarHeader* self)
{
#line 95 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_emit (self, widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_LEFT_CLICKED_SIGNAL], 0);
#line 190 "CalendarHeader.c"
}

static void
__widgets_calendar_calendar_header___lambda83__gtk_button_clicked (GtkButton* _sender,
                                                                   gpointer self)
{
#line 94 "../src/Widgets/Calendar/CalendarHeader.vala"
	_widgets_calendar_calendar_header___lambda83_ ((WidgetsCalendarCalendarHeader*) self);
#line 199 "CalendarHeader.c"
}

static void
_widgets_calendar_calendar_header___lambda84_ (WidgetsCalendarCalendarHeader* self)
{
#line 99 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_emit (self, widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_RIGHT_CLICKED_SIGNAL], 0);
#line 207 "CalendarHeader.c"
}

static void
__widgets_calendar_calendar_header___lambda84__gtk_button_clicked (GtkButton* _sender,
                                                                   gpointer self)
{
#line 98 "../src/Widgets/Calendar/CalendarHeader.vala"
	_widgets_calendar_calendar_header___lambda84_ ((WidgetsCalendarCalendarHeader*) self);
#line 216 "CalendarHeader.c"
}

static void
_widgets_calendar_calendar_header___lambda85_ (WidgetsCalendarCalendarHeader* self)
{
#line 103 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_emit (self, widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_CENTER_CLICKED_SIGNAL], 0);
#line 224 "CalendarHeader.c"
}

static void
__widgets_calendar_calendar_header___lambda85__gtk_button_clicked (GtkButton* _sender,
                                                                   gpointer self)
{
#line 102 "../src/Widgets/Calendar/CalendarHeader.vala"
	_widgets_calendar_calendar_header___lambda85_ ((WidgetsCalendarCalendarHeader*) self);
#line 233 "CalendarHeader.c"
}

static GObject *
widgets_calendar_calendar_header_constructor (GType type,
                                              guint n_construct_properties,
                                              GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsCalendarCalendarHeader * self;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GtkLabel* _tmp4_;
	GtkLabel* _tmp5_;
	GtkStyleContext* _tmp6_;
	GDateTime* _tmp7_;
	GDateTime* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	GtkLabel* _tmp11_;
	GtkLabel* _tmp12_;
	GtkStyleContext* _tmp13_;
	GtkLabel* _tmp14_;
	GtkStyleContext* _tmp15_;
	WidgetsDynamicIcon* chevron_left_image = NULL;
	WidgetsDynamicIcon* _tmp16_;
	WidgetsDynamicIcon* _tmp17_;
	WidgetsDynamicIcon* _tmp18_;
	GtkButton* _tmp19_ = NULL;
	GtkButton* _tmp20_;
	WidgetsDynamicIcon* _tmp21_;
	GtkButton* _tmp22_;
	GtkStyleContext* _tmp23_;
	GtkButton* _tmp24_;
	GtkStyleContext* _tmp25_;
	WidgetsDynamicIcon* chevron_right_image = NULL;
	WidgetsDynamicIcon* _tmp26_;
	WidgetsDynamicIcon* _tmp27_;
	WidgetsDynamicIcon* _tmp28_;
	GtkButton* _tmp29_ = NULL;
	GtkButton* _tmp30_;
	WidgetsDynamicIcon* _tmp31_;
	GtkButton* _tmp32_;
	GtkStyleContext* _tmp33_;
	GtkButton* _tmp34_;
	GtkStyleContext* _tmp35_;
	GtkGrid* date_grid = NULL;
	GtkGrid* _tmp36_ = NULL;
	GtkGrid* _tmp37_;
	GtkLabel* _tmp38_;
	GtkGrid* _tmp39_;
	GtkLabel* _tmp40_;
	GtkButton* _tmp41_ = NULL;
	GtkButton* _tmp42_;
	GtkStyleContext* _tmp43_;
	GtkButton* _tmp44_;
	GtkButton* _tmp45_;
	GtkGrid* _tmp46_;
	GtkButton* _tmp47_;
	GtkButton* _tmp48_;
	GtkButton* _tmp49_;
	GtkButton* _tmp50_;
	GtkButton* _tmp51_;
	GtkButton* _tmp52_;
#line 40 "../src/Widgets/Calendar/CalendarHeader.vala"
	parent_class = G_OBJECT_CLASS (widgets_calendar_calendar_header_parent_class);
#line 40 "../src/Widgets/Calendar/CalendarHeader.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 40 "../src/Widgets/Calendar/CalendarHeader.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeader);
#line 41 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) self, GTK_ORIENTATION_HORIZONTAL);
#line 42 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_valign ((GtkWidget*) self, GTK_ALIGN_CENTER);
#line 44 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 44 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp1_ = _tmp0_;
#line 44 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp2_ = g_date_time_format (_tmp1_, _ ("%OB"));
#line 44 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp3_ = _tmp2_;
#line 44 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp4_ = (GtkLabel*) gtk_label_new (_tmp3_);
#line 44 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp4_);
#line 44 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->month_label);
#line 44 "../src/Widgets/Calendar/CalendarHeader.vala"
	self->priv->month_label = _tmp4_;
#line 44 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_free0 (_tmp3_);
#line 44 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_date_time_unref0 (_tmp1_);
#line 45 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp5_ = self->priv->month_label;
#line 45 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp6_ = gtk_widget_get_style_context ((GtkWidget*) _tmp5_);
#line 45 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_style_context_add_class (_tmp6_, "font-bold");
#line 47 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp7_ = g_date_time_new_now_local ();
#line 47 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp8_ = _tmp7_;
#line 47 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp9_ = g_date_time_format (_tmp8_, _ ("%Y"));
#line 47 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp10_ = _tmp9_;
#line 47 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp11_ = (GtkLabel*) gtk_label_new (_tmp10_);
#line 47 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp11_);
#line 47 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->year_label);
#line 47 "../src/Widgets/Calendar/CalendarHeader.vala"
	self->priv->year_label = _tmp11_;
#line 47 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_free0 (_tmp10_);
#line 47 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_date_time_unref0 (_tmp8_);
#line 48 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp12_ = self->priv->year_label;
#line 48 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp13_ = gtk_widget_get_style_context ((GtkWidget*) _tmp12_);
#line 48 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_style_context_add_class (_tmp13_, "font-bold");
#line 49 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp14_ = self->priv->year_label;
#line 49 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp15_ = gtk_widget_get_style_context ((GtkWidget*) _tmp14_);
#line 49 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_style_context_add_class (_tmp15_, "primary-color");
#line 51 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp16_ = widgets_dynamic_icon_new ();
#line 51 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp16_);
#line 51 "../src/Widgets/Calendar/CalendarHeader.vala"
	chevron_left_image = _tmp16_;
#line 52 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp17_ = chevron_left_image;
#line 52 "../src/Widgets/Calendar/CalendarHeader.vala"
	widgets_dynamic_icon_set_size (_tmp17_, 19);
#line 53 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp18_ = chevron_left_image;
#line 53 "../src/Widgets/Calendar/CalendarHeader.vala"
	widgets_dynamic_icon_update_icon_name (_tmp18_, "chevron-left");
#line 55 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp19_ = (GtkButton*) gtk_button_new ();
#line 55 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp19_, GTK_ALIGN_CENTER);
#line 55 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp19_, FALSE);
#line 55 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp19_);
#line 55 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->left_button);
#line 55 "../src/Widgets/Calendar/CalendarHeader.vala"
	self->priv->left_button = _tmp19_;
#line 60 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp20_ = self->priv->left_button;
#line 60 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp21_ = chevron_left_image;
#line 60 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp20_, (GtkWidget*) _tmp21_);
#line 61 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp22_ = self->priv->left_button;
#line 61 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp23_ = gtk_widget_get_style_context ((GtkWidget*) _tmp22_);
#line 61 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_style_context_add_class (_tmp23_, GTK_STYLE_CLASS_FLAT);
#line 62 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp24_ = self->priv->left_button;
#line 62 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp25_ = gtk_widget_get_style_context ((GtkWidget*) _tmp24_);
#line 62 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_style_context_add_class (_tmp25_, "no-padding");
#line 64 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp26_ = widgets_dynamic_icon_new ();
#line 64 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp26_);
#line 64 "../src/Widgets/Calendar/CalendarHeader.vala"
	chevron_right_image = _tmp26_;
#line 65 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp27_ = chevron_right_image;
#line 65 "../src/Widgets/Calendar/CalendarHeader.vala"
	widgets_dynamic_icon_set_size (_tmp27_, 19);
#line 66 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp28_ = chevron_right_image;
#line 66 "../src/Widgets/Calendar/CalendarHeader.vala"
	widgets_dynamic_icon_update_icon_name (_tmp28_, "chevron-right");
#line 68 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp29_ = (GtkButton*) gtk_button_new ();
#line 68 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp29_, GTK_ALIGN_CENTER);
#line 68 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp29_, FALSE);
#line 68 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp29_);
#line 68 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->right_button);
#line 68 "../src/Widgets/Calendar/CalendarHeader.vala"
	self->priv->right_button = _tmp29_;
#line 73 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp30_ = self->priv->right_button;
#line 73 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp31_ = chevron_right_image;
#line 73 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp30_, (GtkWidget*) _tmp31_);
#line 74 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp32_ = self->priv->right_button;
#line 74 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp33_ = gtk_widget_get_style_context ((GtkWidget*) _tmp32_);
#line 74 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_style_context_add_class (_tmp33_, GTK_STYLE_CLASS_FLAT);
#line 75 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp34_ = self->priv->right_button;
#line 75 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp35_ = gtk_widget_get_style_context ((GtkWidget*) _tmp34_);
#line 75 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_style_context_add_class (_tmp35_, "no-padding");
#line 77 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp36_ = (GtkGrid*) gtk_grid_new ();
#line 77 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_grid_set_column_spacing (_tmp36_, 6);
#line 77 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp36_);
#line 77 "../src/Widgets/Calendar/CalendarHeader.vala"
	date_grid = _tmp36_;
#line 80 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp37_ = date_grid;
#line 80 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp38_ = self->priv->month_label;
#line 80 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp37_, (GtkWidget*) _tmp38_);
#line 81 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp39_ = date_grid;
#line 81 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp40_ = self->priv->year_label;
#line 81 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp39_, (GtkWidget*) _tmp40_);
#line 83 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp41_ = (GtkButton*) gtk_button_new ();
#line 83 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp41_, GTK_ALIGN_CENTER);
#line 83 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp41_);
#line 83 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->center_button);
#line 83 "../src/Widgets/Calendar/CalendarHeader.vala"
	self->priv->center_button = _tmp41_;
#line 86 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp42_ = self->priv->center_button;
#line 86 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp43_ = gtk_widget_get_style_context ((GtkWidget*) _tmp42_);
#line 86 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_style_context_add_class (_tmp43_, GTK_STYLE_CLASS_FLAT);
#line 87 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp44_ = self->priv->center_button;
#line 87 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp44_, FALSE);
#line 88 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp45_ = self->priv->center_button;
#line 88 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp46_ = date_grid;
#line 88 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_container_add ((GtkContainer*) _tmp45_, (GtkWidget*) _tmp46_);
#line 90 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp47_ = self->priv->center_button;
#line 90 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_box_pack_start ((GtkBox*) self, (GtkWidget*) _tmp47_, FALSE, FALSE, (guint) 0);
#line 91 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp48_ = self->priv->right_button;
#line 91 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_box_pack_end ((GtkBox*) self, (GtkWidget*) _tmp48_, FALSE, FALSE, (guint) 6);
#line 92 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp49_ = self->priv->left_button;
#line 92 "../src/Widgets/Calendar/CalendarHeader.vala"
	gtk_box_pack_end ((GtkBox*) self, (GtkWidget*) _tmp49_, FALSE, FALSE, (guint) 0);
#line 94 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp50_ = self->priv->left_button;
#line 94 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_connect_object (_tmp50_, "clicked", (GCallback) __widgets_calendar_calendar_header___lambda83__gtk_button_clicked, self, 0);
#line 98 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp51_ = self->priv->right_button;
#line 98 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_connect_object (_tmp51_, "clicked", (GCallback) __widgets_calendar_calendar_header___lambda84__gtk_button_clicked, self, 0);
#line 102 "../src/Widgets/Calendar/CalendarHeader.vala"
	_tmp52_ = self->priv->center_button;
#line 102 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_connect_object (_tmp52_, "clicked", (GCallback) __widgets_calendar_calendar_header___lambda85__gtk_button_clicked, self, 0);
#line 40 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (date_grid);
#line 40 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (chevron_right_image);
#line 40 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (chevron_left_image);
#line 40 "../src/Widgets/Calendar/CalendarHeader.vala"
	return obj;
#line 534 "CalendarHeader.c"
}

static void
widgets_calendar_calendar_header_class_init (WidgetsCalendarCalendarHeaderClass * klass,
                                             gpointer klass_data)
{
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	widgets_calendar_calendar_header_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_type_class_adjust_private_offset (klass, &WidgetsCalendarCalendarHeader_private_offset);
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_calendar_calendar_header_set_property;
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_calendar_calendar_header_constructor;
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_calendar_calendar_header_finalize;
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_CALENDAR_CALENDAR_HEADER_DATE_PROPERTY, widgets_calendar_calendar_header_properties[WIDGETS_CALENDAR_CALENDAR_HEADER_DATE_PROPERTY] = g_param_spec_boxed ("date", "date", "date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE));
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_LEFT_CLICKED_SIGNAL] = g_signal_new ("left-clicked", WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_RIGHT_CLICKED_SIGNAL] = g_signal_new ("right-clicked", WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_CENTER_CLICKED_SIGNAL] = g_signal_new ("center-clicked", WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 559 "CalendarHeader.c"
}

static void
widgets_calendar_calendar_header_instance_init (WidgetsCalendarCalendarHeader * self,
                                                gpointer klass)
{
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	self->priv = widgets_calendar_calendar_header_get_instance_private (self);
#line 568 "CalendarHeader.c"
}

static void
widgets_calendar_calendar_header_finalize (GObject * obj)
{
	WidgetsCalendarCalendarHeader * self;
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeader);
#line 23 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->month_label);
#line 24 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->year_label);
#line 25 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->left_button);
#line 26 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->right_button);
#line 27 "../src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->center_button);
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	G_OBJECT_CLASS (widgets_calendar_calendar_header_parent_class)->finalize (obj);
#line 589 "CalendarHeader.c"
}

static GType
widgets_calendar_calendar_header_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (WidgetsCalendarCalendarHeaderClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_calendar_calendar_header_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsCalendarCalendarHeader), 0, (GInstanceInitFunc) widgets_calendar_calendar_header_instance_init, NULL };
	GType widgets_calendar_calendar_header_type_id;
	widgets_calendar_calendar_header_type_id = g_type_register_static (gtk_box_get_type (), "WidgetsCalendarCalendarHeader", &g_define_type_info, 0);
	WidgetsCalendarCalendarHeader_private_offset = g_type_add_instance_private (widgets_calendar_calendar_header_type_id, sizeof (WidgetsCalendarCalendarHeaderPrivate));
	return widgets_calendar_calendar_header_type_id;
}

GType
widgets_calendar_calendar_header_get_type (void)
{
	static volatile gsize widgets_calendar_calendar_header_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_calendar_calendar_header_type_id__volatile)) {
		GType widgets_calendar_calendar_header_type_id;
		widgets_calendar_calendar_header_type_id = widgets_calendar_calendar_header_get_type_once ();
		g_once_init_leave (&widgets_calendar_calendar_header_type_id__volatile, widgets_calendar_calendar_header_type_id);
	}
	return widgets_calendar_calendar_header_type_id__volatile;
}

static void
_vala_widgets_calendar_calendar_header_set_property (GObject * object,
                                                     guint property_id,
                                                     const GValue * value,
                                                     GParamSpec * pspec)
{
	WidgetsCalendarCalendarHeader * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeader);
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
	switch (property_id) {
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
		case WIDGETS_CALENDAR_CALENDAR_HEADER_DATE_PROPERTY:
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
		widgets_calendar_calendar_header_set_date (self, g_value_get_boxed (value));
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
		break;
#line 630 "CalendarHeader.c"
		default:
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Widgets/Calendar/CalendarHeader.vala"
		break;
#line 636 "CalendarHeader.c"
	}
}

