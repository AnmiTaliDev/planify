/* Pinboard.c generated by valac 0.50.10, the Vala compiler
 * generated from Pinboard.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gio/gio.h>
#include <glib/gi18n-lib.h>
#include <handy.h>

#define VIEWS_TYPE_PINBOARD (views_pinboard_get_type ())
#define VIEWS_PINBOARD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_PINBOARD, ViewsPinboard))
#define VIEWS_PINBOARD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_PINBOARD, ViewsPinboardClass))
#define VIEWS_IS_PINBOARD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_PINBOARD))
#define VIEWS_IS_PINBOARD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_PINBOARD))
#define VIEWS_PINBOARD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_PINBOARD, ViewsPinboardClass))

typedef struct _ViewsPinboard ViewsPinboard;
typedef struct _ViewsPinboardClass ViewsPinboardClass;
typedef struct _ViewsPinboardPrivate ViewsPinboardPrivate;

#define LAYOUTS_TYPE_ITEM_ROW (layouts_item_row_get_type ())
#define LAYOUTS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRow))
#define LAYOUTS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRowClass))
#define LAYOUTS_IS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_ITEM_ROW))
#define LAYOUTS_IS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_ITEM_ROW))
#define LAYOUTS_ITEM_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRowClass))

typedef struct _LayoutsItemRow LayoutsItemRow;
typedef struct _LayoutsItemRowClass LayoutsItemRowClass;
enum  {
	VIEWS_PINBOARD_0_PROPERTY,
	VIEWS_PINBOARD_NUM_PROPERTIES
};
static GParamSpec* views_pinboard_properties[VIEWS_PINBOARD_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block28Data Block28Data;

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define OBJECTS_TYPE_SECTION (objects_section_get_type ())
#define OBJECTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_SECTION, ObjectsSection))
#define OBJECTS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_SECTION, ObjectsSectionClass))
#define OBJECTS_IS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_SECTION))
#define OBJECTS_IS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_SECTION))
#define OBJECTS_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_SECTION, ObjectsSectionClass))

typedef struct _ObjectsSection ObjectsSection;
typedef struct _ObjectsSectionClass ObjectsSectionClass;

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;

#define WIDGETS_TYPE_MAGIC_BUTTON (widgets_magic_button_get_type ())
#define WIDGETS_MAGIC_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButton))
#define WIDGETS_MAGIC_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButtonClass))
#define WIDGETS_IS_MAGIC_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_MAGIC_BUTTON))
#define WIDGETS_IS_MAGIC_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_MAGIC_BUTTON))
#define WIDGETS_MAGIC_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButtonClass))

typedef struct _WidgetsMagicButton WidgetsMagicButton;
typedef struct _WidgetsMagicButtonClass WidgetsMagicButtonClass;

struct _ViewsPinboard {
	GtkEventBox parent_instance;
	ViewsPinboardPrivate * priv;
	GeeHashMap* items;
};

struct _ViewsPinboardClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsPinboardPrivate {
	GtkListBox* listbox;
};

struct _Block28Data {
	int _ref_count_;
	ViewsPinboard* self;
	LayoutsItemRow* row;
};

static gint ViewsPinboard_private_offset;
static gpointer views_pinboard_parent_class = NULL;
extern ServicesEventBus* planner_event_bus;
extern ServicesDatabase* planner_database;
extern GSettings* planner_settings;

GType views_pinboard_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsPinboard, g_object_unref)
GType layouts_item_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsItemRow, g_object_unref)
void views_pinboard_prepare_new_item (ViewsPinboard* self);
static Block28Data* block28_data_ref (Block28Data* _data28_);
static void block28_data_unref (void * _userdata_);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
ObjectsProject* services_database_get_project (ServicesDatabase* self,
                                               gint64 id);
LayoutsItemRow* layouts_item_row_new_for_project (ObjectsProject* project);
LayoutsItemRow* layouts_item_row_construct_for_project (GType object_type,
                                                        ObjectsProject* project);
void layouts_item_row_update_pinned (LayoutsItemRow* self,
                                     gboolean pinned);
static void __lambda279_ (Block28Data* _data28_);
static void views_pinboard_item_added (ViewsPinboard* self,
                                LayoutsItemRow* row);
static void ___lambda279__layouts_item_row_item_added (LayoutsItemRow* _sender,
                                                gpointer self);
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
ObjectsItem* layouts_item_row_get_item (LayoutsItemRow* self);
gboolean objects_item_get_pinned (ObjectsItem* self);
static void views_pinboard_valid_add_itemrow (ViewsPinboard* self,
                                       LayoutsItemRow* row);
void layouts_item_row_update_inserted_item (LayoutsItemRow* self);
gint64 objects_item_get_section_id (ObjectsItem* self);
#define CONSTANTS_INACTIVE 0
GType objects_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsSection, g_object_unref)
ObjectsSection* services_database_get_section (ServicesDatabase* self,
                                               gint64 id);
ObjectsItem* objects_section_add_item_if_not_exists (ObjectsSection* self,
                                                     ObjectsItem* new_item,
                                                     gboolean insert);
gint64 objects_item_get_project_id (ObjectsItem* self);
ObjectsItem* objects_project_add_item_if_not_exists (ObjectsProject* self,
                                                     ObjectsItem* new_item,
                                                     gboolean insert);
void layouts_item_row_hide_destroy (LayoutsItemRow* self);
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
static void views_pinboard_valid_add_item (ViewsPinboard* self,
                                    ObjectsItem* item,
                                    gboolean insert);
gboolean objects_item_get_checked (ObjectsItem* self);
static void views_pinboard_add_item (ViewsPinboard* self,
                              ObjectsItem* item);
static void views_pinboard_valid_delete_item (ViewsPinboard* self,
                                       ObjectsItem* item);
static void views_pinboard_valid_update_item (ViewsPinboard* self,
                                       ObjectsItem* item);
static void views_pinboard_add_items (ViewsPinboard* self);
GeeArrayList* services_database_get_items_pinned (ServicesDatabase* self,
                                                  gboolean checked);
LayoutsItemRow* layouts_item_row_new (ObjectsItem* item);
LayoutsItemRow* layouts_item_row_construct (GType object_type,
                                            ObjectsItem* item);
static GtkWidget* views_pinboard_get_placeholder (ViewsPinboard* self);
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
void widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                            const gchar* icon_name);
ViewsPinboard* views_pinboard_new (void);
ViewsPinboard* views_pinboard_construct (GType object_type);
static GObject * views_pinboard_constructor (GType type,
                                      guint n_construct_properties,
                                      GObjectConstructParam * construct_properties);
GType widgets_magic_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsMagicButton, g_object_unref)
WidgetsMagicButton* widgets_magic_button_new (void);
WidgetsMagicButton* widgets_magic_button_construct (GType object_type);
static void _views_pinboard___lambda280_ (ViewsPinboard* self);
static void __views_pinboard___lambda280__widgets_magic_button_clicked (WidgetsMagicButton* _sender,
                                                                 gpointer self);
static void _views_pinboard_valid_add_item_services_database_item_added (ServicesDatabase* _sender,
                                                                  ObjectsItem* item,
                                                                  gboolean insert,
                                                                  gpointer self);
static void _views_pinboard_valid_delete_item_services_database_item_deleted (ServicesDatabase* _sender,
                                                                       ObjectsItem* item,
                                                                       gpointer self);
static void _views_pinboard_valid_update_item_services_database_item_updated (ServicesDatabase* _sender,
                                                                       ObjectsItem* item,
                                                                       gint64 update_id,
                                                                       gpointer self);
static void views_pinboard_finalize (GObject * obj);
static GType views_pinboard_get_type_once (void);

static inline gpointer
views_pinboard_get_instance_private (ViewsPinboard* self)
{
	return G_STRUCT_MEMBER_P (self, ViewsPinboard_private_offset);
}

static Block28Data*
block28_data_ref (Block28Data* _data28_)
{
#line 111 "../src/Views/Pinboard.vala"
	g_atomic_int_inc (&_data28_->_ref_count_);
#line 111 "../src/Views/Pinboard.vala"
	return _data28_;
#line 262 "Pinboard.c"
}

static void
block28_data_unref (void * _userdata_)
{
	Block28Data* _data28_;
	_data28_ = (Block28Data*) _userdata_;
#line 111 "../src/Views/Pinboard.vala"
	if (g_atomic_int_dec_and_test (&_data28_->_ref_count_)) {
#line 272 "Pinboard.c"
		ViewsPinboard* self;
#line 111 "../src/Views/Pinboard.vala"
		self = _data28_->self;
#line 111 "../src/Views/Pinboard.vala"
		_g_object_unref0 (_data28_->row);
#line 111 "../src/Views/Pinboard.vala"
		_g_object_unref0 (self);
#line 111 "../src/Views/Pinboard.vala"
		g_slice_free (Block28Data, _data28_);
#line 282 "Pinboard.c"
	}
}

static void
__lambda279_ (Block28Data* _data28_)
{
	ViewsPinboard* self;
#line 118 "../src/Views/Pinboard.vala"
	self = _data28_->self;
#line 119 "../src/Views/Pinboard.vala"
	views_pinboard_item_added (self, _data28_->row);
#line 294 "Pinboard.c"
}

static void
___lambda279__layouts_item_row_item_added (LayoutsItemRow* _sender,
                                           gpointer self)
{
#line 118 "../src/Views/Pinboard.vala"
	__lambda279_ (self);
#line 303 "Pinboard.c"
}

void
views_pinboard_prepare_new_item (ViewsPinboard* self)
{
	Block28Data* _data28_;
	ServicesEventBus* _tmp0_;
	ServicesDatabase* _tmp1_;
	GSettings* _tmp2_;
	ObjectsProject* _tmp3_;
	ObjectsProject* _tmp4_;
	LayoutsItemRow* _tmp5_;
	LayoutsItemRow* _tmp6_;
	GtkListBox* _tmp7_;
	GtkListBox* _tmp8_;
#line 111 "../src/Views/Pinboard.vala"
	g_return_if_fail (self != NULL);
#line 111 "../src/Views/Pinboard.vala"
	_data28_ = g_slice_new0 (Block28Data);
#line 111 "../src/Views/Pinboard.vala"
	_data28_->_ref_count_ = 1;
#line 111 "../src/Views/Pinboard.vala"
	_data28_->self = g_object_ref (self);
#line 112 "../src/Views/Pinboard.vala"
	_tmp0_ = planner_event_bus;
#line 112 "../src/Views/Pinboard.vala"
	g_signal_emit_by_name (_tmp0_, "item-selected", NULL);
#line 114 "../src/Views/Pinboard.vala"
	_tmp1_ = planner_database;
#line 114 "../src/Views/Pinboard.vala"
	_tmp2_ = planner_settings;
#line 114 "../src/Views/Pinboard.vala"
	_tmp3_ = services_database_get_project (_tmp1_, g_settings_get_int64 (_tmp2_, "inbox-project-id"));
#line 114 "../src/Views/Pinboard.vala"
	_tmp4_ = _tmp3_;
#line 114 "../src/Views/Pinboard.vala"
	_tmp5_ = layouts_item_row_new_for_project (_tmp4_);
#line 114 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp5_);
#line 114 "../src/Views/Pinboard.vala"
	_tmp6_ = _tmp5_;
#line 114 "../src/Views/Pinboard.vala"
	_g_object_unref0 (_tmp4_);
#line 114 "../src/Views/Pinboard.vala"
	_data28_->row = _tmp6_;
#line 117 "../src/Views/Pinboard.vala"
	layouts_item_row_update_pinned (_data28_->row, TRUE);
#line 118 "../src/Views/Pinboard.vala"
	g_signal_connect_data (_data28_->row, "item-added", (GCallback) ___lambda279__layouts_item_row_item_added, block28_data_ref (_data28_), (GClosureNotify) block28_data_unref, 0);
#line 122 "../src/Views/Pinboard.vala"
	_tmp7_ = self->priv->listbox;
#line 122 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) _tmp7_, (GtkWidget*) _data28_->row);
#line 123 "../src/Views/Pinboard.vala"
	_tmp8_ = self->priv->listbox;
#line 123 "../src/Views/Pinboard.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp8_);
#line 111 "../src/Views/Pinboard.vala"
	block28_data_unref (_data28_);
#line 111 "../src/Views/Pinboard.vala"
	_data28_ = NULL;
#line 365 "Pinboard.c"
}

static void
views_pinboard_item_added (ViewsPinboard* self,
                           LayoutsItemRow* row)
{
	gboolean insert = FALSE;
	ObjectsItem* _tmp0_;
	ObjectsItem* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	ObjectsItem* _tmp4_;
	ObjectsItem* _tmp5_;
	gint64 _tmp6_;
	gint64 _tmp7_;
#line 126 "../src/Views/Pinboard.vala"
	g_return_if_fail (self != NULL);
#line 126 "../src/Views/Pinboard.vala"
	g_return_if_fail (row != NULL);
#line 127 "../src/Views/Pinboard.vala"
	_tmp0_ = layouts_item_row_get_item (row);
#line 127 "../src/Views/Pinboard.vala"
	_tmp1_ = _tmp0_;
#line 127 "../src/Views/Pinboard.vala"
	_tmp2_ = objects_item_get_pinned (_tmp1_);
#line 127 "../src/Views/Pinboard.vala"
	_tmp3_ = _tmp2_;
#line 127 "../src/Views/Pinboard.vala"
	insert = !_tmp3_;
#line 129 "../src/Views/Pinboard.vala"
	if (!insert) {
#line 130 "../src/Views/Pinboard.vala"
		views_pinboard_valid_add_itemrow (self, row);
#line 131 "../src/Views/Pinboard.vala"
		layouts_item_row_update_inserted_item (row);
#line 401 "Pinboard.c"
	}
#line 134 "../src/Views/Pinboard.vala"
	_tmp4_ = layouts_item_row_get_item (row);
#line 134 "../src/Views/Pinboard.vala"
	_tmp5_ = _tmp4_;
#line 134 "../src/Views/Pinboard.vala"
	_tmp6_ = objects_item_get_section_id (_tmp5_);
#line 134 "../src/Views/Pinboard.vala"
	_tmp7_ = _tmp6_;
#line 134 "../src/Views/Pinboard.vala"
	if (_tmp7_ != ((gint64) CONSTANTS_INACTIVE)) {
#line 413 "Pinboard.c"
		ServicesDatabase* _tmp8_;
		ObjectsItem* _tmp9_;
		ObjectsItem* _tmp10_;
		gint64 _tmp11_;
		gint64 _tmp12_;
		ObjectsSection* _tmp13_;
		ObjectsSection* _tmp14_;
		ObjectsItem* _tmp15_;
		ObjectsItem* _tmp16_;
		ObjectsItem* _tmp17_;
		ObjectsItem* _tmp18_;
#line 135 "../src/Views/Pinboard.vala"
		_tmp8_ = planner_database;
#line 135 "../src/Views/Pinboard.vala"
		_tmp9_ = layouts_item_row_get_item (row);
#line 135 "../src/Views/Pinboard.vala"
		_tmp10_ = _tmp9_;
#line 135 "../src/Views/Pinboard.vala"
		_tmp11_ = objects_item_get_section_id (_tmp10_);
#line 135 "../src/Views/Pinboard.vala"
		_tmp12_ = _tmp11_;
#line 135 "../src/Views/Pinboard.vala"
		_tmp13_ = services_database_get_section (_tmp8_, _tmp12_);
#line 135 "../src/Views/Pinboard.vala"
		_tmp14_ = _tmp13_;
#line 135 "../src/Views/Pinboard.vala"
		_tmp15_ = layouts_item_row_get_item (row);
#line 135 "../src/Views/Pinboard.vala"
		_tmp16_ = _tmp15_;
#line 135 "../src/Views/Pinboard.vala"
		_tmp17_ = objects_section_add_item_if_not_exists (_tmp14_, _tmp16_, TRUE);
#line 135 "../src/Views/Pinboard.vala"
		_tmp18_ = _tmp17_;
#line 135 "../src/Views/Pinboard.vala"
		_g_object_unref0 (_tmp18_);
#line 135 "../src/Views/Pinboard.vala"
		_g_object_unref0 (_tmp14_);
#line 451 "Pinboard.c"
	} else {
		ServicesDatabase* _tmp19_;
		ObjectsItem* _tmp20_;
		ObjectsItem* _tmp21_;
		gint64 _tmp22_;
		gint64 _tmp23_;
		ObjectsProject* _tmp24_;
		ObjectsProject* _tmp25_;
		ObjectsItem* _tmp26_;
		ObjectsItem* _tmp27_;
		ObjectsItem* _tmp28_;
		ObjectsItem* _tmp29_;
#line 138 "../src/Views/Pinboard.vala"
		_tmp19_ = planner_database;
#line 138 "../src/Views/Pinboard.vala"
		_tmp20_ = layouts_item_row_get_item (row);
#line 138 "../src/Views/Pinboard.vala"
		_tmp21_ = _tmp20_;
#line 138 "../src/Views/Pinboard.vala"
		_tmp22_ = objects_item_get_project_id (_tmp21_);
#line 138 "../src/Views/Pinboard.vala"
		_tmp23_ = _tmp22_;
#line 138 "../src/Views/Pinboard.vala"
		_tmp24_ = services_database_get_project (_tmp19_, _tmp23_);
#line 138 "../src/Views/Pinboard.vala"
		_tmp25_ = _tmp24_;
#line 138 "../src/Views/Pinboard.vala"
		_tmp26_ = layouts_item_row_get_item (row);
#line 138 "../src/Views/Pinboard.vala"
		_tmp27_ = _tmp26_;
#line 138 "../src/Views/Pinboard.vala"
		_tmp28_ = objects_project_add_item_if_not_exists (_tmp25_, _tmp27_, TRUE);
#line 138 "../src/Views/Pinboard.vala"
		_tmp29_ = _tmp28_;
#line 138 "../src/Views/Pinboard.vala"
		_g_object_unref0 (_tmp29_);
#line 138 "../src/Views/Pinboard.vala"
		_g_object_unref0 (_tmp25_);
#line 490 "Pinboard.c"
	}
#line 142 "../src/Views/Pinboard.vala"
	if (insert) {
#line 143 "../src/Views/Pinboard.vala"
		layouts_item_row_hide_destroy (row);
#line 496 "Pinboard.c"
	}
}

static void
views_pinboard_valid_add_itemrow (ViewsPinboard* self,
                                  LayoutsItemRow* row)
{
	gboolean _tmp0_ = FALSE;
	GeeHashMap* _tmp1_;
	ObjectsItem* _tmp2_;
	ObjectsItem* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
#line 147 "../src/Views/Pinboard.vala"
	g_return_if_fail (self != NULL);
#line 147 "../src/Views/Pinboard.vala"
	g_return_if_fail (row != NULL);
#line 148 "../src/Views/Pinboard.vala"
	_tmp1_ = self->items;
#line 148 "../src/Views/Pinboard.vala"
	_tmp2_ = layouts_item_row_get_item (row);
#line 148 "../src/Views/Pinboard.vala"
	_tmp3_ = _tmp2_;
#line 148 "../src/Views/Pinboard.vala"
	_tmp4_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp3_);
#line 148 "../src/Views/Pinboard.vala"
	_tmp5_ = _tmp4_;
#line 148 "../src/Views/Pinboard.vala"
	if (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp1_, _tmp5_)) {
#line 526 "Pinboard.c"
		ObjectsItem* _tmp6_;
		ObjectsItem* _tmp7_;
		gboolean _tmp8_;
		gboolean _tmp9_;
#line 148 "../src/Views/Pinboard.vala"
		_tmp6_ = layouts_item_row_get_item (row);
#line 148 "../src/Views/Pinboard.vala"
		_tmp7_ = _tmp6_;
#line 148 "../src/Views/Pinboard.vala"
		_tmp8_ = objects_item_get_pinned (_tmp7_);
#line 148 "../src/Views/Pinboard.vala"
		_tmp9_ = _tmp8_;
#line 148 "../src/Views/Pinboard.vala"
		_tmp0_ = _tmp9_;
#line 541 "Pinboard.c"
	} else {
#line 148 "../src/Views/Pinboard.vala"
		_tmp0_ = FALSE;
#line 545 "Pinboard.c"
	}
#line 148 "../src/Views/Pinboard.vala"
	if (_tmp0_) {
#line 549 "Pinboard.c"
		GeeHashMap* _tmp10_;
		ObjectsItem* _tmp11_;
		ObjectsItem* _tmp12_;
		const gchar* _tmp13_;
		const gchar* _tmp14_;
		GtkListBox* _tmp15_;
		GeeHashMap* _tmp16_;
		ObjectsItem* _tmp17_;
		ObjectsItem* _tmp18_;
		const gchar* _tmp19_;
		const gchar* _tmp20_;
		gpointer _tmp21_;
		LayoutsItemRow* _tmp22_;
		GtkListBox* _tmp23_;
#line 149 "../src/Views/Pinboard.vala"
		_tmp10_ = self->items;
#line 149 "../src/Views/Pinboard.vala"
		_tmp11_ = layouts_item_row_get_item (row);
#line 149 "../src/Views/Pinboard.vala"
		_tmp12_ = _tmp11_;
#line 149 "../src/Views/Pinboard.vala"
		_tmp13_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp12_);
#line 149 "../src/Views/Pinboard.vala"
		_tmp14_ = _tmp13_;
#line 149 "../src/Views/Pinboard.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp10_, _tmp14_, row);
#line 150 "../src/Views/Pinboard.vala"
		_tmp15_ = self->priv->listbox;
#line 150 "../src/Views/Pinboard.vala"
		_tmp16_ = self->items;
#line 150 "../src/Views/Pinboard.vala"
		_tmp17_ = layouts_item_row_get_item (row);
#line 150 "../src/Views/Pinboard.vala"
		_tmp18_ = _tmp17_;
#line 150 "../src/Views/Pinboard.vala"
		_tmp19_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp18_);
#line 150 "../src/Views/Pinboard.vala"
		_tmp20_ = _tmp19_;
#line 150 "../src/Views/Pinboard.vala"
		_tmp21_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp16_, _tmp20_);
#line 150 "../src/Views/Pinboard.vala"
		_tmp22_ = (LayoutsItemRow*) _tmp21_;
#line 150 "../src/Views/Pinboard.vala"
		gtk_container_add ((GtkContainer*) _tmp15_, (GtkWidget*) _tmp22_);
#line 150 "../src/Views/Pinboard.vala"
		_g_object_unref0 (_tmp22_);
#line 151 "../src/Views/Pinboard.vala"
		_tmp23_ = self->priv->listbox;
#line 151 "../src/Views/Pinboard.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp23_);
#line 600 "Pinboard.c"
	}
}

static void
views_pinboard_valid_add_item (ViewsPinboard* self,
                               ObjectsItem* item,
                               gboolean insert)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GeeHashMap* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
#line 155 "../src/Views/Pinboard.vala"
	g_return_if_fail (self != NULL);
#line 155 "../src/Views/Pinboard.vala"
	g_return_if_fail (item != NULL);
#line 156 "../src/Views/Pinboard.vala"
	_tmp2_ = self->items;
#line 156 "../src/Views/Pinboard.vala"
	_tmp3_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 156 "../src/Views/Pinboard.vala"
	_tmp4_ = _tmp3_;
#line 156 "../src/Views/Pinboard.vala"
	if (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp2_, _tmp4_)) {
#line 626 "Pinboard.c"
		gboolean _tmp5_;
		gboolean _tmp6_;
#line 156 "../src/Views/Pinboard.vala"
		_tmp5_ = objects_item_get_pinned (item);
#line 156 "../src/Views/Pinboard.vala"
		_tmp6_ = _tmp5_;
#line 156 "../src/Views/Pinboard.vala"
		_tmp1_ = _tmp6_;
#line 635 "Pinboard.c"
	} else {
#line 156 "../src/Views/Pinboard.vala"
		_tmp1_ = FALSE;
#line 639 "Pinboard.c"
	}
#line 156 "../src/Views/Pinboard.vala"
	if (_tmp1_) {
#line 643 "Pinboard.c"
		gboolean _tmp7_;
		gboolean _tmp8_;
#line 156 "../src/Views/Pinboard.vala"
		_tmp7_ = objects_item_get_checked (item);
#line 156 "../src/Views/Pinboard.vala"
		_tmp8_ = _tmp7_;
#line 156 "../src/Views/Pinboard.vala"
		_tmp0_ = !_tmp8_;
#line 652 "Pinboard.c"
	} else {
#line 156 "../src/Views/Pinboard.vala"
		_tmp0_ = FALSE;
#line 656 "Pinboard.c"
	}
#line 156 "../src/Views/Pinboard.vala"
	if (_tmp0_) {
#line 157 "../src/Views/Pinboard.vala"
		views_pinboard_add_item (self, item);
#line 662 "Pinboard.c"
	}
}

static void
views_pinboard_valid_delete_item (ViewsPinboard* self,
                                  ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 161 "../src/Views/Pinboard.vala"
	g_return_if_fail (self != NULL);
#line 161 "../src/Views/Pinboard.vala"
	g_return_if_fail (item != NULL);
#line 162 "../src/Views/Pinboard.vala"
	_tmp0_ = self->items;
#line 162 "../src/Views/Pinboard.vala"
	_tmp1_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 162 "../src/Views/Pinboard.vala"
	_tmp2_ = _tmp1_;
#line 162 "../src/Views/Pinboard.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp0_, _tmp2_)) {
#line 685 "Pinboard.c"
		GeeHashMap* _tmp3_;
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		gpointer _tmp6_;
		LayoutsItemRow* _tmp7_;
		GeeHashMap* _tmp8_;
		const gchar* _tmp9_;
		const gchar* _tmp10_;
#line 163 "../src/Views/Pinboard.vala"
		_tmp3_ = self->items;
#line 163 "../src/Views/Pinboard.vala"
		_tmp4_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 163 "../src/Views/Pinboard.vala"
		_tmp5_ = _tmp4_;
#line 163 "../src/Views/Pinboard.vala"
		_tmp6_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp3_, _tmp5_);
#line 163 "../src/Views/Pinboard.vala"
		_tmp7_ = (LayoutsItemRow*) _tmp6_;
#line 163 "../src/Views/Pinboard.vala"
		layouts_item_row_hide_destroy (_tmp7_);
#line 163 "../src/Views/Pinboard.vala"
		_g_object_unref0 (_tmp7_);
#line 164 "../src/Views/Pinboard.vala"
		_tmp8_ = self->items;
#line 164 "../src/Views/Pinboard.vala"
		_tmp9_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 164 "../src/Views/Pinboard.vala"
		_tmp10_ = _tmp9_;
#line 164 "../src/Views/Pinboard.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp8_, _tmp10_, NULL);
#line 716 "Pinboard.c"
	}
}

static void
views_pinboard_valid_update_item (ViewsPinboard* self,
                                  ObjectsItem* item)
{
	gboolean _tmp0_ = FALSE;
	GeeHashMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 168 "../src/Views/Pinboard.vala"
	g_return_if_fail (self != NULL);
#line 168 "../src/Views/Pinboard.vala"
	g_return_if_fail (item != NULL);
#line 169 "../src/Views/Pinboard.vala"
	_tmp1_ = self->items;
#line 169 "../src/Views/Pinboard.vala"
	_tmp2_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 169 "../src/Views/Pinboard.vala"
	_tmp3_ = _tmp2_;
#line 169 "../src/Views/Pinboard.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp1_, _tmp3_)) {
#line 740 "Pinboard.c"
		gboolean _tmp4_ = FALSE;
		gboolean _tmp5_;
		gboolean _tmp6_;
#line 169 "../src/Views/Pinboard.vala"
		_tmp5_ = objects_item_get_pinned (item);
#line 169 "../src/Views/Pinboard.vala"
		_tmp6_ = _tmp5_;
#line 169 "../src/Views/Pinboard.vala"
		if (!_tmp6_) {
#line 169 "../src/Views/Pinboard.vala"
			_tmp4_ = TRUE;
#line 752 "Pinboard.c"
		} else {
			gboolean _tmp7_;
			gboolean _tmp8_;
#line 169 "../src/Views/Pinboard.vala"
			_tmp7_ = objects_item_get_checked (item);
#line 169 "../src/Views/Pinboard.vala"
			_tmp8_ = _tmp7_;
#line 169 "../src/Views/Pinboard.vala"
			_tmp4_ = _tmp8_;
#line 762 "Pinboard.c"
		}
#line 169 "../src/Views/Pinboard.vala"
		_tmp0_ = _tmp4_;
#line 766 "Pinboard.c"
	} else {
#line 169 "../src/Views/Pinboard.vala"
		_tmp0_ = FALSE;
#line 770 "Pinboard.c"
	}
#line 169 "../src/Views/Pinboard.vala"
	if (_tmp0_) {
#line 774 "Pinboard.c"
		GeeHashMap* _tmp9_;
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		gpointer _tmp12_;
		LayoutsItemRow* _tmp13_;
		GeeHashMap* _tmp14_;
		const gchar* _tmp15_;
		const gchar* _tmp16_;
#line 170 "../src/Views/Pinboard.vala"
		_tmp9_ = self->items;
#line 170 "../src/Views/Pinboard.vala"
		_tmp10_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 170 "../src/Views/Pinboard.vala"
		_tmp11_ = _tmp10_;
#line 170 "../src/Views/Pinboard.vala"
		_tmp12_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp9_, _tmp11_);
#line 170 "../src/Views/Pinboard.vala"
		_tmp13_ = (LayoutsItemRow*) _tmp12_;
#line 170 "../src/Views/Pinboard.vala"
		layouts_item_row_hide_destroy (_tmp13_);
#line 170 "../src/Views/Pinboard.vala"
		_g_object_unref0 (_tmp13_);
#line 171 "../src/Views/Pinboard.vala"
		_tmp14_ = self->items;
#line 171 "../src/Views/Pinboard.vala"
		_tmp15_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 171 "../src/Views/Pinboard.vala"
		_tmp16_ = _tmp15_;
#line 171 "../src/Views/Pinboard.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp14_, _tmp16_, NULL);
#line 805 "Pinboard.c"
	}
#line 174 "../src/Views/Pinboard.vala"
	views_pinboard_valid_add_item (self, item, TRUE);
#line 809 "Pinboard.c"
}

static void
views_pinboard_add_items (ViewsPinboard* self)
{
#line 177 "../src/Views/Pinboard.vala"
	g_return_if_fail (self != NULL);
#line 817 "Pinboard.c"
	{
		GeeArrayList* _item_list = NULL;
		ServicesDatabase* _tmp0_;
		GeeArrayList* _tmp1_;
		gint _item_size = 0;
		GeeArrayList* _tmp2_;
		gint _tmp3_;
		gint _tmp4_;
		gint _item_index = 0;
#line 178 "../src/Views/Pinboard.vala"
		_tmp0_ = planner_database;
#line 178 "../src/Views/Pinboard.vala"
		_tmp1_ = services_database_get_items_pinned (_tmp0_, FALSE);
#line 178 "../src/Views/Pinboard.vala"
		_item_list = _tmp1_;
#line 178 "../src/Views/Pinboard.vala"
		_tmp2_ = _item_list;
#line 178 "../src/Views/Pinboard.vala"
		_tmp3_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp2_);
#line 178 "../src/Views/Pinboard.vala"
		_tmp4_ = _tmp3_;
#line 178 "../src/Views/Pinboard.vala"
		_item_size = _tmp4_;
#line 178 "../src/Views/Pinboard.vala"
		_item_index = -1;
#line 178 "../src/Views/Pinboard.vala"
		while (TRUE) {
#line 845 "Pinboard.c"
			gint _tmp5_;
			gint _tmp6_;
			ObjectsItem* item = NULL;
			GeeArrayList* _tmp7_;
			gpointer _tmp8_;
			ObjectsItem* _tmp9_;
#line 178 "../src/Views/Pinboard.vala"
			_item_index = _item_index + 1;
#line 178 "../src/Views/Pinboard.vala"
			_tmp5_ = _item_index;
#line 178 "../src/Views/Pinboard.vala"
			_tmp6_ = _item_size;
#line 178 "../src/Views/Pinboard.vala"
			if (!(_tmp5_ < _tmp6_)) {
#line 178 "../src/Views/Pinboard.vala"
				break;
#line 862 "Pinboard.c"
			}
#line 178 "../src/Views/Pinboard.vala"
			_tmp7_ = _item_list;
#line 178 "../src/Views/Pinboard.vala"
			_tmp8_ = gee_abstract_list_get ((GeeAbstractList*) _tmp7_, _item_index);
#line 178 "../src/Views/Pinboard.vala"
			item = (ObjectsItem*) _tmp8_;
#line 179 "../src/Views/Pinboard.vala"
			_tmp9_ = item;
#line 179 "../src/Views/Pinboard.vala"
			views_pinboard_add_item (self, _tmp9_);
#line 178 "../src/Views/Pinboard.vala"
			_g_object_unref0 (item);
#line 876 "Pinboard.c"
		}
#line 178 "../src/Views/Pinboard.vala"
		_g_object_unref0 (_item_list);
#line 880 "Pinboard.c"
	}
}

static void
views_pinboard_add_item (ViewsPinboard* self,
                         ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	LayoutsItemRow* _tmp3_;
	LayoutsItemRow* _tmp4_;
	GtkListBox* _tmp5_;
	GeeHashMap* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	gpointer _tmp9_;
	LayoutsItemRow* _tmp10_;
	GtkListBox* _tmp11_;
#line 183 "../src/Views/Pinboard.vala"
	g_return_if_fail (self != NULL);
#line 183 "../src/Views/Pinboard.vala"
	g_return_if_fail (item != NULL);
#line 184 "../src/Views/Pinboard.vala"
	_tmp0_ = self->items;
#line 184 "../src/Views/Pinboard.vala"
	_tmp1_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 184 "../src/Views/Pinboard.vala"
	_tmp2_ = _tmp1_;
#line 184 "../src/Views/Pinboard.vala"
	_tmp3_ = layouts_item_row_new (item);
#line 184 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp3_);
#line 184 "../src/Views/Pinboard.vala"
	_tmp4_ = _tmp3_;
#line 184 "../src/Views/Pinboard.vala"
	gee_abstract_map_set ((GeeAbstractMap*) _tmp0_, _tmp2_, _tmp4_);
#line 184 "../src/Views/Pinboard.vala"
	_g_object_unref0 (_tmp4_);
#line 185 "../src/Views/Pinboard.vala"
	_tmp5_ = self->priv->listbox;
#line 185 "../src/Views/Pinboard.vala"
	_tmp6_ = self->items;
#line 185 "../src/Views/Pinboard.vala"
	_tmp7_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 185 "../src/Views/Pinboard.vala"
	_tmp8_ = _tmp7_;
#line 185 "../src/Views/Pinboard.vala"
	_tmp9_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp6_, _tmp8_);
#line 185 "../src/Views/Pinboard.vala"
	_tmp10_ = (LayoutsItemRow*) _tmp9_;
#line 185 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) _tmp5_, (GtkWidget*) _tmp10_);
#line 185 "../src/Views/Pinboard.vala"
	_g_object_unref0 (_tmp10_);
#line 186 "../src/Views/Pinboard.vala"
	_tmp11_ = self->priv->listbox;
#line 186 "../src/Views/Pinboard.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp11_);
#line 940 "Pinboard.c"
}

static GtkWidget*
views_pinboard_get_placeholder (ViewsPinboard* self)
{
	WidgetsDynamicIcon* calendar_image = NULL;
	WidgetsDynamicIcon* _tmp0_ = NULL;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp1_ = NULL;
	GtkWidget* result = NULL;
#line 189 "../src/Views/Pinboard.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 190 "../src/Views/Pinboard.vala"
	_tmp0_ = widgets_dynamic_icon_new ();
#line 190 "../src/Views/Pinboard.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp0_, 0.1);
#line 190 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp0_);
#line 190 "../src/Views/Pinboard.vala"
	calendar_image = _tmp0_;
#line 193 "../src/Views/Pinboard.vala"
	widgets_dynamic_icon_set_size (calendar_image, 96);
#line 195 "../src/Views/Pinboard.vala"
	widgets_dynamic_icon_update_icon_name (calendar_image, "planner-pinned");
#line 197 "../src/Views/Pinboard.vala"
	_tmp1_ = (GtkGrid*) gtk_grid_new ();
#line 197 "../src/Views/Pinboard.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp1_, 128);
#line 197 "../src/Views/Pinboard.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp1_, GTK_ALIGN_CENTER);
#line 197 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp1_);
#line 197 "../src/Views/Pinboard.vala"
	grid = _tmp1_;
#line 201 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) grid, (GtkWidget*) calendar_image);
#line 202 "../src/Views/Pinboard.vala"
	gtk_widget_show_all ((GtkWidget*) grid);
#line 204 "../src/Views/Pinboard.vala"
	result = (GtkWidget*) grid;
#line 204 "../src/Views/Pinboard.vala"
	_g_object_unref0 (calendar_image);
#line 204 "../src/Views/Pinboard.vala"
	return result;
#line 985 "Pinboard.c"
}

ViewsPinboard*
views_pinboard_construct (GType object_type)
{
	ViewsPinboard * self = NULL;
#line 1 "../src/Views/Pinboard.vala"
	self = (ViewsPinboard*) g_object_new (object_type, NULL);
#line 1 "../src/Views/Pinboard.vala"
	return self;
#line 996 "Pinboard.c"
}

ViewsPinboard*
views_pinboard_new (void)
{
#line 1 "../src/Views/Pinboard.vala"
	return views_pinboard_construct (VIEWS_TYPE_PINBOARD);
#line 1004 "Pinboard.c"
}

static void
_views_pinboard___lambda280_ (ViewsPinboard* self)
{
#line 103 "../src/Views/Pinboard.vala"
	views_pinboard_prepare_new_item (self);
#line 1012 "Pinboard.c"
}

static void
__views_pinboard___lambda280__widgets_magic_button_clicked (WidgetsMagicButton* _sender,
                                                            gpointer self)
{
#line 102 "../src/Views/Pinboard.vala"
	_views_pinboard___lambda280_ ((ViewsPinboard*) self);
#line 1021 "Pinboard.c"
}

static void
_views_pinboard_valid_add_item_services_database_item_added (ServicesDatabase* _sender,
                                                             ObjectsItem* item,
                                                             gboolean insert,
                                                             gpointer self)
{
#line 106 "../src/Views/Pinboard.vala"
	views_pinboard_valid_add_item ((ViewsPinboard*) self, item, insert);
#line 1032 "Pinboard.c"
}

static void
_views_pinboard_valid_delete_item_services_database_item_deleted (ServicesDatabase* _sender,
                                                                  ObjectsItem* item,
                                                                  gpointer self)
{
#line 107 "../src/Views/Pinboard.vala"
	views_pinboard_valid_delete_item ((ViewsPinboard*) self, item);
#line 1042 "Pinboard.c"
}

static void
_views_pinboard_valid_update_item_services_database_item_updated (ServicesDatabase* _sender,
                                                                  ObjectsItem* item,
                                                                  gint64 update_id,
                                                                  gpointer self)
{
#line 108 "../src/Views/Pinboard.vala"
	views_pinboard_valid_update_item ((ViewsPinboard*) self, item);
#line 1053 "Pinboard.c"
}

static GObject *
views_pinboard_constructor (GType type,
                            guint n_construct_properties,
                            GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsPinboard * self;
	GeeHashMap* _tmp0_;
	GtkImage* pin_icon = NULL;
	GThemedIcon* _tmp1_;
	GtkImage* _tmp2_ = NULL;
	GtkLabel* title_label = NULL;
	GtkLabel* _tmp3_;
	GtkLabel* _tmp4_;
	GtkStyleContext* _tmp5_;
	WidgetsDynamicIcon* menu_image = NULL;
	WidgetsDynamicIcon* _tmp6_;
	WidgetsDynamicIcon* _tmp7_;
	WidgetsDynamicIcon* _tmp8_;
	GtkButton* menu_button = NULL;
	GtkButton* _tmp9_ = NULL;
	GtkButton* _tmp10_;
	WidgetsDynamicIcon* _tmp11_;
	GtkButton* _tmp12_;
	GtkStyleContext* _tmp13_;
	WidgetsDynamicIcon* search_image = NULL;
	WidgetsDynamicIcon* _tmp14_;
	WidgetsDynamicIcon* _tmp15_;
	WidgetsDynamicIcon* _tmp16_;
	GtkButton* search_button = NULL;
	GtkButton* _tmp17_ = NULL;
	GtkButton* _tmp18_;
	GtkStyleContext* _tmp19_;
	GtkButton* _tmp20_;
	WidgetsDynamicIcon* _tmp21_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp22_ = NULL;
	GtkBox* _tmp23_;
	GtkImage* _tmp24_;
	GtkBox* _tmp25_;
	GtkLabel* _tmp26_;
	GtkBox* _tmp27_;
	GtkButton* _tmp28_;
	GtkBox* _tmp29_;
	GtkButton* _tmp30_;
	WidgetsMagicButton* magic_button = NULL;
	WidgetsMagicButton* _tmp31_;
	GtkListBox* _tmp32_ = NULL;
	GtkListBox* _tmp33_;
	GtkWidget* _tmp34_;
	GtkWidget* _tmp35_;
	GtkStyleContext* listbox_context = NULL;
	GtkListBox* _tmp36_;
	GtkStyleContext* _tmp37_;
	GtkStyleContext* _tmp38_;
	GtkGrid* listbox_grid = NULL;
	GtkGrid* _tmp39_ = NULL;
	GtkGrid* _tmp40_;
	GtkListBox* _tmp41_;
	GtkGrid* content = NULL;
	GtkGrid* _tmp42_ = NULL;
	GtkGrid* _tmp43_;
	GtkBox* _tmp44_;
	GtkGrid* _tmp45_;
	GtkGrid* _tmp46_;
	HdyClamp* content_clamp = NULL;
	HdyClamp* _tmp47_ = NULL;
	HdyClamp* _tmp48_;
	GtkGrid* _tmp49_;
	GtkScrolledWindow* scrolled_window = NULL;
	GtkScrolledWindow* _tmp50_ = NULL;
	GtkScrolledWindow* _tmp51_;
	HdyClamp* _tmp52_;
	GtkOverlay* overlay = NULL;
	GtkOverlay* _tmp53_ = NULL;
	GtkOverlay* _tmp54_;
	WidgetsMagicButton* _tmp55_;
	GtkOverlay* _tmp56_;
	GtkScrolledWindow* _tmp57_;
	GtkOverlay* _tmp58_;
	WidgetsMagicButton* _tmp59_;
	ServicesDatabase* _tmp60_;
	ServicesDatabase* _tmp61_;
	ServicesDatabase* _tmp62_;
#line 5 "../src/Views/Pinboard.vala"
	parent_class = G_OBJECT_CLASS (views_pinboard_parent_class);
#line 5 "../src/Views/Pinboard.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 5 "../src/Views/Pinboard.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_PINBOARD, ViewsPinboard);
#line 6 "../src/Views/Pinboard.vala"
	_tmp0_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, LAYOUTS_TYPE_ITEM_ROW, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 6 "../src/Views/Pinboard.vala"
	_g_object_unref0 (self->items);
#line 6 "../src/Views/Pinboard.vala"
	self->items = _tmp0_;
#line 8 "../src/Views/Pinboard.vala"
	_tmp1_ = (GThemedIcon*) g_themed_icon_new ("planner-pin-tack");
#line 8 "../src/Views/Pinboard.vala"
	_tmp2_ = (GtkImage*) gtk_image_new ();
#line 8 "../src/Views/Pinboard.vala"
	g_object_set (_tmp2_, "gicon", (GIcon*) _tmp1_, NULL);
#line 8 "../src/Views/Pinboard.vala"
	_g_object_unref0 (_tmp1_);
#line 8 "../src/Views/Pinboard.vala"
	gtk_image_set_pixel_size (_tmp2_, 24);
#line 8 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp2_);
#line 8 "../src/Views/Pinboard.vala"
	pin_icon = _tmp2_;
#line 13 "../src/Views/Pinboard.vala"
	_tmp3_ = (GtkLabel*) gtk_label_new (_ ("Pinboard"));
#line 13 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp3_);
#line 13 "../src/Views/Pinboard.vala"
	title_label = _tmp3_;
#line 14 "../src/Views/Pinboard.vala"
	_tmp4_ = title_label;
#line 14 "../src/Views/Pinboard.vala"
	_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) _tmp4_);
#line 14 "../src/Views/Pinboard.vala"
	gtk_style_context_add_class (_tmp5_, "header-title");
#line 16 "../src/Views/Pinboard.vala"
	_tmp6_ = widgets_dynamic_icon_new ();
#line 16 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp6_);
#line 16 "../src/Views/Pinboard.vala"
	menu_image = _tmp6_;
#line 17 "../src/Views/Pinboard.vala"
	_tmp7_ = menu_image;
#line 17 "../src/Views/Pinboard.vala"
	widgets_dynamic_icon_set_size (_tmp7_, 19);
#line 18 "../src/Views/Pinboard.vala"
	_tmp8_ = menu_image;
#line 18 "../src/Views/Pinboard.vala"
	widgets_dynamic_icon_update_icon_name (_tmp8_, "dots-horizontal");
#line 20 "../src/Views/Pinboard.vala"
	_tmp9_ = (GtkButton*) gtk_button_new ();
#line 20 "../src/Views/Pinboard.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp9_, GTK_ALIGN_CENTER);
#line 20 "../src/Views/Pinboard.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp9_, FALSE);
#line 20 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp9_);
#line 20 "../src/Views/Pinboard.vala"
	menu_button = _tmp9_;
#line 25 "../src/Views/Pinboard.vala"
	_tmp10_ = menu_button;
#line 25 "../src/Views/Pinboard.vala"
	_tmp11_ = menu_image;
#line 25 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) _tmp10_, (GtkWidget*) _tmp11_);
#line 26 "../src/Views/Pinboard.vala"
	_tmp12_ = menu_button;
#line 26 "../src/Views/Pinboard.vala"
	_tmp13_ = gtk_widget_get_style_context ((GtkWidget*) _tmp12_);
#line 26 "../src/Views/Pinboard.vala"
	gtk_style_context_add_class (_tmp13_, GTK_STYLE_CLASS_FLAT);
#line 28 "../src/Views/Pinboard.vala"
	_tmp14_ = widgets_dynamic_icon_new ();
#line 28 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp14_);
#line 28 "../src/Views/Pinboard.vala"
	search_image = _tmp14_;
#line 29 "../src/Views/Pinboard.vala"
	_tmp15_ = search_image;
#line 29 "../src/Views/Pinboard.vala"
	widgets_dynamic_icon_set_size (_tmp15_, 19);
#line 30 "../src/Views/Pinboard.vala"
	_tmp16_ = search_image;
#line 30 "../src/Views/Pinboard.vala"
	widgets_dynamic_icon_update_icon_name (_tmp16_, "planner-search");
#line 32 "../src/Views/Pinboard.vala"
	_tmp17_ = (GtkButton*) gtk_button_new ();
#line 32 "../src/Views/Pinboard.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp17_, GTK_ALIGN_CENTER);
#line 32 "../src/Views/Pinboard.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp17_, FALSE);
#line 32 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp17_);
#line 32 "../src/Views/Pinboard.vala"
	search_button = _tmp17_;
#line 36 "../src/Views/Pinboard.vala"
	_tmp18_ = search_button;
#line 36 "../src/Views/Pinboard.vala"
	_tmp19_ = gtk_widget_get_style_context ((GtkWidget*) _tmp18_);
#line 36 "../src/Views/Pinboard.vala"
	gtk_style_context_add_class (_tmp19_, GTK_STYLE_CLASS_FLAT);
#line 37 "../src/Views/Pinboard.vala"
	_tmp20_ = search_button;
#line 37 "../src/Views/Pinboard.vala"
	_tmp21_ = search_image;
#line 37 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) _tmp20_, (GtkWidget*) _tmp21_);
#line 39 "../src/Views/Pinboard.vala"
	_tmp22_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 39 "../src/Views/Pinboard.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp22_, GTK_ALIGN_START);
#line 39 "../src/Views/Pinboard.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp22_, TRUE);
#line 39 "../src/Views/Pinboard.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp22_, 2);
#line 39 "../src/Views/Pinboard.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp22_, 6);
#line 39 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp22_);
#line 39 "../src/Views/Pinboard.vala"
	header_box = _tmp22_;
#line 46 "../src/Views/Pinboard.vala"
	_tmp23_ = header_box;
#line 46 "../src/Views/Pinboard.vala"
	_tmp24_ = pin_icon;
#line 46 "../src/Views/Pinboard.vala"
	gtk_box_pack_start (_tmp23_, (GtkWidget*) _tmp24_, FALSE, FALSE, (guint) 0);
#line 47 "../src/Views/Pinboard.vala"
	_tmp25_ = header_box;
#line 47 "../src/Views/Pinboard.vala"
	_tmp26_ = title_label;
#line 47 "../src/Views/Pinboard.vala"
	gtk_box_pack_start (_tmp25_, (GtkWidget*) _tmp26_, FALSE, FALSE, (guint) 6);
#line 48 "../src/Views/Pinboard.vala"
	_tmp27_ = header_box;
#line 48 "../src/Views/Pinboard.vala"
	_tmp28_ = menu_button;
#line 48 "../src/Views/Pinboard.vala"
	gtk_box_pack_end (_tmp27_, (GtkWidget*) _tmp28_, FALSE, FALSE, (guint) 0);
#line 49 "../src/Views/Pinboard.vala"
	_tmp29_ = header_box;
#line 49 "../src/Views/Pinboard.vala"
	_tmp30_ = search_button;
#line 49 "../src/Views/Pinboard.vala"
	gtk_box_pack_end (_tmp29_, (GtkWidget*) _tmp30_, FALSE, FALSE, (guint) 0);
#line 51 "../src/Views/Pinboard.vala"
	_tmp31_ = widgets_magic_button_new ();
#line 51 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp31_);
#line 51 "../src/Views/Pinboard.vala"
	magic_button = _tmp31_;
#line 53 "../src/Views/Pinboard.vala"
	_tmp32_ = (GtkListBox*) gtk_list_box_new ();
#line 53 "../src/Views/Pinboard.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp32_, GTK_ALIGN_START);
#line 53 "../src/Views/Pinboard.vala"
	gtk_list_box_set_activate_on_single_click (_tmp32_, TRUE);
#line 53 "../src/Views/Pinboard.vala"
	gtk_list_box_set_selection_mode (_tmp32_, GTK_SELECTION_SINGLE);
#line 53 "../src/Views/Pinboard.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp32_, TRUE);
#line 53 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp32_);
#line 53 "../src/Views/Pinboard.vala"
	_g_object_unref0 (self->priv->listbox);
#line 53 "../src/Views/Pinboard.vala"
	self->priv->listbox = _tmp32_;
#line 59 "../src/Views/Pinboard.vala"
	_tmp33_ = self->priv->listbox;
#line 59 "../src/Views/Pinboard.vala"
	_tmp34_ = views_pinboard_get_placeholder (self);
#line 59 "../src/Views/Pinboard.vala"
	_tmp35_ = _tmp34_;
#line 59 "../src/Views/Pinboard.vala"
	gtk_list_box_set_placeholder (_tmp33_, _tmp35_);
#line 59 "../src/Views/Pinboard.vala"
	_g_object_unref0 (_tmp35_);
#line 61 "../src/Views/Pinboard.vala"
	_tmp36_ = self->priv->listbox;
#line 61 "../src/Views/Pinboard.vala"
	_tmp37_ = gtk_widget_get_style_context ((GtkWidget*) _tmp36_);
#line 61 "../src/Views/Pinboard.vala"
	listbox_context = _tmp37_;
#line 62 "../src/Views/Pinboard.vala"
	_tmp38_ = listbox_context;
#line 62 "../src/Views/Pinboard.vala"
	gtk_style_context_add_class (_tmp38_, "listbox-background");
#line 64 "../src/Views/Pinboard.vala"
	_tmp39_ = (GtkGrid*) gtk_grid_new ();
#line 64 "../src/Views/Pinboard.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp39_, 12);
#line 64 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp39_);
#line 64 "../src/Views/Pinboard.vala"
	listbox_grid = _tmp39_;
#line 67 "../src/Views/Pinboard.vala"
	_tmp40_ = listbox_grid;
#line 67 "../src/Views/Pinboard.vala"
	_tmp41_ = self->priv->listbox;
#line 67 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) _tmp40_, (GtkWidget*) _tmp41_);
#line 69 "../src/Views/Pinboard.vala"
	_tmp42_ = (GtkGrid*) gtk_grid_new ();
#line 69 "../src/Views/Pinboard.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp42_, GTK_ORIENTATION_VERTICAL);
#line 69 "../src/Views/Pinboard.vala"
	g_object_set ((GtkWidget*) _tmp42_, "expand", TRUE, NULL);
#line 69 "../src/Views/Pinboard.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp42_, 36);
#line 69 "../src/Views/Pinboard.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp42_, 36);
#line 69 "../src/Views/Pinboard.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp42_, 36);
#line 69 "../src/Views/Pinboard.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp42_, 6);
#line 69 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp42_);
#line 69 "../src/Views/Pinboard.vala"
	content = _tmp42_;
#line 77 "../src/Views/Pinboard.vala"
	_tmp43_ = content;
#line 77 "../src/Views/Pinboard.vala"
	_tmp44_ = header_box;
#line 77 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) _tmp43_, (GtkWidget*) _tmp44_);
#line 78 "../src/Views/Pinboard.vala"
	_tmp45_ = content;
#line 78 "../src/Views/Pinboard.vala"
	_tmp46_ = listbox_grid;
#line 78 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) _tmp45_, (GtkWidget*) _tmp46_);
#line 80 "../src/Views/Pinboard.vala"
	_tmp47_ = (HdyClamp*) hdy_clamp_new ();
#line 80 "../src/Views/Pinboard.vala"
	hdy_clamp_set_maximum_size (_tmp47_, 720);
#line 80 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp47_);
#line 80 "../src/Views/Pinboard.vala"
	content_clamp = _tmp47_;
#line 84 "../src/Views/Pinboard.vala"
	_tmp48_ = content_clamp;
#line 84 "../src/Views/Pinboard.vala"
	_tmp49_ = content;
#line 84 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) _tmp48_, (GtkWidget*) _tmp49_);
#line 86 "../src/Views/Pinboard.vala"
	_tmp50_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 86 "../src/Views/Pinboard.vala"
	g_object_set (_tmp50_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
#line 86 "../src/Views/Pinboard.vala"
	g_object_set ((GtkWidget*) _tmp50_, "expand", TRUE, NULL);
#line 86 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp50_);
#line 86 "../src/Views/Pinboard.vala"
	scrolled_window = _tmp50_;
#line 90 "../src/Views/Pinboard.vala"
	_tmp51_ = scrolled_window;
#line 90 "../src/Views/Pinboard.vala"
	_tmp52_ = content_clamp;
#line 90 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) _tmp51_, (GtkWidget*) _tmp52_);
#line 92 "../src/Views/Pinboard.vala"
	_tmp53_ = (GtkOverlay*) gtk_overlay_new ();
#line 92 "../src/Views/Pinboard.vala"
	g_object_set ((GtkWidget*) _tmp53_, "expand", TRUE, NULL);
#line 92 "../src/Views/Pinboard.vala"
	g_object_ref_sink (_tmp53_);
#line 92 "../src/Views/Pinboard.vala"
	overlay = _tmp53_;
#line 95 "../src/Views/Pinboard.vala"
	_tmp54_ = overlay;
#line 95 "../src/Views/Pinboard.vala"
	_tmp55_ = magic_button;
#line 95 "../src/Views/Pinboard.vala"
	gtk_overlay_add_overlay (_tmp54_, (GtkWidget*) _tmp55_);
#line 96 "../src/Views/Pinboard.vala"
	_tmp56_ = overlay;
#line 96 "../src/Views/Pinboard.vala"
	_tmp57_ = scrolled_window;
#line 96 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) _tmp56_, (GtkWidget*) _tmp57_);
#line 98 "../src/Views/Pinboard.vala"
	_tmp58_ = overlay;
#line 98 "../src/Views/Pinboard.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp58_);
#line 99 "../src/Views/Pinboard.vala"
	views_pinboard_add_items (self);
#line 100 "../src/Views/Pinboard.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 102 "../src/Views/Pinboard.vala"
	_tmp59_ = magic_button;
#line 102 "../src/Views/Pinboard.vala"
	g_signal_connect_object (_tmp59_, "clicked", (GCallback) __views_pinboard___lambda280__widgets_magic_button_clicked, self, 0);
#line 106 "../src/Views/Pinboard.vala"
	_tmp60_ = planner_database;
#line 106 "../src/Views/Pinboard.vala"
	g_signal_connect_object (_tmp60_, "item-added", (GCallback) _views_pinboard_valid_add_item_services_database_item_added, self, 0);
#line 107 "../src/Views/Pinboard.vala"
	_tmp61_ = planner_database;
#line 107 "../src/Views/Pinboard.vala"
	g_signal_connect_object (_tmp61_, "item-deleted", (GCallback) _views_pinboard_valid_delete_item_services_database_item_deleted, self, 0);
#line 108 "../src/Views/Pinboard.vala"
	_tmp62_ = planner_database;
#line 108 "../src/Views/Pinboard.vala"
	g_signal_connect_object (_tmp62_, "item-updated", (GCallback) _views_pinboard_valid_update_item_services_database_item_updated, self, 0);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (overlay);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (scrolled_window);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (content_clamp);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (content);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (listbox_grid);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (magic_button);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (header_box);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (search_button);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (search_image);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (menu_button);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (menu_image);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (title_label);
#line 5 "../src/Views/Pinboard.vala"
	_g_object_unref0 (pin_icon);
#line 5 "../src/Views/Pinboard.vala"
	return obj;
#line 1477 "Pinboard.c"
}

static void
views_pinboard_class_init (ViewsPinboardClass * klass,
                           gpointer klass_data)
{
#line 1 "../src/Views/Pinboard.vala"
	views_pinboard_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Views/Pinboard.vala"
	g_type_class_adjust_private_offset (klass, &ViewsPinboard_private_offset);
#line 1 "../src/Views/Pinboard.vala"
	G_OBJECT_CLASS (klass)->constructor = views_pinboard_constructor;
#line 1 "../src/Views/Pinboard.vala"
	G_OBJECT_CLASS (klass)->finalize = views_pinboard_finalize;
#line 1492 "Pinboard.c"
}

static void
views_pinboard_instance_init (ViewsPinboard * self,
                              gpointer klass)
{
#line 1 "../src/Views/Pinboard.vala"
	self->priv = views_pinboard_get_instance_private (self);
#line 1501 "Pinboard.c"
}

static void
views_pinboard_finalize (GObject * obj)
{
	ViewsPinboard * self;
#line 1 "../src/Views/Pinboard.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_PINBOARD, ViewsPinboard);
#line 2 "../src/Views/Pinboard.vala"
	_g_object_unref0 (self->items);
#line 3 "../src/Views/Pinboard.vala"
	_g_object_unref0 (self->priv->listbox);
#line 1 "../src/Views/Pinboard.vala"
	G_OBJECT_CLASS (views_pinboard_parent_class)->finalize (obj);
#line 1516 "Pinboard.c"
}

static GType
views_pinboard_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ViewsPinboardClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_pinboard_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsPinboard), 0, (GInstanceInitFunc) views_pinboard_instance_init, NULL };
	GType views_pinboard_type_id;
	views_pinboard_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsPinboard", &g_define_type_info, 0);
	ViewsPinboard_private_offset = g_type_add_instance_private (views_pinboard_type_id, sizeof (ViewsPinboardPrivate));
	return views_pinboard_type_id;
}

GType
views_pinboard_get_type (void)
{
	static volatile gsize views_pinboard_type_id__volatile = 0;
	if (g_once_init_enter (&views_pinboard_type_id__volatile)) {
		GType views_pinboard_type_id;
		views_pinboard_type_id = views_pinboard_get_type_once ();
		g_once_init_leave (&views_pinboard_type_id__volatile, views_pinboard_type_id);
	}
	return views_pinboard_type_id__volatile;
}

