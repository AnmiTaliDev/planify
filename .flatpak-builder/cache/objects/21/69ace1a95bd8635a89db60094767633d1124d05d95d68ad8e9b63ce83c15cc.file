/* Label.c generated by valac 0.50.10, the Vala compiler
 * generated from Label.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <handy.h>

#define VIEWS_TYPE_LABEL (views_label_get_type ())
#define VIEWS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_LABEL, ViewsLabel))
#define VIEWS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_LABEL, ViewsLabelClass))
#define VIEWS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_LABEL))
#define VIEWS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_LABEL))
#define VIEWS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_LABEL, ViewsLabelClass))

typedef struct _ViewsLabel ViewsLabel;
typedef struct _ViewsLabelClass ViewsLabelClass;
typedef struct _ViewsLabelPrivate ViewsLabelPrivate;

#define LAYOUTS_TYPE_ITEM_ROW (layouts_item_row_get_type ())
#define LAYOUTS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRow))
#define LAYOUTS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRowClass))
#define LAYOUTS_IS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_ITEM_ROW))
#define LAYOUTS_IS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_ITEM_ROW))
#define LAYOUTS_ITEM_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRowClass))

typedef struct _LayoutsItemRow LayoutsItemRow;
typedef struct _LayoutsItemRowClass LayoutsItemRowClass;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
enum  {
	VIEWS_LABEL_0_PROPERTY,
	VIEWS_LABEL_LABEL_PROPERTY,
	VIEWS_LABEL_NUM_PROPERTIES
};
static GParamSpec* views_label_properties[VIEWS_LABEL_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define OBJECTS_TYPE_ITEM_LABEL (objects_item_label_get_type ())
#define OBJECTS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabel))
#define OBJECTS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))
#define OBJECTS_IS_ITEM_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_IS_ITEM_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM_LABEL))
#define OBJECTS_ITEM_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM_LABEL, ObjectsItemLabelClass))

typedef struct _ObjectsItemLabel ObjectsItemLabel;
typedef struct _ObjectsItemLabelClass ObjectsItemLabelClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define WIDGETS_TYPE_MAGIC_BUTTON (widgets_magic_button_get_type ())
#define WIDGETS_MAGIC_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButton))
#define WIDGETS_MAGIC_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButtonClass))
#define WIDGETS_IS_MAGIC_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_MAGIC_BUTTON))
#define WIDGETS_IS_MAGIC_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_MAGIC_BUTTON))
#define WIDGETS_MAGIC_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_MAGIC_BUTTON, WidgetsMagicButtonClass))

typedef struct _WidgetsMagicButton WidgetsMagicButton;
typedef struct _WidgetsMagicButtonClass WidgetsMagicButtonClass;

struct _ViewsLabel {
	GtkEventBox parent_instance;
	ViewsLabelPrivate * priv;
	GeeHashMap* items;
};

struct _ViewsLabelClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsLabelPrivate {
	ObjectsLabel* _label;
	GtkListBox* listbox;
	GtkGrid* widget_color;
	GtkLabel* title_label;
};

static gint ViewsLabel_private_offset;
static gpointer views_label_parent_class = NULL;
extern ServicesDatabase* planner_database;

GType views_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ViewsLabel, g_object_unref)
GType layouts_item_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsItemRow, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
static void views_label_valid_add_item (ViewsLabel* self,
                                 ObjectsItem* item,
                                 gboolean insert);
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
GType objects_item_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItemLabel, g_object_unref)
GeeHashMap* objects_item_get_labels (ObjectsItem* self);
ObjectsLabel* views_label_get_label (ViewsLabel* self);
static void views_label_add_item (ViewsLabel* self,
                           ObjectsItem* item);
static void views_label_valid_delete_item (ViewsLabel* self,
                                    ObjectsItem* item);
void layouts_item_row_hide_destroy (LayoutsItemRow* self);
static void views_label_valid_update_item (ViewsLabel* self,
                                    ObjectsItem* item);
static void views_label_add_items (ViewsLabel* self);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
GeeArrayList* services_database_get_items_by_label (ServicesDatabase* self,
                                                    ObjectsLabel* label,
                                                    gboolean checked);
LayoutsItemRow* layouts_item_row_new (ObjectsItem* item);
LayoutsItemRow* layouts_item_row_construct (GType object_type,
                                            ObjectsItem* item);
static GtkWidget* views_label_get_placeholder (ViewsLabel* self);
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
void widgets_dynamic_icon_update_icon_name (WidgetsDynamicIcon* self,
                                            const gchar* icon_name);
void views_label_update_request (ViewsLabel* self);
const gchar* objects_label_get_name (ObjectsLabel* self);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
void util_set_widget_color (Util* self,
                            const gchar* color,
                            GtkWidget* widget);
gchar* util_get_color (Util* self,
                       const gchar* key);
const gchar* objects_label_get_color (ObjectsLabel* self);
ViewsLabel* views_label_new (void);
ViewsLabel* views_label_construct (GType object_type);
void views_label_set_label (ViewsLabel* self,
                            ObjectsLabel* value);
static GObject * views_label_constructor (GType type,
                                   guint n_construct_properties,
                                   GObjectConstructParam * construct_properties);
GType widgets_magic_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsMagicButton, g_object_unref)
WidgetsMagicButton* widgets_magic_button_new (void);
WidgetsMagicButton* widgets_magic_button_construct (GType object_type);
static void _views_label___lambda281_ (ViewsLabel* self);
static void __views_label___lambda281__g_object_notify (GObject* _sender,
                                                 GParamSpec* pspec,
                                                 gpointer self);
static void _views_label___lambda282_ (ViewsLabel* self);
static void __views_label___lambda282__widgets_magic_button_clicked (WidgetsMagicButton* _sender,
                                                              gpointer self);
static void _views_label_valid_add_item_services_database_item_added (ServicesDatabase* _sender,
                                                               ObjectsItem* item,
                                                               gboolean insert,
                                                               gpointer self);
static void _views_label_valid_delete_item_services_database_item_deleted (ServicesDatabase* _sender,
                                                                    ObjectsItem* item,
                                                                    gpointer self);
static void _views_label_valid_update_item_services_database_item_updated (ServicesDatabase* _sender,
                                                                    ObjectsItem* item,
                                                                    gint64 update_id,
                                                                    gpointer self);
static void views_label_finalize (GObject * obj);
static GType views_label_get_type_once (void);
static void _vala_views_label_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec);
static void _vala_views_label_set_property (GObject * object,
                                     guint property_id,
                                     const GValue * value,
                                     GParamSpec * pspec);

static inline gpointer
views_label_get_instance_private (ViewsLabel* self)
{
	return G_STRUCT_MEMBER_P (self, ViewsLabel_private_offset);
}

static void
views_label_valid_add_item (ViewsLabel* self,
                            ObjectsItem* item,
                            gboolean insert)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GeeHashMap* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
#line 126 "../src/Views/Label.vala"
	g_return_if_fail (self != NULL);
#line 126 "../src/Views/Label.vala"
	g_return_if_fail (item != NULL);
#line 127 "../src/Views/Label.vala"
	_tmp2_ = self->items;
#line 127 "../src/Views/Label.vala"
	_tmp3_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 127 "../src/Views/Label.vala"
	_tmp4_ = _tmp3_;
#line 127 "../src/Views/Label.vala"
	if (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp2_, _tmp4_)) {
#line 265 "Label.c"
		GeeHashMap* _tmp5_;
		GeeHashMap* _tmp6_;
		ObjectsLabel* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
#line 127 "../src/Views/Label.vala"
		_tmp5_ = objects_item_get_labels (item);
#line 127 "../src/Views/Label.vala"
		_tmp6_ = _tmp5_;
#line 127 "../src/Views/Label.vala"
		_tmp7_ = self->priv->_label;
#line 127 "../src/Views/Label.vala"
		_tmp8_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp7_);
#line 127 "../src/Views/Label.vala"
		_tmp9_ = _tmp8_;
#line 127 "../src/Views/Label.vala"
		_tmp1_ = gee_abstract_map_has_key ((GeeAbstractMap*) _tmp6_, _tmp9_);
#line 283 "Label.c"
	} else {
#line 127 "../src/Views/Label.vala"
		_tmp1_ = FALSE;
#line 287 "Label.c"
	}
#line 127 "../src/Views/Label.vala"
	if (_tmp1_) {
#line 128 "../src/Views/Label.vala"
		_tmp0_ = insert;
#line 293 "Label.c"
	} else {
#line 127 "../src/Views/Label.vala"
		_tmp0_ = FALSE;
#line 297 "Label.c"
	}
#line 127 "../src/Views/Label.vala"
	if (_tmp0_) {
#line 129 "../src/Views/Label.vala"
		views_label_add_item (self, item);
#line 303 "Label.c"
	}
}

static void
views_label_valid_delete_item (ViewsLabel* self,
                               ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 133 "../src/Views/Label.vala"
	g_return_if_fail (self != NULL);
#line 133 "../src/Views/Label.vala"
	g_return_if_fail (item != NULL);
#line 134 "../src/Views/Label.vala"
	_tmp0_ = self->items;
#line 134 "../src/Views/Label.vala"
	_tmp1_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 134 "../src/Views/Label.vala"
	_tmp2_ = _tmp1_;
#line 134 "../src/Views/Label.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp0_, _tmp2_)) {
#line 326 "Label.c"
		GeeHashMap* _tmp3_;
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		gpointer _tmp6_;
		LayoutsItemRow* _tmp7_;
		GeeHashMap* _tmp8_;
		const gchar* _tmp9_;
		const gchar* _tmp10_;
#line 135 "../src/Views/Label.vala"
		_tmp3_ = self->items;
#line 135 "../src/Views/Label.vala"
		_tmp4_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 135 "../src/Views/Label.vala"
		_tmp5_ = _tmp4_;
#line 135 "../src/Views/Label.vala"
		_tmp6_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp3_, _tmp5_);
#line 135 "../src/Views/Label.vala"
		_tmp7_ = (LayoutsItemRow*) _tmp6_;
#line 135 "../src/Views/Label.vala"
		layouts_item_row_hide_destroy (_tmp7_);
#line 135 "../src/Views/Label.vala"
		_g_object_unref0 (_tmp7_);
#line 136 "../src/Views/Label.vala"
		_tmp8_ = self->items;
#line 136 "../src/Views/Label.vala"
		_tmp9_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 136 "../src/Views/Label.vala"
		_tmp10_ = _tmp9_;
#line 136 "../src/Views/Label.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp8_, _tmp10_, NULL);
#line 357 "Label.c"
	}
}

static void
views_label_valid_update_item (ViewsLabel* self,
                               ObjectsItem* item)
{
	gboolean _tmp0_ = FALSE;
	GeeHashMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 140 "../src/Views/Label.vala"
	g_return_if_fail (self != NULL);
#line 140 "../src/Views/Label.vala"
	g_return_if_fail (item != NULL);
#line 141 "../src/Views/Label.vala"
	_tmp1_ = self->items;
#line 141 "../src/Views/Label.vala"
	_tmp2_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 141 "../src/Views/Label.vala"
	_tmp3_ = _tmp2_;
#line 141 "../src/Views/Label.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp1_, _tmp3_)) {
#line 381 "Label.c"
		GeeHashMap* _tmp4_;
		GeeHashMap* _tmp5_;
		ObjectsLabel* _tmp6_;
		const gchar* _tmp7_;
		const gchar* _tmp8_;
#line 141 "../src/Views/Label.vala"
		_tmp4_ = objects_item_get_labels (item);
#line 141 "../src/Views/Label.vala"
		_tmp5_ = _tmp4_;
#line 141 "../src/Views/Label.vala"
		_tmp6_ = self->priv->_label;
#line 141 "../src/Views/Label.vala"
		_tmp7_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp6_);
#line 141 "../src/Views/Label.vala"
		_tmp8_ = _tmp7_;
#line 141 "../src/Views/Label.vala"
		_tmp0_ = !gee_abstract_map_has_key ((GeeAbstractMap*) _tmp5_, _tmp8_);
#line 399 "Label.c"
	} else {
#line 141 "../src/Views/Label.vala"
		_tmp0_ = FALSE;
#line 403 "Label.c"
	}
#line 141 "../src/Views/Label.vala"
	if (_tmp0_) {
#line 407 "Label.c"
		GeeHashMap* _tmp9_;
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		gpointer _tmp12_;
		LayoutsItemRow* _tmp13_;
		GeeHashMap* _tmp14_;
		const gchar* _tmp15_;
		const gchar* _tmp16_;
#line 142 "../src/Views/Label.vala"
		_tmp9_ = self->items;
#line 142 "../src/Views/Label.vala"
		_tmp10_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 142 "../src/Views/Label.vala"
		_tmp11_ = _tmp10_;
#line 142 "../src/Views/Label.vala"
		_tmp12_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp9_, _tmp11_);
#line 142 "../src/Views/Label.vala"
		_tmp13_ = (LayoutsItemRow*) _tmp12_;
#line 142 "../src/Views/Label.vala"
		layouts_item_row_hide_destroy (_tmp13_);
#line 142 "../src/Views/Label.vala"
		_g_object_unref0 (_tmp13_);
#line 143 "../src/Views/Label.vala"
		_tmp14_ = self->items;
#line 143 "../src/Views/Label.vala"
		_tmp15_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 143 "../src/Views/Label.vala"
		_tmp16_ = _tmp15_;
#line 143 "../src/Views/Label.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp14_, _tmp16_, NULL);
#line 438 "Label.c"
	}
#line 146 "../src/Views/Label.vala"
	views_label_valid_add_item (self, item, TRUE);
#line 442 "Label.c"
}

static void
views_label_add_items (ViewsLabel* self)
{
	GeeHashMap* _tmp0_;
	GtkListBox* _tmp1_;
	GList* _tmp2_;
#line 149 "../src/Views/Label.vala"
	g_return_if_fail (self != NULL);
#line 150 "../src/Views/Label.vala"
	_tmp0_ = self->items;
#line 150 "../src/Views/Label.vala"
	gee_abstract_map_clear ((GeeAbstractMap*) _tmp0_);
#line 152 "../src/Views/Label.vala"
	_tmp1_ = self->priv->listbox;
#line 152 "../src/Views/Label.vala"
	_tmp2_ = gtk_container_get_children ((GtkContainer*) _tmp1_);
#line 461 "Label.c"
	{
		GList* child_collection = NULL;
		GList* child_it = NULL;
#line 152 "../src/Views/Label.vala"
		child_collection = _tmp2_;
#line 152 "../src/Views/Label.vala"
		for (child_it = child_collection; child_it != NULL; child_it = child_it->next) {
#line 469 "Label.c"
			GtkWidget* child = NULL;
#line 152 "../src/Views/Label.vala"
			child = (GtkWidget*) child_it->data;
#line 473 "Label.c"
			{
				GtkWidget* _tmp3_;
#line 153 "../src/Views/Label.vala"
				_tmp3_ = child;
#line 153 "../src/Views/Label.vala"
				gtk_widget_destroy (_tmp3_);
#line 480 "Label.c"
			}
		}
#line 152 "../src/Views/Label.vala"
		(child_collection == NULL) ? NULL : (child_collection = (g_list_free (child_collection), NULL));
#line 485 "Label.c"
	}
	{
		GeeArrayList* _item_list = NULL;
		ServicesDatabase* _tmp4_;
		ObjectsLabel* _tmp5_;
		GeeArrayList* _tmp6_;
		gint _item_size = 0;
		GeeArrayList* _tmp7_;
		gint _tmp8_;
		gint _tmp9_;
		gint _item_index = 0;
#line 156 "../src/Views/Label.vala"
		_tmp4_ = planner_database;
#line 156 "../src/Views/Label.vala"
		_tmp5_ = self->priv->_label;
#line 156 "../src/Views/Label.vala"
		_tmp6_ = services_database_get_items_by_label (_tmp4_, _tmp5_, FALSE);
#line 156 "../src/Views/Label.vala"
		_item_list = _tmp6_;
#line 156 "../src/Views/Label.vala"
		_tmp7_ = _item_list;
#line 156 "../src/Views/Label.vala"
		_tmp8_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp7_);
#line 156 "../src/Views/Label.vala"
		_tmp9_ = _tmp8_;
#line 156 "../src/Views/Label.vala"
		_item_size = _tmp9_;
#line 156 "../src/Views/Label.vala"
		_item_index = -1;
#line 156 "../src/Views/Label.vala"
		while (TRUE) {
#line 517 "Label.c"
			gint _tmp10_;
			gint _tmp11_;
			ObjectsItem* item = NULL;
			GeeArrayList* _tmp12_;
			gpointer _tmp13_;
			ObjectsItem* _tmp14_;
#line 156 "../src/Views/Label.vala"
			_item_index = _item_index + 1;
#line 156 "../src/Views/Label.vala"
			_tmp10_ = _item_index;
#line 156 "../src/Views/Label.vala"
			_tmp11_ = _item_size;
#line 156 "../src/Views/Label.vala"
			if (!(_tmp10_ < _tmp11_)) {
#line 156 "../src/Views/Label.vala"
				break;
#line 534 "Label.c"
			}
#line 156 "../src/Views/Label.vala"
			_tmp12_ = _item_list;
#line 156 "../src/Views/Label.vala"
			_tmp13_ = gee_abstract_list_get ((GeeAbstractList*) _tmp12_, _item_index);
#line 156 "../src/Views/Label.vala"
			item = (ObjectsItem*) _tmp13_;
#line 157 "../src/Views/Label.vala"
			_tmp14_ = item;
#line 157 "../src/Views/Label.vala"
			views_label_add_item (self, _tmp14_);
#line 156 "../src/Views/Label.vala"
			_g_object_unref0 (item);
#line 548 "Label.c"
		}
#line 156 "../src/Views/Label.vala"
		_g_object_unref0 (_item_list);
#line 552 "Label.c"
	}
}

static void
views_label_add_item (ViewsLabel* self,
                      ObjectsItem* item)
{
	GeeHashMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	LayoutsItemRow* _tmp3_;
	LayoutsItemRow* _tmp4_;
	GtkListBox* _tmp5_;
	GeeHashMap* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	gpointer _tmp9_;
	LayoutsItemRow* _tmp10_;
	GtkListBox* _tmp11_;
#line 161 "../src/Views/Label.vala"
	g_return_if_fail (self != NULL);
#line 161 "../src/Views/Label.vala"
	g_return_if_fail (item != NULL);
#line 162 "../src/Views/Label.vala"
	_tmp0_ = self->items;
#line 162 "../src/Views/Label.vala"
	_tmp1_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 162 "../src/Views/Label.vala"
	_tmp2_ = _tmp1_;
#line 162 "../src/Views/Label.vala"
	_tmp3_ = layouts_item_row_new (item);
#line 162 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp3_);
#line 162 "../src/Views/Label.vala"
	_tmp4_ = _tmp3_;
#line 162 "../src/Views/Label.vala"
	gee_abstract_map_set ((GeeAbstractMap*) _tmp0_, _tmp2_, _tmp4_);
#line 162 "../src/Views/Label.vala"
	_g_object_unref0 (_tmp4_);
#line 163 "../src/Views/Label.vala"
	_tmp5_ = self->priv->listbox;
#line 163 "../src/Views/Label.vala"
	_tmp6_ = self->items;
#line 163 "../src/Views/Label.vala"
	_tmp7_ = objects_base_object_get_id_string ((ObjectsBaseObject*) item);
#line 163 "../src/Views/Label.vala"
	_tmp8_ = _tmp7_;
#line 163 "../src/Views/Label.vala"
	_tmp9_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp6_, _tmp8_);
#line 163 "../src/Views/Label.vala"
	_tmp10_ = (LayoutsItemRow*) _tmp9_;
#line 163 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp5_, (GtkWidget*) _tmp10_);
#line 163 "../src/Views/Label.vala"
	_g_object_unref0 (_tmp10_);
#line 164 "../src/Views/Label.vala"
	_tmp11_ = self->priv->listbox;
#line 164 "../src/Views/Label.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp11_);
#line 612 "Label.c"
}

static GtkWidget*
views_label_get_placeholder (ViewsLabel* self)
{
	WidgetsDynamicIcon* calendar_image = NULL;
	WidgetsDynamicIcon* _tmp0_ = NULL;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp1_ = NULL;
	GtkWidget* result = NULL;
#line 167 "../src/Views/Label.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 168 "../src/Views/Label.vala"
	_tmp0_ = widgets_dynamic_icon_new ();
#line 168 "../src/Views/Label.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp0_, 0.1);
#line 168 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp0_);
#line 168 "../src/Views/Label.vala"
	calendar_image = _tmp0_;
#line 171 "../src/Views/Label.vala"
	widgets_dynamic_icon_set_size (calendar_image, 96);
#line 173 "../src/Views/Label.vala"
	widgets_dynamic_icon_update_icon_name (calendar_image, "planner-pinned");
#line 175 "../src/Views/Label.vala"
	_tmp1_ = (GtkGrid*) gtk_grid_new ();
#line 175 "../src/Views/Label.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp1_, 128);
#line 175 "../src/Views/Label.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp1_, GTK_ALIGN_CENTER);
#line 175 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp1_);
#line 175 "../src/Views/Label.vala"
	grid = _tmp1_;
#line 179 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) grid, (GtkWidget*) calendar_image);
#line 180 "../src/Views/Label.vala"
	gtk_widget_show_all ((GtkWidget*) grid);
#line 182 "../src/Views/Label.vala"
	result = (GtkWidget*) grid;
#line 182 "../src/Views/Label.vala"
	_g_object_unref0 (calendar_image);
#line 182 "../src/Views/Label.vala"
	return result;
#line 657 "Label.c"
}

void
views_label_update_request (ViewsLabel* self)
{
	GtkLabel* _tmp0_;
	ObjectsLabel* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	Util* _tmp4_;
	Util* _tmp5_;
	Util* _tmp6_;
	Util* _tmp7_;
	ObjectsLabel* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	GtkGrid* _tmp13_;
#line 185 "../src/Views/Label.vala"
	g_return_if_fail (self != NULL);
#line 186 "../src/Views/Label.vala"
	_tmp0_ = self->priv->title_label;
#line 186 "../src/Views/Label.vala"
	_tmp1_ = self->priv->_label;
#line 186 "../src/Views/Label.vala"
	_tmp2_ = objects_label_get_name (_tmp1_);
#line 186 "../src/Views/Label.vala"
	_tmp3_ = _tmp2_;
#line 186 "../src/Views/Label.vala"
	gtk_label_set_label (_tmp0_, _tmp3_);
#line 187 "../src/Views/Label.vala"
	_tmp4_ = util_get_default ();
#line 187 "../src/Views/Label.vala"
	_tmp5_ = _tmp4_;
#line 187 "../src/Views/Label.vala"
	_tmp6_ = util_get_default ();
#line 187 "../src/Views/Label.vala"
	_tmp7_ = _tmp6_;
#line 187 "../src/Views/Label.vala"
	_tmp8_ = self->priv->_label;
#line 187 "../src/Views/Label.vala"
	_tmp9_ = objects_label_get_color (_tmp8_);
#line 187 "../src/Views/Label.vala"
	_tmp10_ = _tmp9_;
#line 187 "../src/Views/Label.vala"
	_tmp11_ = util_get_color (_tmp7_, _tmp10_);
#line 187 "../src/Views/Label.vala"
	_tmp12_ = _tmp11_;
#line 187 "../src/Views/Label.vala"
	_tmp13_ = self->priv->widget_color;
#line 187 "../src/Views/Label.vala"
	util_set_widget_color (_tmp5_, _tmp12_, (GtkWidget*) _tmp13_);
#line 187 "../src/Views/Label.vala"
	_g_free0 (_tmp12_);
#line 187 "../src/Views/Label.vala"
	_g_object_unref0 (_tmp7_);
#line 187 "../src/Views/Label.vala"
	_g_object_unref0 (_tmp5_);
#line 717 "Label.c"
}

ViewsLabel*
views_label_construct (GType object_type)
{
	ViewsLabel * self = NULL;
#line 1 "../src/Views/Label.vala"
	self = (ViewsLabel*) g_object_new (object_type, NULL);
#line 1 "../src/Views/Label.vala"
	return self;
#line 728 "Label.c"
}

ViewsLabel*
views_label_new (void)
{
#line 1 "../src/Views/Label.vala"
	return views_label_construct (VIEWS_TYPE_LABEL);
#line 736 "Label.c"
}

ObjectsLabel*
views_label_get_label (ViewsLabel* self)
{
	ObjectsLabel* result;
	ObjectsLabel* _tmp0_;
#line 2 "../src/Views/Label.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2 "../src/Views/Label.vala"
	_tmp0_ = self->priv->_label;
#line 2 "../src/Views/Label.vala"
	result = _tmp0_;
#line 2 "../src/Views/Label.vala"
	return result;
#line 752 "Label.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 2 "../src/Views/Label.vala"
	return self ? g_object_ref (self) : NULL;
#line 760 "Label.c"
}

void
views_label_set_label (ViewsLabel* self,
                       ObjectsLabel* value)
{
	ObjectsLabel* old_value;
#line 2 "../src/Views/Label.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Views/Label.vala"
	old_value = views_label_get_label (self);
#line 2 "../src/Views/Label.vala"
	if (old_value != value) {
#line 774 "Label.c"
		ObjectsLabel* _tmp0_;
#line 2 "../src/Views/Label.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 2 "../src/Views/Label.vala"
		_g_object_unref0 (self->priv->_label);
#line 2 "../src/Views/Label.vala"
		self->priv->_label = _tmp0_;
#line 2 "../src/Views/Label.vala"
		g_object_notify_by_pspec ((GObject *) self, views_label_properties[VIEWS_LABEL_LABEL_PROPERTY]);
#line 784 "Label.c"
	}
}

static void
_views_label___lambda281_ (ViewsLabel* self)
{
	ObjectsLabel* _tmp0_;
#line 111 "../src/Views/Label.vala"
	_tmp0_ = self->priv->_label;
#line 111 "../src/Views/Label.vala"
	if (_tmp0_ != NULL) {
#line 112 "../src/Views/Label.vala"
		views_label_update_request (self);
#line 113 "../src/Views/Label.vala"
		views_label_add_items (self);
#line 800 "Label.c"
	}
}

static void
__views_label___lambda281__g_object_notify (GObject* _sender,
                                            GParamSpec* pspec,
                                            gpointer self)
{
#line 110 "../src/Views/Label.vala"
	_views_label___lambda281_ ((ViewsLabel*) self);
#line 811 "Label.c"
}

static void
_views_label___lambda282_ (ViewsLabel* self)
{
}

static void
__views_label___lambda282__widgets_magic_button_clicked (WidgetsMagicButton* _sender,
                                                         gpointer self)
{
#line 117 "../src/Views/Label.vala"
	_views_label___lambda282_ ((ViewsLabel*) self);
#line 825 "Label.c"
}

static void
_views_label_valid_add_item_services_database_item_added (ServicesDatabase* _sender,
                                                          ObjectsItem* item,
                                                          gboolean insert,
                                                          gpointer self)
{
#line 121 "../src/Views/Label.vala"
	views_label_valid_add_item ((ViewsLabel*) self, item, insert);
#line 836 "Label.c"
}

static void
_views_label_valid_delete_item_services_database_item_deleted (ServicesDatabase* _sender,
                                                               ObjectsItem* item,
                                                               gpointer self)
{
#line 122 "../src/Views/Label.vala"
	views_label_valid_delete_item ((ViewsLabel*) self, item);
#line 846 "Label.c"
}

static void
_views_label_valid_update_item_services_database_item_updated (ServicesDatabase* _sender,
                                                               ObjectsItem* item,
                                                               gint64 update_id,
                                                               gpointer self)
{
#line 123 "../src/Views/Label.vala"
	views_label_valid_update_item ((ViewsLabel*) self, item);
#line 857 "Label.c"
}

static GObject *
views_label_constructor (GType type,
                         guint n_construct_properties,
                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsLabel * self;
	GeeHashMap* _tmp0_;
	GtkGrid* _tmp1_ = NULL;
	GtkStyleContext* widget_color_context = NULL;
	GtkGrid* _tmp2_;
	GtkStyleContext* _tmp3_;
	GtkStyleContext* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
	GtkStyleContext* _tmp7_;
	WidgetsDynamicIcon* menu_image = NULL;
	WidgetsDynamicIcon* _tmp8_;
	WidgetsDynamicIcon* _tmp9_;
	WidgetsDynamicIcon* _tmp10_;
	GtkButton* menu_button = NULL;
	GtkButton* _tmp11_ = NULL;
	GtkButton* _tmp12_;
	WidgetsDynamicIcon* _tmp13_;
	GtkButton* _tmp14_;
	GtkStyleContext* _tmp15_;
	WidgetsDynamicIcon* search_image = NULL;
	WidgetsDynamicIcon* _tmp16_;
	WidgetsDynamicIcon* _tmp17_;
	WidgetsDynamicIcon* _tmp18_;
	GtkButton* search_button = NULL;
	GtkButton* _tmp19_ = NULL;
	GtkButton* _tmp20_;
	GtkStyleContext* _tmp21_;
	GtkButton* _tmp22_;
	WidgetsDynamicIcon* _tmp23_;
	GtkBox* header_box = NULL;
	GtkBox* _tmp24_ = NULL;
	GtkBox* _tmp25_;
	GtkGrid* _tmp26_;
	GtkBox* _tmp27_;
	GtkLabel* _tmp28_;
	GtkBox* _tmp29_;
	GtkButton* _tmp30_;
	GtkBox* _tmp31_;
	GtkButton* _tmp32_;
	WidgetsMagicButton* magic_button = NULL;
	WidgetsMagicButton* _tmp33_;
	GtkListBox* _tmp34_ = NULL;
	GtkListBox* _tmp35_;
	GtkWidget* _tmp36_;
	GtkWidget* _tmp37_;
	GtkStyleContext* listbox_context = NULL;
	GtkListBox* _tmp38_;
	GtkStyleContext* _tmp39_;
	GtkStyleContext* _tmp40_;
	GtkGrid* listbox_grid = NULL;
	GtkGrid* _tmp41_ = NULL;
	GtkGrid* _tmp42_;
	GtkListBox* _tmp43_;
	GtkGrid* content = NULL;
	GtkGrid* _tmp44_ = NULL;
	GtkGrid* _tmp45_;
	GtkBox* _tmp46_;
	GtkGrid* _tmp47_;
	GtkGrid* _tmp48_;
	HdyClamp* content_clamp = NULL;
	HdyClamp* _tmp49_ = NULL;
	HdyClamp* _tmp50_;
	GtkGrid* _tmp51_;
	GtkScrolledWindow* scrolled_window = NULL;
	GtkScrolledWindow* _tmp52_ = NULL;
	GtkScrolledWindow* _tmp53_;
	HdyClamp* _tmp54_;
	GtkOverlay* overlay = NULL;
	GtkOverlay* _tmp55_ = NULL;
	GtkOverlay* _tmp56_;
	WidgetsMagicButton* _tmp57_;
	GtkOverlay* _tmp58_;
	GtkScrolledWindow* _tmp59_;
	GtkOverlay* _tmp60_;
	WidgetsMagicButton* _tmp61_;
	ServicesDatabase* _tmp62_;
	ServicesDatabase* _tmp63_;
	ServicesDatabase* _tmp64_;
#line 9 "../src/Views/Label.vala"
	parent_class = G_OBJECT_CLASS (views_label_parent_class);
#line 9 "../src/Views/Label.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 9 "../src/Views/Label.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_LABEL, ViewsLabel);
#line 10 "../src/Views/Label.vala"
	_tmp0_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, LAYOUTS_TYPE_ITEM_ROW, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 10 "../src/Views/Label.vala"
	_g_object_unref0 (self->items);
#line 10 "../src/Views/Label.vala"
	self->items = _tmp0_;
#line 12 "../src/Views/Label.vala"
	_tmp1_ = (GtkGrid*) gtk_grid_new ();
#line 12 "../src/Views/Label.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp1_, GTK_ALIGN_CENTER);
#line 12 "../src/Views/Label.vala"
	g_object_set ((GtkWidget*) _tmp1_, "height-request", 16, NULL);
#line 12 "../src/Views/Label.vala"
	g_object_set ((GtkWidget*) _tmp1_, "width-request", 16, NULL);
#line 12 "../src/Views/Label.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp1_, 3);
#line 12 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp1_);
#line 12 "../src/Views/Label.vala"
	_g_object_unref0 (self->priv->widget_color);
#line 12 "../src/Views/Label.vala"
	self->priv->widget_color = _tmp1_;
#line 19 "../src/Views/Label.vala"
	_tmp2_ = self->priv->widget_color;
#line 19 "../src/Views/Label.vala"
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
#line 19 "../src/Views/Label.vala"
	widget_color_context = _tmp3_;
#line 20 "../src/Views/Label.vala"
	_tmp4_ = widget_color_context;
#line 20 "../src/Views/Label.vala"
	gtk_style_context_add_class (_tmp4_, "label-color");
#line 22 "../src/Views/Label.vala"
	_tmp5_ = (GtkLabel*) gtk_label_new (NULL);
#line 22 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp5_);
#line 22 "../src/Views/Label.vala"
	_g_object_unref0 (self->priv->title_label);
#line 22 "../src/Views/Label.vala"
	self->priv->title_label = _tmp5_;
#line 23 "../src/Views/Label.vala"
	_tmp6_ = self->priv->title_label;
#line 23 "../src/Views/Label.vala"
	_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) _tmp6_);
#line 23 "../src/Views/Label.vala"
	gtk_style_context_add_class (_tmp7_, "header-title");
#line 25 "../src/Views/Label.vala"
	_tmp8_ = widgets_dynamic_icon_new ();
#line 25 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp8_);
#line 25 "../src/Views/Label.vala"
	menu_image = _tmp8_;
#line 26 "../src/Views/Label.vala"
	_tmp9_ = menu_image;
#line 26 "../src/Views/Label.vala"
	widgets_dynamic_icon_set_size (_tmp9_, 19);
#line 27 "../src/Views/Label.vala"
	_tmp10_ = menu_image;
#line 27 "../src/Views/Label.vala"
	widgets_dynamic_icon_update_icon_name (_tmp10_, "dots-horizontal");
#line 29 "../src/Views/Label.vala"
	_tmp11_ = (GtkButton*) gtk_button_new ();
#line 29 "../src/Views/Label.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp11_, GTK_ALIGN_CENTER);
#line 29 "../src/Views/Label.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp11_, FALSE);
#line 29 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp11_);
#line 29 "../src/Views/Label.vala"
	menu_button = _tmp11_;
#line 34 "../src/Views/Label.vala"
	_tmp12_ = menu_button;
#line 34 "../src/Views/Label.vala"
	_tmp13_ = menu_image;
#line 34 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp12_, (GtkWidget*) _tmp13_);
#line 35 "../src/Views/Label.vala"
	_tmp14_ = menu_button;
#line 35 "../src/Views/Label.vala"
	_tmp15_ = gtk_widget_get_style_context ((GtkWidget*) _tmp14_);
#line 35 "../src/Views/Label.vala"
	gtk_style_context_add_class (_tmp15_, GTK_STYLE_CLASS_FLAT);
#line 37 "../src/Views/Label.vala"
	_tmp16_ = widgets_dynamic_icon_new ();
#line 37 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp16_);
#line 37 "../src/Views/Label.vala"
	search_image = _tmp16_;
#line 38 "../src/Views/Label.vala"
	_tmp17_ = search_image;
#line 38 "../src/Views/Label.vala"
	widgets_dynamic_icon_set_size (_tmp17_, 19);
#line 39 "../src/Views/Label.vala"
	_tmp18_ = search_image;
#line 39 "../src/Views/Label.vala"
	widgets_dynamic_icon_update_icon_name (_tmp18_, "planner-search");
#line 41 "../src/Views/Label.vala"
	_tmp19_ = (GtkButton*) gtk_button_new ();
#line 41 "../src/Views/Label.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp19_, GTK_ALIGN_CENTER);
#line 41 "../src/Views/Label.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp19_, FALSE);
#line 41 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp19_);
#line 41 "../src/Views/Label.vala"
	search_button = _tmp19_;
#line 45 "../src/Views/Label.vala"
	_tmp20_ = search_button;
#line 45 "../src/Views/Label.vala"
	_tmp21_ = gtk_widget_get_style_context ((GtkWidget*) _tmp20_);
#line 45 "../src/Views/Label.vala"
	gtk_style_context_add_class (_tmp21_, GTK_STYLE_CLASS_FLAT);
#line 46 "../src/Views/Label.vala"
	_tmp22_ = search_button;
#line 46 "../src/Views/Label.vala"
	_tmp23_ = search_image;
#line 46 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp22_, (GtkWidget*) _tmp23_);
#line 48 "../src/Views/Label.vala"
	_tmp24_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 48 "../src/Views/Label.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp24_, GTK_ALIGN_START);
#line 48 "../src/Views/Label.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp24_, TRUE);
#line 48 "../src/Views/Label.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp24_, 2);
#line 48 "../src/Views/Label.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp24_, 6);
#line 48 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp24_);
#line 48 "../src/Views/Label.vala"
	header_box = _tmp24_;
#line 55 "../src/Views/Label.vala"
	_tmp25_ = header_box;
#line 55 "../src/Views/Label.vala"
	_tmp26_ = self->priv->widget_color;
#line 55 "../src/Views/Label.vala"
	gtk_box_pack_start (_tmp25_, (GtkWidget*) _tmp26_, FALSE, FALSE, (guint) 0);
#line 56 "../src/Views/Label.vala"
	_tmp27_ = header_box;
#line 56 "../src/Views/Label.vala"
	_tmp28_ = self->priv->title_label;
#line 56 "../src/Views/Label.vala"
	gtk_box_pack_start (_tmp27_, (GtkWidget*) _tmp28_, FALSE, FALSE, (guint) 9);
#line 57 "../src/Views/Label.vala"
	_tmp29_ = header_box;
#line 57 "../src/Views/Label.vala"
	_tmp30_ = menu_button;
#line 57 "../src/Views/Label.vala"
	gtk_box_pack_end (_tmp29_, (GtkWidget*) _tmp30_, FALSE, FALSE, (guint) 0);
#line 58 "../src/Views/Label.vala"
	_tmp31_ = header_box;
#line 58 "../src/Views/Label.vala"
	_tmp32_ = search_button;
#line 58 "../src/Views/Label.vala"
	gtk_box_pack_end (_tmp31_, (GtkWidget*) _tmp32_, FALSE, FALSE, (guint) 0);
#line 60 "../src/Views/Label.vala"
	_tmp33_ = widgets_magic_button_new ();
#line 60 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp33_);
#line 60 "../src/Views/Label.vala"
	magic_button = _tmp33_;
#line 62 "../src/Views/Label.vala"
	_tmp34_ = (GtkListBox*) gtk_list_box_new ();
#line 62 "../src/Views/Label.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp34_, GTK_ALIGN_START);
#line 62 "../src/Views/Label.vala"
	gtk_list_box_set_activate_on_single_click (_tmp34_, TRUE);
#line 62 "../src/Views/Label.vala"
	gtk_list_box_set_selection_mode (_tmp34_, GTK_SELECTION_SINGLE);
#line 62 "../src/Views/Label.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp34_, TRUE);
#line 62 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp34_);
#line 62 "../src/Views/Label.vala"
	_g_object_unref0 (self->priv->listbox);
#line 62 "../src/Views/Label.vala"
	self->priv->listbox = _tmp34_;
#line 68 "../src/Views/Label.vala"
	_tmp35_ = self->priv->listbox;
#line 68 "../src/Views/Label.vala"
	_tmp36_ = views_label_get_placeholder (self);
#line 68 "../src/Views/Label.vala"
	_tmp37_ = _tmp36_;
#line 68 "../src/Views/Label.vala"
	gtk_list_box_set_placeholder (_tmp35_, _tmp37_);
#line 68 "../src/Views/Label.vala"
	_g_object_unref0 (_tmp37_);
#line 70 "../src/Views/Label.vala"
	_tmp38_ = self->priv->listbox;
#line 70 "../src/Views/Label.vala"
	_tmp39_ = gtk_widget_get_style_context ((GtkWidget*) _tmp38_);
#line 70 "../src/Views/Label.vala"
	listbox_context = _tmp39_;
#line 71 "../src/Views/Label.vala"
	_tmp40_ = listbox_context;
#line 71 "../src/Views/Label.vala"
	gtk_style_context_add_class (_tmp40_, "listbox-background");
#line 73 "../src/Views/Label.vala"
	_tmp41_ = (GtkGrid*) gtk_grid_new ();
#line 73 "../src/Views/Label.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp41_, 12);
#line 73 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp41_);
#line 73 "../src/Views/Label.vala"
	listbox_grid = _tmp41_;
#line 76 "../src/Views/Label.vala"
	_tmp42_ = listbox_grid;
#line 76 "../src/Views/Label.vala"
	_tmp43_ = self->priv->listbox;
#line 76 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp42_, (GtkWidget*) _tmp43_);
#line 78 "../src/Views/Label.vala"
	_tmp44_ = (GtkGrid*) gtk_grid_new ();
#line 78 "../src/Views/Label.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp44_, GTK_ORIENTATION_VERTICAL);
#line 78 "../src/Views/Label.vala"
	g_object_set ((GtkWidget*) _tmp44_, "expand", TRUE, NULL);
#line 78 "../src/Views/Label.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp44_, 36);
#line 78 "../src/Views/Label.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp44_, 36);
#line 78 "../src/Views/Label.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp44_, 36);
#line 78 "../src/Views/Label.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp44_, 6);
#line 78 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp44_);
#line 78 "../src/Views/Label.vala"
	content = _tmp44_;
#line 86 "../src/Views/Label.vala"
	_tmp45_ = content;
#line 86 "../src/Views/Label.vala"
	_tmp46_ = header_box;
#line 86 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp45_, (GtkWidget*) _tmp46_);
#line 87 "../src/Views/Label.vala"
	_tmp47_ = content;
#line 87 "../src/Views/Label.vala"
	_tmp48_ = listbox_grid;
#line 87 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp47_, (GtkWidget*) _tmp48_);
#line 89 "../src/Views/Label.vala"
	_tmp49_ = (HdyClamp*) hdy_clamp_new ();
#line 89 "../src/Views/Label.vala"
	hdy_clamp_set_maximum_size (_tmp49_, 720);
#line 89 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp49_);
#line 89 "../src/Views/Label.vala"
	content_clamp = _tmp49_;
#line 93 "../src/Views/Label.vala"
	_tmp50_ = content_clamp;
#line 93 "../src/Views/Label.vala"
	_tmp51_ = content;
#line 93 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp50_, (GtkWidget*) _tmp51_);
#line 95 "../src/Views/Label.vala"
	_tmp52_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 95 "../src/Views/Label.vala"
	g_object_set (_tmp52_, "hscrollbar-policy", GTK_POLICY_NEVER, NULL);
#line 95 "../src/Views/Label.vala"
	g_object_set ((GtkWidget*) _tmp52_, "expand", TRUE, NULL);
#line 95 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp52_);
#line 95 "../src/Views/Label.vala"
	scrolled_window = _tmp52_;
#line 99 "../src/Views/Label.vala"
	_tmp53_ = scrolled_window;
#line 99 "../src/Views/Label.vala"
	_tmp54_ = content_clamp;
#line 99 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp53_, (GtkWidget*) _tmp54_);
#line 101 "../src/Views/Label.vala"
	_tmp55_ = (GtkOverlay*) gtk_overlay_new ();
#line 101 "../src/Views/Label.vala"
	g_object_set ((GtkWidget*) _tmp55_, "expand", TRUE, NULL);
#line 101 "../src/Views/Label.vala"
	g_object_ref_sink (_tmp55_);
#line 101 "../src/Views/Label.vala"
	overlay = _tmp55_;
#line 104 "../src/Views/Label.vala"
	_tmp56_ = overlay;
#line 104 "../src/Views/Label.vala"
	_tmp57_ = magic_button;
#line 104 "../src/Views/Label.vala"
	gtk_overlay_add_overlay (_tmp56_, (GtkWidget*) _tmp57_);
#line 105 "../src/Views/Label.vala"
	_tmp58_ = overlay;
#line 105 "../src/Views/Label.vala"
	_tmp59_ = scrolled_window;
#line 105 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) _tmp58_, (GtkWidget*) _tmp59_);
#line 107 "../src/Views/Label.vala"
	_tmp60_ = overlay;
#line 107 "../src/Views/Label.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp60_);
#line 108 "../src/Views/Label.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 110 "../src/Views/Label.vala"
	g_signal_connect_object ((GObject*) self, "notify::label", (GCallback) __views_label___lambda281__g_object_notify, self, 0);
#line 117 "../src/Views/Label.vala"
	_tmp61_ = magic_button;
#line 117 "../src/Views/Label.vala"
	g_signal_connect_object (_tmp61_, "clicked", (GCallback) __views_label___lambda282__widgets_magic_button_clicked, self, 0);
#line 121 "../src/Views/Label.vala"
	_tmp62_ = planner_database;
#line 121 "../src/Views/Label.vala"
	g_signal_connect_object (_tmp62_, "item-added", (GCallback) _views_label_valid_add_item_services_database_item_added, self, 0);
#line 122 "../src/Views/Label.vala"
	_tmp63_ = planner_database;
#line 122 "../src/Views/Label.vala"
	g_signal_connect_object (_tmp63_, "item-deleted", (GCallback) _views_label_valid_delete_item_services_database_item_deleted, self, 0);
#line 123 "../src/Views/Label.vala"
	_tmp64_ = planner_database;
#line 123 "../src/Views/Label.vala"
	g_signal_connect_object (_tmp64_, "item-updated", (GCallback) _views_label_valid_update_item_services_database_item_updated, self, 0);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (overlay);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (scrolled_window);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (content_clamp);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (content);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (listbox_grid);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (magic_button);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (header_box);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (search_button);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (search_image);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (menu_button);
#line 9 "../src/Views/Label.vala"
	_g_object_unref0 (menu_image);
#line 9 "../src/Views/Label.vala"
	return obj;
#line 1292 "Label.c"
}

static void
views_label_class_init (ViewsLabelClass * klass,
                        gpointer klass_data)
{
#line 1 "../src/Views/Label.vala"
	views_label_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Views/Label.vala"
	g_type_class_adjust_private_offset (klass, &ViewsLabel_private_offset);
#line 1 "../src/Views/Label.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_views_label_get_property;
#line 1 "../src/Views/Label.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_views_label_set_property;
#line 1 "../src/Views/Label.vala"
	G_OBJECT_CLASS (klass)->constructor = views_label_constructor;
#line 1 "../src/Views/Label.vala"
	G_OBJECT_CLASS (klass)->finalize = views_label_finalize;
#line 1 "../src/Views/Label.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_LABEL_LABEL_PROPERTY, views_label_properties[VIEWS_LABEL_LABEL_PROPERTY] = g_param_spec_object ("label", "label", "label", OBJECTS_TYPE_LABEL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1313 "Label.c"
}

static void
views_label_instance_init (ViewsLabel * self,
                           gpointer klass)
{
#line 1 "../src/Views/Label.vala"
	self->priv = views_label_get_instance_private (self);
#line 1322 "Label.c"
}

static void
views_label_finalize (GObject * obj)
{
	ViewsLabel * self;
#line 1 "../src/Views/Label.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_LABEL, ViewsLabel);
#line 2 "../src/Views/Label.vala"
	_g_object_unref0 (self->priv->_label);
#line 4 "../src/Views/Label.vala"
	_g_object_unref0 (self->items);
#line 5 "../src/Views/Label.vala"
	_g_object_unref0 (self->priv->listbox);
#line 6 "../src/Views/Label.vala"
	_g_object_unref0 (self->priv->widget_color);
#line 7 "../src/Views/Label.vala"
	_g_object_unref0 (self->priv->title_label);
#line 1 "../src/Views/Label.vala"
	G_OBJECT_CLASS (views_label_parent_class)->finalize (obj);
#line 1343 "Label.c"
}

static GType
views_label_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ViewsLabelClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_label_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsLabel), 0, (GInstanceInitFunc) views_label_instance_init, NULL };
	GType views_label_type_id;
	views_label_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsLabel", &g_define_type_info, 0);
	ViewsLabel_private_offset = g_type_add_instance_private (views_label_type_id, sizeof (ViewsLabelPrivate));
	return views_label_type_id;
}

GType
views_label_get_type (void)
{
	static volatile gsize views_label_type_id__volatile = 0;
	if (g_once_init_enter (&views_label_type_id__volatile)) {
		GType views_label_type_id;
		views_label_type_id = views_label_get_type_once ();
		g_once_init_leave (&views_label_type_id__volatile, views_label_type_id);
	}
	return views_label_type_id__volatile;
}

static void
_vala_views_label_get_property (GObject * object,
                                guint property_id,
                                GValue * value,
                                GParamSpec * pspec)
{
	ViewsLabel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_LABEL, ViewsLabel);
#line 1 "../src/Views/Label.vala"
	switch (property_id) {
#line 1 "../src/Views/Label.vala"
		case VIEWS_LABEL_LABEL_PROPERTY:
#line 1 "../src/Views/Label.vala"
		g_value_set_object (value, views_label_get_label (self));
#line 1 "../src/Views/Label.vala"
		break;
#line 1384 "Label.c"
		default:
#line 1 "../src/Views/Label.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/Label.vala"
		break;
#line 1390 "Label.c"
	}
}

static void
_vala_views_label_set_property (GObject * object,
                                guint property_id,
                                const GValue * value,
                                GParamSpec * pspec)
{
	ViewsLabel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_LABEL, ViewsLabel);
#line 1 "../src/Views/Label.vala"
	switch (property_id) {
#line 1 "../src/Views/Label.vala"
		case VIEWS_LABEL_LABEL_PROPERTY:
#line 1 "../src/Views/Label.vala"
		views_label_set_label (self, g_value_get_object (value));
#line 1 "../src/Views/Label.vala"
		break;
#line 1410 "Label.c"
		default:
#line 1 "../src/Views/Label.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Views/Label.vala"
		break;
#line 1416 "Label.c"
	}
}

