/* Util.c generated by valac 0.50.10, the Vala compiler
 * generated from Util.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gtk/gtk.h>
#include <gee.h>
#include <glib/gi18n-lib.h>
#include <gio/gio.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>
#include <granite.h>

typedef enum  {
	PROJECT_VIEW_STYLE_LIST,
	PROJECT_VIEW_STYLE_BOARD
} ProjectViewStyle;

#define TYPE_PROJECT_VIEW_STYLE (project_view_style_get_type ())
typedef enum  {
	PROJECT_ICON_STYLE_PROGRESS,
	PROJECT_ICON_STYLE_EMOJI
} ProjectIconStyle;

#define TYPE_PROJECT_ICON_STYLE (project_icon_style_get_type ())
typedef enum  {
	FILTER_TYPE_TODAY,
	FILTER_TYPE_INBOX,
	FILTER_TYPE_SCHEDULED,
	FILTER_TYPE_PINBOARD
} FilterType;

#define TYPE_FILTER_TYPE (filter_type_get_type ())
typedef enum  {
	BACKEND_TYPE_NONE = 0,
	BACKEND_TYPE_LOCAL = 1,
	BACKEND_TYPE_TODOIST = 2,
	BACKEND_TYPE_CALDAV = 3
} BackendType;

#define TYPE_BACKEND_TYPE (backend_type_get_type ())
typedef enum  {
	PANE_TYPE_FILTER,
	PANE_TYPE_FAVORITE,
	PANE_TYPE_PROJECT,
	PANE_TYPE_LABEL,
	PANE_TYPE_TASKLIST
} PaneType;

#define TYPE_PANE_TYPE (pane_type_get_type ())
typedef enum  {
	CONTAINER_TYPE_LISTBOX,
	CONTAINER_TYPE_FLOWBOX
} ContainerType;

#define TYPE_CONTAINER_TYPE (container_type_get_type ())
typedef enum  {
	LOADING_BUTTON_TYPE_LABEL,
	LOADING_BUTTON_TYPE_ICON
} LoadingButtonType;

#define TYPE_LOADING_BUTTON_TYPE (loading_button_type_get_type ())

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;
typedef struct _UtilPrivate UtilPrivate;

#define OBJECTS_TYPE_COLOR (objects_color_get_type ())
#define OBJECTS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_COLOR, ObjectsColor))
#define OBJECTS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_COLOR, ObjectsColorClass))
#define OBJECTS_IS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_COLOR))
#define OBJECTS_IS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_COLOR))
#define OBJECTS_COLOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_COLOR, ObjectsColorClass))

typedef struct _ObjectsColor ObjectsColor;
typedef struct _ObjectsColorClass ObjectsColorClass;
enum  {
	UTIL_0_PROPERTY,
	UTIL_DYNAMIC_ICONS_PROPERTY,
	UTIL_NUM_PROPERTIES
};
static GParamSpec* util_properties[UTIL_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _Block1Data Block1Data;
typedef struct _Block2Data Block2Data;
#define _g_main_loop_unref0(var) ((var == NULL) ? NULL : (var = (g_main_loop_unref (var), NULL)))

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;
#define _g_string_free0(var) ((var == NULL) ? NULL : (var = (g_string_free (var, TRUE), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define LAYOUTS_TYPE_ITEM_ROW (layouts_item_row_get_type ())
#define LAYOUTS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRow))
#define LAYOUTS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRowClass))
#define LAYOUTS_IS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_ITEM_ROW))
#define LAYOUTS_IS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_ITEM_ROW))
#define LAYOUTS_ITEM_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_ITEM_ROW, LayoutsItemRowClass))

typedef struct _LayoutsItemRow LayoutsItemRow;
typedef struct _LayoutsItemRowClass LayoutsItemRowClass;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define OBJECTS_TYPE_SECTION (objects_section_get_type ())
#define OBJECTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_SECTION, ObjectsSection))
#define OBJECTS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_SECTION, ObjectsSectionClass))
#define OBJECTS_IS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_SECTION))
#define OBJECTS_IS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_SECTION))
#define OBJECTS_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_SECTION, ObjectsSectionClass))

typedef struct _ObjectsSection ObjectsSection;
typedef struct _ObjectsSectionClass ObjectsSectionClass;
#define _g_time_zone_unref0(var) ((var == NULL) ? NULL : (var = (g_time_zone_unref (var), NULL)))

struct _Util {
	GObject parent_instance;
	UtilPrivate * priv;
	GtkTargetEntry* MAGICBUTTON_TARGET_ENTRIES;
	gint MAGICBUTTON_TARGET_ENTRIES_length1;
	GtkTargetEntry* ITEMROW_TARGET_ENTRIES;
	gint ITEMROW_TARGET_ENTRIES_length1;
};

struct _UtilClass {
	GObjectClass parent_class;
};

struct _UtilPrivate {
	GeeHashMap* colors;
	GeeHashMap* providers;
	GRegex* line_break_to_space_regex;
	GeeHashMap* _dynamic_icons;
};

struct _Block1Data {
	int _ref_count_;
	Util* self;
	GFile* file_from_uri;
};

struct _Block2Data {
	int _ref_count_;
	Block1Data * _data1_;
	GMainLoop* loop;
};

static gint Util_private_offset;
static gpointer util_parent_class = NULL;
static Util* util__instance;
static Util* util__instance = NULL;
extern ServicesEventBus* planner_event_bus;
extern GSettings* planner_settings;
extern ServicesDatabase* planner_database;

GType project_view_style_get_type (void) G_GNUC_CONST;
gchar* project_view_style_to_string (ProjectViewStyle self);
GType project_icon_style_get_type (void) G_GNUC_CONST;
gchar* project_icon_style_to_string (ProjectIconStyle self);
GType filter_type_get_type (void) G_GNUC_CONST;
gchar* filter_type_to_string (FilterType self);
GType backend_type_get_type (void) G_GNUC_CONST;
GType pane_type_get_type (void) G_GNUC_CONST;
GType container_type_get_type (void) G_GNUC_CONST;
GType loading_button_type_get_type (void) G_GNUC_CONST;
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
GType objects_color_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsColor, g_object_unref)
Util* util_get_default (void);
Util* util_new (void);
Util* util_construct (GType object_type);
GeeHashMap* util_get_colors (Util* self);
ObjectsColor* objects_color_new (gint id,
                                 const gchar* name,
                                 const gchar* hexadecimal);
ObjectsColor* objects_color_construct (GType object_type,
                                       gint id,
                                       const gchar* name,
                                       const gchar* hexadecimal);
gchar* util_get_color_name (Util* self,
                            const gchar* key);
const gchar* objects_color_get_name (ObjectsColor* self);
gchar* util_get_color (Util* self,
                       const gchar* key);
const gchar* objects_color_get_hexadecimal (ObjectsColor* self);
gchar* util_get_random_color (Util* self);
gint objects_color_get_id (ObjectsColor* self);
void util_set_widget_color (Util* self,
                            const gchar* color,
                            GtkWidget* widget);
void util_set_widget_priority (Util* self,
                               gint priority,
                               GtkWidget* widget);
gchar* util_get_priority_color (Util* self,
                                gint priority);
gchar* util_get_priority_background (Util* self,
                                     gint priority);
#define CONSTANTS_PRIORITY_1 4
#define CONSTANTS_PRIORITY_2 3
#define CONSTANTS_PRIORITY_3 2
void util_download_profile_image (Util* self,
                                  const gchar* id,
                                  const gchar* avatar_url);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
gchar* util_get_todoist_avatar_path (Util* self);
static Block2Data* block2_data_ref (Block2Data* _data2_);
static void block2_data_unref (void * _userdata_);
static void ___lambda322_ (Block2Data* _data2_,
                    gint64 current_num_bytes,
                    gint64 total_num_bytes);
static void ____lambda322__gfile_progress_callback (gint64 current_num_bytes,
                                             gint64 total_num_bytes,
                                             gpointer self);
static void ___lambda323_ (Block2Data* _data2_,
                    GObject* obj,
                    GAsyncResult* res);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
static void ____lambda323__gasync_ready_callback (GObject* source_object,
                                           GAsyncResult* res,
                                           gpointer self);
gint64 util_generate_id (Util* self,
                         gint len);
gchar* util_generate_string (Util* self);
gchar* util_generate_temp_id (Util* self);
gchar* util_get_encode_text (Util* self,
                             const gchar* text);
void util_update_theme (Util* self);
gchar* util_line_break_to_space (Util* self,
                                 const gchar* str);
gchar* util_get_dialog_text (Util* self,
                             const gchar* text);
GDateTime* util_get_todoist_datetime (Util* self,
                                      const gchar* date);
gchar* util_get_relative_date_from_date (Util* self,
                                         GDateTime* datetime);
gboolean util_is_today (Util* self,
                        GDateTime* date);
gboolean util_is_tomorrow (Util* self,
                           GDateTime* date);
gboolean util_is_yesterday (Util* self,
                            GDateTime* date);
gchar* util_get_default_date_format_from_date (Util* self,
                                               GDateTime* date);
gboolean util_has_time (Util* self,
                        GDateTime* datetime);
gchar* util_get_default_time_format (Util* self);
gboolean util_is_clock_format_12h (Util* self);
gchar* util_get_calendar_icon (Util* self,
                               GDateTime* date);
gboolean util_is_same_day (Util* self,
                           GDateTime* day1,
                           GDateTime* day2);
gboolean util_is_overdue (Util* self,
                          GDateTime* date);
GDateTime* util_get_format_date (Util* self,
                                 GDateTime* date);
GType layouts_item_row_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsItemRow, g_object_unref)
void util_item_added (Util* self,
                      LayoutsItemRow* row);
gint64 layouts_item_row_get_project_id (LayoutsItemRow* self);
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
ObjectsItem* layouts_item_row_get_item (LayoutsItemRow* self);
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
ObjectsProject* objects_item_get_project (ObjectsItem* self);
gint64 objects_base_object_get_id (ObjectsBaseObject* self);
gint64 layouts_item_row_get_section_id (LayoutsItemRow* self);
gint64 objects_item_get_section_id (ObjectsItem* self);
#define CONSTANTS_INACTIVE 0
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
GType objects_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsSection, g_object_unref)
ObjectsSection* services_database_get_section (ServicesDatabase* self,
                                               gint64 id);
ObjectsItem* objects_section_add_item_if_not_exists (ObjectsSection* self,
                                                     ObjectsItem* new_item,
                                                     gboolean insert);
ObjectsProject* services_database_get_project (ServicesDatabase* self,
                                               gint64 id);
gint64 objects_item_get_project_id (ObjectsItem* self);
ObjectsItem* objects_project_add_item_if_not_exists (ObjectsProject* self,
                                                     ObjectsItem* new_item,
                                                     gboolean insert);
void layouts_item_row_update_inserted_item (LayoutsItemRow* self);
void layouts_item_row_hide_destroy (LayoutsItemRow* self);
gchar* util_get_todoist_datetime_format (Util* self,
                                         GDateTime* date);
gboolean util_has_time_from_string (Util* self,
                                    const gchar* date);
gint util_get_days_of_month (Util* self,
                             gint index,
                             gint year_nav);
gboolean util_is_current_month (Util* self,
                                GDateTime* date);
gboolean util_is_dynamic_icon (Util* self,
                               const gchar* icon_name);
GeeHashMap* util_get_dynamic_icons (Util* self);
gboolean util_is_input_valid (Util* self,
                              GtkEntry* entry);
gchar* util_get_short_name (Util* self,
                            const gchar* name,
                            gint size);
static void util_finalize (GObject * obj);
static GType util_get_type_once (void);
static void _vala_util_get_property (GObject * object,
                              guint property_id,
                              GValue * value,
                              GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

gchar*
project_view_style_to_string (ProjectViewStyle self)
{
	gchar* result = NULL;
#line 6 "../src/Util.vala"
	switch (self) {
#line 6 "../src/Util.vala"
		case PROJECT_VIEW_STYLE_LIST:
#line 392 "Util.c"
		{
			gchar* _tmp0_;
#line 8 "../src/Util.vala"
			_tmp0_ = g_strdup ("list");
#line 8 "../src/Util.vala"
			result = _tmp0_;
#line 8 "../src/Util.vala"
			return result;
#line 401 "Util.c"
		}
#line 6 "../src/Util.vala"
		case PROJECT_VIEW_STYLE_BOARD:
#line 405 "Util.c"
		{
			gchar* _tmp1_;
#line 11 "../src/Util.vala"
			_tmp1_ = g_strdup ("board");
#line 11 "../src/Util.vala"
			result = _tmp1_;
#line 11 "../src/Util.vala"
			return result;
#line 414 "Util.c"
		}
		default:
		{
#line 14 "../src/Util.vala"
			g_assert_not_reached ();
#line 420 "Util.c"
		}
	}
}

static GType
project_view_style_get_type_once (void)
{
	static const GEnumValue values[] = {{PROJECT_VIEW_STYLE_LIST, "PROJECT_VIEW_STYLE_LIST", "list"}, {PROJECT_VIEW_STYLE_BOARD, "PROJECT_VIEW_STYLE_BOARD", "board"}, {0, NULL, NULL}};
	GType project_view_style_type_id;
	project_view_style_type_id = g_enum_register_static ("ProjectViewStyle", values);
	return project_view_style_type_id;
}

GType
project_view_style_get_type (void)
{
	static volatile gsize project_view_style_type_id__volatile = 0;
	if (g_once_init_enter (&project_view_style_type_id__volatile)) {
		GType project_view_style_type_id;
		project_view_style_type_id = project_view_style_get_type_once ();
		g_once_init_leave (&project_view_style_type_id__volatile, project_view_style_type_id);
	}
	return project_view_style_type_id__volatile;
}

gchar*
project_icon_style_to_string (ProjectIconStyle self)
{
	gchar* result = NULL;
#line 24 "../src/Util.vala"
	switch (self) {
#line 24 "../src/Util.vala"
		case PROJECT_ICON_STYLE_PROGRESS:
#line 454 "Util.c"
		{
			gchar* _tmp0_;
#line 26 "../src/Util.vala"
			_tmp0_ = g_strdup ("progress");
#line 26 "../src/Util.vala"
			result = _tmp0_;
#line 26 "../src/Util.vala"
			return result;
#line 463 "Util.c"
		}
#line 24 "../src/Util.vala"
		case PROJECT_ICON_STYLE_EMOJI:
#line 467 "Util.c"
		{
			gchar* _tmp1_;
#line 29 "../src/Util.vala"
			_tmp1_ = g_strdup ("emoji");
#line 29 "../src/Util.vala"
			result = _tmp1_;
#line 29 "../src/Util.vala"
			return result;
#line 476 "Util.c"
		}
		default:
		{
#line 32 "../src/Util.vala"
			g_assert_not_reached ();
#line 482 "Util.c"
		}
	}
}

static GType
project_icon_style_get_type_once (void)
{
	static const GEnumValue values[] = {{PROJECT_ICON_STYLE_PROGRESS, "PROJECT_ICON_STYLE_PROGRESS", "progress"}, {PROJECT_ICON_STYLE_EMOJI, "PROJECT_ICON_STYLE_EMOJI", "emoji"}, {0, NULL, NULL}};
	GType project_icon_style_type_id;
	project_icon_style_type_id = g_enum_register_static ("ProjectIconStyle", values);
	return project_icon_style_type_id;
}

GType
project_icon_style_get_type (void)
{
	static volatile gsize project_icon_style_type_id__volatile = 0;
	if (g_once_init_enter (&project_icon_style_type_id__volatile)) {
		GType project_icon_style_type_id;
		project_icon_style_type_id = project_icon_style_get_type_once ();
		g_once_init_leave (&project_icon_style_type_id__volatile, project_icon_style_type_id);
	}
	return project_icon_style_type_id__volatile;
}

gchar*
filter_type_to_string (FilterType self)
{
	gchar* result = NULL;
#line 44 "../src/Util.vala"
	switch (self) {
#line 44 "../src/Util.vala"
		case FILTER_TYPE_TODAY:
#line 516 "Util.c"
		{
			gchar* _tmp0_;
#line 46 "../src/Util.vala"
			_tmp0_ = g_strdup ("today");
#line 46 "../src/Util.vala"
			result = _tmp0_;
#line 46 "../src/Util.vala"
			return result;
#line 525 "Util.c"
		}
#line 44 "../src/Util.vala"
		case FILTER_TYPE_INBOX:
#line 529 "Util.c"
		{
			gchar* _tmp1_;
#line 49 "../src/Util.vala"
			_tmp1_ = g_strdup ("inbox");
#line 49 "../src/Util.vala"
			result = _tmp1_;
#line 49 "../src/Util.vala"
			return result;
#line 538 "Util.c"
		}
#line 44 "../src/Util.vala"
		case FILTER_TYPE_SCHEDULED:
#line 542 "Util.c"
		{
			gchar* _tmp2_;
#line 52 "../src/Util.vala"
			_tmp2_ = g_strdup ("scheduled");
#line 52 "../src/Util.vala"
			result = _tmp2_;
#line 52 "../src/Util.vala"
			return result;
#line 551 "Util.c"
		}
#line 44 "../src/Util.vala"
		case FILTER_TYPE_PINBOARD:
#line 555 "Util.c"
		{
			gchar* _tmp3_;
#line 55 "../src/Util.vala"
			_tmp3_ = g_strdup ("pinboard");
#line 55 "../src/Util.vala"
			result = _tmp3_;
#line 55 "../src/Util.vala"
			return result;
#line 564 "Util.c"
		}
		default:
		{
#line 58 "../src/Util.vala"
			g_assert_not_reached ();
#line 570 "Util.c"
		}
	}
}

static GType
filter_type_get_type_once (void)
{
	static const GEnumValue values[] = {{FILTER_TYPE_TODAY, "FILTER_TYPE_TODAY", "today"}, {FILTER_TYPE_INBOX, "FILTER_TYPE_INBOX", "inbox"}, {FILTER_TYPE_SCHEDULED, "FILTER_TYPE_SCHEDULED", "scheduled"}, {FILTER_TYPE_PINBOARD, "FILTER_TYPE_PINBOARD", "pinboard"}, {0, NULL, NULL}};
	GType filter_type_type_id;
	filter_type_type_id = g_enum_register_static ("FilterType", values);
	return filter_type_type_id;
}

GType
filter_type_get_type (void)
{
	static volatile gsize filter_type_type_id__volatile = 0;
	if (g_once_init_enter (&filter_type_type_id__volatile)) {
		GType filter_type_type_id;
		filter_type_type_id = filter_type_get_type_once ();
		g_once_init_leave (&filter_type_type_id__volatile, filter_type_type_id);
	}
	return filter_type_type_id__volatile;
}

static GType
backend_type_get_type_once (void)
{
	static const GEnumValue values[] = {{BACKEND_TYPE_NONE, "BACKEND_TYPE_NONE", "none"}, {BACKEND_TYPE_LOCAL, "BACKEND_TYPE_LOCAL", "local"}, {BACKEND_TYPE_TODOIST, "BACKEND_TYPE_TODOIST", "todoist"}, {BACKEND_TYPE_CALDAV, "BACKEND_TYPE_CALDAV", "caldav"}, {0, NULL, NULL}};
	GType backend_type_type_id;
	backend_type_type_id = g_enum_register_static ("BackendType", values);
	return backend_type_type_id;
}

GType
backend_type_get_type (void)
{
	static volatile gsize backend_type_type_id__volatile = 0;
	if (g_once_init_enter (&backend_type_type_id__volatile)) {
		GType backend_type_type_id;
		backend_type_type_id = backend_type_get_type_once ();
		g_once_init_leave (&backend_type_type_id__volatile, backend_type_type_id);
	}
	return backend_type_type_id__volatile;
}

static GType
pane_type_get_type_once (void)
{
	static const GEnumValue values[] = {{PANE_TYPE_FILTER, "PANE_TYPE_FILTER", "filter"}, {PANE_TYPE_FAVORITE, "PANE_TYPE_FAVORITE", "favorite"}, {PANE_TYPE_PROJECT, "PANE_TYPE_PROJECT", "project"}, {PANE_TYPE_LABEL, "PANE_TYPE_LABEL", "label"}, {PANE_TYPE_TASKLIST, "PANE_TYPE_TASKLIST", "tasklist"}, {0, NULL, NULL}};
	GType pane_type_type_id;
	pane_type_type_id = g_enum_register_static ("PaneType", values);
	return pane_type_type_id;
}

GType
pane_type_get_type (void)
{
	static volatile gsize pane_type_type_id__volatile = 0;
	if (g_once_init_enter (&pane_type_type_id__volatile)) {
		GType pane_type_type_id;
		pane_type_type_id = pane_type_get_type_once ();
		g_once_init_leave (&pane_type_type_id__volatile, pane_type_type_id);
	}
	return pane_type_type_id__volatile;
}

static GType
container_type_get_type_once (void)
{
	static const GEnumValue values[] = {{CONTAINER_TYPE_LISTBOX, "CONTAINER_TYPE_LISTBOX", "listbox"}, {CONTAINER_TYPE_FLOWBOX, "CONTAINER_TYPE_FLOWBOX", "flowbox"}, {0, NULL, NULL}};
	GType container_type_type_id;
	container_type_type_id = g_enum_register_static ("ContainerType", values);
	return container_type_type_id;
}

GType
container_type_get_type (void)
{
	static volatile gsize container_type_type_id__volatile = 0;
	if (g_once_init_enter (&container_type_type_id__volatile)) {
		GType container_type_type_id;
		container_type_type_id = container_type_get_type_once ();
		g_once_init_leave (&container_type_type_id__volatile, container_type_type_id);
	}
	return container_type_type_id__volatile;
}

static GType
loading_button_type_get_type_once (void)
{
	static const GEnumValue values[] = {{LOADING_BUTTON_TYPE_LABEL, "LOADING_BUTTON_TYPE_LABEL", "label"}, {LOADING_BUTTON_TYPE_ICON, "LOADING_BUTTON_TYPE_ICON", "icon"}, {0, NULL, NULL}};
	GType loading_button_type_type_id;
	loading_button_type_type_id = g_enum_register_static ("LoadingButtonType", values);
	return loading_button_type_type_id;
}

GType
loading_button_type_get_type (void)
{
	static volatile gsize loading_button_type_type_id__volatile = 0;
	if (g_once_init_enter (&loading_button_type_type_id__volatile)) {
		GType loading_button_type_type_id;
		loading_button_type_type_id = loading_button_type_get_type_once ();
		g_once_init_leave (&loading_button_type_type_id__volatile, loading_button_type_type_id);
	}
	return loading_button_type_type_id__volatile;
}

static inline gpointer
util_get_instance_private (Util* self)
{
	return G_STRUCT_MEMBER_P (self, Util_private_offset);
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 103 "../src/Util.vala"
	return self ? g_object_ref (self) : NULL;
#line 691 "Util.c"
}

Util*
util_get_default (void)
{
	Util* _tmp0_;
	Util* _tmp2_;
	Util* _tmp3_;
	Util* result = NULL;
#line 99 "../src/Util.vala"
	_tmp0_ = util__instance;
#line 99 "../src/Util.vala"
	if (_tmp0_ == NULL) {
#line 705 "Util.c"
		Util* _tmp1_;
#line 100 "../src/Util.vala"
		_tmp1_ = util_new ();
#line 100 "../src/Util.vala"
		_g_object_unref0 (util__instance);
#line 100 "../src/Util.vala"
		util__instance = _tmp1_;
#line 713 "Util.c"
	}
#line 103 "../src/Util.vala"
	_tmp2_ = util__instance;
#line 103 "../src/Util.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 103 "../src/Util.vala"
	result = _tmp3_;
#line 103 "../src/Util.vala"
	return result;
#line 723 "Util.c"
}

GeeHashMap*
util_get_colors (Util* self)
{
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp62_;
	GeeHashMap* _tmp63_;
	GeeHashMap* result = NULL;
#line 110 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 111 "../src/Util.vala"
	_tmp0_ = self->priv->colors;
#line 111 "../src/Util.vala"
	if (_tmp0_ == NULL) {
#line 739 "Util.c"
		GeeHashMap* _tmp1_;
		GeeHashMap* _tmp2_;
		ObjectsColor* _tmp3_;
		ObjectsColor* _tmp4_;
		GeeHashMap* _tmp5_;
		ObjectsColor* _tmp6_;
		ObjectsColor* _tmp7_;
		GeeHashMap* _tmp8_;
		ObjectsColor* _tmp9_;
		ObjectsColor* _tmp10_;
		GeeHashMap* _tmp11_;
		ObjectsColor* _tmp12_;
		ObjectsColor* _tmp13_;
		GeeHashMap* _tmp14_;
		ObjectsColor* _tmp15_;
		ObjectsColor* _tmp16_;
		GeeHashMap* _tmp17_;
		ObjectsColor* _tmp18_;
		ObjectsColor* _tmp19_;
		GeeHashMap* _tmp20_;
		ObjectsColor* _tmp21_;
		ObjectsColor* _tmp22_;
		GeeHashMap* _tmp23_;
		ObjectsColor* _tmp24_;
		ObjectsColor* _tmp25_;
		GeeHashMap* _tmp26_;
		ObjectsColor* _tmp27_;
		ObjectsColor* _tmp28_;
		GeeHashMap* _tmp29_;
		ObjectsColor* _tmp30_;
		ObjectsColor* _tmp31_;
		GeeHashMap* _tmp32_;
		ObjectsColor* _tmp33_;
		ObjectsColor* _tmp34_;
		GeeHashMap* _tmp35_;
		ObjectsColor* _tmp36_;
		ObjectsColor* _tmp37_;
		GeeHashMap* _tmp38_;
		ObjectsColor* _tmp39_;
		ObjectsColor* _tmp40_;
		GeeHashMap* _tmp41_;
		ObjectsColor* _tmp42_;
		ObjectsColor* _tmp43_;
		GeeHashMap* _tmp44_;
		ObjectsColor* _tmp45_;
		ObjectsColor* _tmp46_;
		GeeHashMap* _tmp47_;
		ObjectsColor* _tmp48_;
		ObjectsColor* _tmp49_;
		GeeHashMap* _tmp50_;
		ObjectsColor* _tmp51_;
		ObjectsColor* _tmp52_;
		GeeHashMap* _tmp53_;
		ObjectsColor* _tmp54_;
		ObjectsColor* _tmp55_;
		GeeHashMap* _tmp56_;
		ObjectsColor* _tmp57_;
		ObjectsColor* _tmp58_;
		GeeHashMap* _tmp59_;
		ObjectsColor* _tmp60_;
		ObjectsColor* _tmp61_;
#line 112 "../src/Util.vala"
		_tmp1_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, OBJECTS_TYPE_COLOR, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 112 "../src/Util.vala"
		_g_object_unref0 (self->priv->colors);
#line 112 "../src/Util.vala"
		self->priv->colors = _tmp1_;
#line 114 "../src/Util.vala"
		_tmp2_ = self->priv->colors;
#line 114 "../src/Util.vala"
		_tmp3_ = objects_color_new (30, _ ("Berry Red"), "#b8256f");
#line 114 "../src/Util.vala"
		_tmp4_ = _tmp3_;
#line 114 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp2_, "berry_red", _tmp4_);
#line 114 "../src/Util.vala"
		_g_object_unref0 (_tmp4_);
#line 115 "../src/Util.vala"
		_tmp5_ = self->priv->colors;
#line 115 "../src/Util.vala"
		_tmp6_ = objects_color_new (31, _ ("Red"), "#db4035");
#line 115 "../src/Util.vala"
		_tmp7_ = _tmp6_;
#line 115 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp5_, "red", _tmp7_);
#line 115 "../src/Util.vala"
		_g_object_unref0 (_tmp7_);
#line 116 "../src/Util.vala"
		_tmp8_ = self->priv->colors;
#line 116 "../src/Util.vala"
		_tmp9_ = objects_color_new (32, _ ("Orange"), "#ff9933");
#line 116 "../src/Util.vala"
		_tmp10_ = _tmp9_;
#line 116 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp8_, "orange", _tmp10_);
#line 116 "../src/Util.vala"
		_g_object_unref0 (_tmp10_);
#line 117 "../src/Util.vala"
		_tmp11_ = self->priv->colors;
#line 117 "../src/Util.vala"
		_tmp12_ = objects_color_new (33, _ ("Olive Green"), "#fad000");
#line 117 "../src/Util.vala"
		_tmp13_ = _tmp12_;
#line 117 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp11_, "yellow", _tmp13_);
#line 117 "../src/Util.vala"
		_g_object_unref0 (_tmp13_);
#line 118 "../src/Util.vala"
		_tmp14_ = self->priv->colors;
#line 118 "../src/Util.vala"
		_tmp15_ = objects_color_new (34, _ ("Yellow"), "#afb83b");
#line 118 "../src/Util.vala"
		_tmp16_ = _tmp15_;
#line 118 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp14_, "olive_green", _tmp16_);
#line 118 "../src/Util.vala"
		_g_object_unref0 (_tmp16_);
#line 119 "../src/Util.vala"
		_tmp17_ = self->priv->colors;
#line 119 "../src/Util.vala"
		_tmp18_ = objects_color_new (35, _ ("Lime Green"), "#7ecc49");
#line 119 "../src/Util.vala"
		_tmp19_ = _tmp18_;
#line 119 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp17_, "lime_green", _tmp19_);
#line 119 "../src/Util.vala"
		_g_object_unref0 (_tmp19_);
#line 120 "../src/Util.vala"
		_tmp20_ = self->priv->colors;
#line 120 "../src/Util.vala"
		_tmp21_ = objects_color_new (36, _ ("Green"), "#299438");
#line 120 "../src/Util.vala"
		_tmp22_ = _tmp21_;
#line 120 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp20_, "green", _tmp22_);
#line 120 "../src/Util.vala"
		_g_object_unref0 (_tmp22_);
#line 121 "../src/Util.vala"
		_tmp23_ = self->priv->colors;
#line 121 "../src/Util.vala"
		_tmp24_ = objects_color_new (37, _ ("Mint Green"), "#6accbc");
#line 121 "../src/Util.vala"
		_tmp25_ = _tmp24_;
#line 121 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp23_, "mint_green", _tmp25_);
#line 121 "../src/Util.vala"
		_g_object_unref0 (_tmp25_);
#line 122 "../src/Util.vala"
		_tmp26_ = self->priv->colors;
#line 122 "../src/Util.vala"
		_tmp27_ = objects_color_new (38, _ ("Teal"), "#158fad");
#line 122 "../src/Util.vala"
		_tmp28_ = _tmp27_;
#line 122 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp26_, "teal", _tmp28_);
#line 122 "../src/Util.vala"
		_g_object_unref0 (_tmp28_);
#line 123 "../src/Util.vala"
		_tmp29_ = self->priv->colors;
#line 123 "../src/Util.vala"
		_tmp30_ = objects_color_new (39, _ ("Sky Blue"), "#14aaf5");
#line 123 "../src/Util.vala"
		_tmp31_ = _tmp30_;
#line 123 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp29_, "sky_blue", _tmp31_);
#line 123 "../src/Util.vala"
		_g_object_unref0 (_tmp31_);
#line 124 "../src/Util.vala"
		_tmp32_ = self->priv->colors;
#line 124 "../src/Util.vala"
		_tmp33_ = objects_color_new (40, _ ("Light Blue"), "#96c3eb");
#line 124 "../src/Util.vala"
		_tmp34_ = _tmp33_;
#line 124 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp32_, "light_blue", _tmp34_);
#line 124 "../src/Util.vala"
		_g_object_unref0 (_tmp34_);
#line 125 "../src/Util.vala"
		_tmp35_ = self->priv->colors;
#line 125 "../src/Util.vala"
		_tmp36_ = objects_color_new (41, _ ("Blue"), "#4073ff");
#line 125 "../src/Util.vala"
		_tmp37_ = _tmp36_;
#line 125 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp35_, "blue", _tmp37_);
#line 125 "../src/Util.vala"
		_g_object_unref0 (_tmp37_);
#line 126 "../src/Util.vala"
		_tmp38_ = self->priv->colors;
#line 126 "../src/Util.vala"
		_tmp39_ = objects_color_new (42, _ ("Grape"), "#884dff");
#line 126 "../src/Util.vala"
		_tmp40_ = _tmp39_;
#line 126 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp38_, "grape", _tmp40_);
#line 126 "../src/Util.vala"
		_g_object_unref0 (_tmp40_);
#line 127 "../src/Util.vala"
		_tmp41_ = self->priv->colors;
#line 127 "../src/Util.vala"
		_tmp42_ = objects_color_new (43, _ ("Violet"), "#af38eb");
#line 127 "../src/Util.vala"
		_tmp43_ = _tmp42_;
#line 127 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp41_, "violet", _tmp43_);
#line 127 "../src/Util.vala"
		_g_object_unref0 (_tmp43_);
#line 128 "../src/Util.vala"
		_tmp44_ = self->priv->colors;
#line 128 "../src/Util.vala"
		_tmp45_ = objects_color_new (44, _ ("Lavander"), "#eb96eb");
#line 128 "../src/Util.vala"
		_tmp46_ = _tmp45_;
#line 128 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp44_, "lavender", _tmp46_);
#line 128 "../src/Util.vala"
		_g_object_unref0 (_tmp46_);
#line 129 "../src/Util.vala"
		_tmp47_ = self->priv->colors;
#line 129 "../src/Util.vala"
		_tmp48_ = objects_color_new (45, _ ("Magenta"), "#e05194");
#line 129 "../src/Util.vala"
		_tmp49_ = _tmp48_;
#line 129 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp47_, "magenta", _tmp49_);
#line 129 "../src/Util.vala"
		_g_object_unref0 (_tmp49_);
#line 130 "../src/Util.vala"
		_tmp50_ = self->priv->colors;
#line 130 "../src/Util.vala"
		_tmp51_ = objects_color_new (46, _ ("Salmon"), "#ff8d85");
#line 130 "../src/Util.vala"
		_tmp52_ = _tmp51_;
#line 130 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp50_, "salmon", _tmp52_);
#line 130 "../src/Util.vala"
		_g_object_unref0 (_tmp52_);
#line 131 "../src/Util.vala"
		_tmp53_ = self->priv->colors;
#line 131 "../src/Util.vala"
		_tmp54_ = objects_color_new (47, _ ("Charcoal"), "#808080");
#line 131 "../src/Util.vala"
		_tmp55_ = _tmp54_;
#line 131 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp53_, "charcoal", _tmp55_);
#line 131 "../src/Util.vala"
		_g_object_unref0 (_tmp55_);
#line 132 "../src/Util.vala"
		_tmp56_ = self->priv->colors;
#line 132 "../src/Util.vala"
		_tmp57_ = objects_color_new (48, _ ("Grey"), "#b8b8b8");
#line 132 "../src/Util.vala"
		_tmp58_ = _tmp57_;
#line 132 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp56_, "grey", _tmp58_);
#line 132 "../src/Util.vala"
		_g_object_unref0 (_tmp58_);
#line 133 "../src/Util.vala"
		_tmp59_ = self->priv->colors;
#line 133 "../src/Util.vala"
		_tmp60_ = objects_color_new (49, _ ("Taupe"), "#ccac93");
#line 133 "../src/Util.vala"
		_tmp61_ = _tmp60_;
#line 133 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp59_, "taupe", _tmp61_);
#line 133 "../src/Util.vala"
		_g_object_unref0 (_tmp61_);
#line 1007 "Util.c"
	}
#line 136 "../src/Util.vala"
	_tmp62_ = self->priv->colors;
#line 136 "../src/Util.vala"
	_tmp63_ = _g_object_ref0 (_tmp62_);
#line 136 "../src/Util.vala"
	result = _tmp63_;
#line 136 "../src/Util.vala"
	return result;
#line 1017 "Util.c"
}

gchar*
util_get_color_name (Util* self,
                     const gchar* key)
{
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp1_;
	gpointer _tmp2_;
	ObjectsColor* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* result = NULL;
#line 139 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 139 "../src/Util.vala"
	g_return_val_if_fail (key != NULL, NULL);
#line 140 "../src/Util.vala"
	_tmp0_ = util_get_colors (self);
#line 140 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 140 "../src/Util.vala"
	_tmp2_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp1_, key);
#line 140 "../src/Util.vala"
	_tmp3_ = (ObjectsColor*) _tmp2_;
#line 140 "../src/Util.vala"
	_tmp4_ = objects_color_get_name (_tmp3_);
#line 140 "../src/Util.vala"
	_tmp5_ = _tmp4_;
#line 140 "../src/Util.vala"
	_tmp6_ = g_strdup (_tmp5_);
#line 140 "../src/Util.vala"
	_tmp7_ = _tmp6_;
#line 140 "../src/Util.vala"
	_g_object_unref0 (_tmp3_);
#line 140 "../src/Util.vala"
	_g_object_unref0 (_tmp1_);
#line 140 "../src/Util.vala"
	result = _tmp7_;
#line 140 "../src/Util.vala"
	return result;
#line 1061 "Util.c"
}

gchar*
util_get_color (Util* self,
                const gchar* key)
{
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp1_;
	gpointer _tmp2_;
	ObjectsColor* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* result = NULL;
#line 143 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 143 "../src/Util.vala"
	g_return_val_if_fail (key != NULL, NULL);
#line 144 "../src/Util.vala"
	_tmp0_ = util_get_colors (self);
#line 144 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 144 "../src/Util.vala"
	_tmp2_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp1_, key);
#line 144 "../src/Util.vala"
	_tmp3_ = (ObjectsColor*) _tmp2_;
#line 144 "../src/Util.vala"
	_tmp4_ = objects_color_get_hexadecimal (_tmp3_);
#line 144 "../src/Util.vala"
	_tmp5_ = _tmp4_;
#line 144 "../src/Util.vala"
	_tmp6_ = g_strdup (_tmp5_);
#line 144 "../src/Util.vala"
	_tmp7_ = _tmp6_;
#line 144 "../src/Util.vala"
	_g_object_unref0 (_tmp3_);
#line 144 "../src/Util.vala"
	_g_object_unref0 (_tmp1_);
#line 144 "../src/Util.vala"
	result = _tmp7_;
#line 144 "../src/Util.vala"
	return result;
#line 1105 "Util.c"
}

gchar*
util_get_random_color (Util* self)
{
	gchar* returned = NULL;
	gchar* _tmp0_;
	gint random = 0;
	gchar* result = NULL;
#line 147 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 148 "../src/Util.vala"
	_tmp0_ = g_strdup ("berry_red");
#line 148 "../src/Util.vala"
	returned = _tmp0_;
#line 149 "../src/Util.vala"
	random = (gint) g_random_int_range ((gint32) 30, (gint32) 50);
#line 1123 "Util.c"
	{
		GeeIterator* _entry_it = NULL;
		GeeHashMap* _tmp1_;
		GeeHashMap* _tmp2_;
		GeeSet* _tmp3_;
		GeeSet* _tmp4_;
		GeeSet* _tmp5_;
		GeeIterator* _tmp6_;
		GeeIterator* _tmp7_;
#line 150 "../src/Util.vala"
		_tmp1_ = util_get_colors (self);
#line 150 "../src/Util.vala"
		_tmp2_ = _tmp1_;
#line 150 "../src/Util.vala"
		_tmp3_ = gee_abstract_map_get_entries ((GeeAbstractMap*) _tmp2_);
#line 150 "../src/Util.vala"
		_tmp4_ = _tmp3_;
#line 150 "../src/Util.vala"
		_tmp5_ = _tmp4_;
#line 150 "../src/Util.vala"
		_tmp6_ = gee_iterable_iterator ((GeeIterable*) _tmp5_);
#line 150 "../src/Util.vala"
		_tmp7_ = _tmp6_;
#line 150 "../src/Util.vala"
		_g_object_unref0 (_tmp5_);
#line 150 "../src/Util.vala"
		_g_object_unref0 (_tmp2_);
#line 150 "../src/Util.vala"
		_entry_it = _tmp7_;
#line 150 "../src/Util.vala"
		while (TRUE) {
#line 1155 "Util.c"
			GeeIterator* _tmp8_;
			GeeMapEntry* entry = NULL;
			GeeIterator* _tmp9_;
			gpointer _tmp10_;
			GeeMapEntry* _tmp11_;
			gconstpointer _tmp12_;
			gconstpointer _tmp13_;
			gint _tmp14_;
			gint _tmp15_;
#line 150 "../src/Util.vala"
			_tmp8_ = _entry_it;
#line 150 "../src/Util.vala"
			if (!gee_iterator_next (_tmp8_)) {
#line 150 "../src/Util.vala"
				break;
#line 1171 "Util.c"
			}
#line 150 "../src/Util.vala"
			_tmp9_ = _entry_it;
#line 150 "../src/Util.vala"
			_tmp10_ = gee_iterator_get (_tmp9_);
#line 150 "../src/Util.vala"
			entry = (GeeMapEntry*) _tmp10_;
#line 151 "../src/Util.vala"
			_tmp11_ = entry;
#line 151 "../src/Util.vala"
			_tmp12_ = gee_map_entry_get_value (_tmp11_);
#line 151 "../src/Util.vala"
			_tmp13_ = _tmp12_;
#line 151 "../src/Util.vala"
			_tmp14_ = objects_color_get_id ((ObjectsColor*) _tmp13_);
#line 151 "../src/Util.vala"
			_tmp15_ = _tmp14_;
#line 151 "../src/Util.vala"
			if (_tmp15_ == random) {
#line 1191 "Util.c"
				GeeMapEntry* _tmp16_;
				gconstpointer _tmp17_;
				gconstpointer _tmp18_;
				gchar* _tmp19_;
#line 152 "../src/Util.vala"
				_tmp16_ = entry;
#line 152 "../src/Util.vala"
				_tmp17_ = gee_map_entry_get_key (_tmp16_);
#line 152 "../src/Util.vala"
				_tmp18_ = _tmp17_;
#line 152 "../src/Util.vala"
				_tmp19_ = g_strdup ((const gchar*) _tmp18_);
#line 152 "../src/Util.vala"
				_g_free0 (returned);
#line 152 "../src/Util.vala"
				returned = _tmp19_;
#line 1208 "Util.c"
			}
#line 150 "../src/Util.vala"
			_g_object_unref0 (entry);
#line 1212 "Util.c"
		}
#line 150 "../src/Util.vala"
		_g_object_unref0 (_entry_it);
#line 1216 "Util.c"
	}
#line 156 "../src/Util.vala"
	result = returned;
#line 156 "../src/Util.vala"
	return result;
#line 1222 "Util.c"
}

void
util_set_widget_color (Util* self,
                       const gchar* color,
                       GtkWidget* widget)
{
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp2_;
	GtkStyleContext* style_context = NULL;
	GtkStyleContext* _tmp14_;
	GeeHashMap* _tmp15_;
	gpointer _tmp16_;
	GtkCssProvider* _tmp17_;
	GError* _inner_error0_ = NULL;
#line 160 "../src/Util.vala"
	g_return_if_fail (self != NULL);
#line 160 "../src/Util.vala"
	g_return_if_fail (color != NULL);
#line 160 "../src/Util.vala"
	g_return_if_fail (widget != NULL);
#line 161 "../src/Util.vala"
	_tmp0_ = self->priv->providers;
#line 161 "../src/Util.vala"
	if (_tmp0_ == NULL) {
#line 1248 "Util.c"
		GeeHashMap* _tmp1_;
#line 162 "../src/Util.vala"
		_tmp1_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, gtk_css_provider_get_type (), (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 162 "../src/Util.vala"
		_g_object_unref0 (self->priv->providers);
#line 162 "../src/Util.vala"
		self->priv->providers = _tmp1_;
#line 1256 "Util.c"
	}
#line 165 "../src/Util.vala"
	_tmp2_ = self->priv->providers;
#line 165 "../src/Util.vala"
	if (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp2_, color)) {
#line 1262 "Util.c"
		gchar* style = NULL;
		gchar* _tmp3_;
#line 166 "../src/Util.vala"
		_tmp3_ = g_strdup_printf ("\n" \
"                @define-color colorAccent %s;\n" \
"                @define-color accent_color %s;\n" \
"            ", color, color);
#line 166 "../src/Util.vala"
		style = _tmp3_;
#line 1269 "Util.c"
		{
			GtkCssProvider* style_provider = NULL;
			GtkCssProvider* _tmp4_;
			GtkCssProvider* _tmp5_;
			const gchar* _tmp6_;
			const gchar* _tmp7_;
			gint _tmp8_;
			gint _tmp9_;
			GeeHashMap* _tmp10_;
			GtkCssProvider* _tmp11_;
#line 172 "../src/Util.vala"
			_tmp4_ = gtk_css_provider_new ();
#line 172 "../src/Util.vala"
			style_provider = _tmp4_;
#line 173 "../src/Util.vala"
			_tmp5_ = style_provider;
#line 173 "../src/Util.vala"
			_tmp6_ = style;
#line 173 "../src/Util.vala"
			_tmp7_ = style;
#line 173 "../src/Util.vala"
			_tmp8_ = strlen (_tmp7_);
#line 173 "../src/Util.vala"
			_tmp9_ = _tmp8_;
#line 173 "../src/Util.vala"
			gtk_css_provider_load_from_data (_tmp5_, _tmp6_, (gssize) _tmp9_, &_inner_error0_);
#line 173 "../src/Util.vala"
			if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 173 "../src/Util.vala"
				_g_object_unref0 (style_provider);
#line 1300 "Util.c"
				goto __catch0_g_error;
			}
#line 175 "../src/Util.vala"
			_tmp10_ = self->priv->providers;
#line 175 "../src/Util.vala"
			_tmp11_ = style_provider;
#line 175 "../src/Util.vala"
			gee_abstract_map_set ((GeeAbstractMap*) _tmp10_, color, _tmp11_);
#line 171 "../src/Util.vala"
			_g_object_unref0 (style_provider);
#line 1311 "Util.c"
		}
		goto __finally0;
		__catch0_g_error:
		{
			GError* e = NULL;
			GError* _tmp12_;
			const gchar* _tmp13_;
#line 171 "../src/Util.vala"
			e = _inner_error0_;
#line 171 "../src/Util.vala"
			_inner_error0_ = NULL;
#line 177 "../src/Util.vala"
			_tmp12_ = e;
#line 177 "../src/Util.vala"
			_tmp13_ = _tmp12_->message;
#line 177 "../src/Util.vala"
			g_critical ("Util.vala:177: Unable to set color: %s", _tmp13_);
#line 171 "../src/Util.vala"
			_g_error_free0 (e);
#line 1331 "Util.c"
		}
		__finally0:
#line 171 "../src/Util.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 171 "../src/Util.vala"
			_g_free0 (style);
#line 171 "../src/Util.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 171 "../src/Util.vala"
			g_clear_error (&_inner_error0_);
#line 171 "../src/Util.vala"
			return;
#line 1344 "Util.c"
		}
#line 165 "../src/Util.vala"
		_g_free0 (style);
#line 1348 "Util.c"
	}
#line 181 "../src/Util.vala"
	_tmp14_ = gtk_widget_get_style_context (widget);
#line 181 "../src/Util.vala"
	style_context = _tmp14_;
#line 182 "../src/Util.vala"
	_tmp15_ = self->priv->providers;
#line 182 "../src/Util.vala"
	_tmp16_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp15_, color);
#line 182 "../src/Util.vala"
	_tmp17_ = (GtkCssProvider*) _tmp16_;
#line 182 "../src/Util.vala"
	gtk_style_context_add_provider (style_context, (GtkStyleProvider*) _tmp17_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 182 "../src/Util.vala"
	_g_object_unref0 (_tmp17_);
#line 1364 "Util.c"
}

void
util_set_widget_priority (Util* self,
                          gint priority,
                          GtkWidget* widget)
{
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gboolean _tmp5_;
	GtkStyleContext* style_context = NULL;
	GtkStyleContext* _tmp24_;
	GeeHashMap* _tmp25_;
	gchar* _tmp26_;
	gchar* _tmp27_;
	gpointer _tmp28_;
	GtkCssProvider* _tmp29_;
	GError* _inner_error0_ = NULL;
#line 185 "../src/Util.vala"
	g_return_if_fail (self != NULL);
#line 185 "../src/Util.vala"
	g_return_if_fail (widget != NULL);
#line 186 "../src/Util.vala"
	_tmp0_ = self->priv->providers;
#line 186 "../src/Util.vala"
	if (_tmp0_ == NULL) {
#line 1393 "Util.c"
		GeeHashMap* _tmp1_;
#line 187 "../src/Util.vala"
		_tmp1_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, gtk_css_provider_get_type (), (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 187 "../src/Util.vala"
		_g_object_unref0 (self->priv->providers);
#line 187 "../src/Util.vala"
		self->priv->providers = _tmp1_;
#line 1401 "Util.c"
	}
#line 190 "../src/Util.vala"
	_tmp2_ = self->priv->providers;
#line 190 "../src/Util.vala"
	_tmp3_ = g_strdup_printf ("%i", priority);
#line 190 "../src/Util.vala"
	_tmp4_ = _tmp3_;
#line 190 "../src/Util.vala"
	_tmp5_ = !gee_abstract_map_has_key ((GeeAbstractMap*) _tmp2_, _tmp4_);
#line 190 "../src/Util.vala"
	_g_free0 (_tmp4_);
#line 190 "../src/Util.vala"
	if (_tmp5_) {
#line 1415 "Util.c"
		gchar* style = NULL;
		gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
#line 191 "../src/Util.vala"
		_tmp6_ = util_get_priority_color (self, priority);
#line 191 "../src/Util.vala"
		_tmp7_ = _tmp6_;
#line 191 "../src/Util.vala"
		_tmp8_ = util_get_priority_background (self, priority);
#line 191 "../src/Util.vala"
		_tmp9_ = _tmp8_;
#line 191 "../src/Util.vala"
		_tmp10_ = g_strdup_printf ("\n" \
"                @define-color colorPriority %s;\n" \
"                @define-color colorPriorityBackground %s;\n" \
"            ", _tmp7_, _tmp9_);
#line 191 "../src/Util.vala"
		_tmp11_ = _tmp10_;
#line 191 "../src/Util.vala"
		_g_free0 (_tmp9_);
#line 191 "../src/Util.vala"
		_g_free0 (_tmp7_);
#line 191 "../src/Util.vala"
		style = _tmp11_;
#line 1441 "Util.c"
		{
			GtkCssProvider* style_provider = NULL;
			GtkCssProvider* _tmp12_;
			GtkCssProvider* _tmp13_;
			const gchar* _tmp14_;
			const gchar* _tmp15_;
			gint _tmp16_;
			gint _tmp17_;
			GeeHashMap* _tmp18_;
			gchar* _tmp19_;
			gchar* _tmp20_;
			GtkCssProvider* _tmp21_;
#line 197 "../src/Util.vala"
			_tmp12_ = gtk_css_provider_new ();
#line 197 "../src/Util.vala"
			style_provider = _tmp12_;
#line 198 "../src/Util.vala"
			_tmp13_ = style_provider;
#line 198 "../src/Util.vala"
			_tmp14_ = style;
#line 198 "../src/Util.vala"
			_tmp15_ = style;
#line 198 "../src/Util.vala"
			_tmp16_ = strlen (_tmp15_);
#line 198 "../src/Util.vala"
			_tmp17_ = _tmp16_;
#line 198 "../src/Util.vala"
			gtk_css_provider_load_from_data (_tmp13_, _tmp14_, (gssize) _tmp17_, &_inner_error0_);
#line 198 "../src/Util.vala"
			if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 198 "../src/Util.vala"
				_g_object_unref0 (style_provider);
#line 1474 "Util.c"
				goto __catch0_g_error;
			}
#line 200 "../src/Util.vala"
			_tmp18_ = self->priv->providers;
#line 200 "../src/Util.vala"
			_tmp19_ = g_strdup_printf ("%i", priority);
#line 200 "../src/Util.vala"
			_tmp20_ = _tmp19_;
#line 200 "../src/Util.vala"
			_tmp21_ = style_provider;
#line 200 "../src/Util.vala"
			gee_abstract_map_set ((GeeAbstractMap*) _tmp18_, _tmp20_, _tmp21_);
#line 200 "../src/Util.vala"
			_g_free0 (_tmp20_);
#line 196 "../src/Util.vala"
			_g_object_unref0 (style_provider);
#line 1491 "Util.c"
		}
		goto __finally0;
		__catch0_g_error:
		{
			GError* e = NULL;
			GError* _tmp22_;
			const gchar* _tmp23_;
#line 196 "../src/Util.vala"
			e = _inner_error0_;
#line 196 "../src/Util.vala"
			_inner_error0_ = NULL;
#line 202 "../src/Util.vala"
			_tmp22_ = e;
#line 202 "../src/Util.vala"
			_tmp23_ = _tmp22_->message;
#line 202 "../src/Util.vala"
			g_critical ("Util.vala:202: Unable to set color: %s", _tmp23_);
#line 196 "../src/Util.vala"
			_g_error_free0 (e);
#line 1511 "Util.c"
		}
		__finally0:
#line 196 "../src/Util.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 196 "../src/Util.vala"
			_g_free0 (style);
#line 196 "../src/Util.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 196 "../src/Util.vala"
			g_clear_error (&_inner_error0_);
#line 196 "../src/Util.vala"
			return;
#line 1524 "Util.c"
		}
#line 190 "../src/Util.vala"
		_g_free0 (style);
#line 1528 "Util.c"
	}
#line 206 "../src/Util.vala"
	_tmp24_ = gtk_widget_get_style_context (widget);
#line 206 "../src/Util.vala"
	style_context = _tmp24_;
#line 207 "../src/Util.vala"
	_tmp25_ = self->priv->providers;
#line 207 "../src/Util.vala"
	_tmp26_ = g_strdup_printf ("%i", priority);
#line 207 "../src/Util.vala"
	_tmp27_ = _tmp26_;
#line 207 "../src/Util.vala"
	_tmp28_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp25_, _tmp27_);
#line 207 "../src/Util.vala"
	_tmp29_ = (GtkCssProvider*) _tmp28_;
#line 207 "../src/Util.vala"
	gtk_style_context_add_provider (style_context, (GtkStyleProvider*) _tmp29_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 207 "../src/Util.vala"
	_g_object_unref0 (_tmp29_);
#line 207 "../src/Util.vala"
	_g_free0 (_tmp27_);
#line 1550 "Util.c"
}

gchar*
util_get_priority_color (Util* self,
                         gint priority)
{
	gchar* result = NULL;
#line 210 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 211 "../src/Util.vala"
	if (priority == CONSTANTS_PRIORITY_1) {
#line 1562 "Util.c"
		gchar* _tmp0_;
#line 212 "../src/Util.vala"
		_tmp0_ = g_strdup ("#ff7066");
#line 212 "../src/Util.vala"
		result = _tmp0_;
#line 212 "../src/Util.vala"
		return result;
#line 1570 "Util.c"
	} else {
#line 213 "../src/Util.vala"
		if (priority == CONSTANTS_PRIORITY_2) {
#line 1574 "Util.c"
			gchar* _tmp1_;
#line 214 "../src/Util.vala"
			_tmp1_ = g_strdup ("#ff9a14");
#line 214 "../src/Util.vala"
			result = _tmp1_;
#line 214 "../src/Util.vala"
			return result;
#line 1582 "Util.c"
		} else {
#line 215 "../src/Util.vala"
			if (priority == CONSTANTS_PRIORITY_3) {
#line 1586 "Util.c"
				gchar* _tmp2_;
#line 216 "../src/Util.vala"
				_tmp2_ = g_strdup ("#5297ff");
#line 216 "../src/Util.vala"
				result = _tmp2_;
#line 216 "../src/Util.vala"
				return result;
#line 1594 "Util.c"
			} else {
				gchar* _tmp3_;
#line 218 "../src/Util.vala"
				_tmp3_ = g_strdup ("@item_border_color");
#line 218 "../src/Util.vala"
				result = _tmp3_;
#line 218 "../src/Util.vala"
				return result;
#line 1603 "Util.c"
			}
		}
	}
}

gchar*
util_get_priority_background (Util* self,
                              gint priority)
{
	gchar* result = NULL;
#line 222 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 223 "../src/Util.vala"
	if (priority == CONSTANTS_PRIORITY_1) {
#line 1618 "Util.c"
		gchar* _tmp0_;
#line 224 "../src/Util.vala"
		_tmp0_ = g_strdup ("rgba (255, 112, 102, 0.1)");
#line 224 "../src/Util.vala"
		result = _tmp0_;
#line 224 "../src/Util.vala"
		return result;
#line 1626 "Util.c"
	} else {
#line 225 "../src/Util.vala"
		if (priority == CONSTANTS_PRIORITY_2) {
#line 1630 "Util.c"
			gchar* _tmp1_;
#line 226 "../src/Util.vala"
			_tmp1_ = g_strdup ("rgba (255, 154, 20, 0.1)");
#line 226 "../src/Util.vala"
			result = _tmp1_;
#line 226 "../src/Util.vala"
			return result;
#line 1638 "Util.c"
		} else {
#line 227 "../src/Util.vala"
			if (priority == CONSTANTS_PRIORITY_3) {
#line 1642 "Util.c"
				gchar* _tmp2_;
#line 228 "../src/Util.vala"
				_tmp2_ = g_strdup ("rgba (82, 151, 255, 0.1)");
#line 228 "../src/Util.vala"
				result = _tmp2_;
#line 228 "../src/Util.vala"
				return result;
#line 1650 "Util.c"
			} else {
				gchar* _tmp3_;
#line 230 "../src/Util.vala"
				_tmp3_ = g_strdup ("transparent");
#line 230 "../src/Util.vala"
				result = _tmp3_;
#line 230 "../src/Util.vala"
				return result;
#line 1659 "Util.c"
			}
		}
	}
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
#line 234 "../src/Util.vala"
	g_atomic_int_inc (&_data1_->_ref_count_);
#line 234 "../src/Util.vala"
	return _data1_;
#line 1672 "Util.c"
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
#line 234 "../src/Util.vala"
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
#line 1682 "Util.c"
		Util* self;
#line 234 "../src/Util.vala"
		self = _data1_->self;
#line 234 "../src/Util.vala"
		_g_object_unref0 (_data1_->file_from_uri);
#line 234 "../src/Util.vala"
		_g_object_unref0 (self);
#line 234 "../src/Util.vala"
		g_slice_free (Block1Data, _data1_);
#line 1692 "Util.c"
	}
}

static Block2Data*
block2_data_ref (Block2Data* _data2_)
{
#line 241 "../src/Util.vala"
	g_atomic_int_inc (&_data2_->_ref_count_);
#line 241 "../src/Util.vala"
	return _data2_;
#line 1703 "Util.c"
}

static void
block2_data_unref (void * _userdata_)
{
	Block2Data* _data2_;
	_data2_ = (Block2Data*) _userdata_;
#line 241 "../src/Util.vala"
	if (g_atomic_int_dec_and_test (&_data2_->_ref_count_)) {
#line 1713 "Util.c"
		Util* self;
#line 241 "../src/Util.vala"
		self = _data2_->_data1_->self;
#line 241 "../src/Util.vala"
		_g_main_loop_unref0 (_data2_->loop);
#line 241 "../src/Util.vala"
		block1_data_unref (_data2_->_data1_);
#line 241 "../src/Util.vala"
		_data2_->_data1_ = NULL;
#line 241 "../src/Util.vala"
		g_slice_free (Block2Data, _data2_);
#line 1725 "Util.c"
	}
}

static void
___lambda322_ (Block2Data* _data2_,
               gint64 current_num_bytes,
               gint64 total_num_bytes)
{
	Block1Data* _data1_;
	Util* self;
#line 244 "../src/Util.vala"
	_data1_ = _data2_->_data1_;
#line 244 "../src/Util.vala"
	self = _data1_->self;
#line 1740 "Util.c"
}

static void
____lambda322__gfile_progress_callback (gint64 current_num_bytes,
                                        gint64 total_num_bytes,
                                        gpointer self)
{
#line 244 "../src/Util.vala"
	___lambda322_ (self, current_num_bytes, total_num_bytes);
#line 1750 "Util.c"
}

static void
___lambda323_ (Block2Data* _data2_,
               GObject* obj,
               GAsyncResult* res)
{
	Block1Data* _data1_;
	Util* self;
	GMainLoop* _tmp5_;
	GError* _inner_error0_ = NULL;
#line 245 "../src/Util.vala"
	_data1_ = _data2_->_data1_;
#line 245 "../src/Util.vala"
	self = _data1_->self;
#line 245 "../src/Util.vala"
	g_return_if_fail (res != NULL);
#line 1768 "Util.c"
	{
		gboolean _tmp0_ = FALSE;
		GFile* _tmp1_;
#line 247 "../src/Util.vala"
		_tmp1_ = _data1_->file_from_uri;
#line 247 "../src/Util.vala"
		_tmp0_ = g_file_copy_finish (_tmp1_, res, &_inner_error0_);
#line 247 "../src/Util.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1778 "Util.c"
			goto __catch0_g_error;
		}
#line 247 "../src/Util.vala"
		if (_tmp0_) {
#line 1783 "Util.c"
			ServicesEventBus* _tmp2_;
#line 248 "../src/Util.vala"
			_tmp2_ = planner_event_bus;
#line 248 "../src/Util.vala"
			g_signal_emit_by_name (_tmp2_, "avatar-downloaded");
#line 1789 "Util.c"
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp3_;
		const gchar* _tmp4_;
#line 246 "../src/Util.vala"
		e = _inner_error0_;
#line 246 "../src/Util.vala"
		_inner_error0_ = NULL;
#line 251 "../src/Util.vala"
		_tmp3_ = e;
#line 251 "../src/Util.vala"
		_tmp4_ = _tmp3_->message;
#line 251 "../src/Util.vala"
		g_debug ("Util.vala:251: Error: %s\n", _tmp4_);
#line 246 "../src/Util.vala"
		_g_error_free0 (e);
#line 1810 "Util.c"
	}
	__finally0:
#line 246 "../src/Util.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 246 "../src/Util.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 246 "../src/Util.vala"
		g_clear_error (&_inner_error0_);
#line 246 "../src/Util.vala"
		return;
#line 1821 "Util.c"
	}
#line 254 "../src/Util.vala"
	_tmp5_ = _data2_->loop;
#line 254 "../src/Util.vala"
	g_main_loop_quit (_tmp5_);
#line 1827 "Util.c"
}

static void
____lambda323__gasync_ready_callback (GObject* source_object,
                                      GAsyncResult* res,
                                      gpointer self)
{
#line 244 "../src/Util.vala"
	___lambda323_ (self, source_object, res);
#line 244 "../src/Util.vala"
	block2_data_unref (self);
#line 1839 "Util.c"
}

void
util_download_profile_image (Util* self,
                             const gchar* id,
                             const gchar* avatar_url)
{
	Block1Data* _data1_;
	GFile* file_path = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	GFile* _tmp2_;
	GFile* _tmp3_;
	GFile* _tmp4_;
	GFile* _tmp5_;
#line 234 "../src/Util.vala"
	g_return_if_fail (self != NULL);
#line 234 "../src/Util.vala"
	g_return_if_fail (id != NULL);
#line 234 "../src/Util.vala"
	g_return_if_fail (avatar_url != NULL);
#line 234 "../src/Util.vala"
	_data1_ = g_slice_new0 (Block1Data);
#line 234 "../src/Util.vala"
	_data1_->_ref_count_ = 1;
#line 234 "../src/Util.vala"
	_data1_->self = g_object_ref (self);
#line 235 "../src/Util.vala"
	if (id == NULL) {
#line 236 "../src/Util.vala"
		block1_data_unref (_data1_);
#line 236 "../src/Util.vala"
		_data1_ = NULL;
#line 236 "../src/Util.vala"
		return;
#line 1875 "Util.c"
	}
#line 239 "../src/Util.vala"
	_tmp0_ = util_get_todoist_avatar_path (self);
#line 239 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 239 "../src/Util.vala"
	_tmp2_ = g_file_new_for_path (_tmp1_);
#line 239 "../src/Util.vala"
	_tmp3_ = _tmp2_;
#line 239 "../src/Util.vala"
	_g_free0 (_tmp1_);
#line 239 "../src/Util.vala"
	file_path = _tmp3_;
#line 240 "../src/Util.vala"
	_tmp4_ = g_file_new_for_uri (avatar_url);
#line 240 "../src/Util.vala"
	_data1_->file_from_uri = _tmp4_;
#line 241 "../src/Util.vala"
	_tmp5_ = file_path;
#line 241 "../src/Util.vala"
	if (!g_file_query_exists (_tmp5_, NULL)) {
#line 1897 "Util.c"
		Block2Data* _data2_;
		GMainLoop* _tmp6_;
		GFile* _tmp7_;
		GFile* _tmp8_;
		GMainLoop* _tmp9_;
#line 241 "../src/Util.vala"
		_data2_ = g_slice_new0 (Block2Data);
#line 241 "../src/Util.vala"
		_data2_->_ref_count_ = 1;
#line 241 "../src/Util.vala"
		_data2_->_data1_ = block1_data_ref (_data1_);
#line 242 "../src/Util.vala"
		_tmp6_ = g_main_loop_new (NULL, FALSE);
#line 242 "../src/Util.vala"
		_data2_->loop = _tmp6_;
#line 244 "../src/Util.vala"
		_tmp7_ = _data1_->file_from_uri;
#line 244 "../src/Util.vala"
		_tmp8_ = file_path;
#line 244 "../src/Util.vala"
		g_file_copy_async (_tmp7_, _tmp8_, 0, G_PRIORITY_DEFAULT, NULL, ____lambda322__gfile_progress_callback, _data2_, ____lambda323__gasync_ready_callback, block2_data_ref (_data2_));
#line 257 "../src/Util.vala"
		_tmp9_ = _data2_->loop;
#line 257 "../src/Util.vala"
		g_main_loop_run (_tmp9_);
#line 241 "../src/Util.vala"
		block2_data_unref (_data2_);
#line 241 "../src/Util.vala"
		_data2_ = NULL;
#line 1927 "Util.c"
	}
#line 234 "../src/Util.vala"
	_g_object_unref0 (file_path);
#line 234 "../src/Util.vala"
	block1_data_unref (_data1_);
#line 234 "../src/Util.vala"
	_data1_ = NULL;
#line 1935 "Util.c"
}

gchar*
util_get_todoist_avatar_path (Util* self)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	GSettings* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	gchar* result = NULL;
#line 261 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 262 "../src/Util.vala"
	_tmp0_ = g_get_user_data_dir ();
#line 262 "../src/Util.vala"
	_tmp1_ = g_strconcat (_tmp0_, "/com.github.alainm23.planner", NULL);
#line 262 "../src/Util.vala"
	_tmp2_ = _tmp1_;
#line 262 "../src/Util.vala"
	_tmp3_ = planner_settings;
#line 262 "../src/Util.vala"
	_tmp4_ = g_settings_get_string (_tmp3_, "todoist-user-image-id");
#line 262 "../src/Util.vala"
	_tmp5_ = _tmp4_;
#line 262 "../src/Util.vala"
	_tmp6_ = g_strconcat (_tmp5_, ".jpg", NULL);
#line 262 "../src/Util.vala"
	_tmp7_ = _tmp6_;
#line 262 "../src/Util.vala"
	_tmp8_ = g_build_filename (_tmp2_, _tmp7_, NULL);
#line 262 "../src/Util.vala"
	_tmp9_ = _tmp8_;
#line 262 "../src/Util.vala"
	_g_free0 (_tmp7_);
#line 262 "../src/Util.vala"
	_g_free0 (_tmp5_);
#line 262 "../src/Util.vala"
	_g_free0 (_tmp2_);
#line 262 "../src/Util.vala"
	result = _tmp9_;
#line 262 "../src/Util.vala"
	return result;
#line 1984 "Util.c"
}

static gchar
string_get (const gchar* self,
            glong index)
{
	gchar _tmp0_;
	gchar result = '\0';
#line 1232 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, '\0');
#line 1233 "glib-2.0.vapi"
	_tmp0_ = ((gchar*) self)[index];
#line 1233 "glib-2.0.vapi"
	result = _tmp0_;
#line 1233 "glib-2.0.vapi"
	return result;
#line 2001 "Util.c"
}

static gint64
int64_parse (const gchar* str,
             guint _base)
{
	gint64 result = 0LL;
#line 770 "glib-2.0.vapi"
	g_return_val_if_fail (str != NULL, 0LL);
#line 771 "glib-2.0.vapi"
	result = g_ascii_strtoll (str, NULL, _base);
#line 771 "glib-2.0.vapi"
	return result;
#line 2015 "Util.c"
}

gint64
util_generate_id (Util* self,
                  gint len)
{
	gchar* allowed_characters = NULL;
	gchar* _tmp0_;
	GString* password_builder = NULL;
	GString* _tmp1_;
	GString* _tmp9_;
	const gchar* _tmp10_;
	GString* _tmp11_;
	const gchar* _tmp12_;
	gint64 result = 0LL;
#line 268 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, 0LL);
#line 269 "../src/Util.vala"
	_tmp0_ = g_strdup ("0123456789");
#line 269 "../src/Util.vala"
	allowed_characters = _tmp0_;
#line 271 "../src/Util.vala"
	_tmp1_ = g_string_new ("");
#line 271 "../src/Util.vala"
	password_builder = _tmp1_;
#line 2041 "Util.c"
	{
		gint i = 0;
#line 272 "../src/Util.vala"
		i = 0;
#line 2046 "Util.c"
		{
			gboolean _tmp2_ = FALSE;
#line 272 "../src/Util.vala"
			_tmp2_ = TRUE;
#line 272 "../src/Util.vala"
			while (TRUE) {
#line 2053 "Util.c"
				gint32 random_index = 0;
				const gchar* _tmp4_;
				gint _tmp5_;
				gint _tmp6_;
				GString* _tmp7_;
				const gchar* _tmp8_;
#line 272 "../src/Util.vala"
				if (!_tmp2_) {
#line 2062 "Util.c"
					gint _tmp3_;
#line 272 "../src/Util.vala"
					_tmp3_ = i;
#line 272 "../src/Util.vala"
					i = _tmp3_ + 1;
#line 2068 "Util.c"
				}
#line 272 "../src/Util.vala"
				_tmp2_ = FALSE;
#line 272 "../src/Util.vala"
				if (!(i < len)) {
#line 272 "../src/Util.vala"
					break;
#line 2076 "Util.c"
				}
#line 273 "../src/Util.vala"
				_tmp4_ = allowed_characters;
#line 273 "../src/Util.vala"
				_tmp5_ = strlen (_tmp4_);
#line 273 "../src/Util.vala"
				_tmp6_ = _tmp5_;
#line 273 "../src/Util.vala"
				random_index = g_random_int_range ((gint32) 0, (gint32) _tmp6_);
#line 274 "../src/Util.vala"
				_tmp7_ = password_builder;
#line 274 "../src/Util.vala"
				_tmp8_ = allowed_characters;
#line 274 "../src/Util.vala"
				g_string_append_c (_tmp7_, string_get (_tmp8_, (glong) random_index));
#line 2092 "Util.c"
			}
		}
	}
#line 277 "../src/Util.vala"
	_tmp9_ = password_builder;
#line 277 "../src/Util.vala"
	_tmp10_ = _tmp9_->str;
#line 277 "../src/Util.vala"
	if (int64_parse (_tmp10_, (guint) 0) <= ((gint64) 0)) {
#line 278 "../src/Util.vala"
		result = util_generate_id (self, 10);
#line 278 "../src/Util.vala"
		_g_string_free0 (password_builder);
#line 278 "../src/Util.vala"
		_g_free0 (allowed_characters);
#line 278 "../src/Util.vala"
		return result;
#line 2110 "Util.c"
	}
#line 281 "../src/Util.vala"
	_tmp11_ = password_builder;
#line 281 "../src/Util.vala"
	_tmp12_ = _tmp11_->str;
#line 281 "../src/Util.vala"
	result = int64_parse (_tmp12_, (guint) 0);
#line 281 "../src/Util.vala"
	_g_string_free0 (password_builder);
#line 281 "../src/Util.vala"
	_g_free0 (allowed_characters);
#line 281 "../src/Util.vala"
	return result;
#line 2124 "Util.c"
}

gchar*
util_generate_string (Util* self)
{
	gchar* allowed_characters = NULL;
	gchar* _tmp0_;
	GString* password_builder = NULL;
	GString* _tmp1_;
	GString* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* result = NULL;
#line 284 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 285 "../src/Util.vala"
	_tmp0_ = g_strdup ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" "0123456789");
#line 285 "../src/Util.vala"
	allowed_characters = _tmp0_;
#line 287 "../src/Util.vala"
	_tmp1_ = g_string_new ("");
#line 287 "../src/Util.vala"
	password_builder = _tmp1_;
#line 2148 "Util.c"
	{
		gint i = 0;
#line 288 "../src/Util.vala"
		i = 0;
#line 2153 "Util.c"
		{
			gboolean _tmp2_ = FALSE;
#line 288 "../src/Util.vala"
			_tmp2_ = TRUE;
#line 288 "../src/Util.vala"
			while (TRUE) {
#line 2160 "Util.c"
				gint32 random_index = 0;
				const gchar* _tmp4_;
				gint _tmp5_;
				gint _tmp6_;
				GString* _tmp7_;
				const gchar* _tmp8_;
#line 288 "../src/Util.vala"
				if (!_tmp2_) {
#line 2169 "Util.c"
					gint _tmp3_;
#line 288 "../src/Util.vala"
					_tmp3_ = i;
#line 288 "../src/Util.vala"
					i = _tmp3_ + 1;
#line 2175 "Util.c"
				}
#line 288 "../src/Util.vala"
				_tmp2_ = FALSE;
#line 288 "../src/Util.vala"
				if (!(i < 36)) {
#line 288 "../src/Util.vala"
					break;
#line 2183 "Util.c"
				}
#line 289 "../src/Util.vala"
				_tmp4_ = allowed_characters;
#line 289 "../src/Util.vala"
				_tmp5_ = strlen (_tmp4_);
#line 289 "../src/Util.vala"
				_tmp6_ = _tmp5_;
#line 289 "../src/Util.vala"
				random_index = g_random_int_range ((gint32) 0, (gint32) _tmp6_);
#line 290 "../src/Util.vala"
				_tmp7_ = password_builder;
#line 290 "../src/Util.vala"
				_tmp8_ = allowed_characters;
#line 290 "../src/Util.vala"
				g_string_append_c (_tmp7_, string_get (_tmp8_, (glong) random_index));
#line 2199 "Util.c"
			}
		}
	}
#line 293 "../src/Util.vala"
	_tmp9_ = password_builder;
#line 293 "../src/Util.vala"
	_tmp10_ = _tmp9_->str;
#line 293 "../src/Util.vala"
	_tmp11_ = g_strdup (_tmp10_);
#line 293 "../src/Util.vala"
	result = _tmp11_;
#line 293 "../src/Util.vala"
	_g_string_free0 (password_builder);
#line 293 "../src/Util.vala"
	_g_free0 (allowed_characters);
#line 293 "../src/Util.vala"
	return result;
#line 2217 "Util.c"
}

gchar*
util_generate_temp_id (Util* self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* result = NULL;
#line 296 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 297 "../src/Util.vala"
	_tmp0_ = g_strdup_printf ("%" G_GINT64_FORMAT, util_generate_id (self, 13));
#line 297 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 297 "../src/Util.vala"
	_tmp2_ = g_strconcat ("_", _tmp1_, NULL);
#line 297 "../src/Util.vala"
	_tmp3_ = _tmp2_;
#line 297 "../src/Util.vala"
	_g_free0 (_tmp1_);
#line 297 "../src/Util.vala"
	result = _tmp3_;
#line 297 "../src/Util.vala"
	return result;
#line 2244 "Util.c"
}

static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (old != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (replacement != NULL, NULL);
#line 1535 "glib-2.0.vapi"
	if ((*((gchar*) self)) == '\0') {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = TRUE;
#line 2266 "Util.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = (*((gchar*) old)) == '\0';
#line 2270 "Util.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp1_) {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = TRUE;
#line 2276 "Util.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
#line 2280 "Util.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp0_) {
#line 2284 "Util.c"
		gchar* _tmp2_;
#line 1536 "glib-2.0.vapi"
		_tmp2_ = g_strdup (self);
#line 1536 "glib-2.0.vapi"
		result = _tmp2_;
#line 1536 "glib-2.0.vapi"
		return result;
#line 2292 "Util.c"
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 1539 "glib-2.0.vapi"
		_tmp3_ = g_regex_escape_string (old, -1);
#line 1539 "glib-2.0.vapi"
		_tmp4_ = _tmp3_;
#line 1539 "glib-2.0.vapi"
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error0_);
#line 1539 "glib-2.0.vapi"
		_tmp6_ = _tmp5_;
#line 1539 "glib-2.0.vapi"
		_g_free0 (_tmp4_);
#line 1539 "glib-2.0.vapi"
		regex = _tmp6_;
#line 1539 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1539 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 2320 "Util.c"
				goto __catch0_g_regex_error;
			}
#line 1539 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1539 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1539 "glib-2.0.vapi"
			return NULL;
#line 2329 "Util.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp8_ = regex;
#line 1540 "glib-2.0.vapi"
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error0_);
#line 1540 "glib-2.0.vapi"
		_tmp7_ = _tmp9_;
#line 1540 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1540 "glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 2343 "Util.c"
				goto __catch0_g_regex_error;
			}
#line 1540 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1540 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1540 "glib-2.0.vapi"
			return NULL;
#line 2352 "Util.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp10_ = _tmp7_;
#line 1540 "glib-2.0.vapi"
		_tmp7_ = NULL;
#line 1540 "glib-2.0.vapi"
		result = _tmp10_;
#line 1540 "glib-2.0.vapi"
		_g_free0 (_tmp7_);
#line 1540 "glib-2.0.vapi"
		_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
		return result;
#line 2366 "Util.c"
	}
	goto __finally0;
	__catch0_g_regex_error:
	{
#line 1538 "glib-2.0.vapi"
		g_clear_error (&_inner_error0_);
#line 1542 "glib-2.0.vapi"
		g_assert_not_reached ();
#line 2375 "Util.c"
	}
	__finally0:
#line 1538 "glib-2.0.vapi"
	g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1538 "glib-2.0.vapi"
	g_clear_error (&_inner_error0_);
#line 1538 "glib-2.0.vapi"
	return NULL;
#line 2384 "Util.c"
}

gchar*
util_get_encode_text (Util* self,
                      const gchar* text)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* result = NULL;
#line 300 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 300 "../src/Util.vala"
	g_return_val_if_fail (text != NULL, NULL);
#line 301 "../src/Util.vala"
	_tmp0_ = string_replace (text, "&", "%26");
#line 301 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 301 "../src/Util.vala"
	_tmp2_ = string_replace (_tmp1_, "#", "%23");
#line 301 "../src/Util.vala"
	_tmp3_ = _tmp2_;
#line 301 "../src/Util.vala"
	_g_free0 (_tmp1_);
#line 301 "../src/Util.vala"
	result = _tmp3_;
#line 301 "../src/Util.vala"
	return result;
#line 2414 "Util.c"
}

void
util_update_theme (Util* self)
{
	gchar* _css = NULL;
	gchar* _tmp0_;
	gint appearance_mode = 0;
	GSettings* _tmp1_;
	GtkCssProvider* provider = NULL;
	GtkCssProvider* _tmp2_;
	GError* _inner_error0_ = NULL;
#line 304 "../src/Util.vala"
	g_return_if_fail (self != NULL);
#line 305 "../src/Util.vala"
	_tmp0_ = g_strdup ("\n" \
"            @define-color base_color %s;\n" \
"            @define-color bg_color %s;\n" \
"            @define-color item_bg_color %s;\n" \
"            @define-color item_border_color %s;\n" \
"            @define-color picker_bg %s;\n" \
"            @define-color picker_content_bg %s;\n" \
"        ");
#line 305 "../src/Util.vala"
	_css = _tmp0_;
#line 314 "../src/Util.vala"
	_tmp1_ = planner_settings;
#line 314 "../src/Util.vala"
	appearance_mode = g_settings_get_enum (_tmp1_, "appearance");
#line 315 "../src/Util.vala"
	_tmp2_ = gtk_css_provider_new ();
#line 315 "../src/Util.vala"
	provider = _tmp2_;
#line 2441 "Util.c"
	{
		gchar* base_color = NULL;
		gchar* _tmp3_;
		gchar* bg_color = NULL;
		gchar* _tmp4_;
		gchar* item_bg_color = NULL;
		gchar* _tmp5_;
		gchar* item_border_color = NULL;
		gchar* _tmp6_;
		gchar* picker_bg = NULL;
		gchar* _tmp7_;
		gchar* picker_content_bg = NULL;
		gchar* _tmp8_;
		gchar* CSS = NULL;
		const gchar* _tmp30_;
		const gchar* _tmp31_;
		const gchar* _tmp32_;
		const gchar* _tmp33_;
		const gchar* _tmp34_;
		const gchar* _tmp35_;
		const gchar* _tmp36_;
		gchar* _tmp37_;
		GtkCssProvider* _tmp38_;
		const gchar* _tmp39_;
		const gchar* _tmp40_;
		gint _tmp41_;
		gint _tmp42_;
		GdkScreen* _tmp43_;
		GtkCssProvider* _tmp44_;
		ServicesEventBus* _tmp45_;
#line 318 "../src/Util.vala"
		_tmp3_ = g_strdup ("");
#line 318 "../src/Util.vala"
		base_color = _tmp3_;
#line 319 "../src/Util.vala"
		_tmp4_ = g_strdup ("");
#line 319 "../src/Util.vala"
		bg_color = _tmp4_;
#line 320 "../src/Util.vala"
		_tmp5_ = g_strdup ("");
#line 320 "../src/Util.vala"
		item_bg_color = _tmp5_;
#line 321 "../src/Util.vala"
		_tmp6_ = g_strdup ("");
#line 321 "../src/Util.vala"
		item_border_color = _tmp6_;
#line 322 "../src/Util.vala"
		_tmp7_ = g_strdup ("");
#line 322 "../src/Util.vala"
		picker_bg = _tmp7_;
#line 323 "../src/Util.vala"
		_tmp8_ = g_strdup ("");
#line 323 "../src/Util.vala"
		picker_content_bg = _tmp8_;
#line 325 "../src/Util.vala"
		if (appearance_mode == 0) {
#line 2498 "Util.c"
			gchar* _tmp9_;
			gchar* _tmp10_;
			gchar* _tmp11_;
			gchar* _tmp12_;
			gchar* _tmp13_;
			gchar* _tmp14_;
			GtkSettings* _tmp15_;
#line 326 "../src/Util.vala"
			_tmp9_ = g_strdup ("#ffffff");
#line 326 "../src/Util.vala"
			_g_free0 (base_color);
#line 326 "../src/Util.vala"
			base_color = _tmp9_;
#line 327 "../src/Util.vala"
			_tmp10_ = g_strdup ("@SILVER_100");
#line 327 "../src/Util.vala"
			_g_free0 (bg_color);
#line 327 "../src/Util.vala"
			bg_color = _tmp10_;
#line 328 "../src/Util.vala"
			_tmp11_ = g_strdup ("@base_color");
#line 328 "../src/Util.vala"
			_g_free0 (item_bg_color);
#line 328 "../src/Util.vala"
			item_bg_color = _tmp11_;
#line 329 "../src/Util.vala"
			_tmp12_ = g_strdup ("@menu_separator");
#line 329 "../src/Util.vala"
			_g_free0 (item_border_color);
#line 329 "../src/Util.vala"
			item_border_color = _tmp12_;
#line 330 "../src/Util.vala"
			_tmp13_ = g_strdup ("@bg_color");
#line 330 "../src/Util.vala"
			_g_free0 (picker_bg);
#line 330 "../src/Util.vala"
			picker_bg = _tmp13_;
#line 331 "../src/Util.vala"
			_tmp14_ = g_strdup ("@base_color");
#line 331 "../src/Util.vala"
			_g_free0 (picker_content_bg);
#line 331 "../src/Util.vala"
			picker_content_bg = _tmp14_;
#line 332 "../src/Util.vala"
			_tmp15_ = gtk_settings_get_default ();
#line 332 "../src/Util.vala"
			g_object_set (_tmp15_, "gtk-application-prefer-dark-theme", FALSE, NULL);
#line 2546 "Util.c"
		} else {
#line 333 "../src/Util.vala"
			if (appearance_mode == 1) {
#line 2550 "Util.c"
				gchar* _tmp16_;
				gchar* _tmp17_;
				gchar* _tmp18_;
				gchar* _tmp19_;
				gchar* _tmp20_;
				gchar* _tmp21_;
				GtkSettings* _tmp22_;
#line 334 "../src/Util.vala"
				_tmp16_ = g_strdup ("#151515");
#line 334 "../src/Util.vala"
				_g_free0 (base_color);
#line 334 "../src/Util.vala"
				base_color = _tmp16_;
#line 335 "../src/Util.vala"
				_tmp17_ = g_strdup ("#222222");
#line 335 "../src/Util.vala"
				_g_free0 (bg_color);
#line 335 "../src/Util.vala"
				bg_color = _tmp17_;
#line 336 "../src/Util.vala"
				_tmp18_ = g_strdup ("@bg_color");
#line 336 "../src/Util.vala"
				_g_free0 (item_bg_color);
#line 336 "../src/Util.vala"
				item_bg_color = _tmp18_;
#line 337 "../src/Util.vala"
				_tmp19_ = g_strdup ("#333333");
#line 337 "../src/Util.vala"
				_g_free0 (item_border_color);
#line 337 "../src/Util.vala"
				item_border_color = _tmp19_;
#line 338 "../src/Util.vala"
				_tmp20_ = g_strdup ("@base_color");
#line 338 "../src/Util.vala"
				_g_free0 (picker_bg);
#line 338 "../src/Util.vala"
				picker_bg = _tmp20_;
#line 339 "../src/Util.vala"
				_tmp21_ = g_strdup ("@bg_color");
#line 339 "../src/Util.vala"
				_g_free0 (picker_content_bg);
#line 339 "../src/Util.vala"
				picker_content_bg = _tmp21_;
#line 340 "../src/Util.vala"
				_tmp22_ = gtk_settings_get_default ();
#line 340 "../src/Util.vala"
				g_object_set (_tmp22_, "gtk-application-prefer-dark-theme", TRUE, NULL);
#line 2598 "Util.c"
			} else {
#line 341 "../src/Util.vala"
				if (appearance_mode == 2) {
#line 2602 "Util.c"
					gchar* _tmp23_;
					gchar* _tmp24_;
					gchar* _tmp25_;
					gchar* _tmp26_;
					gchar* _tmp27_;
					gchar* _tmp28_;
					GtkSettings* _tmp29_;
#line 342 "../src/Util.vala"
					_tmp23_ = g_strdup ("#0B0B11");
#line 342 "../src/Util.vala"
					_g_free0 (base_color);
#line 342 "../src/Util.vala"
					base_color = _tmp23_;
#line 343 "../src/Util.vala"
					_tmp24_ = g_strdup ("#15151B");
#line 343 "../src/Util.vala"
					_g_free0 (bg_color);
#line 343 "../src/Util.vala"
					bg_color = _tmp24_;
#line 344 "../src/Util.vala"
					_tmp25_ = g_strdup ("@bg_color");
#line 344 "../src/Util.vala"
					_g_free0 (item_bg_color);
#line 344 "../src/Util.vala"
					item_bg_color = _tmp25_;
#line 345 "../src/Util.vala"
					_tmp26_ = g_strdup ("#333333");
#line 345 "../src/Util.vala"
					_g_free0 (item_border_color);
#line 345 "../src/Util.vala"
					item_border_color = _tmp26_;
#line 346 "../src/Util.vala"
					_tmp27_ = g_strdup ("@base_color");
#line 346 "../src/Util.vala"
					_g_free0 (picker_bg);
#line 346 "../src/Util.vala"
					picker_bg = _tmp27_;
#line 347 "../src/Util.vala"
					_tmp28_ = g_strdup ("@bg_color");
#line 347 "../src/Util.vala"
					_g_free0 (picker_content_bg);
#line 347 "../src/Util.vala"
					picker_content_bg = _tmp28_;
#line 348 "../src/Util.vala"
					_tmp29_ = gtk_settings_get_default ();
#line 348 "../src/Util.vala"
					g_object_set (_tmp29_, "gtk-application-prefer-dark-theme", TRUE, NULL);
#line 2650 "Util.c"
				}
			}
		}
#line 351 "../src/Util.vala"
		_tmp30_ = _css;
#line 351 "../src/Util.vala"
		_tmp31_ = base_color;
#line 351 "../src/Util.vala"
		_tmp32_ = bg_color;
#line 351 "../src/Util.vala"
		_tmp33_ = item_bg_color;
#line 351 "../src/Util.vala"
		_tmp34_ = item_border_color;
#line 351 "../src/Util.vala"
		_tmp35_ = picker_bg;
#line 351 "../src/Util.vala"
		_tmp36_ = picker_content_bg;
#line 351 "../src/Util.vala"
		_tmp37_ = g_strdup_printf (_tmp30_, _tmp31_, _tmp32_, _tmp33_, _tmp34_, _tmp35_, _tmp36_);
#line 351 "../src/Util.vala"
		CSS = _tmp37_;
#line 360 "../src/Util.vala"
		_tmp38_ = provider;
#line 360 "../src/Util.vala"
		_tmp39_ = CSS;
#line 360 "../src/Util.vala"
		_tmp40_ = CSS;
#line 360 "../src/Util.vala"
		_tmp41_ = strlen (_tmp40_);
#line 360 "../src/Util.vala"
		_tmp42_ = _tmp41_;
#line 360 "../src/Util.vala"
		gtk_css_provider_load_from_data (_tmp38_, _tmp39_, (gssize) _tmp42_, &_inner_error0_);
#line 360 "../src/Util.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 360 "../src/Util.vala"
			_g_free0 (CSS);
#line 360 "../src/Util.vala"
			_g_free0 (picker_content_bg);
#line 360 "../src/Util.vala"
			_g_free0 (picker_bg);
#line 360 "../src/Util.vala"
			_g_free0 (item_border_color);
#line 360 "../src/Util.vala"
			_g_free0 (item_bg_color);
#line 360 "../src/Util.vala"
			_g_free0 (bg_color);
#line 360 "../src/Util.vala"
			_g_free0 (base_color);
#line 2700 "Util.c"
			goto __catch0_g_error;
		}
#line 362 "../src/Util.vala"
		_tmp43_ = gdk_screen_get_default ();
#line 362 "../src/Util.vala"
		_tmp44_ = provider;
#line 362 "../src/Util.vala"
		gtk_style_context_add_provider_for_screen (_tmp43_, (GtkStyleProvider*) _tmp44_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 367 "../src/Util.vala"
		_tmp45_ = planner_event_bus;
#line 367 "../src/Util.vala"
		g_signal_emit_by_name (_tmp45_, "theme-changed");
#line 317 "../src/Util.vala"
		_g_free0 (CSS);
#line 317 "../src/Util.vala"
		_g_free0 (picker_content_bg);
#line 317 "../src/Util.vala"
		_g_free0 (picker_bg);
#line 317 "../src/Util.vala"
		_g_free0 (item_border_color);
#line 317 "../src/Util.vala"
		_g_free0 (item_bg_color);
#line 317 "../src/Util.vala"
		_g_free0 (bg_color);
#line 317 "../src/Util.vala"
		_g_free0 (base_color);
#line 2727 "Util.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
#line 317 "../src/Util.vala"
		g_clear_error (&_inner_error0_);
#line 369 "../src/Util.vala"
		_g_object_unref0 (provider);
#line 369 "../src/Util.vala"
		_g_free0 (_css);
#line 369 "../src/Util.vala"
		return;
#line 2740 "Util.c"
	}
	__finally0:
#line 317 "../src/Util.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 317 "../src/Util.vala"
		_g_object_unref0 (provider);
#line 317 "../src/Util.vala"
		_g_free0 (_css);
#line 317 "../src/Util.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 317 "../src/Util.vala"
		g_clear_error (&_inner_error0_);
#line 317 "../src/Util.vala"
		return;
#line 2755 "Util.c"
	}
#line 304 "../src/Util.vala"
	_g_object_unref0 (provider);
#line 304 "../src/Util.vala"
	_g_free0 (_css);
#line 2761 "Util.c"
}

gchar*
util_line_break_to_space (Util* self,
                          const gchar* str)
{
	GRegex* _tmp0_;
	gchar* _tmp14_;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 378 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 378 "../src/Util.vala"
	g_return_val_if_fail (str != NULL, NULL);
#line 379 "../src/Util.vala"
	_tmp0_ = self->priv->line_break_to_space_regex;
#line 379 "../src/Util.vala"
	if (_tmp0_ == NULL) {
#line 2780 "Util.c"
		{
			GRegex* _tmp1_ = NULL;
			GRegex* _tmp2_;
			GRegex* _tmp3_;
#line 381 "../src/Util.vala"
			_tmp2_ = g_regex_new ("(^\\s+|\\s+$|\n|\\s\\s+)", 0, 0, &_inner_error0_);
#line 381 "../src/Util.vala"
			_tmp1_ = _tmp2_;
#line 381 "../src/Util.vala"
			if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 381 "../src/Util.vala"
				if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 2793 "Util.c"
					goto __catch0_g_regex_error;
				}
#line 381 "../src/Util.vala"
				g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 381 "../src/Util.vala"
				g_clear_error (&_inner_error0_);
#line 381 "../src/Util.vala"
				return NULL;
#line 2802 "Util.c"
			}
#line 381 "../src/Util.vala"
			_tmp3_ = _tmp1_;
#line 381 "../src/Util.vala"
			_tmp1_ = NULL;
#line 381 "../src/Util.vala"
			_g_regex_unref0 (self->priv->line_break_to_space_regex);
#line 381 "../src/Util.vala"
			self->priv->line_break_to_space_regex = _tmp3_;
#line 380 "../src/Util.vala"
			_g_regex_unref0 (_tmp1_);
#line 2814 "Util.c"
		}
		goto __finally0;
		__catch0_g_regex_error:
		{
			GError* e = NULL;
			GError* _tmp4_;
			const gchar* _tmp5_;
#line 380 "../src/Util.vala"
			e = _inner_error0_;
#line 380 "../src/Util.vala"
			_inner_error0_ = NULL;
#line 383 "../src/Util.vala"
			_tmp4_ = e;
#line 383 "../src/Util.vala"
			_tmp5_ = _tmp4_->message;
#line 383 "../src/Util.vala"
			g_critical ("Util.vala:383: %s", _tmp5_);
#line 380 "../src/Util.vala"
			_g_error_free0 (e);
#line 2834 "Util.c"
		}
		__finally0:
#line 380 "../src/Util.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 380 "../src/Util.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 380 "../src/Util.vala"
			g_clear_error (&_inner_error0_);
#line 380 "../src/Util.vala"
			return NULL;
#line 2845 "Util.c"
		}
	}
	{
		gchar* _tmp6_ = NULL;
		GRegex* _tmp7_;
		gint _tmp8_;
		gint _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
#line 388 "../src/Util.vala"
		_tmp7_ = self->priv->line_break_to_space_regex;
#line 388 "../src/Util.vala"
		_tmp8_ = strlen (str);
#line 388 "../src/Util.vala"
		_tmp9_ = _tmp8_;
#line 388 "../src/Util.vala"
		_tmp10_ = g_regex_replace (_tmp7_, str, (gssize) _tmp9_, 0, " ", 0, &_inner_error0_);
#line 388 "../src/Util.vala"
		_tmp6_ = _tmp10_;
#line 388 "../src/Util.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 388 "../src/Util.vala"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 2869 "Util.c"
				goto __catch1_g_regex_error;
			}
#line 388 "../src/Util.vala"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 388 "../src/Util.vala"
			g_clear_error (&_inner_error0_);
#line 388 "../src/Util.vala"
			return NULL;
#line 2878 "Util.c"
		}
#line 388 "../src/Util.vala"
		_tmp11_ = _tmp6_;
#line 388 "../src/Util.vala"
		_tmp6_ = NULL;
#line 388 "../src/Util.vala"
		result = _tmp11_;
#line 388 "../src/Util.vala"
		_g_free0 (_tmp6_);
#line 388 "../src/Util.vala"
		return result;
#line 2890 "Util.c"
	}
	goto __finally1;
	__catch1_g_regex_error:
	{
		GError* e = NULL;
		GError* _tmp12_;
		const gchar* _tmp13_;
#line 387 "../src/Util.vala"
		e = _inner_error0_;
#line 387 "../src/Util.vala"
		_inner_error0_ = NULL;
#line 390 "../src/Util.vala"
		_tmp12_ = e;
#line 390 "../src/Util.vala"
		_tmp13_ = _tmp12_->message;
#line 390 "../src/Util.vala"
		g_warning ("Util.vala:390: %s", _tmp13_);
#line 387 "../src/Util.vala"
		_g_error_free0 (e);
#line 2910 "Util.c"
	}
	__finally1:
#line 387 "../src/Util.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 387 "../src/Util.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 387 "../src/Util.vala"
		g_clear_error (&_inner_error0_);
#line 387 "../src/Util.vala"
		return NULL;
#line 2921 "Util.c"
	}
#line 393 "../src/Util.vala"
	_tmp14_ = g_strdup (str);
#line 393 "../src/Util.vala"
	result = _tmp14_;
#line 393 "../src/Util.vala"
	return result;
#line 2929 "Util.c"
}

gchar*
util_get_dialog_text (Util* self,
                      const gchar* text)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* result = NULL;
#line 396 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 396 "../src/Util.vala"
	g_return_val_if_fail (text != NULL, NULL);
#line 397 "../src/Util.vala"
	_tmp0_ = string_replace (text, "&", "&amp;");
#line 397 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 397 "../src/Util.vala"
	_tmp2_ = string_replace (_tmp1_, "<", "&lt;");
#line 397 "../src/Util.vala"
	_tmp3_ = _tmp2_;
#line 397 "../src/Util.vala"
	_tmp4_ = string_replace (_tmp3_, ">", "&gt;");
#line 397 "../src/Util.vala"
	_tmp5_ = _tmp4_;
#line 397 "../src/Util.vala"
	_g_free0 (_tmp3_);
#line 397 "../src/Util.vala"
	_g_free0 (_tmp1_);
#line 397 "../src/Util.vala"
	result = _tmp5_;
#line 397 "../src/Util.vala"
	return result;
#line 2967 "Util.c"
}

GDateTime*
util_get_todoist_datetime (Util* self,
                           const gchar* date)
{
	GDateTime* datetime = NULL;
	gint _tmp0_;
	gint _tmp1_;
	GDateTime* result = NULL;
#line 404 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 404 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, NULL);
#line 405 "../src/Util.vala"
	if (g_strcmp0 (date, "") == 0) {
#line 406 "../src/Util.vala"
		result = NULL;
#line 406 "../src/Util.vala"
		return result;
#line 2988 "Util.c"
	}
#line 409 "../src/Util.vala"
	datetime = NULL;
#line 410 "../src/Util.vala"
	_tmp0_ = strlen (date);
#line 410 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 410 "../src/Util.vala"
	if (_tmp1_ == 10) {
#line 2998 "Util.c"
		gchar** _date = NULL;
		gchar** _tmp2_;
		gchar** _tmp3_;
		gint _date_length1;
		gint __date_size_;
		gchar** _tmp4_;
		gint _tmp4__length1;
		const gchar* _tmp5_;
		gchar** _tmp6_;
		gint _tmp6__length1;
		const gchar* _tmp7_;
		gchar** _tmp8_;
		gint _tmp8__length1;
		const gchar* _tmp9_;
		GDateTime* _tmp10_;
#line 411 "../src/Util.vala"
		_tmp3_ = _tmp2_ = g_strsplit (date, "-", 0);
#line 411 "../src/Util.vala"
		_date = _tmp3_;
#line 411 "../src/Util.vala"
		_date_length1 = _vala_array_length (_tmp2_);
#line 411 "../src/Util.vala"
		__date_size_ = _date_length1;
#line 413 "../src/Util.vala"
		_tmp4_ = _date;
#line 413 "../src/Util.vala"
		_tmp4__length1 = _date_length1;
#line 413 "../src/Util.vala"
		_tmp5_ = _tmp4_[0];
#line 413 "../src/Util.vala"
		_tmp6_ = _date;
#line 413 "../src/Util.vala"
		_tmp6__length1 = _date_length1;
#line 413 "../src/Util.vala"
		_tmp7_ = _tmp6_[1];
#line 413 "../src/Util.vala"
		_tmp8_ = _date;
#line 413 "../src/Util.vala"
		_tmp8__length1 = _date_length1;
#line 413 "../src/Util.vala"
		_tmp9_ = _tmp8_[2];
#line 413 "../src/Util.vala"
		_tmp10_ = g_date_time_new_local (atoi (_tmp5_), atoi (_tmp7_), atoi (_tmp9_), 0, 0, (gdouble) 0);
#line 413 "../src/Util.vala"
		_g_date_time_unref0 (datetime);
#line 413 "../src/Util.vala"
		datetime = _tmp10_;
#line 410 "../src/Util.vala"
		_date = (_vala_array_free (_date, _date_length1, (GDestroyNotify) g_free), NULL);
#line 3048 "Util.c"
	} else {
		gint _tmp11_;
		gint _tmp12_;
#line 421 "../src/Util.vala"
		_tmp11_ = strlen (date);
#line 421 "../src/Util.vala"
		_tmp12_ = _tmp11_;
#line 421 "../src/Util.vala"
		if (_tmp12_ == 19) {
#line 3058 "Util.c"
			gchar** _date = NULL;
			gchar** _tmp13_;
			gchar** _tmp14_;
			gchar** _tmp15_;
			gint _tmp15__length1;
			const gchar* _tmp16_;
			gchar** _tmp17_;
			gchar** _tmp18_;
			gchar** _tmp19_;
			gint _tmp19__length1;
			gint _date_length1;
			gint __date_size_;
			gchar** _time = NULL;
			gchar** _tmp20_;
			gchar** _tmp21_;
			gchar** _tmp22_;
			gint _tmp22__length1;
			const gchar* _tmp23_;
			gchar** _tmp24_;
			gchar** _tmp25_;
			gchar** _tmp26_;
			gint _tmp26__length1;
			gint _time_length1;
			gint __time_size_;
			gchar** _tmp27_;
			gint _tmp27__length1;
			const gchar* _tmp28_;
			gchar** _tmp29_;
			gint _tmp29__length1;
			const gchar* _tmp30_;
			gchar** _tmp31_;
			gint _tmp31__length1;
			const gchar* _tmp32_;
			gchar** _tmp33_;
			gint _tmp33__length1;
			const gchar* _tmp34_;
			gchar** _tmp35_;
			gint _tmp35__length1;
			const gchar* _tmp36_;
			gchar** _tmp37_;
			gint _tmp37__length1;
			const gchar* _tmp38_;
			GDateTime* _tmp39_;
#line 422 "../src/Util.vala"
			_tmp14_ = _tmp13_ = g_strsplit (date, "T", 0);
#line 422 "../src/Util.vala"
			_tmp15_ = _tmp14_;
#line 422 "../src/Util.vala"
			_tmp15__length1 = _vala_array_length (_tmp13_);
#line 422 "../src/Util.vala"
			_tmp16_ = _tmp15_[0];
#line 422 "../src/Util.vala"
			_tmp18_ = _tmp17_ = g_strsplit (_tmp16_, "-", 0);
#line 422 "../src/Util.vala"
			_tmp19_ = _tmp18_;
#line 422 "../src/Util.vala"
			_tmp19__length1 = _vala_array_length (_tmp17_);
#line 422 "../src/Util.vala"
			_tmp15_ = (_vala_array_free (_tmp15_, _tmp15__length1, (GDestroyNotify) g_free), NULL);
#line 422 "../src/Util.vala"
			_date = _tmp19_;
#line 422 "../src/Util.vala"
			_date_length1 = _tmp19__length1;
#line 422 "../src/Util.vala"
			__date_size_ = _date_length1;
#line 423 "../src/Util.vala"
			_tmp21_ = _tmp20_ = g_strsplit (date, "T", 0);
#line 423 "../src/Util.vala"
			_tmp22_ = _tmp21_;
#line 423 "../src/Util.vala"
			_tmp22__length1 = _vala_array_length (_tmp20_);
#line 423 "../src/Util.vala"
			_tmp23_ = _tmp22_[1];
#line 423 "../src/Util.vala"
			_tmp25_ = _tmp24_ = g_strsplit (_tmp23_, ":", 0);
#line 423 "../src/Util.vala"
			_tmp26_ = _tmp25_;
#line 423 "../src/Util.vala"
			_tmp26__length1 = _vala_array_length (_tmp24_);
#line 423 "../src/Util.vala"
			_tmp22_ = (_vala_array_free (_tmp22_, _tmp22__length1, (GDestroyNotify) g_free), NULL);
#line 423 "../src/Util.vala"
			_time = _tmp26_;
#line 423 "../src/Util.vala"
			_time_length1 = _tmp26__length1;
#line 423 "../src/Util.vala"
			__time_size_ = _time_length1;
#line 425 "../src/Util.vala"
			_tmp27_ = _date;
#line 425 "../src/Util.vala"
			_tmp27__length1 = _date_length1;
#line 425 "../src/Util.vala"
			_tmp28_ = _tmp27_[0];
#line 425 "../src/Util.vala"
			_tmp29_ = _date;
#line 425 "../src/Util.vala"
			_tmp29__length1 = _date_length1;
#line 425 "../src/Util.vala"
			_tmp30_ = _tmp29_[1];
#line 425 "../src/Util.vala"
			_tmp31_ = _date;
#line 425 "../src/Util.vala"
			_tmp31__length1 = _date_length1;
#line 425 "../src/Util.vala"
			_tmp32_ = _tmp31_[2];
#line 425 "../src/Util.vala"
			_tmp33_ = _time;
#line 425 "../src/Util.vala"
			_tmp33__length1 = _time_length1;
#line 425 "../src/Util.vala"
			_tmp34_ = _tmp33_[0];
#line 425 "../src/Util.vala"
			_tmp35_ = _time;
#line 425 "../src/Util.vala"
			_tmp35__length1 = _time_length1;
#line 425 "../src/Util.vala"
			_tmp36_ = _tmp35_[1];
#line 425 "../src/Util.vala"
			_tmp37_ = _time;
#line 425 "../src/Util.vala"
			_tmp37__length1 = _time_length1;
#line 425 "../src/Util.vala"
			_tmp38_ = _tmp37_[2];
#line 425 "../src/Util.vala"
			_tmp39_ = g_date_time_new_local (atoi (_tmp28_), atoi (_tmp30_), atoi (_tmp32_), atoi (_tmp34_), atoi (_tmp36_), (gdouble) atoi (_tmp38_));
#line 425 "../src/Util.vala"
			_g_date_time_unref0 (datetime);
#line 425 "../src/Util.vala"
			datetime = _tmp39_;
#line 421 "../src/Util.vala"
			_time = (_vala_array_free (_time, _time_length1, (GDestroyNotify) g_free), NULL);
#line 421 "../src/Util.vala"
			_date = (_vala_array_free (_date, _date_length1, (GDestroyNotify) g_free), NULL);
#line 3192 "Util.c"
		} else {
			gchar** _date = NULL;
			gchar** _tmp40_;
			gchar** _tmp41_;
			gchar** _tmp42_;
			gint _tmp42__length1;
			const gchar* _tmp43_;
			gchar** _tmp44_;
			gchar** _tmp45_;
			gchar** _tmp46_;
			gint _tmp46__length1;
			gint _date_length1;
			gint __date_size_;
			gchar** _tmp47_;
			gint _tmp47__length1;
			const gchar* _tmp48_;
			gchar** _tmp49_;
			gint _tmp49__length1;
			const gchar* _tmp50_;
			gchar** _tmp51_;
			gint _tmp51__length1;
			const gchar* _tmp52_;
			GDateTime* _tmp53_;
#line 434 "../src/Util.vala"
			_tmp41_ = _tmp40_ = g_strsplit (date, "T", 0);
#line 434 "../src/Util.vala"
			_tmp42_ = _tmp41_;
#line 434 "../src/Util.vala"
			_tmp42__length1 = _vala_array_length (_tmp40_);
#line 434 "../src/Util.vala"
			_tmp43_ = _tmp42_[0];
#line 434 "../src/Util.vala"
			_tmp45_ = _tmp44_ = g_strsplit (_tmp43_, "-", 0);
#line 434 "../src/Util.vala"
			_tmp46_ = _tmp45_;
#line 434 "../src/Util.vala"
			_tmp46__length1 = _vala_array_length (_tmp44_);
#line 434 "../src/Util.vala"
			_tmp42_ = (_vala_array_free (_tmp42_, _tmp42__length1, (GDestroyNotify) g_free), NULL);
#line 434 "../src/Util.vala"
			_date = _tmp46_;
#line 434 "../src/Util.vala"
			_date_length1 = _tmp46__length1;
#line 434 "../src/Util.vala"
			__date_size_ = _date_length1;
#line 437 "../src/Util.vala"
			_tmp47_ = _date;
#line 437 "../src/Util.vala"
			_tmp47__length1 = _date_length1;
#line 437 "../src/Util.vala"
			_tmp48_ = _tmp47_[0];
#line 437 "../src/Util.vala"
			_tmp49_ = _date;
#line 437 "../src/Util.vala"
			_tmp49__length1 = _date_length1;
#line 437 "../src/Util.vala"
			_tmp50_ = _tmp49_[1];
#line 437 "../src/Util.vala"
			_tmp51_ = _date;
#line 437 "../src/Util.vala"
			_tmp51__length1 = _date_length1;
#line 437 "../src/Util.vala"
			_tmp52_ = _tmp51_[2];
#line 437 "../src/Util.vala"
			_tmp53_ = g_date_time_new_local (atoi (_tmp48_), atoi (_tmp50_), atoi (_tmp52_), 0, 0, (gdouble) 0);
#line 437 "../src/Util.vala"
			_g_date_time_unref0 (datetime);
#line 437 "../src/Util.vala"
			datetime = _tmp53_;
#line 421 "../src/Util.vala"
			_date = (_vala_array_free (_date, _date_length1, (GDestroyNotify) g_free), NULL);
#line 3264 "Util.c"
		}
	}
#line 450 "../src/Util.vala"
	result = datetime;
#line 450 "../src/Util.vala"
	return result;
#line 3271 "Util.c"
}

gchar*
util_get_relative_date_from_date (Util* self,
                                  GDateTime* datetime)
{
	gchar* returned = NULL;
	gchar* _tmp0_;
	gchar* result = NULL;
#line 453 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 453 "../src/Util.vala"
	g_return_val_if_fail (datetime != NULL, NULL);
#line 454 "../src/Util.vala"
	_tmp0_ = g_strdup ("");
#line 454 "../src/Util.vala"
	returned = _tmp0_;
#line 456 "../src/Util.vala"
	if (util_is_today (self, datetime)) {
#line 3291 "Util.c"
		gchar* _tmp1_;
#line 457 "../src/Util.vala"
		_tmp1_ = g_strdup (_ ("Today"));
#line 457 "../src/Util.vala"
		_g_free0 (returned);
#line 457 "../src/Util.vala"
		returned = _tmp1_;
#line 3299 "Util.c"
	} else {
#line 458 "../src/Util.vala"
		if (util_is_tomorrow (self, datetime)) {
#line 3303 "Util.c"
			gchar* _tmp2_;
#line 459 "../src/Util.vala"
			_tmp2_ = g_strdup (_ ("Tomorrow"));
#line 459 "../src/Util.vala"
			_g_free0 (returned);
#line 459 "../src/Util.vala"
			returned = _tmp2_;
#line 3311 "Util.c"
		} else {
#line 460 "../src/Util.vala"
			if (util_is_yesterday (self, datetime)) {
#line 3315 "Util.c"
				gchar* _tmp3_;
#line 461 "../src/Util.vala"
				_tmp3_ = g_strdup (_ ("Yesterday"));
#line 461 "../src/Util.vala"
				result = _tmp3_;
#line 461 "../src/Util.vala"
				_g_free0 (returned);
#line 461 "../src/Util.vala"
				return result;
#line 3325 "Util.c"
			} else {
				gchar* _tmp4_;
#line 463 "../src/Util.vala"
				_tmp4_ = util_get_default_date_format_from_date (self, datetime);
#line 463 "../src/Util.vala"
				_g_free0 (returned);
#line 463 "../src/Util.vala"
				returned = _tmp4_;
#line 3334 "Util.c"
			}
		}
	}
#line 466 "../src/Util.vala"
	if (util_has_time (self, datetime)) {
#line 3340 "Util.c"
		const gchar* _tmp5_;
		gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
		gchar* _tmp12_;
#line 467 "../src/Util.vala"
		_tmp5_ = returned;
#line 467 "../src/Util.vala"
		_tmp6_ = util_get_default_time_format (self);
#line 467 "../src/Util.vala"
		_tmp7_ = _tmp6_;
#line 467 "../src/Util.vala"
		_tmp8_ = g_date_time_format (datetime, _tmp7_);
#line 467 "../src/Util.vala"
		_tmp9_ = _tmp8_;
#line 467 "../src/Util.vala"
		_tmp10_ = g_strconcat (" ", _tmp9_, NULL);
#line 467 "../src/Util.vala"
		_tmp11_ = _tmp10_;
#line 467 "../src/Util.vala"
		_tmp12_ = g_strconcat (_tmp5_, _tmp11_, NULL);
#line 467 "../src/Util.vala"
		_g_free0 (returned);
#line 467 "../src/Util.vala"
		returned = _tmp12_;
#line 467 "../src/Util.vala"
		_g_free0 (_tmp11_);
#line 467 "../src/Util.vala"
		_g_free0 (_tmp9_);
#line 467 "../src/Util.vala"
		_g_free0 (_tmp7_);
#line 3375 "Util.c"
	}
#line 470 "../src/Util.vala"
	result = returned;
#line 470 "../src/Util.vala"
	return result;
#line 3381 "Util.c"
}

gchar*
util_get_default_time_format (Util* self)
{
	gchar* _tmp0_;
	gchar* result = NULL;
#line 473 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 474 "../src/Util.vala"
	_tmp0_ = granite_date_time_get_default_time_format (util_is_clock_format_12h (self), FALSE);
#line 474 "../src/Util.vala"
	result = _tmp0_;
#line 474 "../src/Util.vala"
	return result;
#line 3397 "Util.c"
}

gchar*
util_get_calendar_icon (Util* self,
                        GDateTime* date)
{
	gchar* result = NULL;
#line 479 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 479 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, NULL);
#line 480 "../src/Util.vala"
	if (util_is_today (self, date)) {
#line 3411 "Util.c"
		gchar* _tmp0_;
#line 481 "../src/Util.vala"
		_tmp0_ = g_strdup ("planner-today");
#line 481 "../src/Util.vala"
		result = _tmp0_;
#line 481 "../src/Util.vala"
		return result;
#line 3419 "Util.c"
	} else {
		gchar* _tmp1_;
#line 483 "../src/Util.vala"
		_tmp1_ = g_strdup ("planner-scheduled");
#line 483 "../src/Util.vala"
		result = _tmp1_;
#line 483 "../src/Util.vala"
		return result;
#line 3428 "Util.c"
	}
}

gboolean
util_is_today (Util* self,
               GDateTime* date)
{
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	gboolean _tmp2_;
	gboolean result = FALSE;
#line 487 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 487 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, FALSE);
#line 488 "../src/Util.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 488 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 488 "../src/Util.vala"
	_tmp2_ = granite_date_time_is_same_day (date, _tmp1_);
#line 488 "../src/Util.vala"
	_g_date_time_unref0 (_tmp1_);
#line 488 "../src/Util.vala"
	result = _tmp2_;
#line 488 "../src/Util.vala"
	return result;
#line 3456 "Util.c"
}

gboolean
util_is_tomorrow (Util* self,
                  GDateTime* date)
{
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
	gboolean _tmp4_;
	gboolean result = FALSE;
#line 491 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 491 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, FALSE);
#line 492 "../src/Util.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 492 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 492 "../src/Util.vala"
	_tmp2_ = g_date_time_add_days (_tmp1_, 1);
#line 492 "../src/Util.vala"
	_tmp3_ = _tmp2_;
#line 492 "../src/Util.vala"
	_tmp4_ = granite_date_time_is_same_day (date, _tmp3_);
#line 492 "../src/Util.vala"
	_g_date_time_unref0 (_tmp3_);
#line 492 "../src/Util.vala"
	_g_date_time_unref0 (_tmp1_);
#line 492 "../src/Util.vala"
	result = _tmp4_;
#line 492 "../src/Util.vala"
	return result;
#line 3491 "Util.c"
}

gboolean
util_is_yesterday (Util* self,
                   GDateTime* date)
{
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
	gboolean _tmp4_;
	gboolean result = FALSE;
#line 495 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 495 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, FALSE);
#line 496 "../src/Util.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 496 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 496 "../src/Util.vala"
	_tmp2_ = g_date_time_add_days (_tmp1_, -1);
#line 496 "../src/Util.vala"
	_tmp3_ = _tmp2_;
#line 496 "../src/Util.vala"
	_tmp4_ = granite_date_time_is_same_day (date, _tmp3_);
#line 496 "../src/Util.vala"
	_g_date_time_unref0 (_tmp3_);
#line 496 "../src/Util.vala"
	_g_date_time_unref0 (_tmp1_);
#line 496 "../src/Util.vala"
	result = _tmp4_;
#line 496 "../src/Util.vala"
	return result;
#line 3526 "Util.c"
}

gboolean
util_is_same_day (Util* self,
                  GDateTime* day1,
                  GDateTime* day2)
{
	gboolean result = FALSE;
#line 499 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 499 "../src/Util.vala"
	g_return_val_if_fail (day1 != NULL, FALSE);
#line 499 "../src/Util.vala"
	g_return_val_if_fail (day2 != NULL, FALSE);
#line 500 "../src/Util.vala"
	result = granite_date_time_is_same_day (day1, day2);
#line 500 "../src/Util.vala"
	return result;
#line 3545 "Util.c"
}

gboolean
util_is_overdue (Util* self,
                 GDateTime* date)
{
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
	GDateTime* _tmp4_;
	GDateTime* _tmp5_;
	gboolean _tmp6_;
	gboolean result = FALSE;
#line 503 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 503 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, FALSE);
#line 504 "../src/Util.vala"
	_tmp0_ = util_get_format_date (self, date);
#line 504 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 504 "../src/Util.vala"
	_tmp2_ = g_date_time_new_now_local ();
#line 504 "../src/Util.vala"
	_tmp3_ = _tmp2_;
#line 504 "../src/Util.vala"
	_tmp4_ = util_get_format_date (self, _tmp3_);
#line 504 "../src/Util.vala"
	_tmp5_ = _tmp4_;
#line 504 "../src/Util.vala"
	_tmp6_ = g_date_time_compare (_tmp1_, _tmp5_) == -1;
#line 504 "../src/Util.vala"
	_g_date_time_unref0 (_tmp5_);
#line 504 "../src/Util.vala"
	_g_date_time_unref0 (_tmp3_);
#line 504 "../src/Util.vala"
	_g_date_time_unref0 (_tmp1_);
#line 504 "../src/Util.vala"
	if (_tmp6_) {
#line 505 "../src/Util.vala"
		result = TRUE;
#line 505 "../src/Util.vala"
		return result;
#line 3590 "Util.c"
	}
#line 508 "../src/Util.vala"
	result = FALSE;
#line 508 "../src/Util.vala"
	return result;
#line 3596 "Util.c"
}

void
util_item_added (Util* self,
                 LayoutsItemRow* row)
{
	gboolean _tmp0_ = FALSE;
	gint64 _tmp1_;
	gint64 _tmp2_;
	ObjectsItem* _tmp3_;
	ObjectsItem* _tmp4_;
	ObjectsProject* _tmp5_;
	ObjectsProject* _tmp6_;
	gint64 _tmp7_;
	gint64 _tmp8_;
	gboolean insert = FALSE;
	ObjectsItem* _tmp15_;
	ObjectsItem* _tmp16_;
	gint64 _tmp17_;
	gint64 _tmp18_;
#line 511 "../src/Util.vala"
	g_return_if_fail (self != NULL);
#line 511 "../src/Util.vala"
	g_return_if_fail (row != NULL);
#line 512 "../src/Util.vala"
	_tmp1_ = layouts_item_row_get_project_id (row);
#line 512 "../src/Util.vala"
	_tmp2_ = _tmp1_;
#line 512 "../src/Util.vala"
	_tmp3_ = layouts_item_row_get_item (row);
#line 512 "../src/Util.vala"
	_tmp4_ = _tmp3_;
#line 512 "../src/Util.vala"
	_tmp5_ = objects_item_get_project (_tmp4_);
#line 512 "../src/Util.vala"
	_tmp6_ = _tmp5_;
#line 512 "../src/Util.vala"
	_tmp7_ = objects_base_object_get_id ((ObjectsBaseObject*) _tmp6_);
#line 512 "../src/Util.vala"
	_tmp8_ = _tmp7_;
#line 512 "../src/Util.vala"
	if (_tmp2_ != _tmp8_) {
#line 512 "../src/Util.vala"
		_tmp0_ = TRUE;
#line 3641 "Util.c"
	} else {
		gint64 _tmp9_;
		gint64 _tmp10_;
		ObjectsItem* _tmp11_;
		ObjectsItem* _tmp12_;
		gint64 _tmp13_;
		gint64 _tmp14_;
#line 512 "../src/Util.vala"
		_tmp9_ = layouts_item_row_get_section_id (row);
#line 512 "../src/Util.vala"
		_tmp10_ = _tmp9_;
#line 512 "../src/Util.vala"
		_tmp11_ = layouts_item_row_get_item (row);
#line 512 "../src/Util.vala"
		_tmp12_ = _tmp11_;
#line 512 "../src/Util.vala"
		_tmp13_ = objects_item_get_section_id (_tmp12_);
#line 512 "../src/Util.vala"
		_tmp14_ = _tmp13_;
#line 512 "../src/Util.vala"
		_tmp0_ = _tmp10_ != _tmp14_;
#line 3663 "Util.c"
	}
#line 512 "../src/Util.vala"
	insert = _tmp0_;
#line 514 "../src/Util.vala"
	_tmp15_ = layouts_item_row_get_item (row);
#line 514 "../src/Util.vala"
	_tmp16_ = _tmp15_;
#line 514 "../src/Util.vala"
	_tmp17_ = objects_item_get_section_id (_tmp16_);
#line 514 "../src/Util.vala"
	_tmp18_ = _tmp17_;
#line 514 "../src/Util.vala"
	if (_tmp18_ != ((gint64) CONSTANTS_INACTIVE)) {
#line 3677 "Util.c"
		ServicesDatabase* _tmp19_;
		ObjectsItem* _tmp20_;
		ObjectsItem* _tmp21_;
		gint64 _tmp22_;
		gint64 _tmp23_;
		ObjectsSection* _tmp24_;
		ObjectsSection* _tmp25_;
		ObjectsItem* _tmp26_;
		ObjectsItem* _tmp27_;
		ObjectsItem* _tmp28_;
		ObjectsItem* _tmp29_;
#line 515 "../src/Util.vala"
		_tmp19_ = planner_database;
#line 515 "../src/Util.vala"
		_tmp20_ = layouts_item_row_get_item (row);
#line 515 "../src/Util.vala"
		_tmp21_ = _tmp20_;
#line 515 "../src/Util.vala"
		_tmp22_ = objects_item_get_section_id (_tmp21_);
#line 515 "../src/Util.vala"
		_tmp23_ = _tmp22_;
#line 515 "../src/Util.vala"
		_tmp24_ = services_database_get_section (_tmp19_, _tmp23_);
#line 515 "../src/Util.vala"
		_tmp25_ = _tmp24_;
#line 515 "../src/Util.vala"
		_tmp26_ = layouts_item_row_get_item (row);
#line 515 "../src/Util.vala"
		_tmp27_ = _tmp26_;
#line 515 "../src/Util.vala"
		_tmp28_ = objects_section_add_item_if_not_exists (_tmp25_, _tmp27_, insert);
#line 515 "../src/Util.vala"
		_tmp29_ = _tmp28_;
#line 515 "../src/Util.vala"
		_g_object_unref0 (_tmp29_);
#line 515 "../src/Util.vala"
		_g_object_unref0 (_tmp25_);
#line 3715 "Util.c"
	} else {
		ServicesDatabase* _tmp30_;
		ObjectsItem* _tmp31_;
		ObjectsItem* _tmp32_;
		gint64 _tmp33_;
		gint64 _tmp34_;
		ObjectsProject* _tmp35_;
		ObjectsProject* _tmp36_;
		ObjectsItem* _tmp37_;
		ObjectsItem* _tmp38_;
		ObjectsItem* _tmp39_;
		ObjectsItem* _tmp40_;
#line 518 "../src/Util.vala"
		_tmp30_ = planner_database;
#line 518 "../src/Util.vala"
		_tmp31_ = layouts_item_row_get_item (row);
#line 518 "../src/Util.vala"
		_tmp32_ = _tmp31_;
#line 518 "../src/Util.vala"
		_tmp33_ = objects_item_get_project_id (_tmp32_);
#line 518 "../src/Util.vala"
		_tmp34_ = _tmp33_;
#line 518 "../src/Util.vala"
		_tmp35_ = services_database_get_project (_tmp30_, _tmp34_);
#line 518 "../src/Util.vala"
		_tmp36_ = _tmp35_;
#line 518 "../src/Util.vala"
		_tmp37_ = layouts_item_row_get_item (row);
#line 518 "../src/Util.vala"
		_tmp38_ = _tmp37_;
#line 518 "../src/Util.vala"
		_tmp39_ = objects_project_add_item_if_not_exists (_tmp36_, _tmp38_, insert);
#line 518 "../src/Util.vala"
		_tmp40_ = _tmp39_;
#line 518 "../src/Util.vala"
		_g_object_unref0 (_tmp40_);
#line 518 "../src/Util.vala"
		_g_object_unref0 (_tmp36_);
#line 3754 "Util.c"
	}
#line 522 "../src/Util.vala"
	if (!insert) {
#line 3758 "Util.c"
		ServicesEventBus* _tmp41_;
#line 523 "../src/Util.vala"
		_tmp41_ = planner_event_bus;
#line 523 "../src/Util.vala"
		g_signal_emit_by_name (_tmp41_, "update-inserted-item-map", row);
#line 525 "../src/Util.vala"
		layouts_item_row_update_inserted_item (row);
#line 3766 "Util.c"
	} else {
#line 527 "../src/Util.vala"
		layouts_item_row_hide_destroy (row);
#line 3770 "Util.c"
	}
}

GDateTime*
util_get_format_date (Util* self,
                      GDateTime* date)
{
	GDateTime* _tmp0_;
	GDateTime* result = NULL;
#line 531 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 531 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, NULL);
#line 532 "../src/Util.vala"
	_tmp0_ = g_date_time_new_local (g_date_time_get_year (date), g_date_time_get_month (date), g_date_time_get_day_of_month (date), 0, 0, (gdouble) 0);
#line 532 "../src/Util.vala"
	result = _tmp0_;
#line 532 "../src/Util.vala"
	return result;
#line 3790 "Util.c"
}

gchar*
util_get_default_date_format_from_date (Util* self,
                                        GDateTime* date)
{
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* result = NULL;
#line 542 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 542 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, NULL);
#line 543 "../src/Util.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 543 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 543 "../src/Util.vala"
	_tmp2_ = granite_date_time_get_default_date_format (FALSE, TRUE, g_date_time_get_year (date) != g_date_time_get_year (_tmp1_));
#line 543 "../src/Util.vala"
	_tmp3_ = _tmp2_;
#line 543 "../src/Util.vala"
	_tmp4_ = g_date_time_format (date, _tmp3_);
#line 543 "../src/Util.vala"
	_tmp5_ = _tmp4_;
#line 543 "../src/Util.vala"
	_g_free0 (_tmp3_);
#line 543 "../src/Util.vala"
	_g_date_time_unref0 (_tmp1_);
#line 543 "../src/Util.vala"
	result = _tmp5_;
#line 543 "../src/Util.vala"
	return result;
#line 3828 "Util.c"
}

gchar*
util_get_todoist_datetime_format (Util* self,
                                  GDateTime* date)
{
	gchar* returned = NULL;
	gchar* _tmp0_;
	gchar* result = NULL;
#line 550 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 550 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, NULL);
#line 551 "../src/Util.vala"
	_tmp0_ = g_strdup ("");
#line 551 "../src/Util.vala"
	returned = _tmp0_;
#line 553 "../src/Util.vala"
	if (util_has_time (self, date)) {
#line 3848 "Util.c"
		gchar* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
		gchar* _tmp6_;
		gchar* _tmp7_;
#line 554 "../src/Util.vala"
		_tmp1_ = g_date_time_format (date, "%F");
#line 554 "../src/Util.vala"
		_tmp2_ = _tmp1_;
#line 554 "../src/Util.vala"
		_tmp3_ = g_strconcat (_tmp2_, "T", NULL);
#line 554 "../src/Util.vala"
		_tmp4_ = _tmp3_;
#line 554 "../src/Util.vala"
		_tmp5_ = g_date_time_format (date, "%T");
#line 554 "../src/Util.vala"
		_tmp6_ = _tmp5_;
#line 554 "../src/Util.vala"
		_tmp7_ = g_strconcat (_tmp4_, _tmp6_, NULL);
#line 554 "../src/Util.vala"
		_g_free0 (returned);
#line 554 "../src/Util.vala"
		returned = _tmp7_;
#line 554 "../src/Util.vala"
		_g_free0 (_tmp6_);
#line 554 "../src/Util.vala"
		_g_free0 (_tmp4_);
#line 554 "../src/Util.vala"
		_g_free0 (_tmp2_);
#line 3880 "Util.c"
	} else {
		gchar* _tmp8_;
#line 556 "../src/Util.vala"
		_tmp8_ = g_date_time_format (date, "%F");
#line 556 "../src/Util.vala"
		_g_free0 (returned);
#line 556 "../src/Util.vala"
		returned = _tmp8_;
#line 3889 "Util.c"
	}
#line 559 "../src/Util.vala"
	result = returned;
#line 559 "../src/Util.vala"
	return result;
#line 3895 "Util.c"
}

gboolean
util_has_time (Util* self,
               GDateTime* datetime)
{
	gboolean returned = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean result = FALSE;
#line 562 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 562 "../src/Util.vala"
	g_return_val_if_fail (datetime != NULL, FALSE);
#line 563 "../src/Util.vala"
	if (datetime == NULL) {
#line 564 "../src/Util.vala"
		result = FALSE;
#line 564 "../src/Util.vala"
		return result;
#line 3916 "Util.c"
	}
#line 567 "../src/Util.vala"
	returned = TRUE;
#line 568 "../src/Util.vala"
	if (g_date_time_get_hour (datetime) == 0) {
#line 568 "../src/Util.vala"
		_tmp1_ = g_date_time_get_minute (datetime) == 0;
#line 3924 "Util.c"
	} else {
#line 568 "../src/Util.vala"
		_tmp1_ = FALSE;
#line 3928 "Util.c"
	}
#line 568 "../src/Util.vala"
	if (_tmp1_) {
#line 568 "../src/Util.vala"
		_tmp0_ = g_date_time_get_second (datetime) == 0;
#line 3934 "Util.c"
	} else {
#line 568 "../src/Util.vala"
		_tmp0_ = FALSE;
#line 3938 "Util.c"
	}
#line 568 "../src/Util.vala"
	if (_tmp0_) {
#line 569 "../src/Util.vala"
		returned = FALSE;
#line 3944 "Util.c"
	}
#line 571 "../src/Util.vala"
	result = returned;
#line 571 "../src/Util.vala"
	return result;
#line 3950 "Util.c"
}

gboolean
util_has_time_from_string (Util* self,
                           const gchar* date)
{
	GTimeZone* _tmp0_;
	GTimeZone* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
	gboolean _tmp4_;
	gboolean result = FALSE;
#line 574 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 574 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, FALSE);
#line 575 "../src/Util.vala"
	_tmp0_ = g_time_zone_new_local ();
#line 575 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 575 "../src/Util.vala"
	_tmp2_ = g_date_time_new_from_iso8601 (date, _tmp1_);
#line 575 "../src/Util.vala"
	_tmp3_ = _tmp2_;
#line 575 "../src/Util.vala"
	_tmp4_ = util_has_time (self, _tmp3_);
#line 575 "../src/Util.vala"
	_g_date_time_unref0 (_tmp3_);
#line 575 "../src/Util.vala"
	_g_time_zone_unref0 (_tmp1_);
#line 575 "../src/Util.vala"
	result = _tmp4_;
#line 575 "../src/Util.vala"
	return result;
#line 3985 "Util.c"
}

gint
util_get_days_of_month (Util* self,
                        gint index,
                        gint year_nav)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gboolean _tmp3_ = FALSE;
	gboolean _tmp4_ = FALSE;
	gboolean _tmp5_ = FALSE;
	gint result = 0;
#line 582 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 583 "../src/Util.vala"
	if (index == 1) {
#line 583 "../src/Util.vala"
		_tmp5_ = TRUE;
#line 4006 "Util.c"
	} else {
#line 583 "../src/Util.vala"
		_tmp5_ = index == 3;
#line 4010 "Util.c"
	}
#line 583 "../src/Util.vala"
	if (_tmp5_) {
#line 583 "../src/Util.vala"
		_tmp4_ = TRUE;
#line 4016 "Util.c"
	} else {
#line 583 "../src/Util.vala"
		_tmp4_ = index == 5;
#line 4020 "Util.c"
	}
#line 583 "../src/Util.vala"
	if (_tmp4_) {
#line 583 "../src/Util.vala"
		_tmp3_ = TRUE;
#line 4026 "Util.c"
	} else {
#line 583 "../src/Util.vala"
		_tmp3_ = index == 7;
#line 4030 "Util.c"
	}
#line 583 "../src/Util.vala"
	if (_tmp3_) {
#line 583 "../src/Util.vala"
		_tmp2_ = TRUE;
#line 4036 "Util.c"
	} else {
#line 583 "../src/Util.vala"
		_tmp2_ = index == 8;
#line 4040 "Util.c"
	}
#line 583 "../src/Util.vala"
	if (_tmp2_) {
#line 583 "../src/Util.vala"
		_tmp1_ = TRUE;
#line 4046 "Util.c"
	} else {
#line 583 "../src/Util.vala"
		_tmp1_ = index == 10;
#line 4050 "Util.c"
	}
#line 583 "../src/Util.vala"
	if (_tmp1_) {
#line 583 "../src/Util.vala"
		_tmp0_ = TRUE;
#line 4056 "Util.c"
	} else {
#line 583 "../src/Util.vala"
		_tmp0_ = index == 12;
#line 4060 "Util.c"
	}
#line 583 "../src/Util.vala"
	if (_tmp0_) {
#line 584 "../src/Util.vala"
		result = 31;
#line 584 "../src/Util.vala"
		return result;
#line 4068 "Util.c"
	} else {
#line 586 "../src/Util.vala"
		if (index == 2) {
#line 587 "../src/Util.vala"
			if ((year_nav % 4) == 0) {
#line 588 "../src/Util.vala"
				result = 29;
#line 588 "../src/Util.vala"
				return result;
#line 4078 "Util.c"
			} else {
#line 590 "../src/Util.vala"
				result = 28;
#line 590 "../src/Util.vala"
				return result;
#line 4084 "Util.c"
			}
		} else {
#line 593 "../src/Util.vala"
			result = 30;
#line 593 "../src/Util.vala"
			return result;
#line 4091 "Util.c"
		}
	}
}

gboolean
util_is_current_month (Util* self,
                       GDateTime* date)
{
	GDateTime* now = NULL;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	gboolean result = FALSE;
#line 598 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 598 "../src/Util.vala"
	g_return_val_if_fail (date != NULL, FALSE);
#line 599 "../src/Util.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 599 "../src/Util.vala"
	now = _tmp0_;
#line 601 "../src/Util.vala"
	_tmp1_ = now;
#line 601 "../src/Util.vala"
	if (g_date_time_get_year (date) == g_date_time_get_year (_tmp1_)) {
#line 4116 "Util.c"
		GDateTime* _tmp2_;
#line 602 "../src/Util.vala"
		_tmp2_ = now;
#line 602 "../src/Util.vala"
		if (g_date_time_get_month (date) == g_date_time_get_month (_tmp2_)) {
#line 603 "../src/Util.vala"
			result = TRUE;
#line 603 "../src/Util.vala"
			_g_date_time_unref0 (now);
#line 603 "../src/Util.vala"
			return result;
#line 4128 "Util.c"
		} else {
#line 605 "../src/Util.vala"
			result = FALSE;
#line 605 "../src/Util.vala"
			_g_date_time_unref0 (now);
#line 605 "../src/Util.vala"
			return result;
#line 4136 "Util.c"
		}
	} else {
#line 608 "../src/Util.vala"
		result = FALSE;
#line 608 "../src/Util.vala"
		_g_date_time_unref0 (now);
#line 608 "../src/Util.vala"
		return result;
#line 4145 "Util.c"
	}
#line 598 "../src/Util.vala"
	_g_date_time_unref0 (now);
#line 4149 "Util.c"
}

gboolean
util_is_dynamic_icon (Util* self,
                      const gchar* icon_name)
{
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp1_;
	gboolean result = FALSE;
#line 645 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 645 "../src/Util.vala"
	g_return_val_if_fail (icon_name != NULL, FALSE);
#line 646 "../src/Util.vala"
	_tmp0_ = util_get_dynamic_icons (self);
#line 646 "../src/Util.vala"
	_tmp1_ = _tmp0_;
#line 646 "../src/Util.vala"
	result = gee_abstract_map_has_key ((GeeAbstractMap*) _tmp1_, icon_name);
#line 646 "../src/Util.vala"
	return result;
#line 4171 "Util.c"
}

gboolean
util_is_input_valid (Util* self,
                     GtkEntry* entry)
{
	gboolean result = FALSE;
#line 649 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 649 "../src/Util.vala"
	g_return_val_if_fail (entry != NULL, FALSE);
#line 650 "../src/Util.vala"
	result = ((gint) gtk_entry_get_text_length (entry)) > 0;
#line 650 "../src/Util.vala"
	return result;
#line 4187 "Util.c"
}

static glong
string_strnlen (gchar* str,
                glong maxlen)
{
	gchar* end = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	glong result = 0L;
#line 1447 "glib-2.0.vapi"
	_tmp0_ = memchr (str, 0, (gsize) maxlen);
#line 1447 "glib-2.0.vapi"
	end = _tmp0_;
#line 1448 "glib-2.0.vapi"
	_tmp1_ = end;
#line 1448 "glib-2.0.vapi"
	if (_tmp1_ == NULL) {
#line 1449 "glib-2.0.vapi"
		result = maxlen;
#line 1449 "glib-2.0.vapi"
		return result;
#line 4210 "Util.c"
	} else {
		gchar* _tmp2_;
#line 1451 "glib-2.0.vapi"
		_tmp2_ = end;
#line 1451 "glib-2.0.vapi"
		result = (glong) (_tmp2_ - str);
#line 1451 "glib-2.0.vapi"
		return result;
#line 4219 "Util.c"
	}
}

static gchar*
string_substring (const gchar* self,
                  glong offset,
                  glong len)
{
	glong string_length = 0L;
	gboolean _tmp0_ = FALSE;
	gchar* _tmp3_;
	gchar* result = NULL;
#line 1458 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1460 "glib-2.0.vapi"
	if (offset >= ((glong) 0)) {
#line 1460 "glib-2.0.vapi"
		_tmp0_ = len >= ((glong) 0);
#line 4238 "Util.c"
	} else {
#line 1460 "glib-2.0.vapi"
		_tmp0_ = FALSE;
#line 4242 "Util.c"
	}
#line 1460 "glib-2.0.vapi"
	if (_tmp0_) {
#line 1462 "glib-2.0.vapi"
		string_length = string_strnlen ((gchar*) self, offset + len);
#line 4248 "Util.c"
	} else {
		gint _tmp1_;
		gint _tmp2_;
#line 1464 "glib-2.0.vapi"
		_tmp1_ = strlen (self);
#line 1464 "glib-2.0.vapi"
		_tmp2_ = _tmp1_;
#line 1464 "glib-2.0.vapi"
		string_length = (glong) _tmp2_;
#line 4258 "Util.c"
	}
#line 1467 "glib-2.0.vapi"
	if (offset < ((glong) 0)) {
#line 1468 "glib-2.0.vapi"
		offset = string_length + offset;
#line 1469 "glib-2.0.vapi"
		g_return_val_if_fail (offset >= ((glong) 0), NULL);
#line 4266 "Util.c"
	} else {
#line 1471 "glib-2.0.vapi"
		g_return_val_if_fail (offset <= string_length, NULL);
#line 4270 "Util.c"
	}
#line 1473 "glib-2.0.vapi"
	if (len < ((glong) 0)) {
#line 1474 "glib-2.0.vapi"
		len = string_length - offset;
#line 4276 "Util.c"
	}
#line 1476 "glib-2.0.vapi"
	g_return_val_if_fail ((offset + len) <= string_length, NULL);
#line 1477 "glib-2.0.vapi"
	_tmp3_ = g_strndup (((gchar*) self) + offset, (gsize) len);
#line 1477 "glib-2.0.vapi"
	result = _tmp3_;
#line 1477 "glib-2.0.vapi"
	return result;
#line 4286 "Util.c"
}

gchar*
util_get_short_name (Util* self,
                     const gchar* name,
                     gint size)
{
	gchar* returned = NULL;
	gchar* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	gchar* result = NULL;
#line 653 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 653 "../src/Util.vala"
	g_return_val_if_fail (name != NULL, NULL);
#line 654 "../src/Util.vala"
	_tmp0_ = g_strdup (name);
#line 654 "../src/Util.vala"
	returned = _tmp0_;
#line 656 "../src/Util.vala"
	_tmp1_ = strlen (name);
#line 656 "../src/Util.vala"
	_tmp2_ = _tmp1_;
#line 656 "../src/Util.vala"
	if (_tmp2_ > size) {
#line 4313 "Util.c"
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
#line 657 "../src/Util.vala"
		_tmp3_ = string_substring (name, (glong) 0, (glong) size);
#line 657 "../src/Util.vala"
		_tmp4_ = _tmp3_;
#line 657 "../src/Util.vala"
		_tmp5_ = g_strconcat (_tmp4_, "…", NULL);
#line 657 "../src/Util.vala"
		_g_free0 (returned);
#line 657 "../src/Util.vala"
		returned = _tmp5_;
#line 657 "../src/Util.vala"
		_g_free0 (_tmp4_);
#line 4329 "Util.c"
	}
#line 660 "../src/Util.vala"
	result = returned;
#line 660 "../src/Util.vala"
	return result;
#line 4335 "Util.c"
}

static gboolean
string_contains (const gchar* self,
                 const gchar* needle)
{
	gchar* _tmp0_;
	gboolean result = FALSE;
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (needle != NULL, FALSE);
#line 1531 "glib-2.0.vapi"
	_tmp0_ = strstr ((gchar*) self, (gchar*) needle);
#line 1531 "glib-2.0.vapi"
	result = _tmp0_ != NULL;
#line 1531 "glib-2.0.vapi"
	return result;
#line 4354 "Util.c"
}

gboolean
util_is_clock_format_12h (Util* self)
{
	GSettings* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gboolean _tmp3_;
	gboolean result = FALSE;
#line 663 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 664 "../src/Util.vala"
	_tmp0_ = planner_settings;
#line 664 "../src/Util.vala"
	_tmp1_ = g_settings_get_string (_tmp0_, "clock-format");
#line 664 "../src/Util.vala"
	_tmp2_ = _tmp1_;
#line 664 "../src/Util.vala"
	_tmp3_ = string_contains (_tmp2_, "12h");
#line 664 "../src/Util.vala"
	_g_free0 (_tmp2_);
#line 664 "../src/Util.vala"
	result = _tmp3_;
#line 664 "../src/Util.vala"
	return result;
#line 4381 "Util.c"
}

Util*
util_construct (GType object_type)
{
	Util * self = NULL;
#line 88 "../src/Util.vala"
	self = (Util*) g_object_new (object_type, NULL);
#line 88 "../src/Util.vala"
	return self;
#line 4392 "Util.c"
}

Util*
util_new (void)
{
#line 88 "../src/Util.vala"
	return util_construct (TYPE_UTIL);
#line 4400 "Util.c"
}

GeeHashMap*
util_get_dynamic_icons (Util* self)
{
	GeeHashMap* result;
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp20_;
#line 618 "../src/Util.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 619 "../src/Util.vala"
	_tmp0_ = self->priv->_dynamic_icons;
#line 619 "../src/Util.vala"
	if (_tmp0_ == NULL) {
#line 4415 "Util.c"
		GeeHashMap* _tmp1_;
		GeeHashMap* _tmp2_;
		GeeHashMap* _tmp3_;
		GeeHashMap* _tmp4_;
		GeeHashMap* _tmp5_;
		GeeHashMap* _tmp6_;
		GeeHashMap* _tmp7_;
		GeeHashMap* _tmp8_;
		GeeHashMap* _tmp9_;
		GeeHashMap* _tmp10_;
		GeeHashMap* _tmp11_;
		GeeHashMap* _tmp12_;
		GeeHashMap* _tmp13_;
		GeeHashMap* _tmp14_;
		GeeHashMap* _tmp15_;
		GeeHashMap* _tmp16_;
		GeeHashMap* _tmp17_;
		GeeHashMap* _tmp18_;
		GeeHashMap* _tmp19_;
#line 620 "../src/Util.vala"
		_tmp1_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, G_TYPE_BOOLEAN, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 620 "../src/Util.vala"
		_g_object_unref0 (self->priv->_dynamic_icons);
#line 620 "../src/Util.vala"
		self->priv->_dynamic_icons = _tmp1_;
#line 621 "../src/Util.vala"
		_tmp2_ = self->priv->_dynamic_icons;
#line 621 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp2_, "planner-calendar", (gpointer) ((gintptr) TRUE));
#line 622 "../src/Util.vala"
		_tmp3_ = self->priv->_dynamic_icons;
#line 622 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp3_, "planner-search", (gpointer) ((gintptr) TRUE));
#line 623 "../src/Util.vala"
		_tmp4_ = self->priv->_dynamic_icons;
#line 623 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp4_, "planner-plus", (gpointer) ((gintptr) TRUE));
#line 624 "../src/Util.vala"
		_tmp5_ = self->priv->_dynamic_icons;
#line 624 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp5_, "chevron-right", (gpointer) ((gintptr) TRUE));
#line 625 "../src/Util.vala"
		_tmp6_ = self->priv->_dynamic_icons;
#line 625 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp6_, "chevron-down", (gpointer) ((gintptr) TRUE));
#line 626 "../src/Util.vala"
		_tmp7_ = self->priv->_dynamic_icons;
#line 626 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp7_, "chevron-left", (gpointer) ((gintptr) TRUE));
#line 627 "../src/Util.vala"
		_tmp8_ = self->priv->_dynamic_icons;
#line 627 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp8_, "planner-plus-circle", (gpointer) ((gintptr) TRUE));
#line 628 "../src/Util.vala"
		_tmp9_ = self->priv->_dynamic_icons;
#line 628 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp9_, "planner-refresh", (gpointer) ((gintptr) TRUE));
#line 629 "../src/Util.vala"
		_tmp10_ = self->priv->_dynamic_icons;
#line 629 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp10_, "planner-edit", (gpointer) ((gintptr) TRUE));
#line 630 "../src/Util.vala"
		_tmp11_ = self->priv->_dynamic_icons;
#line 630 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp11_, "planner-trash", (gpointer) ((gintptr) TRUE));
#line 631 "../src/Util.vala"
		_tmp12_ = self->priv->_dynamic_icons;
#line 631 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp12_, "planner-star", (gpointer) ((gintptr) TRUE));
#line 632 "../src/Util.vala"
		_tmp13_ = self->priv->_dynamic_icons;
#line 632 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp13_, "planner-note", (gpointer) ((gintptr) TRUE));
#line 633 "../src/Util.vala"
		_tmp14_ = self->priv->_dynamic_icons;
#line 633 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp14_, "planner-close-circle", (gpointer) ((gintptr) TRUE));
#line 634 "../src/Util.vala"
		_tmp15_ = self->priv->_dynamic_icons;
#line 634 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp15_, "planner-check-circle", (gpointer) ((gintptr) TRUE));
#line 635 "../src/Util.vala"
		_tmp16_ = self->priv->_dynamic_icons;
#line 635 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp16_, "planner-flag", (gpointer) ((gintptr) TRUE));
#line 636 "../src/Util.vala"
		_tmp17_ = self->priv->_dynamic_icons;
#line 636 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp17_, "dots-horizontal", (gpointer) ((gintptr) TRUE));
#line 637 "../src/Util.vala"
		_tmp18_ = self->priv->_dynamic_icons;
#line 637 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp18_, "planner-tag", (gpointer) ((gintptr) TRUE));
#line 638 "../src/Util.vala"
		_tmp19_ = self->priv->_dynamic_icons;
#line 638 "../src/Util.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp19_, "planner-pinned", (gpointer) ((gintptr) TRUE));
#line 4513 "Util.c"
	}
#line 641 "../src/Util.vala"
	_tmp20_ = self->priv->_dynamic_icons;
#line 641 "../src/Util.vala"
	result = _tmp20_;
#line 641 "../src/Util.vala"
	return result;
#line 4521 "Util.c"
}

static void
util_class_init (UtilClass * klass,
                 gpointer klass_data)
{
#line 88 "../src/Util.vala"
	util_parent_class = g_type_class_peek_parent (klass);
#line 88 "../src/Util.vala"
	g_type_class_adjust_private_offset (klass, &Util_private_offset);
#line 88 "../src/Util.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_util_get_property;
#line 88 "../src/Util.vala"
	G_OBJECT_CLASS (klass)->finalize = util_finalize;
#line 88 "../src/Util.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), UTIL_DYNAMIC_ICONS_PROPERTY, util_properties[UTIL_DYNAMIC_ICONS_PROPERTY] = g_param_spec_object ("dynamic-icons", "dynamic-icons", "dynamic-icons", GEE_TYPE_HASH_MAP, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 4538 "Util.c"
}

static void
util_instance_init (Util * self,
                    gpointer klass)
{
	GtkTargetEntry _tmp0_ = {0};
	GtkTargetEntry* _tmp1_;
	GtkTargetEntry _tmp2_ = {0};
	GtkTargetEntry* _tmp3_;
#line 88 "../src/Util.vala"
	self->priv = util_get_instance_private (self);
#line 89 "../src/Util.vala"
	memset (&_tmp0_, 0, sizeof (GtkTargetEntry));
#line 89 "../src/Util.vala"
	_tmp0_.target = "MAGICBUTTON";
#line 89 "../src/Util.vala"
	_tmp0_.flags = (guint) GTK_TARGET_SAME_APP;
#line 89 "../src/Util.vala"
	_tmp0_.info = (guint) 0;
#line 89 "../src/Util.vala"
	_tmp1_ = g_new0 (GtkTargetEntry, 1);
#line 89 "../src/Util.vala"
	_tmp1_[0] = _tmp0_;
#line 89 "../src/Util.vala"
	self->MAGICBUTTON_TARGET_ENTRIES = _tmp1_;
#line 89 "../src/Util.vala"
	self->MAGICBUTTON_TARGET_ENTRIES_length1 = 1;
#line 93 "../src/Util.vala"
	memset (&_tmp2_, 0, sizeof (GtkTargetEntry));
#line 93 "../src/Util.vala"
	_tmp2_.target = "ITEMROW";
#line 93 "../src/Util.vala"
	_tmp2_.flags = (guint) GTK_TARGET_SAME_APP;
#line 93 "../src/Util.vala"
	_tmp2_.info = (guint) 0;
#line 93 "../src/Util.vala"
	_tmp3_ = g_new0 (GtkTargetEntry, 1);
#line 93 "../src/Util.vala"
	_tmp3_[0] = _tmp2_;
#line 93 "../src/Util.vala"
	self->ITEMROW_TARGET_ENTRIES = _tmp3_;
#line 93 "../src/Util.vala"
	self->ITEMROW_TARGET_ENTRIES_length1 = 1;
#line 377 "../src/Util.vala"
	self->priv->line_break_to_space_regex = NULL;
#line 4585 "Util.c"
}

static void
util_finalize (GObject * obj)
{
	Util * self;
#line 88 "../src/Util.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_UTIL, Util);
#line 89 "../src/Util.vala"
	self->MAGICBUTTON_TARGET_ENTRIES = (g_free (self->MAGICBUTTON_TARGET_ENTRIES), NULL);
#line 93 "../src/Util.vala"
	self->ITEMROW_TARGET_ENTRIES = (g_free (self->ITEMROW_TARGET_ENTRIES), NULL);
#line 109 "../src/Util.vala"
	_g_object_unref0 (self->priv->colors);
#line 159 "../src/Util.vala"
	_g_object_unref0 (self->priv->providers);
#line 377 "../src/Util.vala"
	_g_regex_unref0 (self->priv->line_break_to_space_regex);
#line 616 "../src/Util.vala"
	_g_object_unref0 (self->priv->_dynamic_icons);
#line 88 "../src/Util.vala"
	G_OBJECT_CLASS (util_parent_class)->finalize (obj);
#line 4608 "Util.c"
}

static GType
util_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (UtilClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) util_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Util), 0, (GInstanceInitFunc) util_instance_init, NULL };
	GType util_type_id;
	util_type_id = g_type_register_static (G_TYPE_OBJECT, "Util", &g_define_type_info, 0);
	Util_private_offset = g_type_add_instance_private (util_type_id, sizeof (UtilPrivate));
	return util_type_id;
}

GType
util_get_type (void)
{
	static volatile gsize util_type_id__volatile = 0;
	if (g_once_init_enter (&util_type_id__volatile)) {
		GType util_type_id;
		util_type_id = util_get_type_once ();
		g_once_init_leave (&util_type_id__volatile, util_type_id);
	}
	return util_type_id__volatile;
}

static void
_vala_util_get_property (GObject * object,
                         guint property_id,
                         GValue * value,
                         GParamSpec * pspec)
{
	Util * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_UTIL, Util);
#line 88 "../src/Util.vala"
	switch (property_id) {
#line 88 "../src/Util.vala"
		case UTIL_DYNAMIC_ICONS_PROPERTY:
#line 88 "../src/Util.vala"
		g_value_set_object (value, util_get_dynamic_icons (self));
#line 88 "../src/Util.vala"
		break;
#line 4649 "Util.c"
		default:
#line 88 "../src/Util.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 88 "../src/Util.vala"
		break;
#line 4655 "Util.c"
	}
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}

