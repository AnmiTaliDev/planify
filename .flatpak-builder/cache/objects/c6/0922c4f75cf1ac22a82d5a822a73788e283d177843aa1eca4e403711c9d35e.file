/* Project.c generated by valac 0.50.10, the Vala compiler
 * generated from Project.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <handy.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gtk/gtk.h>
#include <granite.h>
#include <float.h>
#include <math.h>
#include <glib/gi18n-lib.h>
#include <gee.h>
#include <gio/gio.h>

#define DIALOGS_TYPE_PROJECT (dialogs_project_get_type ())
#define DIALOGS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_PROJECT, DialogsProject))
#define DIALOGS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_PROJECT, DialogsProjectClass))
#define DIALOGS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_PROJECT))
#define DIALOGS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_PROJECT))
#define DIALOGS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_PROJECT, DialogsProjectClass))

typedef struct _DialogsProject DialogsProject;
typedef struct _DialogsProjectClass DialogsProjectClass;
typedef struct _DialogsProjectPrivate DialogsProjectPrivate;

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;
enum  {
	DIALOGS_PROJECT_0_PROPERTY,
	DIALOGS_PROJECT_COLOR_SELECTED_PROPERTY,
	DIALOGS_PROJECT_PROJECT_PROPERTY,
	DIALOGS_PROJECT_IS_CREATING_PROPERTY,
	DIALOGS_PROJECT_NUM_PROPERTIES
};
static GParamSpec* dialogs_project_properties[DIALOGS_PROJECT_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_UTIL (util_get_type ())
#define UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTIL, Util))
#define UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTIL, UtilClass))
#define IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTIL))
#define IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTIL))
#define UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTIL, UtilClass))

typedef struct _Util Util;
typedef struct _UtilClass UtilClass;

#define WIDGETS_TYPE_PROJECT_PROGRESS (widgets_project_progress_get_type ())
#define WIDGETS_PROJECT_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgress))
#define WIDGETS_PROJECT_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgressClass))
#define WIDGETS_IS_PROJECT_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_PROJECT_PROGRESS))
#define WIDGETS_IS_PROJECT_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_PROJECT_PROGRESS))
#define WIDGETS_PROJECT_PROGRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_PROJECT_PROGRESS, WidgetsProjectProgressClass))

typedef struct _WidgetsProjectProgress WidgetsProjectProgress;
typedef struct _WidgetsProjectProgressClass WidgetsProjectProgressClass;

#define WIDGETS_TYPE_LOADING_BUTTON (widgets_loading_button_get_type ())
#define WIDGETS_LOADING_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LOADING_BUTTON, WidgetsLoadingButton))
#define WIDGETS_LOADING_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LOADING_BUTTON, WidgetsLoadingButtonClass))
#define WIDGETS_IS_LOADING_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LOADING_BUTTON))
#define WIDGETS_IS_LOADING_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LOADING_BUTTON))
#define WIDGETS_LOADING_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LOADING_BUTTON, WidgetsLoadingButtonClass))

typedef struct _WidgetsLoadingButton WidgetsLoadingButton;
typedef struct _WidgetsLoadingButtonClass WidgetsLoadingButtonClass;
typedef struct _Block32Data Block32Data;

#define TYPE_PLANNER (planner_get_type ())
#define PLANNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PLANNER, Planner))
#define PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_PLANNER, PlannerClass))
#define IS_PLANNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PLANNER))
#define IS_PLANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_PLANNER))
#define PLANNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PLANNER, PlannerClass))

typedef struct _Planner Planner;
typedef struct _PlannerClass PlannerClass;
typedef struct _PlannerPrivate PlannerPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;

#define OBJECTS_TYPE_COLOR (objects_color_get_type ())
#define OBJECTS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_COLOR, ObjectsColor))
#define OBJECTS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_COLOR, ObjectsColorClass))
#define OBJECTS_IS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_COLOR))
#define OBJECTS_IS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_COLOR))
#define OBJECTS_COLOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_COLOR, ObjectsColorClass))

typedef struct _ObjectsColor ObjectsColor;
typedef struct _ObjectsColorClass ObjectsColorClass;
typedef struct _Block33Data Block33Data;
typedef enum  {
	LOADING_BUTTON_TYPE_LABEL,
	LOADING_BUTTON_TYPE_ICON
} LoadingButtonType;

#define TYPE_LOADING_BUTTON_TYPE (loading_button_type_get_type ())
typedef enum  {
	PROJECT_ICON_STYLE_PROGRESS,
	PROJECT_ICON_STYLE_EMOJI
} ProjectIconStyle;

#define TYPE_PROJECT_ICON_STYLE (project_icon_style_get_type ())

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define SERVICES_TYPE_TODOIST (services_todoist_get_type ())
#define SERVICES_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_TODOIST, ServicesTodoist))
#define SERVICES_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_TODOIST, ServicesTodoistClass))
#define SERVICES_IS_TODOIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_TODOIST))
#define SERVICES_IS_TODOIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_TODOIST))
#define SERVICES_TODOIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_TODOIST, ServicesTodoistClass))

typedef struct _ServicesTodoist ServicesTodoist;
typedef struct _ServicesTodoistClass ServicesTodoistClass;
typedef enum  {
	BACKEND_TYPE_NONE = 0,
	BACKEND_TYPE_LOCAL = 1,
	BACKEND_TYPE_TODOIST = 2,
	BACKEND_TYPE_CALDAV = 3
} BackendType;

#define TYPE_BACKEND_TYPE (backend_type_get_type ())

#define SERVICES_TYPE_EVENT_BUS (services_event_bus_get_type ())
#define SERVICES_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBus))
#define SERVICES_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))
#define SERVICES_IS_EVENT_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_IS_EVENT_BUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_EVENT_BUS))
#define SERVICES_EVENT_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_EVENT_BUS, ServicesEventBusClass))

typedef struct _ServicesEventBus ServicesEventBus;
typedef struct _ServicesEventBusClass ServicesEventBusClass;
typedef enum  {
	PANE_TYPE_FILTER,
	PANE_TYPE_FAVORITE,
	PANE_TYPE_PROJECT,
	PANE_TYPE_LABEL,
	PANE_TYPE_TASKLIST
} PaneType;

#define TYPE_PANE_TYPE (pane_type_get_type ())

struct _DialogsProject {
	HdyWindow parent_instance;
	DialogsProjectPrivate * priv;
};

struct _DialogsProjectClass {
	HdyWindowClass parent_class;
};

struct _DialogsProjectPrivate {
	gchar* _color_selected;
	ObjectsProject* _project;
};

struct _Block32Data {
	int _ref_count_;
	DialogsProject* self;
	GtkEntry* emoji_entry;
	WidgetsProjectProgress* progress;
	GtkLabel* label;
	GtkStack* preview_stack;
	GraniteModeSwitch* iconstyle_switch;
	GtkEntry* name_entry;
	WidgetsLoadingButton* submit_button;
};

struct _Planner {
	GtkApplication parent_instance;
	PlannerPrivate * priv;
	MainWindow* main_window;
};

struct _PlannerClass {
	GtkApplicationClass parent_class;
};

struct _Block33Data {
	int _ref_count_;
	Block32Data * _data32_;
	GeeMapEntry* entry;
};

static gint DialogsProject_private_offset;
static gpointer dialogs_project_parent_class = NULL;
extern ServicesDatabase* planner_database;
extern ServicesTodoist* planner_todoist;
extern GSettings* planner_settings;
extern ServicesEventBus* planner_event_bus;

GType dialogs_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DialogsProject, g_object_unref)
GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
DialogsProject* dialogs_project_new_new (void);
DialogsProject* dialogs_project_construct_new (GType object_type);
ObjectsProject* objects_project_new (void);
ObjectsProject* objects_project_construct (GType object_type);
GType util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Util, g_object_unref)
Util* util_get_default (void);
gchar* util_get_random_color (Util* self);
void objects_project_set_color (ObjectsProject* self,
                                const gchar* value);
void objects_project_set_emoji (ObjectsProject* self,
                                const gchar* value);
#define CONSTANTS_INACTIVE 0
void objects_base_object_set_id (ObjectsBaseObject* self,
                                 gint64 value);
DialogsProject* dialogs_project_new (ObjectsProject* project);
DialogsProject* dialogs_project_construct (GType object_type,
                                           ObjectsProject* project);
void dialogs_project_hide_destroy (DialogsProject* self);
static gboolean __lambda194_ (DialogsProject* self);
static gboolean ___lambda194__gsource_func (gpointer self);
const gchar* dialogs_project_get_color_selected (DialogsProject* self);
void dialogs_project_set_color_selected (DialogsProject* self,
                                         const gchar* value);
ObjectsProject* dialogs_project_get_project (DialogsProject* self);
static void dialogs_project_set_project (DialogsProject* self,
                                  ObjectsProject* value);
gboolean dialogs_project_get_is_creating (DialogsProject* self);
gint64 objects_base_object_get_id (ObjectsBaseObject* self);
static GObject * dialogs_project_constructor (GType type,
                                       guint n_construct_properties,
                                       GObjectConstructParam * construct_properties);
GType widgets_project_progress_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsProjectProgress, g_object_unref)
GType widgets_loading_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsLoadingButton, g_object_unref)
static Block32Data* block32_data_ref (Block32Data* _data32_);
static void block32_data_unref (void * _userdata_);
GType planner_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Planner, g_object_unref)
Planner* planner_get_instance (void);
GType main_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MainWindow, g_object_unref)
gchar* util_get_color (Util* self,
                       const gchar* key);
const gchar* objects_project_get_color (ObjectsProject* self);
WidgetsProjectProgress* widgets_project_progress_new (gint min_d);
WidgetsProjectProgress* widgets_project_progress_construct (GType object_type,
                                                            gint min_d);
void widgets_project_progress_set_progress_fill_color (WidgetsProjectProgress* self,
                                                       const gchar* value);
void widgets_project_progress_set_percentage (WidgetsProjectProgress* self,
                                              gdouble value);
const gchar* objects_project_get_emoji (ObjectsProject* self);
const gchar* objects_project_get_name (ObjectsProject* self);
GType objects_color_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsColor, g_object_unref)
GeeHashMap* util_get_colors (Util* self);
static Block33Data* block33_data_ref (Block33Data* _data33_);
static void block33_data_unref (void * _userdata_);
gchar* util_get_color_name (Util* self,
                            const gchar* key);
void util_set_widget_color (Util* self,
                            const gchar* color,
                            GtkWidget* widget);
static void _dialogs_project_____lambda195_ (Block33Data* _data33_);
static void __dialogs_project_____lambda195__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                 gpointer self);
GType loading_button_type_get_type (void) G_GNUC_CONST;
WidgetsLoadingButton* widgets_loading_button_new (LoadingButtonType loading_type,
                                                  const gchar* text);
WidgetsLoadingButton* widgets_loading_button_construct (GType object_type,
                                                        LoadingButtonType loading_type,
                                                        const gchar* text);
static gboolean _dialogs_project___lambda196_ (Block32Data* _data32_);
GType project_icon_style_get_type (void) G_GNUC_CONST;
ProjectIconStyle objects_project_get_icon_style (ObjectsProject* self);
static gboolean __dialogs_project___lambda196__gsource_func (gpointer self);
static void _dialogs_project___lambda197_ (Block32Data* _data32_);
static void __dialogs_project___lambda197__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static void _dialogs_project___lambda198_ (Block32Data* _data32_);
static void __dialogs_project___lambda198__gtk_editable_changed (GtkEditable* _sender,
                                                          gpointer self);
static void _dialogs_project___lambda199_ (Block32Data* _data32_);
gboolean util_is_input_valid (Util* self,
                              GtkEntry* entry);
static void __dialogs_project___lambda199__gtk_editable_changed (GtkEditable* _sender,
                                                          gpointer self);
static void _dialogs_project___lambda200_ (Block32Data* _data32_);
void objects_project_set_name (ObjectsProject* self,
                               const gchar* value);
void objects_project_set_icon_style (ObjectsProject* self,
                                     ProjectIconStyle value);
void widgets_loading_button_set_is_loading (WidgetsLoadingButton* self,
                                            gboolean value);
GType services_database_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesDatabase, g_object_unref)
void services_database_update_project (ServicesDatabase* self,
                                       ObjectsProject* project);
gboolean objects_project_get_todoist (ObjectsProject* self);
GType services_todoist_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesTodoist, g_object_unref)
void services_todoist_update (ServicesTodoist* self,
                              ObjectsBaseObject* object,
                              GAsyncReadyCallback _callback_,
                              gpointer _user_data_);
gboolean services_todoist_update_finish (ServicesTodoist* self,
                                         GAsyncResult* _res_);
static void ____lambda201_ (Block32Data* _data32_,
                     GObject* obj,
                     GAsyncResult* res);
static void _____lambda201__gasync_ready_callback (GObject* source_object,
                                            GAsyncResult* res,
                                            gpointer self);
GType backend_type_get_type (void) G_GNUC_CONST;
void objects_project_set_todoist (ObjectsProject* self,
                                  gboolean value);
void services_todoist_add (ServicesTodoist* self,
                           ObjectsBaseObject* object,
                           GAsyncReadyCallback _callback_,
                           gpointer _user_data_);
gint64* services_todoist_add_finish (ServicesTodoist* self,
                                     GAsyncResult* _res_);
static void ____lambda202_ (DialogsProject* self,
                     GObject* obj,
                     GAsyncResult* res);
gboolean services_database_insert_project (ServicesDatabase* self,
                                           ObjectsProject* project);
GType services_event_bus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ServicesEventBus, g_object_unref)
GType pane_type_get_type (void) G_GNUC_CONST;
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
static void _____lambda202__gasync_ready_callback (GObject* source_object,
                                            GAsyncResult* res,
                                            gpointer self);
gint64 util_generate_id (Util* self,
                         gint len);
static void __dialogs_project___lambda200__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static void _dialogs_project___lambda203_ (DialogsProject* self);
static void __dialogs_project___lambda203__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static void _dialogs_project___lambda204_ (Block32Data* _data32_);
static void __dialogs_project___lambda204__g_object_notify (GObject* _sender,
                                                     GParamSpec* pspec,
                                                     gpointer self);
static void dialogs_project_finalize (GObject * obj);
static GType dialogs_project_get_type_once (void);
static void _vala_dialogs_project_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec);
static void _vala_dialogs_project_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec);

static inline gpointer
dialogs_project_get_instance_private (DialogsProject* self)
{
	return G_STRUCT_MEMBER_P (self, DialogsProject_private_offset);
}

DialogsProject*
dialogs_project_construct_new (GType object_type)
{
	DialogsProject * self = NULL;
	ObjectsProject* project = NULL;
	ObjectsProject* _tmp0_;
	Util* _tmp1_;
	Util* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
#line 33 "../src/Dialogs/Project.vala"
	_tmp0_ = objects_project_new ();
#line 33 "../src/Dialogs/Project.vala"
	project = _tmp0_;
#line 34 "../src/Dialogs/Project.vala"
	_tmp1_ = util_get_default ();
#line 34 "../src/Dialogs/Project.vala"
	_tmp2_ = _tmp1_;
#line 34 "../src/Dialogs/Project.vala"
	_tmp3_ = util_get_random_color (_tmp2_);
#line 34 "../src/Dialogs/Project.vala"
	_tmp4_ = _tmp3_;
#line 34 "../src/Dialogs/Project.vala"
	objects_project_set_color (project, _tmp4_);
#line 34 "../src/Dialogs/Project.vala"
	_g_free0 (_tmp4_);
#line 34 "../src/Dialogs/Project.vala"
	_g_object_unref0 (_tmp2_);
#line 35 "../src/Dialogs/Project.vala"
	objects_project_set_emoji (project, "ðï¸");
#line 36 "../src/Dialogs/Project.vala"
	objects_base_object_set_id ((ObjectsBaseObject*) project, (gint64) CONSTANTS_INACTIVE);
#line 38 "../src/Dialogs/Project.vala"
	self = (DialogsProject*) g_object_new (object_type, "project", project, "deletable", TRUE, "resizable", TRUE, "window-position", GTK_WIN_POS_CENTER_ON_PARENT, "modal", TRUE, NULL);
#line 32 "../src/Dialogs/Project.vala"
	_g_object_unref0 (project);
#line 32 "../src/Dialogs/Project.vala"
	return self;
#line 459 "Project.c"
}

DialogsProject*
dialogs_project_new_new (void)
{
#line 32 "../src/Dialogs/Project.vala"
	return dialogs_project_construct_new (DIALOGS_TYPE_PROJECT);
#line 467 "Project.c"
}

DialogsProject*
dialogs_project_construct (GType object_type,
                           ObjectsProject* project)
{
	DialogsProject * self = NULL;
#line 47 "../src/Dialogs/Project.vala"
	g_return_val_if_fail (project != NULL, NULL);
#line 48 "../src/Dialogs/Project.vala"
	self = (DialogsProject*) g_object_new (object_type, "project", project, "deletable", TRUE, "resizable", TRUE, "window-position", GTK_WIN_POS_CENTER_ON_PARENT, "modal", TRUE, NULL);
#line 47 "../src/Dialogs/Project.vala"
	return self;
#line 481 "Project.c"
}

DialogsProject*
dialogs_project_new (ObjectsProject* project)
{
#line 47 "../src/Dialogs/Project.vala"
	return dialogs_project_construct (DIALOGS_TYPE_PROJECT, project);
#line 489 "Project.c"
}

static gboolean
__lambda194_ (DialogsProject* self)
{
	gboolean result = FALSE;
#line 320 "../src/Dialogs/Project.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 321 "../src/Dialogs/Project.vala"
	result = G_SOURCE_REMOVE;
#line 321 "../src/Dialogs/Project.vala"
	return result;
#line 502 "Project.c"
}

static gboolean
___lambda194__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda194_ ((DialogsProject*) self);
#line 319 "../src/Dialogs/Project.vala"
	return result;
#line 512 "Project.c"
}

void
dialogs_project_hide_destroy (DialogsProject* self)
{
#line 316 "../src/Dialogs/Project.vala"
	g_return_if_fail (self != NULL);
#line 317 "../src/Dialogs/Project.vala"
	gtk_widget_hide ((GtkWidget*) self);
#line 319 "../src/Dialogs/Project.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 500, ___lambda194__gsource_func, g_object_ref (self), g_object_unref);
#line 524 "Project.c"
}

const gchar*
dialogs_project_get_color_selected (DialogsProject* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 23 "../src/Dialogs/Project.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "../src/Dialogs/Project.vala"
	_tmp0_ = self->priv->_color_selected;
#line 23 "../src/Dialogs/Project.vala"
	result = _tmp0_;
#line 23 "../src/Dialogs/Project.vala"
	return result;
#line 540 "Project.c"
}

void
dialogs_project_set_color_selected (DialogsProject* self,
                                    const gchar* value)
{
	gchar* old_value;
#line 23 "../src/Dialogs/Project.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/Dialogs/Project.vala"
	old_value = dialogs_project_get_color_selected (self);
#line 23 "../src/Dialogs/Project.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 554 "Project.c"
		gchar* _tmp0_;
#line 23 "../src/Dialogs/Project.vala"
		_tmp0_ = g_strdup (value);
#line 23 "../src/Dialogs/Project.vala"
		_g_free0 (self->priv->_color_selected);
#line 23 "../src/Dialogs/Project.vala"
		self->priv->_color_selected = _tmp0_;
#line 23 "../src/Dialogs/Project.vala"
		g_object_notify_by_pspec ((GObject *) self, dialogs_project_properties[DIALOGS_PROJECT_COLOR_SELECTED_PROPERTY]);
#line 564 "Project.c"
	}
}

ObjectsProject*
dialogs_project_get_project (DialogsProject* self)
{
	ObjectsProject* result;
	ObjectsProject* _tmp0_;
#line 24 "../src/Dialogs/Project.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 24 "../src/Dialogs/Project.vala"
	_tmp0_ = self->priv->_project;
#line 24 "../src/Dialogs/Project.vala"
	result = _tmp0_;
#line 24 "../src/Dialogs/Project.vala"
	return result;
#line 581 "Project.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 24 "../src/Dialogs/Project.vala"
	return self ? g_object_ref (self) : NULL;
#line 589 "Project.c"
}

static void
dialogs_project_set_project (DialogsProject* self,
                             ObjectsProject* value)
{
	ObjectsProject* old_value;
#line 24 "../src/Dialogs/Project.vala"
	g_return_if_fail (self != NULL);
#line 24 "../src/Dialogs/Project.vala"
	old_value = dialogs_project_get_project (self);
#line 24 "../src/Dialogs/Project.vala"
	if (old_value != value) {
#line 603 "Project.c"
		ObjectsProject* _tmp0_;
#line 24 "../src/Dialogs/Project.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 24 "../src/Dialogs/Project.vala"
		_g_object_unref0 (self->priv->_project);
#line 24 "../src/Dialogs/Project.vala"
		self->priv->_project = _tmp0_;
#line 24 "../src/Dialogs/Project.vala"
		g_object_notify_by_pspec ((GObject *) self, dialogs_project_properties[DIALOGS_PROJECT_PROJECT_PROPERTY]);
#line 613 "Project.c"
	}
}

gboolean
dialogs_project_get_is_creating (DialogsProject* self)
{
	gboolean result;
	ObjectsProject* _tmp0_;
	gint64 _tmp1_;
	gint64 _tmp2_;
#line 27 "../src/Dialogs/Project.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 28 "../src/Dialogs/Project.vala"
	_tmp0_ = self->priv->_project;
#line 28 "../src/Dialogs/Project.vala"
	_tmp1_ = objects_base_object_get_id ((ObjectsBaseObject*) _tmp0_);
#line 28 "../src/Dialogs/Project.vala"
	_tmp2_ = _tmp1_;
#line 28 "../src/Dialogs/Project.vala"
	result = _tmp2_ == ((gint64) CONSTANTS_INACTIVE);
#line 28 "../src/Dialogs/Project.vala"
	return result;
#line 636 "Project.c"
}

static Block32Data*
block32_data_ref (Block32Data* _data32_)
{
#line 57 "../src/Dialogs/Project.vala"
	g_atomic_int_inc (&_data32_->_ref_count_);
#line 57 "../src/Dialogs/Project.vala"
	return _data32_;
#line 646 "Project.c"
}

static void
block32_data_unref (void * _userdata_)
{
	Block32Data* _data32_;
	_data32_ = (Block32Data*) _userdata_;
#line 57 "../src/Dialogs/Project.vala"
	if (g_atomic_int_dec_and_test (&_data32_->_ref_count_)) {
#line 656 "Project.c"
		DialogsProject* self;
#line 57 "../src/Dialogs/Project.vala"
		self = _data32_->self;
#line 57 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_data32_->submit_button);
#line 57 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_data32_->name_entry);
#line 57 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_data32_->iconstyle_switch);
#line 57 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_data32_->preview_stack);
#line 57 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_data32_->label);
#line 57 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_data32_->progress);
#line 57 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_data32_->emoji_entry);
#line 57 "../src/Dialogs/Project.vala"
		_g_object_unref0 (self);
#line 57 "../src/Dialogs/Project.vala"
		g_slice_free (Block32Data, _data32_);
#line 678 "Project.c"
	}
}

static Block33Data*
block33_data_ref (Block33Data* _data33_)
{
#line 142 "../src/Dialogs/Project.vala"
	g_atomic_int_inc (&_data33_->_ref_count_);
#line 142 "../src/Dialogs/Project.vala"
	return _data33_;
#line 689 "Project.c"
}

static void
block33_data_unref (void * _userdata_)
{
	Block33Data* _data33_;
	_data33_ = (Block33Data*) _userdata_;
#line 142 "../src/Dialogs/Project.vala"
	if (g_atomic_int_dec_and_test (&_data33_->_ref_count_)) {
#line 699 "Project.c"
		DialogsProject* self;
#line 142 "../src/Dialogs/Project.vala"
		self = _data33_->_data32_->self;
#line 142 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_data33_->entry);
#line 142 "../src/Dialogs/Project.vala"
		block32_data_unref (_data33_->_data32_);
#line 142 "../src/Dialogs/Project.vala"
		_data33_->_data32_ = NULL;
#line 142 "../src/Dialogs/Project.vala"
		g_slice_free (Block33Data, _data33_);
#line 711 "Project.c"
	}
}

static void
_dialogs_project_____lambda195_ (Block33Data* _data33_)
{
	Block32Data* _data32_;
	DialogsProject* self;
	GeeMapEntry* _tmp0_;
	gconstpointer _tmp1_;
	gconstpointer _tmp2_;
	WidgetsProjectProgress* _tmp3_;
	Util* _tmp4_;
	Util* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
#line 152 "../src/Dialogs/Project.vala"
	_data32_ = _data33_->_data32_;
#line 152 "../src/Dialogs/Project.vala"
	self = _data32_->self;
#line 153 "../src/Dialogs/Project.vala"
	_tmp0_ = _data33_->entry;
#line 153 "../src/Dialogs/Project.vala"
	_tmp1_ = gee_map_entry_get_key (_tmp0_);
#line 153 "../src/Dialogs/Project.vala"
	_tmp2_ = _tmp1_;
#line 153 "../src/Dialogs/Project.vala"
	dialogs_project_set_color_selected (self, (const gchar*) _tmp2_);
#line 154 "../src/Dialogs/Project.vala"
	_tmp3_ = _data32_->progress;
#line 154 "../src/Dialogs/Project.vala"
	_tmp4_ = util_get_default ();
#line 154 "../src/Dialogs/Project.vala"
	_tmp5_ = _tmp4_;
#line 154 "../src/Dialogs/Project.vala"
	_tmp6_ = self->priv->_color_selected;
#line 154 "../src/Dialogs/Project.vala"
	_tmp7_ = util_get_color (_tmp5_, _tmp6_);
#line 154 "../src/Dialogs/Project.vala"
	_tmp8_ = _tmp7_;
#line 154 "../src/Dialogs/Project.vala"
	widgets_project_progress_set_progress_fill_color (_tmp3_, _tmp8_);
#line 154 "../src/Dialogs/Project.vala"
	_g_free0 (_tmp8_);
#line 154 "../src/Dialogs/Project.vala"
	_g_object_unref0 (_tmp5_);
#line 759 "Project.c"
}

static void
__dialogs_project_____lambda195__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                            gpointer self)
{
#line 152 "../src/Dialogs/Project.vala"
	_dialogs_project_____lambda195_ (self);
#line 768 "Project.c"
}

static gboolean
_dialogs_project___lambda196_ (Block32Data* _data32_)
{
	DialogsProject* self;
	ObjectsProject* _tmp0_;
	ProjectIconStyle _tmp1_;
	ProjectIconStyle _tmp2_;
	gboolean result = FALSE;
#line 236 "../src/Dialogs/Project.vala"
	self = _data32_->self;
#line 237 "../src/Dialogs/Project.vala"
	_tmp0_ = self->priv->_project;
#line 237 "../src/Dialogs/Project.vala"
	_tmp1_ = objects_project_get_icon_style (_tmp0_);
#line 237 "../src/Dialogs/Project.vala"
	_tmp2_ = _tmp1_;
#line 237 "../src/Dialogs/Project.vala"
	if (_tmp2_ == PROJECT_ICON_STYLE_PROGRESS) {
#line 789 "Project.c"
		GtkStack* _tmp3_;
		GraniteModeSwitch* _tmp4_;
#line 238 "../src/Dialogs/Project.vala"
		_tmp3_ = _data32_->preview_stack;
#line 238 "../src/Dialogs/Project.vala"
		gtk_stack_set_visible_child_name (_tmp3_, "progress");
#line 239 "../src/Dialogs/Project.vala"
		_tmp4_ = _data32_->iconstyle_switch;
#line 239 "../src/Dialogs/Project.vala"
		granite_mode_switch_set_active (_tmp4_, FALSE);
#line 800 "Project.c"
	} else {
		GtkStack* _tmp5_;
		GraniteModeSwitch* _tmp6_;
#line 241 "../src/Dialogs/Project.vala"
		_tmp5_ = _data32_->preview_stack;
#line 241 "../src/Dialogs/Project.vala"
		gtk_stack_set_visible_child_name (_tmp5_, "emoji");
#line 242 "../src/Dialogs/Project.vala"
		_tmp6_ = _data32_->iconstyle_switch;
#line 242 "../src/Dialogs/Project.vala"
		granite_mode_switch_set_active (_tmp6_, TRUE);
#line 812 "Project.c"
	}
#line 245 "../src/Dialogs/Project.vala"
	result = G_SOURCE_REMOVE;
#line 245 "../src/Dialogs/Project.vala"
	return result;
#line 818 "Project.c"
}

static gboolean
__dialogs_project___lambda196__gsource_func (gpointer self)
{
	gboolean result;
	result = _dialogs_project___lambda196_ (self);
#line 236 "../src/Dialogs/Project.vala"
	return result;
#line 828 "Project.c"
}

static void
_dialogs_project___lambda197_ (Block32Data* _data32_)
{
	DialogsProject* self;
	GtkStack* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 248 "../src/Dialogs/Project.vala"
	self = _data32_->self;
#line 249 "../src/Dialogs/Project.vala"
	_tmp0_ = _data32_->preview_stack;
#line 249 "../src/Dialogs/Project.vala"
	_tmp1_ = gtk_stack_get_visible_child_name (_tmp0_);
#line 249 "../src/Dialogs/Project.vala"
	_tmp2_ = _tmp1_;
#line 249 "../src/Dialogs/Project.vala"
	if (g_strcmp0 (_tmp2_, "emoji") == 0) {
#line 848 "Project.c"
		GtkEntry* _tmp3_;
		GtkEntry* _tmp4_;
#line 250 "../src/Dialogs/Project.vala"
		_tmp3_ = _data32_->emoji_entry;
#line 250 "../src/Dialogs/Project.vala"
		gtk_widget_grab_focus ((GtkWidget*) _tmp3_);
#line 251 "../src/Dialogs/Project.vala"
		_tmp4_ = _data32_->emoji_entry;
#line 251 "../src/Dialogs/Project.vala"
		g_signal_emit_by_name (_tmp4_, "insert-emoji");
#line 859 "Project.c"
	}
}

static void
__dialogs_project___lambda197__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
#line 248 "../src/Dialogs/Project.vala"
	_dialogs_project___lambda197_ (self);
#line 869 "Project.c"
}

static void
_dialogs_project___lambda198_ (Block32Data* _data32_)
{
	DialogsProject* self;
	GtkLabel* _tmp0_;
	GtkEntry* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 255 "../src/Dialogs/Project.vala"
	self = _data32_->self;
#line 256 "../src/Dialogs/Project.vala"
	_tmp0_ = _data32_->label;
#line 256 "../src/Dialogs/Project.vala"
	_tmp1_ = _data32_->emoji_entry;
#line 256 "../src/Dialogs/Project.vala"
	_tmp2_ = gtk_entry_get_text (_tmp1_);
#line 256 "../src/Dialogs/Project.vala"
	_tmp3_ = _tmp2_;
#line 256 "../src/Dialogs/Project.vala"
	gtk_label_set_label (_tmp0_, _tmp3_);
#line 892 "Project.c"
}

static void
__dialogs_project___lambda198__gtk_editable_changed (GtkEditable* _sender,
                                                     gpointer self)
{
#line 255 "../src/Dialogs/Project.vala"
	_dialogs_project___lambda198_ (self);
#line 901 "Project.c"
}

static void
_dialogs_project___lambda199_ (Block32Data* _data32_)
{
	DialogsProject* self;
	WidgetsLoadingButton* _tmp0_;
	Util* _tmp1_;
	Util* _tmp2_;
	GtkEntry* _tmp3_;
#line 259 "../src/Dialogs/Project.vala"
	self = _data32_->self;
#line 260 "../src/Dialogs/Project.vala"
	_tmp0_ = _data32_->submit_button;
#line 260 "../src/Dialogs/Project.vala"
	_tmp1_ = util_get_default ();
#line 260 "../src/Dialogs/Project.vala"
	_tmp2_ = _tmp1_;
#line 260 "../src/Dialogs/Project.vala"
	_tmp3_ = _data32_->name_entry;
#line 260 "../src/Dialogs/Project.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp0_, util_is_input_valid (_tmp2_, _tmp3_));
#line 260 "../src/Dialogs/Project.vala"
	_g_object_unref0 (_tmp2_);
#line 926 "Project.c"
}

static void
__dialogs_project___lambda199__gtk_editable_changed (GtkEditable* _sender,
                                                     gpointer self)
{
#line 259 "../src/Dialogs/Project.vala"
	_dialogs_project___lambda199_ (self);
#line 935 "Project.c"
}

static void
____lambda201_ (Block32Data* _data32_,
                GObject* obj,
                GAsyncResult* res)
{
	DialogsProject* self;
	ServicesTodoist* _tmp0_;
	WidgetsLoadingButton* _tmp1_;
#line 273 "../src/Dialogs/Project.vala"
	self = _data32_->self;
#line 273 "../src/Dialogs/Project.vala"
	g_return_if_fail (res != NULL);
#line 274 "../src/Dialogs/Project.vala"
	_tmp0_ = planner_todoist;
#line 274 "../src/Dialogs/Project.vala"
	services_todoist_update_finish (_tmp0_, res);
#line 275 "../src/Dialogs/Project.vala"
	_tmp1_ = _data32_->submit_button;
#line 275 "../src/Dialogs/Project.vala"
	widgets_loading_button_set_is_loading (_tmp1_, FALSE);
#line 276 "../src/Dialogs/Project.vala"
	dialogs_project_hide_destroy (self);
#line 960 "Project.c"
}

static void
_____lambda201__gasync_ready_callback (GObject* source_object,
                                       GAsyncResult* res,
                                       gpointer self)
{
#line 273 "../src/Dialogs/Project.vala"
	____lambda201_ (self, source_object, res);
#line 273 "../src/Dialogs/Project.vala"
	block32_data_unref (self);
#line 972 "Project.c"
}

static void
____lambda202_ (DialogsProject* self,
                GObject* obj,
                GAsyncResult* res)
{
	ObjectsProject* _tmp0_;
	ServicesTodoist* _tmp1_;
	gint64* _tmp2_;
	gint64* _tmp3_;
	ServicesDatabase* _tmp4_;
	ObjectsProject* _tmp5_;
	ServicesEventBus* _tmp6_;
	ObjectsProject* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
#line 292 "../src/Dialogs/Project.vala"
	g_return_if_fail (res != NULL);
#line 293 "../src/Dialogs/Project.vala"
	_tmp0_ = self->priv->_project;
#line 293 "../src/Dialogs/Project.vala"
	_tmp1_ = planner_todoist;
#line 293 "../src/Dialogs/Project.vala"
	_tmp2_ = services_todoist_add_finish (_tmp1_, res);
#line 293 "../src/Dialogs/Project.vala"
	_tmp3_ = _tmp2_;
#line 293 "../src/Dialogs/Project.vala"
	objects_base_object_set_id ((ObjectsBaseObject*) _tmp0_, *_tmp3_);
#line 293 "../src/Dialogs/Project.vala"
	_g_free0 (_tmp3_);
#line 294 "../src/Dialogs/Project.vala"
	_tmp4_ = planner_database;
#line 294 "../src/Dialogs/Project.vala"
	_tmp5_ = self->priv->_project;
#line 294 "../src/Dialogs/Project.vala"
	services_database_insert_project (_tmp4_, _tmp5_);
#line 295 "../src/Dialogs/Project.vala"
	_tmp6_ = planner_event_bus;
#line 295 "../src/Dialogs/Project.vala"
	_tmp7_ = self->priv->_project;
#line 295 "../src/Dialogs/Project.vala"
	_tmp8_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp7_);
#line 295 "../src/Dialogs/Project.vala"
	_tmp9_ = _tmp8_;
#line 295 "../src/Dialogs/Project.vala"
	g_signal_emit_by_name (_tmp6_, "pane-selected", PANE_TYPE_PROJECT, _tmp9_);
#line 296 "../src/Dialogs/Project.vala"
	dialogs_project_hide_destroy (self);
#line 1022 "Project.c"
}

static void
_____lambda202__gasync_ready_callback (GObject* source_object,
                                       GAsyncResult* res,
                                       gpointer self)
{
#line 292 "../src/Dialogs/Project.vala"
	____lambda202_ ((DialogsProject*) self, source_object, res);
#line 292 "../src/Dialogs/Project.vala"
	g_object_unref (self);
#line 1034 "Project.c"
}

static void
_dialogs_project___lambda200_ (Block32Data* _data32_)
{
	DialogsProject* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
#line 263 "../src/Dialogs/Project.vala"
	self = _data32_->self;
#line 264 "../src/Dialogs/Project.vala"
	_tmp0_ = dialogs_project_get_is_creating (self);
#line 264 "../src/Dialogs/Project.vala"
	_tmp1_ = _tmp0_;
#line 264 "../src/Dialogs/Project.vala"
	if (!_tmp1_) {
#line 1051 "Project.c"
		ObjectsProject* _tmp2_;
		const gchar* _tmp3_;
		ObjectsProject* _tmp4_;
		GtkEntry* _tmp5_;
		const gchar* _tmp6_;
		const gchar* _tmp7_;
		ProjectIconStyle _tmp8_ = 0;
		GraniteModeSwitch* _tmp9_;
		gboolean _tmp10_;
		gboolean _tmp11_;
		ObjectsProject* _tmp12_;
		ObjectsProject* _tmp13_;
		GtkEntry* _tmp14_;
		const gchar* _tmp15_;
		const gchar* _tmp16_;
		WidgetsLoadingButton* _tmp17_;
		ServicesDatabase* _tmp18_;
		ObjectsProject* _tmp19_;
		ObjectsProject* _tmp20_;
		gboolean _tmp21_;
		gboolean _tmp22_;
#line 265 "../src/Dialogs/Project.vala"
		_tmp2_ = self->priv->_project;
#line 265 "../src/Dialogs/Project.vala"
		_tmp3_ = self->priv->_color_selected;
#line 265 "../src/Dialogs/Project.vala"
		objects_project_set_color (_tmp2_, _tmp3_);
#line 266 "../src/Dialogs/Project.vala"
		_tmp4_ = self->priv->_project;
#line 266 "../src/Dialogs/Project.vala"
		_tmp5_ = _data32_->name_entry;
#line 266 "../src/Dialogs/Project.vala"
		_tmp6_ = gtk_entry_get_text (_tmp5_);
#line 266 "../src/Dialogs/Project.vala"
		_tmp7_ = _tmp6_;
#line 266 "../src/Dialogs/Project.vala"
		objects_project_set_name (_tmp4_, _tmp7_);
#line 267 "../src/Dialogs/Project.vala"
		_tmp9_ = _data32_->iconstyle_switch;
#line 267 "../src/Dialogs/Project.vala"
		_tmp10_ = granite_mode_switch_get_active (_tmp9_);
#line 267 "../src/Dialogs/Project.vala"
		_tmp11_ = _tmp10_;
#line 267 "../src/Dialogs/Project.vala"
		if (_tmp11_) {
#line 267 "../src/Dialogs/Project.vala"
			_tmp8_ = PROJECT_ICON_STYLE_EMOJI;
#line 1099 "Project.c"
		} else {
#line 267 "../src/Dialogs/Project.vala"
			_tmp8_ = PROJECT_ICON_STYLE_PROGRESS;
#line 1103 "Project.c"
		}
#line 267 "../src/Dialogs/Project.vala"
		_tmp12_ = self->priv->_project;
#line 267 "../src/Dialogs/Project.vala"
		objects_project_set_icon_style (_tmp12_, _tmp8_);
#line 268 "../src/Dialogs/Project.vala"
		_tmp13_ = self->priv->_project;
#line 268 "../src/Dialogs/Project.vala"
		_tmp14_ = _data32_->emoji_entry;
#line 268 "../src/Dialogs/Project.vala"
		_tmp15_ = gtk_entry_get_text (_tmp14_);
#line 268 "../src/Dialogs/Project.vala"
		_tmp16_ = _tmp15_;
#line 268 "../src/Dialogs/Project.vala"
		objects_project_set_emoji (_tmp13_, _tmp16_);
#line 270 "../src/Dialogs/Project.vala"
		_tmp17_ = _data32_->submit_button;
#line 270 "../src/Dialogs/Project.vala"
		widgets_loading_button_set_is_loading (_tmp17_, TRUE);
#line 271 "../src/Dialogs/Project.vala"
		_tmp18_ = planner_database;
#line 271 "../src/Dialogs/Project.vala"
		_tmp19_ = self->priv->_project;
#line 271 "../src/Dialogs/Project.vala"
		services_database_update_project (_tmp18_, _tmp19_);
#line 272 "../src/Dialogs/Project.vala"
		_tmp20_ = self->priv->_project;
#line 272 "../src/Dialogs/Project.vala"
		_tmp21_ = objects_project_get_todoist (_tmp20_);
#line 272 "../src/Dialogs/Project.vala"
		_tmp22_ = _tmp21_;
#line 272 "../src/Dialogs/Project.vala"
		if (_tmp22_) {
#line 1137 "Project.c"
			ServicesTodoist* _tmp23_;
			ObjectsProject* _tmp24_;
#line 273 "../src/Dialogs/Project.vala"
			_tmp23_ = planner_todoist;
#line 273 "../src/Dialogs/Project.vala"
			_tmp24_ = self->priv->_project;
#line 273 "../src/Dialogs/Project.vala"
			services_todoist_update (_tmp23_, (ObjectsBaseObject*) _tmp24_, _____lambda201__gasync_ready_callback, block32_data_ref (_data32_));
#line 1146 "Project.c"
		} else {
#line 279 "../src/Dialogs/Project.vala"
			dialogs_project_hide_destroy (self);
#line 1150 "Project.c"
		}
	} else {
		BackendType backend_type = 0;
		GSettings* _tmp25_;
		ObjectsProject* _tmp26_;
		const gchar* _tmp27_;
		ObjectsProject* _tmp28_;
		GtkEntry* _tmp29_;
		const gchar* _tmp30_;
		const gchar* _tmp31_;
		ProjectIconStyle _tmp32_ = 0;
		GraniteModeSwitch* _tmp33_;
		gboolean _tmp34_;
		gboolean _tmp35_;
		ObjectsProject* _tmp36_;
		ObjectsProject* _tmp37_;
		GtkEntry* _tmp38_;
		const gchar* _tmp39_;
		const gchar* _tmp40_;
		BackendType _tmp41_;
#line 282 "../src/Dialogs/Project.vala"
		_tmp25_ = planner_settings;
#line 282 "../src/Dialogs/Project.vala"
		backend_type = (BackendType) g_settings_get_enum (_tmp25_, "backend-type");
#line 284 "../src/Dialogs/Project.vala"
		_tmp26_ = self->priv->_project;
#line 284 "../src/Dialogs/Project.vala"
		_tmp27_ = self->priv->_color_selected;
#line 284 "../src/Dialogs/Project.vala"
		objects_project_set_color (_tmp26_, _tmp27_);
#line 285 "../src/Dialogs/Project.vala"
		_tmp28_ = self->priv->_project;
#line 285 "../src/Dialogs/Project.vala"
		_tmp29_ = _data32_->name_entry;
#line 285 "../src/Dialogs/Project.vala"
		_tmp30_ = gtk_entry_get_text (_tmp29_);
#line 285 "../src/Dialogs/Project.vala"
		_tmp31_ = _tmp30_;
#line 285 "../src/Dialogs/Project.vala"
		objects_project_set_name (_tmp28_, _tmp31_);
#line 286 "../src/Dialogs/Project.vala"
		_tmp33_ = _data32_->iconstyle_switch;
#line 286 "../src/Dialogs/Project.vala"
		_tmp34_ = granite_mode_switch_get_active (_tmp33_);
#line 286 "../src/Dialogs/Project.vala"
		_tmp35_ = _tmp34_;
#line 286 "../src/Dialogs/Project.vala"
		if (_tmp35_) {
#line 286 "../src/Dialogs/Project.vala"
			_tmp32_ = PROJECT_ICON_STYLE_EMOJI;
#line 1201 "Project.c"
		} else {
#line 286 "../src/Dialogs/Project.vala"
			_tmp32_ = PROJECT_ICON_STYLE_PROGRESS;
#line 1205 "Project.c"
		}
#line 286 "../src/Dialogs/Project.vala"
		_tmp36_ = self->priv->_project;
#line 286 "../src/Dialogs/Project.vala"
		objects_project_set_icon_style (_tmp36_, _tmp32_);
#line 287 "../src/Dialogs/Project.vala"
		_tmp37_ = self->priv->_project;
#line 287 "../src/Dialogs/Project.vala"
		_tmp38_ = _data32_->emoji_entry;
#line 287 "../src/Dialogs/Project.vala"
		_tmp39_ = gtk_entry_get_text (_tmp38_);
#line 287 "../src/Dialogs/Project.vala"
		_tmp40_ = _tmp39_;
#line 287 "../src/Dialogs/Project.vala"
		objects_project_set_emoji (_tmp37_, _tmp40_);
#line 289 "../src/Dialogs/Project.vala"
		_tmp41_ = backend_type;
#line 289 "../src/Dialogs/Project.vala"
		if (_tmp41_ == BACKEND_TYPE_TODOIST) {
#line 1225 "Project.c"
			ObjectsProject* _tmp42_;
			WidgetsLoadingButton* _tmp43_;
			ServicesTodoist* _tmp44_;
			ObjectsProject* _tmp45_;
#line 290 "../src/Dialogs/Project.vala"
			_tmp42_ = self->priv->_project;
#line 290 "../src/Dialogs/Project.vala"
			objects_project_set_todoist (_tmp42_, TRUE);
#line 291 "../src/Dialogs/Project.vala"
			_tmp43_ = _data32_->submit_button;
#line 291 "../src/Dialogs/Project.vala"
			widgets_loading_button_set_is_loading (_tmp43_, TRUE);
#line 292 "../src/Dialogs/Project.vala"
			_tmp44_ = planner_todoist;
#line 292 "../src/Dialogs/Project.vala"
			_tmp45_ = self->priv->_project;
#line 292 "../src/Dialogs/Project.vala"
			services_todoist_add (_tmp44_, (ObjectsBaseObject*) _tmp45_, _____lambda202__gasync_ready_callback, g_object_ref (self));
#line 1244 "Project.c"
		} else {
			BackendType _tmp46_;
#line 298 "../src/Dialogs/Project.vala"
			_tmp46_ = backend_type;
#line 298 "../src/Dialogs/Project.vala"
			if (_tmp46_ == BACKEND_TYPE_LOCAL) {
#line 1251 "Project.c"
				ObjectsProject* _tmp47_;
				Util* _tmp48_;
				Util* _tmp49_;
				ServicesDatabase* _tmp50_;
				ObjectsProject* _tmp51_;
				ServicesEventBus* _tmp52_;
				ObjectsProject* _tmp53_;
				const gchar* _tmp54_;
				const gchar* _tmp55_;
#line 299 "../src/Dialogs/Project.vala"
				_tmp47_ = self->priv->_project;
#line 299 "../src/Dialogs/Project.vala"
				_tmp48_ = util_get_default ();
#line 299 "../src/Dialogs/Project.vala"
				_tmp49_ = _tmp48_;
#line 299 "../src/Dialogs/Project.vala"
				objects_base_object_set_id ((ObjectsBaseObject*) _tmp47_, util_generate_id (_tmp49_, 10));
#line 299 "../src/Dialogs/Project.vala"
				_g_object_unref0 (_tmp49_);
#line 300 "../src/Dialogs/Project.vala"
				_tmp50_ = planner_database;
#line 300 "../src/Dialogs/Project.vala"
				_tmp51_ = self->priv->_project;
#line 300 "../src/Dialogs/Project.vala"
				services_database_insert_project (_tmp50_, _tmp51_);
#line 301 "../src/Dialogs/Project.vala"
				_tmp52_ = planner_event_bus;
#line 301 "../src/Dialogs/Project.vala"
				_tmp53_ = self->priv->_project;
#line 301 "../src/Dialogs/Project.vala"
				_tmp54_ = objects_base_object_get_id_string ((ObjectsBaseObject*) _tmp53_);
#line 301 "../src/Dialogs/Project.vala"
				_tmp55_ = _tmp54_;
#line 301 "../src/Dialogs/Project.vala"
				g_signal_emit_by_name (_tmp52_, "pane-selected", PANE_TYPE_PROJECT, _tmp55_);
#line 302 "../src/Dialogs/Project.vala"
				dialogs_project_hide_destroy (self);
#line 1289 "Project.c"
			}
		}
	}
}

static void
__dialogs_project___lambda200__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
#line 263 "../src/Dialogs/Project.vala"
	_dialogs_project___lambda200_ (self);
#line 1301 "Project.c"
}

static void
_dialogs_project___lambda203_ (DialogsProject* self)
{
#line 308 "../src/Dialogs/Project.vala"
	dialogs_project_hide_destroy (self);
#line 1309 "Project.c"
}

static void
__dialogs_project___lambda203__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
#line 307 "../src/Dialogs/Project.vala"
	_dialogs_project___lambda203_ ((DialogsProject*) self);
#line 1318 "Project.c"
}

static void
_dialogs_project___lambda204_ (Block32Data* _data32_)
{
	DialogsProject* self;
	const gchar* _tmp0_ = NULL;
	GraniteModeSwitch* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	GtkStack* _tmp4_;
#line 311 "../src/Dialogs/Project.vala"
	self = _data32_->self;
#line 312 "../src/Dialogs/Project.vala"
	_tmp1_ = _data32_->iconstyle_switch;
#line 312 "../src/Dialogs/Project.vala"
	_tmp2_ = granite_mode_switch_get_active (_tmp1_);
#line 312 "../src/Dialogs/Project.vala"
	_tmp3_ = _tmp2_;
#line 312 "../src/Dialogs/Project.vala"
	if (_tmp3_) {
#line 312 "../src/Dialogs/Project.vala"
		_tmp0_ = "emoji";
#line 1342 "Project.c"
	} else {
#line 312 "../src/Dialogs/Project.vala"
		_tmp0_ = "progress";
#line 1346 "Project.c"
	}
#line 312 "../src/Dialogs/Project.vala"
	_tmp4_ = _data32_->preview_stack;
#line 312 "../src/Dialogs/Project.vala"
	gtk_stack_set_visible_child_name (_tmp4_, _tmp0_);
#line 1352 "Project.c"
}

static void
__dialogs_project___lambda204__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self)
{
#line 311 "../src/Dialogs/Project.vala"
	_dialogs_project___lambda204_ (self);
#line 1362 "Project.c"
}

static GObject *
dialogs_project_constructor (GType type,
                             guint n_construct_properties,
                             GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	DialogsProject * self;
	Block32Data* _data32_;
	GtkStyleContext* dialog_context = NULL;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	GtkStyleContext* _tmp2_;
	GtkStyleContext* _tmp3_;
	Planner* _tmp4_;
	Planner* _tmp5_;
	MainWindow* _tmp6_;
	HdyHeaderBar* headerbar = NULL;
	HdyHeaderBar* _tmp7_;
	HdyHeaderBar* _tmp8_;
	HdyHeaderBar* _tmp9_;
	HdyHeaderBar* _tmp10_;
	GtkStyleContext* _tmp11_;
	GtkEntry* _tmp12_ = NULL;
	Util* _tmp13_;
	Util* _tmp14_;
	ObjectsProject* _tmp15_;
	const gchar* _tmp16_;
	const gchar* _tmp17_;
	gchar* _tmp18_;
	WidgetsProjectProgress* _tmp19_ = NULL;
	WidgetsProjectProgress* _tmp20_;
	ObjectsProject* _tmp21_;
	const gchar* _tmp22_;
	const gchar* _tmp23_;
	GtkLabel* _tmp24_;
	GtkStack* _tmp25_ = NULL;
	GtkStack* _tmp26_;
	WidgetsProjectProgress* _tmp27_;
	GtkStack* _tmp28_;
	GtkLabel* _tmp29_;
	GtkButton* preview_button = NULL;
	GtkButton* _tmp30_ = NULL;
	GtkButton* _tmp31_;
	GtkStack* _tmp32_;
	GtkButton* _tmp33_;
	GtkStyleContext* _tmp34_;
	GtkButton* _tmp35_;
	GtkStyleContext* _tmp36_;
	GtkStack* picker_stack = NULL;
	GtkStack* _tmp37_ = NULL;
	GtkStack* _tmp38_;
	GtkButton* _tmp39_;
	GtkStack* _tmp40_;
	GtkEntry* _tmp41_;
	GraniteModeSwitch* _tmp42_ = NULL;
	GraniteModeSwitch* _tmp43_;
	GraniteModeSwitch* _tmp44_;
	gchar* _tmp45_;
	GtkEntry* _tmp46_ = NULL;
	GtkEntry* _tmp47_;
	ObjectsProject* _tmp48_;
	const gchar* _tmp49_;
	const gchar* _tmp50_;
	GtkEntry* _tmp51_;
	GtkStyleContext* _tmp52_;
	GtkEntry* _tmp53_;
	GtkStyleContext* _tmp54_;
	GtkRadioButton* radio = NULL;
	GtkRadioButton* _tmp55_;
	GeeHashMap* colors_hashmap = NULL;
	GeeHashMap* _tmp56_;
	GtkFlowBox* flowbox = NULL;
	GtkFlowBox* _tmp57_ = NULL;
	GtkStyleContext* flowbox_context = NULL;
	GtkFlowBox* _tmp58_;
	GtkStyleContext* _tmp59_;
	GtkStyleContext* _tmp60_;
	ObjectsProject* _tmp111_;
	const gchar* _tmp112_;
	const gchar* _tmp113_;
	GeeHashMap* _tmp114_;
	const gchar* _tmp115_;
	GtkGrid* flowbox_grid = NULL;
	GtkGrid* _tmp120_ = NULL;
	GtkGrid* _tmp121_;
	GtkFlowBox* _tmp122_;
	GtkStyleContext* flowbox_grid_context = NULL;
	GtkGrid* _tmp123_;
	GtkStyleContext* _tmp124_;
	GtkStyleContext* _tmp125_;
	GtkRadioButton* list_radio = NULL;
	GtkRadioButton* _tmp126_;
	GtkRadioButton* _tmp127_;
	GtkImage* _tmp128_;
	GtkImage* _tmp129_;
	GtkRadioButton* _tmp130_;
	GtkRadioButton* board_radio = NULL;
	GtkRadioButton* _tmp131_;
	GtkRadioButton* _tmp132_;
	GtkRadioButton* _tmp133_;
	GtkImage* _tmp134_;
	GtkImage* _tmp135_;
	GtkRadioButton* _tmp136_;
	GtkGrid* radio_grid = NULL;
	GtkGrid* _tmp137_ = NULL;
	GtkGrid* _tmp138_;
	GtkRadioButton* _tmp139_;
	GtkGrid* _tmp140_;
	GtkRadioButton* _tmp141_;
	GtkGrid* main_radio_grid = NULL;
	GtkGrid* _tmp142_ = NULL;
	GtkGrid* _tmp143_;
	GtkGrid* _tmp144_;
	GtkStyleContext* main_radio_grid_context = NULL;
	GtkGrid* _tmp145_;
	GtkStyleContext* _tmp146_;
	GtkStyleContext* _tmp147_;
	const gchar* _tmp148_ = NULL;
	gboolean _tmp149_;
	gboolean _tmp150_;
	gboolean _tmp151_;
	gboolean _tmp152_;
	WidgetsLoadingButton* _tmp153_ = NULL;
	WidgetsLoadingButton* _tmp154_;
	GtkStyleContext* _tmp155_;
	WidgetsLoadingButton* _tmp156_;
	GtkStyleContext* _tmp157_;
	GtkButton* cancel_button = NULL;
	GtkButton* _tmp158_;
	GtkButton* _tmp159_;
	GtkStyleContext* _tmp160_;
	GtkGrid* submit_cancel_grid = NULL;
	GtkGrid* _tmp161_ = NULL;
	GtkGrid* _tmp162_;
	GtkButton* _tmp163_;
	GtkGrid* _tmp164_;
	WidgetsLoadingButton* _tmp165_;
	GtkGrid* content_grid = NULL;
	GtkGrid* _tmp166_ = NULL;
	GtkGrid* _tmp167_;
	HdyHeaderBar* _tmp168_;
	GtkGrid* _tmp169_;
	GtkStack* _tmp170_;
	GtkGrid* _tmp171_;
	GraniteModeSwitch* _tmp172_;
	GtkGrid* _tmp173_;
	GtkEntry* _tmp174_;
	GtkGrid* _tmp175_;
	GtkGrid* _tmp176_;
	GtkGrid* _tmp177_;
	GtkGrid* _tmp178_;
	GtkGrid* _tmp179_;
	GtkGrid* _tmp180_;
	GtkGrid* _tmp181_;
	GtkStack* _tmp182_;
	guint _tmp183_;
	guint _tmp184_;
	GtkButton* _tmp185_;
	GtkEntry* _tmp186_;
	GtkEntry* _tmp187_;
	WidgetsLoadingButton* _tmp188_;
	GtkButton* _tmp189_;
	GraniteModeSwitch* _tmp190_;
#line 57 "../src/Dialogs/Project.vala"
	parent_class = G_OBJECT_CLASS (dialogs_project_parent_class);
#line 57 "../src/Dialogs/Project.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 57 "../src/Dialogs/Project.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_TYPE_PROJECT, DialogsProject);
#line 57 "../src/Dialogs/Project.vala"
	_data32_ = g_slice_new0 (Block32Data);
#line 57 "../src/Dialogs/Project.vala"
	_data32_->_ref_count_ = 1;
#line 57 "../src/Dialogs/Project.vala"
	_data32_->self = g_object_ref (self);
#line 58 "../src/Dialogs/Project.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 58 "../src/Dialogs/Project.vala"
	dialog_context = _tmp0_;
#line 59 "../src/Dialogs/Project.vala"
	_tmp1_ = dialog_context;
#line 59 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp1_, GTK_STYLE_CLASS_VIEW);
#line 60 "../src/Dialogs/Project.vala"
	_tmp2_ = dialog_context;
#line 60 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp2_, "planner-dialog");
#line 61 "../src/Dialogs/Project.vala"
	_tmp3_ = dialog_context;
#line 61 "../src/Dialogs/Project.vala"
	gtk_style_context_remove_class (_tmp3_, "background");
#line 63 "../src/Dialogs/Project.vala"
	_tmp4_ = planner_get_instance ();
#line 63 "../src/Dialogs/Project.vala"
	_tmp5_ = _tmp4_;
#line 63 "../src/Dialogs/Project.vala"
	_tmp6_ = _tmp5_->main_window;
#line 63 "../src/Dialogs/Project.vala"
	gtk_window_set_transient_for ((GtkWindow*) self, (GtkWindow*) _tmp6_);
#line 65 "../src/Dialogs/Project.vala"
	_tmp7_ = (HdyHeaderBar*) hdy_header_bar_new ();
#line 65 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp7_);
#line 65 "../src/Dialogs/Project.vala"
	headerbar = _tmp7_;
#line 66 "../src/Dialogs/Project.vala"
	_tmp8_ = headerbar;
#line 66 "../src/Dialogs/Project.vala"
	hdy_header_bar_set_has_subtitle (_tmp8_, FALSE);
#line 67 "../src/Dialogs/Project.vala"
	_tmp9_ = headerbar;
#line 67 "../src/Dialogs/Project.vala"
	hdy_header_bar_set_show_close_button (_tmp9_, FALSE);
#line 68 "../src/Dialogs/Project.vala"
	_tmp10_ = headerbar;
#line 68 "../src/Dialogs/Project.vala"
	_tmp11_ = gtk_widget_get_style_context ((GtkWidget*) _tmp10_);
#line 68 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp11_, GTK_STYLE_CLASS_FLAT);
#line 70 "../src/Dialogs/Project.vala"
	_tmp12_ = (GtkEntry*) gtk_entry_new ();
#line 70 "../src/Dialogs/Project.vala"
	gtk_entry_set_overwrite_mode (_tmp12_, TRUE);
#line 70 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp12_);
#line 70 "../src/Dialogs/Project.vala"
	_data32_->emoji_entry = _tmp12_;
#line 74 "../src/Dialogs/Project.vala"
	_tmp13_ = util_get_default ();
#line 74 "../src/Dialogs/Project.vala"
	_tmp14_ = _tmp13_;
#line 74 "../src/Dialogs/Project.vala"
	_tmp15_ = self->priv->_project;
#line 74 "../src/Dialogs/Project.vala"
	_tmp16_ = objects_project_get_color (_tmp15_);
#line 74 "../src/Dialogs/Project.vala"
	_tmp17_ = _tmp16_;
#line 74 "../src/Dialogs/Project.vala"
	_tmp18_ = util_get_color (_tmp14_, _tmp17_);
#line 74 "../src/Dialogs/Project.vala"
	_tmp19_ = widgets_project_progress_new (48);
#line 74 "../src/Dialogs/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp19_, GTK_ALIGN_CENTER);
#line 74 "../src/Dialogs/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp19_, GTK_ALIGN_CENTER);
#line 74 "../src/Dialogs/Project.vala"
	widgets_project_progress_set_progress_fill_color (_tmp19_, _tmp18_);
#line 74 "../src/Dialogs/Project.vala"
	_g_free0 (_tmp18_);
#line 74 "../src/Dialogs/Project.vala"
	widgets_project_progress_set_percentage (_tmp19_, 0.65);
#line 74 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp19_);
#line 74 "../src/Dialogs/Project.vala"
	_tmp20_ = _tmp19_;
#line 74 "../src/Dialogs/Project.vala"
	_g_object_unref0 (_tmp14_);
#line 74 "../src/Dialogs/Project.vala"
	_data32_->progress = _tmp20_;
#line 81 "../src/Dialogs/Project.vala"
	_tmp21_ = self->priv->_project;
#line 81 "../src/Dialogs/Project.vala"
	_tmp22_ = objects_project_get_emoji (_tmp21_);
#line 81 "../src/Dialogs/Project.vala"
	_tmp23_ = _tmp22_;
#line 81 "../src/Dialogs/Project.vala"
	_tmp24_ = (GtkLabel*) gtk_label_new (_tmp23_);
#line 81 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp24_);
#line 81 "../src/Dialogs/Project.vala"
	_data32_->label = _tmp24_;
#line 83 "../src/Dialogs/Project.vala"
	_tmp25_ = (GtkStack*) gtk_stack_new ();
#line 83 "../src/Dialogs/Project.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp25_, TRUE);
#line 83 "../src/Dialogs/Project.vala"
	gtk_stack_set_homogeneous (_tmp25_, FALSE);
#line 83 "../src/Dialogs/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp25_, GTK_ALIGN_CENTER);
#line 83 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp25_);
#line 83 "../src/Dialogs/Project.vala"
	_data32_->preview_stack = _tmp25_;
#line 89 "../src/Dialogs/Project.vala"
	_tmp26_ = _data32_->preview_stack;
#line 89 "../src/Dialogs/Project.vala"
	_tmp27_ = _data32_->progress;
#line 89 "../src/Dialogs/Project.vala"
	gtk_stack_add_named (_tmp26_, (GtkWidget*) _tmp27_, "progress");
#line 90 "../src/Dialogs/Project.vala"
	_tmp28_ = _data32_->preview_stack;
#line 90 "../src/Dialogs/Project.vala"
	_tmp29_ = _data32_->label;
#line 90 "../src/Dialogs/Project.vala"
	gtk_stack_add_named (_tmp28_, (GtkWidget*) _tmp29_, "emoji");
#line 92 "../src/Dialogs/Project.vala"
	_tmp30_ = (GtkButton*) gtk_button_new ();
#line 92 "../src/Dialogs/Project.vala"
	g_object_set ((GtkWidget*) _tmp30_, "height-request", 64, NULL);
#line 92 "../src/Dialogs/Project.vala"
	g_object_set ((GtkWidget*) _tmp30_, "width-request", 64, NULL);
#line 92 "../src/Dialogs/Project.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp30_, TRUE);
#line 92 "../src/Dialogs/Project.vala"
	g_object_set ((GtkWidget*) _tmp30_, "margin", 12, NULL);
#line 92 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp30_);
#line 92 "../src/Dialogs/Project.vala"
	preview_button = _tmp30_;
#line 98 "../src/Dialogs/Project.vala"
	_tmp31_ = preview_button;
#line 98 "../src/Dialogs/Project.vala"
	_tmp32_ = _data32_->preview_stack;
#line 98 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp31_, (GtkWidget*) _tmp32_);
#line 99 "../src/Dialogs/Project.vala"
	_tmp33_ = preview_button;
#line 99 "../src/Dialogs/Project.vala"
	_tmp34_ = gtk_widget_get_style_context ((GtkWidget*) _tmp33_);
#line 99 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp34_, "h1");
#line 100 "../src/Dialogs/Project.vala"
	_tmp35_ = preview_button;
#line 100 "../src/Dialogs/Project.vala"
	_tmp36_ = gtk_widget_get_style_context ((GtkWidget*) _tmp35_);
#line 100 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp36_, "emoji-button");
#line 102 "../src/Dialogs/Project.vala"
	_tmp37_ = (GtkStack*) gtk_stack_new ();
#line 102 "../src/Dialogs/Project.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp37_, TRUE);
#line 102 "../src/Dialogs/Project.vala"
	gtk_stack_set_homogeneous (_tmp37_, FALSE);
#line 102 "../src/Dialogs/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp37_, GTK_ALIGN_CENTER);
#line 102 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp37_);
#line 102 "../src/Dialogs/Project.vala"
	picker_stack = _tmp37_;
#line 108 "../src/Dialogs/Project.vala"
	_tmp38_ = picker_stack;
#line 108 "../src/Dialogs/Project.vala"
	_tmp39_ = preview_button;
#line 108 "../src/Dialogs/Project.vala"
	gtk_stack_add_named (_tmp38_, (GtkWidget*) _tmp39_, "emoji-button");
#line 109 "../src/Dialogs/Project.vala"
	_tmp40_ = picker_stack;
#line 109 "../src/Dialogs/Project.vala"
	_tmp41_ = _data32_->emoji_entry;
#line 109 "../src/Dialogs/Project.vala"
	gtk_stack_add_named (_tmp40_, (GtkWidget*) _tmp41_, "emoji-entry");
#line 111 "../src/Dialogs/Project.vala"
	_tmp42_ = granite_mode_switch_new_from_icon_name ("media-record-symbolic", "face-smile-symbolic");
#line 111 "../src/Dialogs/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp42_, GTK_ALIGN_CENTER);
#line 111 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp42_);
#line 111 "../src/Dialogs/Project.vala"
	_data32_->iconstyle_switch = _tmp42_;
#line 114 "../src/Dialogs/Project.vala"
	_tmp43_ = _data32_->iconstyle_switch;
#line 114 "../src/Dialogs/Project.vala"
	granite_mode_switch_set_primary_icon_tooltip_text (_tmp43_, _ ("Progress"));
#line 115 "../src/Dialogs/Project.vala"
	_tmp44_ = _data32_->iconstyle_switch;
#line 115 "../src/Dialogs/Project.vala"
	granite_mode_switch_set_secondary_icon_tooltip_text (_tmp44_, _ ("Emoji"));
#line 117 "../src/Dialogs/Project.vala"
	_tmp45_ = g_strdup (_ ("Project name"));
#line 117 "../src/Dialogs/Project.vala"
	_tmp46_ = (GtkEntry*) gtk_entry_new ();
#line 117 "../src/Dialogs/Project.vala"
	g_object_set ((GtkWidget*) _tmp46_, "margin", 12, NULL);
#line 117 "../src/Dialogs/Project.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp46_, 24);
#line 117 "../src/Dialogs/Project.vala"
	gtk_entry_set_placeholder_text (_tmp46_, _tmp45_);
#line 117 "../src/Dialogs/Project.vala"
	_g_free0 (_tmp45_);
#line 117 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp46_);
#line 117 "../src/Dialogs/Project.vala"
	_data32_->name_entry = _tmp46_;
#line 122 "../src/Dialogs/Project.vala"
	_tmp47_ = _data32_->name_entry;
#line 122 "../src/Dialogs/Project.vala"
	_tmp48_ = self->priv->_project;
#line 122 "../src/Dialogs/Project.vala"
	_tmp49_ = objects_project_get_name (_tmp48_);
#line 122 "../src/Dialogs/Project.vala"
	_tmp50_ = _tmp49_;
#line 122 "../src/Dialogs/Project.vala"
	gtk_entry_set_text (_tmp47_, _tmp50_);
#line 123 "../src/Dialogs/Project.vala"
	_tmp51_ = _data32_->name_entry;
#line 123 "../src/Dialogs/Project.vala"
	_tmp52_ = gtk_widget_get_style_context ((GtkWidget*) _tmp51_);
#line 123 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp52_, "border-radius-6");
#line 124 "../src/Dialogs/Project.vala"
	_tmp53_ = _data32_->name_entry;
#line 124 "../src/Dialogs/Project.vala"
	_tmp54_ = gtk_widget_get_style_context ((GtkWidget*) _tmp53_);
#line 124 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp54_, "dialog-entry");
#line 126 "../src/Dialogs/Project.vala"
	_tmp55_ = (GtkRadioButton*) gtk_radio_button_new (NULL);
#line 126 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp55_);
#line 126 "../src/Dialogs/Project.vala"
	radio = _tmp55_;
#line 127 "../src/Dialogs/Project.vala"
	_tmp56_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, gtk_radio_button_get_type (), (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 127 "../src/Dialogs/Project.vala"
	colors_hashmap = _tmp56_;
#line 129 "../src/Dialogs/Project.vala"
	_tmp57_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 129 "../src/Dialogs/Project.vala"
	gtk_flow_box_set_column_spacing (_tmp57_, (guint) 12);
#line 129 "../src/Dialogs/Project.vala"
	gtk_flow_box_set_row_spacing (_tmp57_, (guint) 12);
#line 129 "../src/Dialogs/Project.vala"
	gtk_container_set_border_width ((GtkContainer*) _tmp57_, (guint) 6);
#line 129 "../src/Dialogs/Project.vala"
	gtk_flow_box_set_max_children_per_line (_tmp57_, (guint) 10);
#line 129 "../src/Dialogs/Project.vala"
	gtk_flow_box_set_min_children_per_line (_tmp57_, (guint) 8);
#line 129 "../src/Dialogs/Project.vala"
	g_object_set ((GtkWidget*) _tmp57_, "expand", TRUE, NULL);
#line 129 "../src/Dialogs/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp57_, GTK_ALIGN_START);
#line 129 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp57_);
#line 129 "../src/Dialogs/Project.vala"
	flowbox = _tmp57_;
#line 139 "../src/Dialogs/Project.vala"
	_tmp58_ = flowbox;
#line 139 "../src/Dialogs/Project.vala"
	_tmp59_ = gtk_widget_get_style_context ((GtkWidget*) _tmp58_);
#line 139 "../src/Dialogs/Project.vala"
	flowbox_context = _tmp59_;
#line 140 "../src/Dialogs/Project.vala"
	_tmp60_ = flowbox_context;
#line 140 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp60_, "flowbox-color");
#line 1811 "Project.c"
	{
		GeeIterator* _entry_it = NULL;
		Util* _tmp61_;
		Util* _tmp62_;
		GeeHashMap* _tmp63_;
		GeeHashMap* _tmp64_;
		GeeSet* _tmp65_;
		GeeSet* _tmp66_;
		GeeSet* _tmp67_;
		GeeIterator* _tmp68_;
		GeeIterator* _tmp69_;
#line 142 "../src/Dialogs/Project.vala"
		_tmp61_ = util_get_default ();
#line 142 "../src/Dialogs/Project.vala"
		_tmp62_ = _tmp61_;
#line 142 "../src/Dialogs/Project.vala"
		_tmp63_ = util_get_colors (_tmp62_);
#line 142 "../src/Dialogs/Project.vala"
		_tmp64_ = _tmp63_;
#line 142 "../src/Dialogs/Project.vala"
		_tmp65_ = gee_abstract_map_get_entries ((GeeAbstractMap*) _tmp64_);
#line 142 "../src/Dialogs/Project.vala"
		_tmp66_ = _tmp65_;
#line 142 "../src/Dialogs/Project.vala"
		_tmp67_ = _tmp66_;
#line 142 "../src/Dialogs/Project.vala"
		_tmp68_ = gee_iterable_iterator ((GeeIterable*) _tmp67_);
#line 142 "../src/Dialogs/Project.vala"
		_tmp69_ = _tmp68_;
#line 142 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_tmp67_);
#line 142 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_tmp64_);
#line 142 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_tmp62_);
#line 142 "../src/Dialogs/Project.vala"
		_entry_it = _tmp69_;
#line 142 "../src/Dialogs/Project.vala"
		while (TRUE) {
#line 1851 "Project.c"
			Block33Data* _data33_;
			GeeIterator* _tmp70_;
			GeeIterator* _tmp71_;
			gpointer _tmp72_;
			GtkRadioButton* color_radio = NULL;
			GtkRadioButton* _tmp73_;
			GSList* _tmp74_;
			GtkRadioButton* _tmp75_;
			GtkRadioButton* _tmp76_;
			GtkRadioButton* _tmp77_;
			GtkRadioButton* _tmp78_;
			Util* _tmp79_;
			Util* _tmp80_;
			GeeMapEntry* _tmp81_;
			gconstpointer _tmp82_;
			gconstpointer _tmp83_;
			gchar* _tmp84_;
			gchar* _tmp85_;
			GtkRadioButton* _tmp86_;
			GtkStyleContext* _tmp87_;
			Util* _tmp88_;
			Util* _tmp89_;
			Util* _tmp90_;
			Util* _tmp91_;
			GeeMapEntry* _tmp92_;
			gconstpointer _tmp93_;
			gconstpointer _tmp94_;
			gchar* _tmp95_;
			gchar* _tmp96_;
			GtkRadioButton* _tmp97_;
			GeeHashMap* _tmp98_;
			GeeMapEntry* _tmp99_;
			gconstpointer _tmp100_;
			gconstpointer _tmp101_;
			GtkRadioButton* _tmp102_;
			GtkFlowBox* _tmp103_;
			GeeHashMap* _tmp104_;
			GeeMapEntry* _tmp105_;
			gconstpointer _tmp106_;
			gconstpointer _tmp107_;
			gpointer _tmp108_;
			GtkRadioButton* _tmp109_;
			GtkRadioButton* _tmp110_;
#line 142 "../src/Dialogs/Project.vala"
			_data33_ = g_slice_new0 (Block33Data);
#line 142 "../src/Dialogs/Project.vala"
			_data33_->_ref_count_ = 1;
#line 142 "../src/Dialogs/Project.vala"
			_data33_->_data32_ = block32_data_ref (_data32_);
#line 142 "../src/Dialogs/Project.vala"
			_tmp70_ = _entry_it;
#line 142 "../src/Dialogs/Project.vala"
			if (!gee_iterator_next (_tmp70_)) {
#line 142 "../src/Dialogs/Project.vala"
				block33_data_unref (_data33_);
#line 142 "../src/Dialogs/Project.vala"
				_data33_ = NULL;
#line 142 "../src/Dialogs/Project.vala"
				break;
#line 1911 "Project.c"
			}
#line 142 "../src/Dialogs/Project.vala"
			_tmp71_ = _entry_it;
#line 142 "../src/Dialogs/Project.vala"
			_tmp72_ = gee_iterator_get (_tmp71_);
#line 142 "../src/Dialogs/Project.vala"
			_data33_->entry = (GeeMapEntry*) _tmp72_;
#line 143 "../src/Dialogs/Project.vala"
			_tmp73_ = radio;
#line 143 "../src/Dialogs/Project.vala"
			_tmp74_ = gtk_radio_button_get_group (_tmp73_);
#line 143 "../src/Dialogs/Project.vala"
			_tmp75_ = (GtkRadioButton*) gtk_radio_button_new (_tmp74_);
#line 143 "../src/Dialogs/Project.vala"
			g_object_ref_sink (_tmp75_);
#line 143 "../src/Dialogs/Project.vala"
			color_radio = _tmp75_;
#line 144 "../src/Dialogs/Project.vala"
			_tmp76_ = color_radio;
#line 144 "../src/Dialogs/Project.vala"
			gtk_widget_set_valign ((GtkWidget*) _tmp76_, GTK_ALIGN_CENTER);
#line 145 "../src/Dialogs/Project.vala"
			_tmp77_ = color_radio;
#line 145 "../src/Dialogs/Project.vala"
			gtk_widget_set_halign ((GtkWidget*) _tmp77_, GTK_ALIGN_CENTER);
#line 146 "../src/Dialogs/Project.vala"
			_tmp78_ = color_radio;
#line 146 "../src/Dialogs/Project.vala"
			_tmp79_ = util_get_default ();
#line 146 "../src/Dialogs/Project.vala"
			_tmp80_ = _tmp79_;
#line 146 "../src/Dialogs/Project.vala"
			_tmp81_ = _data33_->entry;
#line 146 "../src/Dialogs/Project.vala"
			_tmp82_ = gee_map_entry_get_key (_tmp81_);
#line 146 "../src/Dialogs/Project.vala"
			_tmp83_ = _tmp82_;
#line 146 "../src/Dialogs/Project.vala"
			_tmp84_ = util_get_color_name (_tmp80_, (const gchar*) _tmp83_);
#line 146 "../src/Dialogs/Project.vala"
			_tmp85_ = _tmp84_;
#line 146 "../src/Dialogs/Project.vala"
			gtk_widget_set_tooltip_text ((GtkWidget*) _tmp78_, _tmp85_);
#line 146 "../src/Dialogs/Project.vala"
			_g_free0 (_tmp85_);
#line 146 "../src/Dialogs/Project.vala"
			_g_object_unref0 (_tmp80_);
#line 147 "../src/Dialogs/Project.vala"
			_tmp86_ = color_radio;
#line 147 "../src/Dialogs/Project.vala"
			_tmp87_ = gtk_widget_get_style_context ((GtkWidget*) _tmp86_);
#line 147 "../src/Dialogs/Project.vala"
			gtk_style_context_add_class (_tmp87_, "color-radio");
#line 148 "../src/Dialogs/Project.vala"
			_tmp88_ = util_get_default ();
#line 148 "../src/Dialogs/Project.vala"
			_tmp89_ = _tmp88_;
#line 148 "../src/Dialogs/Project.vala"
			_tmp90_ = util_get_default ();
#line 148 "../src/Dialogs/Project.vala"
			_tmp91_ = _tmp90_;
#line 148 "../src/Dialogs/Project.vala"
			_tmp92_ = _data33_->entry;
#line 148 "../src/Dialogs/Project.vala"
			_tmp93_ = gee_map_entry_get_key (_tmp92_);
#line 148 "../src/Dialogs/Project.vala"
			_tmp94_ = _tmp93_;
#line 148 "../src/Dialogs/Project.vala"
			_tmp95_ = util_get_color (_tmp91_, (const gchar*) _tmp94_);
#line 148 "../src/Dialogs/Project.vala"
			_tmp96_ = _tmp95_;
#line 148 "../src/Dialogs/Project.vala"
			_tmp97_ = color_radio;
#line 148 "../src/Dialogs/Project.vala"
			util_set_widget_color (_tmp89_, _tmp96_, (GtkWidget*) _tmp97_);
#line 148 "../src/Dialogs/Project.vala"
			_g_free0 (_tmp96_);
#line 148 "../src/Dialogs/Project.vala"
			_g_object_unref0 (_tmp91_);
#line 148 "../src/Dialogs/Project.vala"
			_g_object_unref0 (_tmp89_);
#line 149 "../src/Dialogs/Project.vala"
			_tmp98_ = colors_hashmap;
#line 149 "../src/Dialogs/Project.vala"
			_tmp99_ = _data33_->entry;
#line 149 "../src/Dialogs/Project.vala"
			_tmp100_ = gee_map_entry_get_key (_tmp99_);
#line 149 "../src/Dialogs/Project.vala"
			_tmp101_ = _tmp100_;
#line 149 "../src/Dialogs/Project.vala"
			_tmp102_ = color_radio;
#line 149 "../src/Dialogs/Project.vala"
			gee_abstract_map_set ((GeeAbstractMap*) _tmp98_, (const gchar*) _tmp101_, _tmp102_);
#line 150 "../src/Dialogs/Project.vala"
			_tmp103_ = flowbox;
#line 150 "../src/Dialogs/Project.vala"
			_tmp104_ = colors_hashmap;
#line 150 "../src/Dialogs/Project.vala"
			_tmp105_ = _data33_->entry;
#line 150 "../src/Dialogs/Project.vala"
			_tmp106_ = gee_map_entry_get_key (_tmp105_);
#line 150 "../src/Dialogs/Project.vala"
			_tmp107_ = _tmp106_;
#line 150 "../src/Dialogs/Project.vala"
			_tmp108_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp104_, (const gchar*) _tmp107_);
#line 150 "../src/Dialogs/Project.vala"
			_tmp109_ = (GtkRadioButton*) _tmp108_;
#line 150 "../src/Dialogs/Project.vala"
			gtk_container_add ((GtkContainer*) _tmp103_, (GtkWidget*) _tmp109_);
#line 150 "../src/Dialogs/Project.vala"
			_g_object_unref0 (_tmp109_);
#line 152 "../src/Dialogs/Project.vala"
			_tmp110_ = color_radio;
#line 152 "../src/Dialogs/Project.vala"
			g_signal_connect_data ((GtkToggleButton*) _tmp110_, "toggled", (GCallback) __dialogs_project_____lambda195__gtk_toggle_button_toggled, block33_data_ref (_data33_), (GClosureNotify) block33_data_unref, 0);
#line 142 "../src/Dialogs/Project.vala"
			_g_object_unref0 (color_radio);
#line 142 "../src/Dialogs/Project.vala"
			block33_data_unref (_data33_);
#line 142 "../src/Dialogs/Project.vala"
			_data33_ = NULL;
#line 2033 "Project.c"
		}
#line 142 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_entry_it);
#line 2037 "Project.c"
	}
#line 158 "../src/Dialogs/Project.vala"
	_tmp111_ = self->priv->_project;
#line 158 "../src/Dialogs/Project.vala"
	_tmp112_ = objects_project_get_color (_tmp111_);
#line 158 "../src/Dialogs/Project.vala"
	_tmp113_ = _tmp112_;
#line 158 "../src/Dialogs/Project.vala"
	dialogs_project_set_color_selected (self, _tmp113_);
#line 159 "../src/Dialogs/Project.vala"
	_tmp114_ = colors_hashmap;
#line 159 "../src/Dialogs/Project.vala"
	_tmp115_ = self->priv->_color_selected;
#line 159 "../src/Dialogs/Project.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp114_, _tmp115_)) {
#line 2053 "Project.c"
		GeeHashMap* _tmp116_;
		const gchar* _tmp117_;
		gpointer _tmp118_;
		GtkRadioButton* _tmp119_;
#line 160 "../src/Dialogs/Project.vala"
		_tmp116_ = colors_hashmap;
#line 160 "../src/Dialogs/Project.vala"
		_tmp117_ = self->priv->_color_selected;
#line 160 "../src/Dialogs/Project.vala"
		_tmp118_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp116_, _tmp117_);
#line 160 "../src/Dialogs/Project.vala"
		_tmp119_ = (GtkRadioButton*) _tmp118_;
#line 160 "../src/Dialogs/Project.vala"
		gtk_toggle_button_set_active ((GtkToggleButton*) _tmp119_, TRUE);
#line 160 "../src/Dialogs/Project.vala"
		_g_object_unref0 (_tmp119_);
#line 2070 "Project.c"
	}
#line 163 "../src/Dialogs/Project.vala"
	_tmp120_ = (GtkGrid*) gtk_grid_new ();
#line 163 "../src/Dialogs/Project.vala"
	g_object_set ((GtkWidget*) _tmp120_, "margin", 12, NULL);
#line 163 "../src/Dialogs/Project.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp120_, 0);
#line 163 "../src/Dialogs/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp120_, GTK_ALIGN_START);
#line 163 "../src/Dialogs/Project.vala"
	gtk_widget_set_vexpand ((GtkWidget*) _tmp120_, FALSE);
#line 163 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp120_);
#line 163 "../src/Dialogs/Project.vala"
	flowbox_grid = _tmp120_;
#line 169 "../src/Dialogs/Project.vala"
	_tmp121_ = flowbox_grid;
#line 169 "../src/Dialogs/Project.vala"
	_tmp122_ = flowbox;
#line 169 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp121_, (GtkWidget*) _tmp122_);
#line 171 "../src/Dialogs/Project.vala"
	_tmp123_ = flowbox_grid;
#line 171 "../src/Dialogs/Project.vala"
	_tmp124_ = gtk_widget_get_style_context ((GtkWidget*) _tmp123_);
#line 171 "../src/Dialogs/Project.vala"
	flowbox_grid_context = _tmp124_;
#line 172 "../src/Dialogs/Project.vala"
	_tmp125_ = flowbox_grid_context;
#line 172 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp125_, "picker-content");
#line 174 "../src/Dialogs/Project.vala"
	_tmp126_ = (GtkRadioButton*) gtk_radio_button_new (NULL);
#line 174 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp126_);
#line 174 "../src/Dialogs/Project.vala"
	list_radio = _tmp126_;
#line 175 "../src/Dialogs/Project.vala"
	_tmp127_ = list_radio;
#line 175 "../src/Dialogs/Project.vala"
	_tmp128_ = (GtkImage*) gtk_image_new_from_icon_name ("projectview-list-symbolic", (GtkIconSize) GTK_ICON_SIZE_DND);
#line 175 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp128_);
#line 175 "../src/Dialogs/Project.vala"
	_tmp129_ = _tmp128_;
#line 175 "../src/Dialogs/Project.vala"
	gtk_button_set_image ((GtkButton*) _tmp127_, (GtkWidget*) _tmp129_);
#line 175 "../src/Dialogs/Project.vala"
	_g_object_unref0 (_tmp129_);
#line 176 "../src/Dialogs/Project.vala"
	_tmp130_ = list_radio;
#line 176 "../src/Dialogs/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp130_, _ ("Grab the whole screen"));
#line 178 "../src/Dialogs/Project.vala"
	_tmp131_ = list_radio;
#line 178 "../src/Dialogs/Project.vala"
	_tmp132_ = (GtkRadioButton*) gtk_radio_button_new_from_widget (_tmp131_);
#line 178 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp132_);
#line 178 "../src/Dialogs/Project.vala"
	board_radio = _tmp132_;
#line 179 "../src/Dialogs/Project.vala"
	_tmp133_ = board_radio;
#line 179 "../src/Dialogs/Project.vala"
	_tmp134_ = (GtkImage*) gtk_image_new_from_icon_name ("projectview-board-symbolic", (GtkIconSize) GTK_ICON_SIZE_DND);
#line 179 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp134_);
#line 179 "../src/Dialogs/Project.vala"
	_tmp135_ = _tmp134_;
#line 179 "../src/Dialogs/Project.vala"
	gtk_button_set_image ((GtkButton*) _tmp133_, (GtkWidget*) _tmp135_);
#line 179 "../src/Dialogs/Project.vala"
	_g_object_unref0 (_tmp135_);
#line 180 "../src/Dialogs/Project.vala"
	_tmp136_ = board_radio;
#line 180 "../src/Dialogs/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp136_, _ ("Grab the current window"));
#line 182 "../src/Dialogs/Project.vala"
	_tmp137_ = (GtkGrid*) gtk_grid_new ();
#line 182 "../src/Dialogs/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp137_, GTK_ALIGN_CENTER);
#line 182 "../src/Dialogs/Project.vala"
	gtk_grid_set_column_spacing (_tmp137_, 18);
#line 182 "../src/Dialogs/Project.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp137_, TRUE);
#line 182 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp137_);
#line 182 "../src/Dialogs/Project.vala"
	radio_grid = _tmp137_;
#line 187 "../src/Dialogs/Project.vala"
	_tmp138_ = radio_grid;
#line 187 "../src/Dialogs/Project.vala"
	_tmp139_ = list_radio;
#line 187 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp138_, (GtkWidget*) _tmp139_);
#line 188 "../src/Dialogs/Project.vala"
	_tmp140_ = radio_grid;
#line 188 "../src/Dialogs/Project.vala"
	_tmp141_ = board_radio;
#line 188 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp140_, (GtkWidget*) _tmp141_);
#line 190 "../src/Dialogs/Project.vala"
	_tmp142_ = (GtkGrid*) gtk_grid_new ();
#line 190 "../src/Dialogs/Project.vala"
	g_object_set ((GtkWidget*) _tmp142_, "margin", 12, NULL);
#line 190 "../src/Dialogs/Project.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp142_, 0);
#line 190 "../src/Dialogs/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp142_, GTK_ALIGN_START);
#line 190 "../src/Dialogs/Project.vala"
	gtk_widget_set_vexpand ((GtkWidget*) _tmp142_, FALSE);
#line 190 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp142_);
#line 190 "../src/Dialogs/Project.vala"
	main_radio_grid = _tmp142_;
#line 196 "../src/Dialogs/Project.vala"
	_tmp143_ = main_radio_grid;
#line 196 "../src/Dialogs/Project.vala"
	_tmp144_ = radio_grid;
#line 196 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp143_, (GtkWidget*) _tmp144_);
#line 198 "../src/Dialogs/Project.vala"
	_tmp145_ = main_radio_grid;
#line 198 "../src/Dialogs/Project.vala"
	_tmp146_ = gtk_widget_get_style_context ((GtkWidget*) _tmp145_);
#line 198 "../src/Dialogs/Project.vala"
	main_radio_grid_context = _tmp146_;
#line 199 "../src/Dialogs/Project.vala"
	_tmp147_ = main_radio_grid_context;
#line 199 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp147_, "picker-content");
#line 203 "../src/Dialogs/Project.vala"
	_tmp149_ = dialogs_project_get_is_creating (self);
#line 203 "../src/Dialogs/Project.vala"
	_tmp150_ = _tmp149_;
#line 203 "../src/Dialogs/Project.vala"
	if (_tmp150_) {
#line 203 "../src/Dialogs/Project.vala"
		_tmp148_ = _ ("Add project");
#line 2210 "Project.c"
	} else {
#line 203 "../src/Dialogs/Project.vala"
		_tmp148_ = _ ("Update project");
#line 2214 "Project.c"
	}
#line 201 "../src/Dialogs/Project.vala"
	_tmp151_ = dialogs_project_get_is_creating (self);
#line 201 "../src/Dialogs/Project.vala"
	_tmp152_ = _tmp151_;
#line 201 "../src/Dialogs/Project.vala"
	_tmp153_ = widgets_loading_button_new (LOADING_BUTTON_TYPE_LABEL, _tmp148_);
#line 201 "../src/Dialogs/Project.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp153_, !_tmp152_);
#line 201 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp153_);
#line 201 "../src/Dialogs/Project.vala"
	_data32_->submit_button = _tmp153_;
#line 206 "../src/Dialogs/Project.vala"
	_tmp154_ = _data32_->submit_button;
#line 206 "../src/Dialogs/Project.vala"
	_tmp155_ = gtk_widget_get_style_context ((GtkWidget*) _tmp154_);
#line 206 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp155_, GTK_STYLE_CLASS_SUGGESTED_ACTION);
#line 207 "../src/Dialogs/Project.vala"
	_tmp156_ = _data32_->submit_button;
#line 207 "../src/Dialogs/Project.vala"
	_tmp157_ = gtk_widget_get_style_context ((GtkWidget*) _tmp156_);
#line 207 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp157_, "border-radius-6");
#line 209 "../src/Dialogs/Project.vala"
	_tmp158_ = (GtkButton*) gtk_button_new_with_label (_ ("Cancel"));
#line 209 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp158_);
#line 209 "../src/Dialogs/Project.vala"
	cancel_button = _tmp158_;
#line 210 "../src/Dialogs/Project.vala"
	_tmp159_ = cancel_button;
#line 210 "../src/Dialogs/Project.vala"
	_tmp160_ = gtk_widget_get_style_context ((GtkWidget*) _tmp159_);
#line 210 "../src/Dialogs/Project.vala"
	gtk_style_context_add_class (_tmp160_, "border-radius-6");
#line 212 "../src/Dialogs/Project.vala"
	_tmp161_ = (GtkGrid*) gtk_grid_new ();
#line 212 "../src/Dialogs/Project.vala"
	gtk_grid_set_column_spacing (_tmp161_, 12);
#line 212 "../src/Dialogs/Project.vala"
	gtk_grid_set_column_homogeneous (_tmp161_, TRUE);
#line 212 "../src/Dialogs/Project.vala"
	g_object_set ((GtkWidget*) _tmp161_, "margin", 12, NULL);
#line 212 "../src/Dialogs/Project.vala"
	gtk_widget_set_vexpand ((GtkWidget*) _tmp161_, TRUE);
#line 212 "../src/Dialogs/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp161_, GTK_ALIGN_END);
#line 212 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp161_);
#line 212 "../src/Dialogs/Project.vala"
	submit_cancel_grid = _tmp161_;
#line 219 "../src/Dialogs/Project.vala"
	_tmp162_ = submit_cancel_grid;
#line 219 "../src/Dialogs/Project.vala"
	_tmp163_ = cancel_button;
#line 219 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp162_, (GtkWidget*) _tmp163_);
#line 220 "../src/Dialogs/Project.vala"
	_tmp164_ = submit_cancel_grid;
#line 220 "../src/Dialogs/Project.vala"
	_tmp165_ = _data32_->submit_button;
#line 220 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp164_, (GtkWidget*) _tmp165_);
#line 222 "../src/Dialogs/Project.vala"
	_tmp166_ = (GtkGrid*) gtk_grid_new ();
#line 222 "../src/Dialogs/Project.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp166_, GTK_ORIENTATION_VERTICAL);
#line 222 "../src/Dialogs/Project.vala"
	g_object_ref_sink (_tmp166_);
#line 222 "../src/Dialogs/Project.vala"
	content_grid = _tmp166_;
#line 226 "../src/Dialogs/Project.vala"
	_tmp167_ = content_grid;
#line 226 "../src/Dialogs/Project.vala"
	_tmp168_ = headerbar;
#line 226 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp167_, (GtkWidget*) _tmp168_);
#line 227 "../src/Dialogs/Project.vala"
	_tmp169_ = content_grid;
#line 227 "../src/Dialogs/Project.vala"
	_tmp170_ = picker_stack;
#line 227 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp169_, (GtkWidget*) _tmp170_);
#line 228 "../src/Dialogs/Project.vala"
	_tmp171_ = content_grid;
#line 228 "../src/Dialogs/Project.vala"
	_tmp172_ = _data32_->iconstyle_switch;
#line 228 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp171_, (GtkWidget*) _tmp172_);
#line 229 "../src/Dialogs/Project.vala"
	_tmp173_ = content_grid;
#line 229 "../src/Dialogs/Project.vala"
	_tmp174_ = _data32_->name_entry;
#line 229 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp173_, (GtkWidget*) _tmp174_);
#line 230 "../src/Dialogs/Project.vala"
	_tmp175_ = content_grid;
#line 230 "../src/Dialogs/Project.vala"
	_tmp176_ = flowbox_grid;
#line 230 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp175_, (GtkWidget*) _tmp176_);
#line 231 "../src/Dialogs/Project.vala"
	_tmp177_ = content_grid;
#line 231 "../src/Dialogs/Project.vala"
	_tmp178_ = main_radio_grid;
#line 231 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp177_, (GtkWidget*) _tmp178_);
#line 232 "../src/Dialogs/Project.vala"
	_tmp179_ = content_grid;
#line 232 "../src/Dialogs/Project.vala"
	_tmp180_ = submit_cancel_grid;
#line 232 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp179_, (GtkWidget*) _tmp180_);
#line 234 "../src/Dialogs/Project.vala"
	_tmp181_ = content_grid;
#line 234 "../src/Dialogs/Project.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp181_);
#line 236 "../src/Dialogs/Project.vala"
	_tmp182_ = _data32_->preview_stack;
#line 236 "../src/Dialogs/Project.vala"
	_tmp183_ = gtk_stack_get_transition_duration (_tmp182_);
#line 236 "../src/Dialogs/Project.vala"
	_tmp184_ = _tmp183_;
#line 236 "../src/Dialogs/Project.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, _tmp184_, __dialogs_project___lambda196__gsource_func, block32_data_ref (_data32_), block32_data_unref);
#line 248 "../src/Dialogs/Project.vala"
	_tmp185_ = preview_button;
#line 248 "../src/Dialogs/Project.vala"
	g_signal_connect_data (_tmp185_, "clicked", (GCallback) __dialogs_project___lambda197__gtk_button_clicked, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
#line 255 "../src/Dialogs/Project.vala"
	_tmp186_ = _data32_->emoji_entry;
#line 255 "../src/Dialogs/Project.vala"
	g_signal_connect_data ((GtkEditable*) _tmp186_, "changed", (GCallback) __dialogs_project___lambda198__gtk_editable_changed, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
#line 259 "../src/Dialogs/Project.vala"
	_tmp187_ = _data32_->name_entry;
#line 259 "../src/Dialogs/Project.vala"
	g_signal_connect_data ((GtkEditable*) _tmp187_, "changed", (GCallback) __dialogs_project___lambda199__gtk_editable_changed, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
#line 263 "../src/Dialogs/Project.vala"
	_tmp188_ = _data32_->submit_button;
#line 263 "../src/Dialogs/Project.vala"
	g_signal_connect_data ((GtkButton*) _tmp188_, "clicked", (GCallback) __dialogs_project___lambda200__gtk_button_clicked, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
#line 307 "../src/Dialogs/Project.vala"
	_tmp189_ = cancel_button;
#line 307 "../src/Dialogs/Project.vala"
	g_signal_connect_object (_tmp189_, "clicked", (GCallback) __dialogs_project___lambda203__gtk_button_clicked, self, 0);
#line 311 "../src/Dialogs/Project.vala"
	_tmp190_ = _data32_->iconstyle_switch;
#line 311 "../src/Dialogs/Project.vala"
	g_signal_connect_data ((GObject*) _tmp190_, "notify::active", (GCallback) __dialogs_project___lambda204__g_object_notify, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (content_grid);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (submit_cancel_grid);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (cancel_button);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (main_radio_grid);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (radio_grid);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (board_radio);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (list_radio);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (flowbox_grid);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (flowbox);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (colors_hashmap);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (radio);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (picker_stack);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (preview_button);
#line 57 "../src/Dialogs/Project.vala"
	_g_object_unref0 (headerbar);
#line 57 "../src/Dialogs/Project.vala"
	block32_data_unref (_data32_);
#line 57 "../src/Dialogs/Project.vala"
	_data32_ = NULL;
#line 57 "../src/Dialogs/Project.vala"
	return obj;
#line 2400 "Project.c"
}

static void
dialogs_project_class_init (DialogsProjectClass * klass,
                            gpointer klass_data)
{
#line 22 "../src/Dialogs/Project.vala"
	dialogs_project_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Dialogs/Project.vala"
	g_type_class_adjust_private_offset (klass, &DialogsProject_private_offset);
#line 22 "../src/Dialogs/Project.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_dialogs_project_get_property;
#line 22 "../src/Dialogs/Project.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_dialogs_project_set_property;
#line 22 "../src/Dialogs/Project.vala"
	G_OBJECT_CLASS (klass)->constructor = dialogs_project_constructor;
#line 22 "../src/Dialogs/Project.vala"
	G_OBJECT_CLASS (klass)->finalize = dialogs_project_finalize;
#line 22 "../src/Dialogs/Project.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_PROJECT_COLOR_SELECTED_PROPERTY, dialogs_project_properties[DIALOGS_PROJECT_COLOR_SELECTED_PROPERTY] = g_param_spec_string ("color-selected", "color-selected", "color-selected", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Dialogs/Project.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_PROJECT_PROJECT_PROPERTY, dialogs_project_properties[DIALOGS_PROJECT_PROJECT_PROPERTY] = g_param_spec_object ("project", "project", "project", OBJECTS_TYPE_PROJECT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "../src/Dialogs/Project.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), DIALOGS_PROJECT_IS_CREATING_PROPERTY, dialogs_project_properties[DIALOGS_PROJECT_IS_CREATING_PROPERTY] = g_param_spec_boolean ("is-creating", "is-creating", "is-creating", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 2425 "Project.c"
}

static void
dialogs_project_instance_init (DialogsProject * self,
                               gpointer klass)
{
#line 22 "../src/Dialogs/Project.vala"
	self->priv = dialogs_project_get_instance_private (self);
#line 2434 "Project.c"
}

static void
dialogs_project_finalize (GObject * obj)
{
	DialogsProject * self;
#line 22 "../src/Dialogs/Project.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, DIALOGS_TYPE_PROJECT, DialogsProject);
#line 23 "../src/Dialogs/Project.vala"
	_g_free0 (self->priv->_color_selected);
#line 24 "../src/Dialogs/Project.vala"
	_g_object_unref0 (self->priv->_project);
#line 22 "../src/Dialogs/Project.vala"
	G_OBJECT_CLASS (dialogs_project_parent_class)->finalize (obj);
#line 2449 "Project.c"
}

static GType
dialogs_project_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (DialogsProjectClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) dialogs_project_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (DialogsProject), 0, (GInstanceInitFunc) dialogs_project_instance_init, NULL };
	GType dialogs_project_type_id;
	dialogs_project_type_id = g_type_register_static (hdy_window_get_type (), "DialogsProject", &g_define_type_info, 0);
	DialogsProject_private_offset = g_type_add_instance_private (dialogs_project_type_id, sizeof (DialogsProjectPrivate));
	return dialogs_project_type_id;
}

GType
dialogs_project_get_type (void)
{
	static volatile gsize dialogs_project_type_id__volatile = 0;
	if (g_once_init_enter (&dialogs_project_type_id__volatile)) {
		GType dialogs_project_type_id;
		dialogs_project_type_id = dialogs_project_get_type_once ();
		g_once_init_leave (&dialogs_project_type_id__volatile, dialogs_project_type_id);
	}
	return dialogs_project_type_id__volatile;
}

static void
_vala_dialogs_project_get_property (GObject * object,
                                    guint property_id,
                                    GValue * value,
                                    GParamSpec * pspec)
{
	DialogsProject * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_TYPE_PROJECT, DialogsProject);
#line 22 "../src/Dialogs/Project.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/Project.vala"
		case DIALOGS_PROJECT_COLOR_SELECTED_PROPERTY:
#line 22 "../src/Dialogs/Project.vala"
		g_value_set_string (value, dialogs_project_get_color_selected (self));
#line 22 "../src/Dialogs/Project.vala"
		break;
#line 22 "../src/Dialogs/Project.vala"
		case DIALOGS_PROJECT_PROJECT_PROPERTY:
#line 22 "../src/Dialogs/Project.vala"
		g_value_set_object (value, dialogs_project_get_project (self));
#line 22 "../src/Dialogs/Project.vala"
		break;
#line 22 "../src/Dialogs/Project.vala"
		case DIALOGS_PROJECT_IS_CREATING_PROPERTY:
#line 22 "../src/Dialogs/Project.vala"
		g_value_set_boolean (value, dialogs_project_get_is_creating (self));
#line 22 "../src/Dialogs/Project.vala"
		break;
#line 2502 "Project.c"
		default:
#line 22 "../src/Dialogs/Project.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/Project.vala"
		break;
#line 2508 "Project.c"
	}
}

static void
_vala_dialogs_project_set_property (GObject * object,
                                    guint property_id,
                                    const GValue * value,
                                    GParamSpec * pspec)
{
	DialogsProject * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, DIALOGS_TYPE_PROJECT, DialogsProject);
#line 22 "../src/Dialogs/Project.vala"
	switch (property_id) {
#line 22 "../src/Dialogs/Project.vala"
		case DIALOGS_PROJECT_COLOR_SELECTED_PROPERTY:
#line 22 "../src/Dialogs/Project.vala"
		dialogs_project_set_color_selected (self, g_value_get_string (value));
#line 22 "../src/Dialogs/Project.vala"
		break;
#line 22 "../src/Dialogs/Project.vala"
		case DIALOGS_PROJECT_PROJECT_PROPERTY:
#line 22 "../src/Dialogs/Project.vala"
		dialogs_project_set_project (self, g_value_get_object (value));
#line 22 "../src/Dialogs/Project.vala"
		break;
#line 2534 "Project.c"
		default:
#line 22 "../src/Dialogs/Project.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Dialogs/Project.vala"
		break;
#line 2540 "Project.c"
	}
}

