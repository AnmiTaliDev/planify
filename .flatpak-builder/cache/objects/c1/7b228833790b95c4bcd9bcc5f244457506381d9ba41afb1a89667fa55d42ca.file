/* HeaderItem.c generated by valac 0.50.10, the Vala compiler
 * generated from HeaderItem.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib/gi18n-lib.h>
#include <granite.h>
#include <gio/gio.h>

#define LAYOUTS_TYPE_HEADER_ITEM (layouts_header_item_get_type ())
#define LAYOUTS_HEADER_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LAYOUTS_TYPE_HEADER_ITEM, LayoutsHeaderItem))
#define LAYOUTS_HEADER_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LAYOUTS_TYPE_HEADER_ITEM, LayoutsHeaderItemClass))
#define LAYOUTS_IS_HEADER_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LAYOUTS_TYPE_HEADER_ITEM))
#define LAYOUTS_IS_HEADER_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LAYOUTS_TYPE_HEADER_ITEM))
#define LAYOUTS_HEADER_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LAYOUTS_TYPE_HEADER_ITEM, LayoutsHeaderItemClass))

typedef struct _LayoutsHeaderItem LayoutsHeaderItem;
typedef struct _LayoutsHeaderItemClass LayoutsHeaderItemClass;
typedef struct _LayoutsHeaderItemPrivate LayoutsHeaderItemPrivate;
typedef enum  {
	PANE_TYPE_FILTER,
	PANE_TYPE_FAVORITE,
	PANE_TYPE_PROJECT,
	PANE_TYPE_LABEL,
	PANE_TYPE_TASKLIST
} PaneType;

#define TYPE_PANE_TYPE (pane_type_get_type ())
typedef enum  {
	CONTAINER_TYPE_LISTBOX,
	CONTAINER_TYPE_FLOWBOX
} ContainerType;

#define TYPE_CONTAINER_TYPE (container_type_get_type ())
enum  {
	LAYOUTS_HEADER_ITEM_0_PROPERTY,
	LAYOUTS_HEADER_ITEM_PANE_TYPE_PROPERTY,
	LAYOUTS_HEADER_ITEM_CONTAINER_SHAPE_PROPERTY,
	LAYOUTS_HEADER_ITEM_SELECTION_MODE_PROPERTY,
	LAYOUTS_HEADER_ITEM_ITEM_NAME_PROPERTY,
	LAYOUTS_HEADER_ITEM_ADD_TOOLTIP_PROPERTY,
	LAYOUTS_HEADER_ITEM_PLACEHOLDER_MESSAGE_PROPERTY,
	LAYOUTS_HEADER_ITEM_IS_LOADING_PROPERTY,
	LAYOUTS_HEADER_ITEM_NUM_PROPERTIES
};
static GParamSpec* layouts_header_item_properties[LAYOUTS_HEADER_ITEM_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define WIDGETS_TYPE_DYNAMIC_ICON (widgets_dynamic_icon_get_type ())
#define WIDGETS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIcon))
#define WIDGETS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))
#define WIDGETS_IS_DYNAMIC_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_IS_DYNAMIC_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_DYNAMIC_ICON))
#define WIDGETS_DYNAMIC_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_DYNAMIC_ICON, WidgetsDynamicIconClass))

typedef struct _WidgetsDynamicIcon WidgetsDynamicIcon;
typedef struct _WidgetsDynamicIconClass WidgetsDynamicIconClass;
enum  {
	LAYOUTS_HEADER_ITEM_ADD_ACTIVATED_SIGNAL,
	LAYOUTS_HEADER_ITEM_NUM_SIGNALS
};
static guint layouts_header_item_signals[LAYOUTS_HEADER_ITEM_NUM_SIGNALS] = {0};

struct _LayoutsHeaderItem {
	GtkEventBox parent_instance;
	LayoutsHeaderItemPrivate * priv;
};

struct _LayoutsHeaderItemClass {
	GtkEventBoxClass parent_class;
};

struct _LayoutsHeaderItemPrivate {
	PaneType _pane_type;
	ContainerType _container_shape;
	GtkSelectionMode _selection_mode;
	gchar* _item_name;
	gchar* _add_tooltip;
	gchar* _placeholder_message;
	GtkLabel* name_label;
	GtkListBox* listbox;
	GtkFlowBox* flowbox;
	GtkStack* action_stack;
	GtkRevealer* action_revealer;
	GtkRevealer* main_revealer;
};

static gint LayoutsHeaderItem_private_offset;
static gpointer layouts_header_item_parent_class = NULL;

GType layouts_header_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LayoutsHeaderItem, g_object_unref)
GType pane_type_get_type (void) G_GNUC_CONST;
GType container_type_get_type (void) G_GNUC_CONST;
LayoutsHeaderItem* layouts_header_item_new (PaneType pane_type,
                                            ContainerType container_shape,
                                            GtkSelectionMode selection_mode);
LayoutsHeaderItem* layouts_header_item_construct (GType object_type,
                                                  PaneType pane_type,
                                                  ContainerType container_shape,
                                                  GtkSelectionMode selection_mode);
static void layouts_header_item_update_labels (LayoutsHeaderItem* self);
PaneType layouts_header_item_get_pane_type (LayoutsHeaderItem* self);
void layouts_header_item_set_item_name (LayoutsHeaderItem* self,
                                        const gchar* value);
void layouts_header_item_set_add_tooltip (LayoutsHeaderItem* self,
                                          const gchar* value);
void layouts_header_item_set_placeholder_message (LayoutsHeaderItem* self,
                                                  const gchar* value);
static GtkWidget* layouts_header_item_get_placeholder (LayoutsHeaderItem* self);
const gchar* layouts_header_item_get_placeholder_message (LayoutsHeaderItem* self);
void layouts_header_item_add_child (LayoutsHeaderItem* self,
                                    GtkWidget* widget);
ContainerType layouts_header_item_get_container_shape (LayoutsHeaderItem* self);
static void layouts_header_item_set_pane_type (LayoutsHeaderItem* self,
                                        PaneType value);
static void layouts_header_item_set_container_shape (LayoutsHeaderItem* self,
                                              ContainerType value);
GtkSelectionMode layouts_header_item_get_selection_mode (LayoutsHeaderItem* self);
static void layouts_header_item_set_selection_mode (LayoutsHeaderItem* self,
                                             GtkSelectionMode value);
const gchar* layouts_header_item_get_item_name (LayoutsHeaderItem* self);
const gchar* layouts_header_item_get_add_tooltip (LayoutsHeaderItem* self);
static gboolean layouts_header_item_get_has_children (LayoutsHeaderItem* self);
void layouts_header_item_set_is_loading (LayoutsHeaderItem* self,
                                         gboolean value);
static GObject * layouts_header_item_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties);
GType widgets_dynamic_icon_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsDynamicIcon, g_object_unref)
WidgetsDynamicIcon* widgets_dynamic_icon_new (void);
WidgetsDynamicIcon* widgets_dynamic_icon_construct (GType object_type);
void widgets_dynamic_icon_set_size (WidgetsDynamicIcon* self,
                                    gint value);
void widgets_dynamic_icon_set_icon_name (WidgetsDynamicIcon* self,
                                         const gchar* value);
static void _layouts_header_item___lambda184_ (LayoutsHeaderItem* self);
static void __layouts_header_item___lambda184__gtk_button_clicked (GtkButton* _sender,
                                                            gpointer self);
static void _layouts_header_item____lambda185_ (LayoutsHeaderItem* self);
static void __layouts_header_item____lambda185__gtk_container_add (GtkContainer* _sender,
                                                            GtkWidget* widget,
                                                            gpointer self);
static void _layouts_header_item____lambda186_ (LayoutsHeaderItem* self);
static void __layouts_header_item____lambda186__gtk_container_remove (GtkContainer* _sender,
                                                               GtkWidget* widget,
                                                               gpointer self);
static void layouts_header_item_finalize (GObject * obj);
static GType layouts_header_item_get_type_once (void);
static void _vala_layouts_header_item_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_layouts_header_item_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);

static inline gpointer
layouts_header_item_get_instance_private (LayoutsHeaderItem* self)
{
	return G_STRUCT_MEMBER_P (self, LayoutsHeaderItem_private_offset);
}

LayoutsHeaderItem*
layouts_header_item_construct (GType object_type,
                               PaneType pane_type,
                               ContainerType container_shape,
                               GtkSelectionMode selection_mode)
{
	LayoutsHeaderItem * self = NULL;
#line 33 "../src/Layouts/HeaderItem.vala"
	self = (LayoutsHeaderItem*) g_object_new (object_type, "pane-type", pane_type, "container-shape", container_shape, "selection-mode", selection_mode, NULL);
#line 30 "../src/Layouts/HeaderItem.vala"
	return self;
#line 182 "HeaderItem.c"
}

LayoutsHeaderItem*
layouts_header_item_new (PaneType pane_type,
                         ContainerType container_shape,
                         GtkSelectionMode selection_mode)
{
#line 30 "../src/Layouts/HeaderItem.vala"
	return layouts_header_item_construct (LAYOUTS_TYPE_HEADER_ITEM, pane_type, container_shape, selection_mode);
#line 192 "HeaderItem.c"
}

static void
layouts_header_item_update_labels (LayoutsHeaderItem* self)
{
	PaneType _tmp0_;
#line 184 "../src/Layouts/HeaderItem.vala"
	g_return_if_fail (self != NULL);
#line 185 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->_pane_type;
#line 185 "../src/Layouts/HeaderItem.vala"
	if (_tmp0_ == PANE_TYPE_PROJECT) {
#line 186 "../src/Layouts/HeaderItem.vala"
		layouts_header_item_set_item_name (self, _ ("Projects"));
#line 187 "../src/Layouts/HeaderItem.vala"
		layouts_header_item_set_add_tooltip (self, _ ("Add project"));
#line 188 "../src/Layouts/HeaderItem.vala"
		layouts_header_item_set_placeholder_message (self, _ ("No project available. Create one by clicking on the '+' button"));
#line 211 "HeaderItem.c"
	} else {
		PaneType _tmp1_;
#line 189 "../src/Layouts/HeaderItem.vala"
		_tmp1_ = self->priv->_pane_type;
#line 189 "../src/Layouts/HeaderItem.vala"
		if (_tmp1_ == PANE_TYPE_LABEL) {
#line 190 "../src/Layouts/HeaderItem.vala"
			layouts_header_item_set_item_name (self, _ ("Labels"));
#line 191 "../src/Layouts/HeaderItem.vala"
			layouts_header_item_set_add_tooltip (self, _ ("Add label"));
#line 192 "../src/Layouts/HeaderItem.vala"
			layouts_header_item_set_placeholder_message (self, _ ("Your list of filters will show up here. Create one by clicking on the " \
"'+' button"));
#line 224 "HeaderItem.c"
		} else {
			PaneType _tmp2_;
#line 193 "../src/Layouts/HeaderItem.vala"
			_tmp2_ = self->priv->_pane_type;
#line 193 "../src/Layouts/HeaderItem.vala"
			if (_tmp2_ == PANE_TYPE_FAVORITE) {
#line 194 "../src/Layouts/HeaderItem.vala"
				layouts_header_item_set_item_name (self, _ ("Favorites"));
#line 233 "HeaderItem.c"
			}
		}
	}
}

static GtkWidget*
layouts_header_item_get_placeholder (LayoutsHeaderItem* self)
{
	GtkLabel* message_label = NULL;
	const gchar* _tmp0_;
	GtkLabel* _tmp1_ = NULL;
	GtkStyleContext* message_label_context = NULL;
	GtkStyleContext* _tmp2_;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp3_ = NULL;
	GtkWidget* result = NULL;
#line 198 "../src/Layouts/HeaderItem.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 199 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->_placeholder_message;
#line 199 "../src/Layouts/HeaderItem.vala"
	_tmp1_ = (GtkLabel*) gtk_label_new (_tmp0_);
#line 199 "../src/Layouts/HeaderItem.vala"
	g_object_set (_tmp1_, "wrap", TRUE, NULL);
#line 199 "../src/Layouts/HeaderItem.vala"
	gtk_label_set_justify (_tmp1_, GTK_JUSTIFY_CENTER);
#line 199 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp1_);
#line 199 "../src/Layouts/HeaderItem.vala"
	message_label = _tmp1_;
#line 204 "../src/Layouts/HeaderItem.vala"
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) message_label);
#line 204 "../src/Layouts/HeaderItem.vala"
	message_label_context = _tmp2_;
#line 205 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (message_label_context, "dim-label");
#line 206 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (message_label_context, GRANITE_STYLE_CLASS_SMALL_LABEL);
#line 208 "../src/Layouts/HeaderItem.vala"
	_tmp3_ = (GtkGrid*) gtk_grid_new ();
#line 208 "../src/Layouts/HeaderItem.vala"
	g_object_set ((GtkWidget*) _tmp3_, "margin", 6, NULL);
#line 208 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp3_);
#line 208 "../src/Layouts/HeaderItem.vala"
	grid = _tmp3_;
#line 211 "../src/Layouts/HeaderItem.vala"
	gtk_container_add ((GtkContainer*) grid, (GtkWidget*) message_label);
#line 212 "../src/Layouts/HeaderItem.vala"
	gtk_widget_show_all ((GtkWidget*) grid);
#line 214 "../src/Layouts/HeaderItem.vala"
	result = (GtkWidget*) grid;
#line 214 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (message_label);
#line 214 "../src/Layouts/HeaderItem.vala"
	return result;
#line 290 "HeaderItem.c"
}

void
layouts_header_item_add_child (LayoutsHeaderItem* self,
                               GtkWidget* widget)
{
	ContainerType _tmp0_;
#line 217 "../src/Layouts/HeaderItem.vala"
	g_return_if_fail (self != NULL);
#line 217 "../src/Layouts/HeaderItem.vala"
	g_return_if_fail (widget != NULL);
#line 218 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->_container_shape;
#line 218 "../src/Layouts/HeaderItem.vala"
	if (_tmp0_ == CONTAINER_TYPE_LISTBOX) {
#line 306 "HeaderItem.c"
		GtkListBox* _tmp1_;
		GtkListBox* _tmp2_;
#line 219 "../src/Layouts/HeaderItem.vala"
		_tmp1_ = self->priv->listbox;
#line 219 "../src/Layouts/HeaderItem.vala"
		gtk_container_add ((GtkContainer*) _tmp1_, widget);
#line 220 "../src/Layouts/HeaderItem.vala"
		_tmp2_ = self->priv->listbox;
#line 220 "../src/Layouts/HeaderItem.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp2_);
#line 317 "HeaderItem.c"
	} else {
		GtkFlowBox* _tmp3_;
		GtkFlowBox* _tmp4_;
#line 222 "../src/Layouts/HeaderItem.vala"
		_tmp3_ = self->priv->flowbox;
#line 222 "../src/Layouts/HeaderItem.vala"
		gtk_flow_box_insert (_tmp3_, widget, -1);
#line 223 "../src/Layouts/HeaderItem.vala"
		_tmp4_ = self->priv->flowbox;
#line 223 "../src/Layouts/HeaderItem.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp4_);
#line 329 "HeaderItem.c"
	}
}

PaneType
layouts_header_item_get_pane_type (LayoutsHeaderItem* self)
{
	PaneType result;
	PaneType _tmp0_;
#line 2 "../src/Layouts/HeaderItem.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 2 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->_pane_type;
#line 2 "../src/Layouts/HeaderItem.vala"
	result = _tmp0_;
#line 2 "../src/Layouts/HeaderItem.vala"
	return result;
#line 346 "HeaderItem.c"
}

static void
layouts_header_item_set_pane_type (LayoutsHeaderItem* self,
                                   PaneType value)
{
	PaneType old_value;
#line 2 "../src/Layouts/HeaderItem.vala"
	g_return_if_fail (self != NULL);
#line 2 "../src/Layouts/HeaderItem.vala"
	old_value = layouts_header_item_get_pane_type (self);
#line 2 "../src/Layouts/HeaderItem.vala"
	if (old_value != value) {
#line 2 "../src/Layouts/HeaderItem.vala"
		self->priv->_pane_type = value;
#line 2 "../src/Layouts/HeaderItem.vala"
		g_object_notify_by_pspec ((GObject *) self, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_PANE_TYPE_PROPERTY]);
#line 364 "HeaderItem.c"
	}
}

ContainerType
layouts_header_item_get_container_shape (LayoutsHeaderItem* self)
{
	ContainerType result;
	ContainerType _tmp0_;
#line 3 "../src/Layouts/HeaderItem.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 3 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->_container_shape;
#line 3 "../src/Layouts/HeaderItem.vala"
	result = _tmp0_;
#line 3 "../src/Layouts/HeaderItem.vala"
	return result;
#line 381 "HeaderItem.c"
}

static void
layouts_header_item_set_container_shape (LayoutsHeaderItem* self,
                                         ContainerType value)
{
	ContainerType old_value;
#line 3 "../src/Layouts/HeaderItem.vala"
	g_return_if_fail (self != NULL);
#line 3 "../src/Layouts/HeaderItem.vala"
	old_value = layouts_header_item_get_container_shape (self);
#line 3 "../src/Layouts/HeaderItem.vala"
	if (old_value != value) {
#line 3 "../src/Layouts/HeaderItem.vala"
		self->priv->_container_shape = value;
#line 3 "../src/Layouts/HeaderItem.vala"
		g_object_notify_by_pspec ((GObject *) self, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_CONTAINER_SHAPE_PROPERTY]);
#line 399 "HeaderItem.c"
	}
}

GtkSelectionMode
layouts_header_item_get_selection_mode (LayoutsHeaderItem* self)
{
	GtkSelectionMode result;
	GtkSelectionMode _tmp0_;
#line 4 "../src/Layouts/HeaderItem.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 4 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->_selection_mode;
#line 4 "../src/Layouts/HeaderItem.vala"
	result = _tmp0_;
#line 4 "../src/Layouts/HeaderItem.vala"
	return result;
#line 416 "HeaderItem.c"
}

static void
layouts_header_item_set_selection_mode (LayoutsHeaderItem* self,
                                        GtkSelectionMode value)
{
	GtkSelectionMode old_value;
#line 4 "../src/Layouts/HeaderItem.vala"
	g_return_if_fail (self != NULL);
#line 4 "../src/Layouts/HeaderItem.vala"
	old_value = layouts_header_item_get_selection_mode (self);
#line 4 "../src/Layouts/HeaderItem.vala"
	if (old_value != value) {
#line 4 "../src/Layouts/HeaderItem.vala"
		self->priv->_selection_mode = value;
#line 4 "../src/Layouts/HeaderItem.vala"
		g_object_notify_by_pspec ((GObject *) self, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_SELECTION_MODE_PROPERTY]);
#line 434 "HeaderItem.c"
	}
}

const gchar*
layouts_header_item_get_item_name (LayoutsHeaderItem* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 5 "../src/Layouts/HeaderItem.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 5 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->_item_name;
#line 5 "../src/Layouts/HeaderItem.vala"
	result = _tmp0_;
#line 5 "../src/Layouts/HeaderItem.vala"
	return result;
#line 451 "HeaderItem.c"
}

void
layouts_header_item_set_item_name (LayoutsHeaderItem* self,
                                   const gchar* value)
{
	gchar* old_value;
#line 5 "../src/Layouts/HeaderItem.vala"
	g_return_if_fail (self != NULL);
#line 5 "../src/Layouts/HeaderItem.vala"
	old_value = layouts_header_item_get_item_name (self);
#line 5 "../src/Layouts/HeaderItem.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 465 "HeaderItem.c"
		gchar* _tmp0_;
#line 5 "../src/Layouts/HeaderItem.vala"
		_tmp0_ = g_strdup (value);
#line 5 "../src/Layouts/HeaderItem.vala"
		_g_free0 (self->priv->_item_name);
#line 5 "../src/Layouts/HeaderItem.vala"
		self->priv->_item_name = _tmp0_;
#line 5 "../src/Layouts/HeaderItem.vala"
		g_object_notify_by_pspec ((GObject *) self, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_ITEM_NAME_PROPERTY]);
#line 475 "HeaderItem.c"
	}
}

const gchar*
layouts_header_item_get_add_tooltip (LayoutsHeaderItem* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 6 "../src/Layouts/HeaderItem.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 6 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->_add_tooltip;
#line 6 "../src/Layouts/HeaderItem.vala"
	result = _tmp0_;
#line 6 "../src/Layouts/HeaderItem.vala"
	return result;
#line 492 "HeaderItem.c"
}

void
layouts_header_item_set_add_tooltip (LayoutsHeaderItem* self,
                                     const gchar* value)
{
	gchar* old_value;
#line 6 "../src/Layouts/HeaderItem.vala"
	g_return_if_fail (self != NULL);
#line 6 "../src/Layouts/HeaderItem.vala"
	old_value = layouts_header_item_get_add_tooltip (self);
#line 6 "../src/Layouts/HeaderItem.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 506 "HeaderItem.c"
		gchar* _tmp0_;
#line 6 "../src/Layouts/HeaderItem.vala"
		_tmp0_ = g_strdup (value);
#line 6 "../src/Layouts/HeaderItem.vala"
		_g_free0 (self->priv->_add_tooltip);
#line 6 "../src/Layouts/HeaderItem.vala"
		self->priv->_add_tooltip = _tmp0_;
#line 6 "../src/Layouts/HeaderItem.vala"
		g_object_notify_by_pspec ((GObject *) self, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_ADD_TOOLTIP_PROPERTY]);
#line 516 "HeaderItem.c"
	}
}

const gchar*
layouts_header_item_get_placeholder_message (LayoutsHeaderItem* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 7 "../src/Layouts/HeaderItem.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 7 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->_placeholder_message;
#line 7 "../src/Layouts/HeaderItem.vala"
	result = _tmp0_;
#line 7 "../src/Layouts/HeaderItem.vala"
	return result;
#line 533 "HeaderItem.c"
}

void
layouts_header_item_set_placeholder_message (LayoutsHeaderItem* self,
                                             const gchar* value)
{
	gchar* old_value;
#line 7 "../src/Layouts/HeaderItem.vala"
	g_return_if_fail (self != NULL);
#line 7 "../src/Layouts/HeaderItem.vala"
	old_value = layouts_header_item_get_placeholder_message (self);
#line 7 "../src/Layouts/HeaderItem.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 547 "HeaderItem.c"
		gchar* _tmp0_;
#line 7 "../src/Layouts/HeaderItem.vala"
		_tmp0_ = g_strdup (value);
#line 7 "../src/Layouts/HeaderItem.vala"
		_g_free0 (self->priv->_placeholder_message);
#line 7 "../src/Layouts/HeaderItem.vala"
		self->priv->_placeholder_message = _tmp0_;
#line 7 "../src/Layouts/HeaderItem.vala"
		g_object_notify_by_pspec ((GObject *) self, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_PLACEHOLDER_MESSAGE_PROPERTY]);
#line 557 "HeaderItem.c"
	}
}

static gboolean
layouts_header_item_get_has_children (LayoutsHeaderItem* self)
{
	gboolean result;
	GtkListBox* _tmp0_;
	GList* _tmp1_;
	GList* _tmp2_;
	gboolean _tmp3_;
#line 19 "../src/Layouts/HeaderItem.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 20 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->listbox;
#line 20 "../src/Layouts/HeaderItem.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 20 "../src/Layouts/HeaderItem.vala"
	_tmp2_ = _tmp1_;
#line 20 "../src/Layouts/HeaderItem.vala"
	_tmp3_ = g_list_length (_tmp2_) > ((guint) 0);
#line 20 "../src/Layouts/HeaderItem.vala"
	(_tmp2_ == NULL) ? NULL : (_tmp2_ = (g_list_free (_tmp2_), NULL));
#line 20 "../src/Layouts/HeaderItem.vala"
	result = _tmp3_;
#line 20 "../src/Layouts/HeaderItem.vala"
	return result;
#line 585 "HeaderItem.c"
}

void
layouts_header_item_set_is_loading (LayoutsHeaderItem* self,
                                    gboolean value)
{
	const gchar* _tmp0_ = NULL;
	GtkStack* _tmp1_;
#line 25 "../src/Layouts/HeaderItem.vala"
	g_return_if_fail (self != NULL);
#line 26 "../src/Layouts/HeaderItem.vala"
	if (value) {
#line 26 "../src/Layouts/HeaderItem.vala"
		_tmp0_ = "spinner";
#line 600 "HeaderItem.c"
	} else {
#line 26 "../src/Layouts/HeaderItem.vala"
		_tmp0_ = "button";
#line 604 "HeaderItem.c"
	}
#line 26 "../src/Layouts/HeaderItem.vala"
	_tmp1_ = self->priv->action_stack;
#line 26 "../src/Layouts/HeaderItem.vala"
	gtk_stack_set_visible_child_name (_tmp1_, _tmp0_);
#line 25 "../src/Layouts/HeaderItem.vala"
	g_object_notify_by_pspec ((GObject *) self, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_IS_LOADING_PROPERTY]);
#line 612 "HeaderItem.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 54 "../src/Layouts/HeaderItem.vala"
	return self ? g_object_ref (self) : NULL;
#line 620 "HeaderItem.c"
}

static void
_layouts_header_item___lambda184_ (LayoutsHeaderItem* self)
{
#line 170 "../src/Layouts/HeaderItem.vala"
	g_signal_emit (self, layouts_header_item_signals[LAYOUTS_HEADER_ITEM_ADD_ACTIVATED_SIGNAL], 0);
#line 628 "HeaderItem.c"
}

static void
__layouts_header_item___lambda184__gtk_button_clicked (GtkButton* _sender,
                                                       gpointer self)
{
#line 169 "../src/Layouts/HeaderItem.vala"
	_layouts_header_item___lambda184_ ((LayoutsHeaderItem*) self);
#line 637 "HeaderItem.c"
}

static void
_layouts_header_item____lambda185_ (LayoutsHeaderItem* self)
{
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 175 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->main_revealer;
#line 175 "../src/Layouts/HeaderItem.vala"
	_tmp1_ = layouts_header_item_get_has_children (self);
#line 175 "../src/Layouts/HeaderItem.vala"
	_tmp2_ = _tmp1_;
#line 175 "../src/Layouts/HeaderItem.vala"
	gtk_revealer_set_reveal_child (_tmp0_, _tmp2_);
#line 654 "HeaderItem.c"
}

static void
__layouts_header_item____lambda185__gtk_container_add (GtkContainer* _sender,
                                                       GtkWidget* widget,
                                                       gpointer self)
{
#line 174 "../src/Layouts/HeaderItem.vala"
	_layouts_header_item____lambda185_ ((LayoutsHeaderItem*) self);
#line 664 "HeaderItem.c"
}

static void
_layouts_header_item____lambda186_ (LayoutsHeaderItem* self)
{
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 179 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->main_revealer;
#line 179 "../src/Layouts/HeaderItem.vala"
	_tmp1_ = layouts_header_item_get_has_children (self);
#line 179 "../src/Layouts/HeaderItem.vala"
	_tmp2_ = _tmp1_;
#line 179 "../src/Layouts/HeaderItem.vala"
	gtk_revealer_set_reveal_child (_tmp0_, _tmp2_);
#line 681 "HeaderItem.c"
}

static void
__layouts_header_item____lambda186__gtk_container_remove (GtkContainer* _sender,
                                                          GtkWidget* widget,
                                                          gpointer self)
{
#line 178 "../src/Layouts/HeaderItem.vala"
	_layouts_header_item____lambda186_ ((LayoutsHeaderItem*) self);
#line 691 "HeaderItem.c"
}

static GObject *
layouts_header_item_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	LayoutsHeaderItem * self;
	const gchar* _tmp0_;
	GtkLabel* _tmp1_ = NULL;
	GtkLabel* _tmp2_;
	GtkStyleContext* _tmp3_;
	GtkImage* arrow_icon = NULL;
	GThemedIcon* _tmp4_;
	GtkImage* _tmp5_ = NULL;
	GtkButton* arrow_button = NULL;
	GtkImage* _tmp6_;
	GtkWidget* _tmp7_;
	GtkButton* _tmp8_ = NULL;
	GtkButton* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkButton* _tmp11_;
	GtkStyleContext* _tmp12_;
	GtkButton* _tmp13_;
	GtkStyleContext* _tmp14_;
	GtkButton* _tmp15_;
	GtkStyleContext* _tmp16_;
	GtkButton* _tmp17_;
	GtkStyleContext* _tmp18_;
	GtkGrid* content_grid = NULL;
	GtkGrid* _tmp19_ = NULL;
	ContainerType _tmp20_;
	WidgetsDynamicIcon* add_image = NULL;
	WidgetsDynamicIcon* _tmp39_;
	WidgetsDynamicIcon* _tmp40_;
	WidgetsDynamicIcon* _tmp41_;
	GtkButton* add_button = NULL;
	const gchar* _tmp42_;
	gchar* _tmp43_;
	GtkButton* _tmp44_ = NULL;
	GtkButton* _tmp45_;
	WidgetsDynamicIcon* _tmp46_;
	GtkStyleContext* add_button_context = NULL;
	GtkButton* _tmp47_;
	GtkStyleContext* _tmp48_;
	GtkStyleContext* _tmp49_;
	GtkStyleContext* _tmp50_;
	GtkStyleContext* _tmp51_;
	GtkSpinner* spinner_loading = NULL;
	GtkSpinner* _tmp52_ = NULL;
	GtkSpinner* _tmp53_;
	GtkStack* _tmp54_ = NULL;
	GtkStack* _tmp55_;
	GtkButton* _tmp56_;
	GtkStack* _tmp57_;
	GtkSpinner* _tmp58_;
	PaneType _tmp59_;
	GtkRevealer* _tmp60_ = NULL;
	GtkRevealer* _tmp61_;
	GtkStack* _tmp62_;
	GtkGrid* header_grid = NULL;
	GtkGrid* _tmp63_ = NULL;
	GtkGrid* _tmp64_;
	GtkLabel* _tmp65_;
	GtkGrid* _tmp66_;
	GtkRevealer* _tmp67_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp68_ = NULL;
	GtkGrid* _tmp69_;
	GtkGrid* _tmp70_;
	GtkGrid* _tmp71_;
	GtkGrid* _tmp72_;
	PaneType _tmp73_;
	GtkRevealer* _tmp74_ = NULL;
	GtkRevealer* _tmp75_;
	GtkGrid* _tmp76_;
	GtkRevealer* _tmp77_;
	GtkButton* _tmp78_;
	PaneType _tmp79_;
#line 40 "../src/Layouts/HeaderItem.vala"
	parent_class = G_OBJECT_CLASS (layouts_header_item_parent_class);
#line 40 "../src/Layouts/HeaderItem.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 40 "../src/Layouts/HeaderItem.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, LAYOUTS_TYPE_HEADER_ITEM, LayoutsHeaderItem);
#line 41 "../src/Layouts/HeaderItem.vala"
	layouts_header_item_update_labels (self);
#line 43 "../src/Layouts/HeaderItem.vala"
	_tmp0_ = self->priv->_item_name;
#line 43 "../src/Layouts/HeaderItem.vala"
	_tmp1_ = (GtkLabel*) gtk_label_new (_tmp0_);
#line 43 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp1_, 12);
#line 43 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp1_, GTK_ALIGN_START);
#line 43 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp1_);
#line 43 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (self->priv->name_label);
#line 43 "../src/Layouts/HeaderItem.vala"
	self->priv->name_label = _tmp1_;
#line 47 "../src/Layouts/HeaderItem.vala"
	_tmp2_ = self->priv->name_label;
#line 47 "../src/Layouts/HeaderItem.vala"
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
#line 47 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (_tmp3_, GRANITE_STYLE_CLASS_H4_LABEL);
#line 49 "../src/Layouts/HeaderItem.vala"
	_tmp4_ = (GThemedIcon*) g_themed_icon_new ("pan-end-symbolic");
#line 49 "../src/Layouts/HeaderItem.vala"
	_tmp5_ = (GtkImage*) gtk_image_new ();
#line 49 "../src/Layouts/HeaderItem.vala"
	g_object_set (_tmp5_, "gicon", (GIcon*) _tmp4_, NULL);
#line 49 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (_tmp4_);
#line 49 "../src/Layouts/HeaderItem.vala"
	gtk_image_set_pixel_size (_tmp5_, 13);
#line 49 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp5_);
#line 49 "../src/Layouts/HeaderItem.vala"
	arrow_icon = _tmp5_;
#line 54 "../src/Layouts/HeaderItem.vala"
	_tmp6_ = arrow_icon;
#line 54 "../src/Layouts/HeaderItem.vala"
	_tmp7_ = _g_object_ref0 ((GtkWidget*) _tmp6_);
#line 54 "../src/Layouts/HeaderItem.vala"
	_tmp8_ = (GtkButton*) gtk_button_new ();
#line 54 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp8_, GTK_ALIGN_CENTER);
#line 54 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp8_, TRUE);
#line 54 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp8_, GTK_ALIGN_END);
#line 54 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp8_, FALSE);
#line 54 "../src/Layouts/HeaderItem.vala"
	gtk_button_set_image (_tmp8_, _tmp7_);
#line 54 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (_tmp7_);
#line 54 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp8_, 15);
#line 54 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp8_);
#line 54 "../src/Layouts/HeaderItem.vala"
	arrow_button = _tmp8_;
#line 62 "../src/Layouts/HeaderItem.vala"
	_tmp9_ = arrow_button;
#line 62 "../src/Layouts/HeaderItem.vala"
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
#line 62 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (_tmp10_, GTK_STYLE_CLASS_FLAT);
#line 63 "../src/Layouts/HeaderItem.vala"
	_tmp11_ = arrow_button;
#line 63 "../src/Layouts/HeaderItem.vala"
	_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
#line 63 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (_tmp12_, "dim-label");
#line 64 "../src/Layouts/HeaderItem.vala"
	_tmp13_ = arrow_button;
#line 64 "../src/Layouts/HeaderItem.vala"
	_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
#line 64 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (_tmp14_, "transparent");
#line 65 "../src/Layouts/HeaderItem.vala"
	_tmp15_ = arrow_button;
#line 65 "../src/Layouts/HeaderItem.vala"
	_tmp16_ = gtk_widget_get_style_context ((GtkWidget*) _tmp15_);
#line 65 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (_tmp16_, "hidden-button");
#line 66 "../src/Layouts/HeaderItem.vala"
	_tmp17_ = arrow_button;
#line 66 "../src/Layouts/HeaderItem.vala"
	_tmp18_ = gtk_widget_get_style_context ((GtkWidget*) _tmp17_);
#line 66 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (_tmp18_, "no-padding");
#line 68 "../src/Layouts/HeaderItem.vala"
	_tmp19_ = (GtkGrid*) gtk_grid_new ();
#line 68 "../src/Layouts/HeaderItem.vala"
	g_object_set ((GtkWidget*) _tmp19_, "margin", 9, NULL);
#line 68 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp19_, 0);
#line 68 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp19_);
#line 68 "../src/Layouts/HeaderItem.vala"
	content_grid = _tmp19_;
#line 73 "../src/Layouts/HeaderItem.vala"
	_tmp20_ = self->priv->_container_shape;
#line 73 "../src/Layouts/HeaderItem.vala"
	if (_tmp20_ == CONTAINER_TYPE_LISTBOX) {
#line 883 "HeaderItem.c"
		GtkSelectionMode _tmp21_;
		GtkListBox* _tmp22_ = NULL;
		GtkListBox* _tmp23_;
		GtkWidget* _tmp24_;
		GtkWidget* _tmp25_;
		GtkStyleContext* listbox_context = NULL;
		GtkListBox* _tmp26_;
		GtkStyleContext* _tmp27_;
		GtkStyleContext* _tmp28_;
		GtkStyleContext* _tmp29_;
		GtkGrid* _tmp30_;
		GtkListBox* _tmp31_;
#line 74 "../src/Layouts/HeaderItem.vala"
		_tmp21_ = self->priv->_selection_mode;
#line 74 "../src/Layouts/HeaderItem.vala"
		_tmp22_ = (GtkListBox*) gtk_list_box_new ();
#line 74 "../src/Layouts/HeaderItem.vala"
		gtk_widget_set_hexpand ((GtkWidget*) _tmp22_, TRUE);
#line 74 "../src/Layouts/HeaderItem.vala"
		gtk_list_box_set_selection_mode (_tmp22_, _tmp21_);
#line 74 "../src/Layouts/HeaderItem.vala"
		g_object_ref_sink (_tmp22_);
#line 74 "../src/Layouts/HeaderItem.vala"
		_g_object_unref0 (self->priv->listbox);
#line 74 "../src/Layouts/HeaderItem.vala"
		self->priv->listbox = _tmp22_;
#line 78 "../src/Layouts/HeaderItem.vala"
		_tmp23_ = self->priv->listbox;
#line 78 "../src/Layouts/HeaderItem.vala"
		_tmp24_ = layouts_header_item_get_placeholder (self);
#line 78 "../src/Layouts/HeaderItem.vala"
		_tmp25_ = _tmp24_;
#line 78 "../src/Layouts/HeaderItem.vala"
		gtk_list_box_set_placeholder (_tmp23_, _tmp25_);
#line 78 "../src/Layouts/HeaderItem.vala"
		_g_object_unref0 (_tmp25_);
#line 80 "../src/Layouts/HeaderItem.vala"
		_tmp26_ = self->priv->listbox;
#line 80 "../src/Layouts/HeaderItem.vala"
		_tmp27_ = gtk_widget_get_style_context ((GtkWidget*) _tmp26_);
#line 80 "../src/Layouts/HeaderItem.vala"
		listbox_context = _tmp27_;
#line 81 "../src/Layouts/HeaderItem.vala"
		_tmp28_ = listbox_context;
#line 81 "../src/Layouts/HeaderItem.vala"
		gtk_style_context_add_class (_tmp28_, "pane-content");
#line 82 "../src/Layouts/HeaderItem.vala"
		_tmp29_ = listbox_context;
#line 82 "../src/Layouts/HeaderItem.vala"
		gtk_style_context_add_class (_tmp29_, "listbox-separator-3");
#line 84 "../src/Layouts/HeaderItem.vala"
		_tmp30_ = content_grid;
#line 84 "../src/Layouts/HeaderItem.vala"
		_tmp31_ = self->priv->listbox;
#line 84 "../src/Layouts/HeaderItem.vala"
		gtk_container_add ((GtkContainer*) _tmp30_, (GtkWidget*) _tmp31_);
#line 940 "HeaderItem.c"
	} else {
		GtkSelectionMode _tmp32_;
		GtkFlowBox* _tmp33_ = NULL;
		GtkStyleContext* flowbox_context = NULL;
		GtkFlowBox* _tmp34_;
		GtkStyleContext* _tmp35_;
		GtkStyleContext* _tmp36_;
		GtkGrid* _tmp37_;
		GtkFlowBox* _tmp38_;
#line 86 "../src/Layouts/HeaderItem.vala"
		_tmp32_ = self->priv->_selection_mode;
#line 86 "../src/Layouts/HeaderItem.vala"
		_tmp33_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 86 "../src/Layouts/HeaderItem.vala"
		gtk_flow_box_set_selection_mode (_tmp33_, _tmp32_);
#line 86 "../src/Layouts/HeaderItem.vala"
		gtk_flow_box_set_column_spacing (_tmp33_, (guint) 6);
#line 86 "../src/Layouts/HeaderItem.vala"
		gtk_flow_box_set_row_spacing (_tmp33_, (guint) 6);
#line 86 "../src/Layouts/HeaderItem.vala"
		gtk_flow_box_set_homogeneous (_tmp33_, FALSE);
#line 86 "../src/Layouts/HeaderItem.vala"
		gtk_widget_set_hexpand ((GtkWidget*) _tmp33_, TRUE);
#line 86 "../src/Layouts/HeaderItem.vala"
		gtk_flow_box_set_min_children_per_line (_tmp33_, (guint) 3);
#line 86 "../src/Layouts/HeaderItem.vala"
		gtk_flow_box_set_max_children_per_line (_tmp33_, (guint) 3);
#line 86 "../src/Layouts/HeaderItem.vala"
		g_object_ref_sink (_tmp33_);
#line 86 "../src/Layouts/HeaderItem.vala"
		_g_object_unref0 (self->priv->flowbox);
#line 86 "../src/Layouts/HeaderItem.vala"
		self->priv->flowbox = _tmp33_;
#line 98 "../src/Layouts/HeaderItem.vala"
		_tmp34_ = self->priv->flowbox;
#line 98 "../src/Layouts/HeaderItem.vala"
		_tmp35_ = gtk_widget_get_style_context ((GtkWidget*) _tmp34_);
#line 98 "../src/Layouts/HeaderItem.vala"
		flowbox_context = _tmp35_;
#line 99 "../src/Layouts/HeaderItem.vala"
		_tmp36_ = flowbox_context;
#line 99 "../src/Layouts/HeaderItem.vala"
		gtk_style_context_add_class (_tmp36_, "pane-content");
#line 101 "../src/Layouts/HeaderItem.vala"
		_tmp37_ = content_grid;
#line 101 "../src/Layouts/HeaderItem.vala"
		_tmp38_ = self->priv->flowbox;
#line 101 "../src/Layouts/HeaderItem.vala"
		gtk_container_add ((GtkContainer*) _tmp37_, (GtkWidget*) _tmp38_);
#line 990 "HeaderItem.c"
	}
#line 104 "../src/Layouts/HeaderItem.vala"
	_tmp39_ = widgets_dynamic_icon_new ();
#line 104 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp39_);
#line 104 "../src/Layouts/HeaderItem.vala"
	add_image = _tmp39_;
#line 105 "../src/Layouts/HeaderItem.vala"
	_tmp40_ = add_image;
#line 105 "../src/Layouts/HeaderItem.vala"
	widgets_dynamic_icon_set_size (_tmp40_, 19);
#line 106 "../src/Layouts/HeaderItem.vala"
	_tmp41_ = add_image;
#line 106 "../src/Layouts/HeaderItem.vala"
	widgets_dynamic_icon_set_icon_name (_tmp41_, "planner-plus-circle");
#line 108 "../src/Layouts/HeaderItem.vala"
	_tmp42_ = self->priv->_add_tooltip;
#line 108 "../src/Layouts/HeaderItem.vala"
	_tmp43_ = g_strdup (_tmp42_);
#line 108 "../src/Layouts/HeaderItem.vala"
	_tmp44_ = (GtkButton*) gtk_button_new ();
#line 108 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp44_, GTK_ALIGN_CENTER);
#line 108 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp44_, FALSE);
#line 108 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp44_, _tmp43_);
#line 108 "../src/Layouts/HeaderItem.vala"
	_g_free0 (_tmp43_);
#line 108 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp44_, 1);
#line 108 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp44_);
#line 108 "../src/Layouts/HeaderItem.vala"
	add_button = _tmp44_;
#line 115 "../src/Layouts/HeaderItem.vala"
	_tmp45_ = add_button;
#line 115 "../src/Layouts/HeaderItem.vala"
	_tmp46_ = add_image;
#line 115 "../src/Layouts/HeaderItem.vala"
	gtk_container_add ((GtkContainer*) _tmp45_, (GtkWidget*) _tmp46_);
#line 117 "../src/Layouts/HeaderItem.vala"
	_tmp47_ = add_button;
#line 117 "../src/Layouts/HeaderItem.vala"
	_tmp48_ = gtk_widget_get_style_context ((GtkWidget*) _tmp47_);
#line 117 "../src/Layouts/HeaderItem.vala"
	add_button_context = _tmp48_;
#line 118 "../src/Layouts/HeaderItem.vala"
	_tmp49_ = add_button_context;
#line 118 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (_tmp49_, GTK_STYLE_CLASS_FLAT);
#line 119 "../src/Layouts/HeaderItem.vala"
	_tmp50_ = add_button_context;
#line 119 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (_tmp50_, "no-padding");
#line 120 "../src/Layouts/HeaderItem.vala"
	_tmp51_ = add_button_context;
#line 120 "../src/Layouts/HeaderItem.vala"
	gtk_style_context_add_class (_tmp51_, "action-button");
#line 123 "../src/Layouts/HeaderItem.vala"
	_tmp52_ = (GtkSpinner*) gtk_spinner_new ();
#line 123 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp52_, GTK_ALIGN_CENTER);
#line 123 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp52_, GTK_ALIGN_CENTER);
#line 123 "../src/Layouts/HeaderItem.vala"
	g_object_set (_tmp52_, "active", TRUE, NULL);
#line 123 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp52_);
#line 123 "../src/Layouts/HeaderItem.vala"
	spinner_loading = _tmp52_;
#line 128 "../src/Layouts/HeaderItem.vala"
	_tmp53_ = spinner_loading;
#line 128 "../src/Layouts/HeaderItem.vala"
	gtk_spinner_start (_tmp53_);
#line 130 "../src/Layouts/HeaderItem.vala"
	_tmp54_ = (GtkStack*) gtk_stack_new ();
#line 130 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp54_, GTK_ALIGN_END);
#line 130 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp54_, TRUE);
#line 130 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp54_, GTK_ALIGN_CENTER);
#line 130 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp54_, 3);
#line 130 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp54_, 12);
#line 130 "../src/Layouts/HeaderItem.vala"
	gtk_stack_set_transition_type (_tmp54_, GTK_STACK_TRANSITION_TYPE_CROSSFADE);
#line 130 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp54_);
#line 130 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (self->priv->action_stack);
#line 130 "../src/Layouts/HeaderItem.vala"
	self->priv->action_stack = _tmp54_;
#line 139 "../src/Layouts/HeaderItem.vala"
	_tmp55_ = self->priv->action_stack;
#line 139 "../src/Layouts/HeaderItem.vala"
	_tmp56_ = add_button;
#line 139 "../src/Layouts/HeaderItem.vala"
	gtk_stack_add_named (_tmp55_, (GtkWidget*) _tmp56_, "button");
#line 140 "../src/Layouts/HeaderItem.vala"
	_tmp57_ = self->priv->action_stack;
#line 140 "../src/Layouts/HeaderItem.vala"
	_tmp58_ = spinner_loading;
#line 140 "../src/Layouts/HeaderItem.vala"
	gtk_stack_add_named (_tmp57_, (GtkWidget*) _tmp58_, "spinner");
#line 142 "../src/Layouts/HeaderItem.vala"
	_tmp59_ = self->priv->_pane_type;
#line 142 "../src/Layouts/HeaderItem.vala"
	_tmp60_ = (GtkRevealer*) gtk_revealer_new ();
#line 142 "../src/Layouts/HeaderItem.vala"
	gtk_revealer_set_transition_type (_tmp60_, GTK_REVEALER_TRANSITION_TYPE_CROSSFADE);
#line 142 "../src/Layouts/HeaderItem.vala"
	gtk_revealer_set_reveal_child (_tmp60_, _tmp59_ != PANE_TYPE_FAVORITE);
#line 142 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp60_);
#line 142 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (self->priv->action_revealer);
#line 142 "../src/Layouts/HeaderItem.vala"
	self->priv->action_revealer = _tmp60_;
#line 146 "../src/Layouts/HeaderItem.vala"
	_tmp61_ = self->priv->action_revealer;
#line 146 "../src/Layouts/HeaderItem.vala"
	_tmp62_ = self->priv->action_stack;
#line 146 "../src/Layouts/HeaderItem.vala"
	gtk_container_add ((GtkContainer*) _tmp61_, (GtkWidget*) _tmp62_);
#line 148 "../src/Layouts/HeaderItem.vala"
	_tmp63_ = (GtkGrid*) gtk_grid_new ();
#line 148 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp63_, TRUE);
#line 148 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp63_);
#line 148 "../src/Layouts/HeaderItem.vala"
	header_grid = _tmp63_;
#line 151 "../src/Layouts/HeaderItem.vala"
	_tmp64_ = header_grid;
#line 151 "../src/Layouts/HeaderItem.vala"
	_tmp65_ = self->priv->name_label;
#line 151 "../src/Layouts/HeaderItem.vala"
	gtk_container_add ((GtkContainer*) _tmp64_, (GtkWidget*) _tmp65_);
#line 152 "../src/Layouts/HeaderItem.vala"
	_tmp66_ = header_grid;
#line 152 "../src/Layouts/HeaderItem.vala"
	_tmp67_ = self->priv->action_revealer;
#line 152 "../src/Layouts/HeaderItem.vala"
	gtk_container_add ((GtkContainer*) _tmp66_, (GtkWidget*) _tmp67_);
#line 154 "../src/Layouts/HeaderItem.vala"
	_tmp68_ = (GtkGrid*) gtk_grid_new ();
#line 154 "../src/Layouts/HeaderItem.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp68_, TRUE);
#line 154 "../src/Layouts/HeaderItem.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp68_, GTK_ORIENTATION_VERTICAL);
#line 154 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp68_);
#line 154 "../src/Layouts/HeaderItem.vala"
	main_grid = _tmp68_;
#line 158 "../src/Layouts/HeaderItem.vala"
	_tmp69_ = main_grid;
#line 158 "../src/Layouts/HeaderItem.vala"
	_tmp70_ = header_grid;
#line 158 "../src/Layouts/HeaderItem.vala"
	gtk_container_add ((GtkContainer*) _tmp69_, (GtkWidget*) _tmp70_);
#line 159 "../src/Layouts/HeaderItem.vala"
	_tmp71_ = main_grid;
#line 159 "../src/Layouts/HeaderItem.vala"
	_tmp72_ = content_grid;
#line 159 "../src/Layouts/HeaderItem.vala"
	gtk_container_add ((GtkContainer*) _tmp71_, (GtkWidget*) _tmp72_);
#line 161 "../src/Layouts/HeaderItem.vala"
	_tmp73_ = self->priv->_pane_type;
#line 161 "../src/Layouts/HeaderItem.vala"
	_tmp74_ = (GtkRevealer*) gtk_revealer_new ();
#line 161 "../src/Layouts/HeaderItem.vala"
	gtk_revealer_set_transition_type (_tmp74_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 161 "../src/Layouts/HeaderItem.vala"
	gtk_revealer_set_reveal_child (_tmp74_, _tmp73_ != PANE_TYPE_FAVORITE);
#line 161 "../src/Layouts/HeaderItem.vala"
	g_object_ref_sink (_tmp74_);
#line 161 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 161 "../src/Layouts/HeaderItem.vala"
	self->priv->main_revealer = _tmp74_;
#line 165 "../src/Layouts/HeaderItem.vala"
	_tmp75_ = self->priv->main_revealer;
#line 165 "../src/Layouts/HeaderItem.vala"
	_tmp76_ = main_grid;
#line 165 "../src/Layouts/HeaderItem.vala"
	gtk_container_add ((GtkContainer*) _tmp75_, (GtkWidget*) _tmp76_);
#line 167 "../src/Layouts/HeaderItem.vala"
	_tmp77_ = self->priv->main_revealer;
#line 167 "../src/Layouts/HeaderItem.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp77_);
#line 169 "../src/Layouts/HeaderItem.vala"
	_tmp78_ = add_button;
#line 169 "../src/Layouts/HeaderItem.vala"
	g_signal_connect_object (_tmp78_, "clicked", (GCallback) __layouts_header_item___lambda184__gtk_button_clicked, self, 0);
#line 173 "../src/Layouts/HeaderItem.vala"
	_tmp79_ = self->priv->_pane_type;
#line 173 "../src/Layouts/HeaderItem.vala"
	if (_tmp79_ == PANE_TYPE_FAVORITE) {
#line 1192 "HeaderItem.c"
		GtkListBox* _tmp80_;
		GtkListBox* _tmp81_;
#line 174 "../src/Layouts/HeaderItem.vala"
		_tmp80_ = self->priv->listbox;
#line 174 "../src/Layouts/HeaderItem.vala"
		g_signal_connect_object ((GtkContainer*) _tmp80_, "add", (GCallback) __layouts_header_item____lambda185__gtk_container_add, self, 0);
#line 178 "../src/Layouts/HeaderItem.vala"
		_tmp81_ = self->priv->listbox;
#line 178 "../src/Layouts/HeaderItem.vala"
		g_signal_connect_object ((GtkContainer*) _tmp81_, "remove", (GCallback) __layouts_header_item____lambda186__gtk_container_remove, self, 0);
#line 1203 "HeaderItem.c"
	}
#line 40 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (main_grid);
#line 40 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (header_grid);
#line 40 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (spinner_loading);
#line 40 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (add_button);
#line 40 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (add_image);
#line 40 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (content_grid);
#line 40 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (arrow_button);
#line 40 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (arrow_icon);
#line 40 "../src/Layouts/HeaderItem.vala"
	return obj;
#line 1223 "HeaderItem.c"
}

static void
layouts_header_item_class_init (LayoutsHeaderItemClass * klass,
                                gpointer klass_data)
{
#line 1 "../src/Layouts/HeaderItem.vala"
	layouts_header_item_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Layouts/HeaderItem.vala"
	g_type_class_adjust_private_offset (klass, &LayoutsHeaderItem_private_offset);
#line 1 "../src/Layouts/HeaderItem.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_layouts_header_item_get_property;
#line 1 "../src/Layouts/HeaderItem.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_layouts_header_item_set_property;
#line 1 "../src/Layouts/HeaderItem.vala"
	G_OBJECT_CLASS (klass)->constructor = layouts_header_item_constructor;
#line 1 "../src/Layouts/HeaderItem.vala"
	G_OBJECT_CLASS (klass)->finalize = layouts_header_item_finalize;
#line 1 "../src/Layouts/HeaderItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), LAYOUTS_HEADER_ITEM_PANE_TYPE_PROPERTY, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_PANE_TYPE_PROPERTY] = g_param_spec_enum ("pane-type", "pane-type", "pane-type", TYPE_PANE_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Layouts/HeaderItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), LAYOUTS_HEADER_ITEM_CONTAINER_SHAPE_PROPERTY, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_CONTAINER_SHAPE_PROPERTY] = g_param_spec_enum ("container-shape", "container-shape", "container-shape", TYPE_CONTAINER_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Layouts/HeaderItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), LAYOUTS_HEADER_ITEM_SELECTION_MODE_PROPERTY, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_SELECTION_MODE_PROPERTY] = g_param_spec_enum ("selection-mode", "selection-mode", "selection-mode", gtk_selection_mode_get_type (), 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1 "../src/Layouts/HeaderItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), LAYOUTS_HEADER_ITEM_ITEM_NAME_PROPERTY, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_ITEM_NAME_PROPERTY] = g_param_spec_string ("item-name", "item-name", "item-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1 "../src/Layouts/HeaderItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), LAYOUTS_HEADER_ITEM_ADD_TOOLTIP_PROPERTY, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_ADD_TOOLTIP_PROPERTY] = g_param_spec_string ("add-tooltip", "add-tooltip", "add-tooltip", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1 "../src/Layouts/HeaderItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), LAYOUTS_HEADER_ITEM_PLACEHOLDER_MESSAGE_PROPERTY, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_PLACEHOLDER_MESSAGE_PROPERTY] = g_param_spec_string ("placeholder-message", "placeholder-message", "placeholder-message", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1 "../src/Layouts/HeaderItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), LAYOUTS_HEADER_ITEM_IS_LOADING_PROPERTY, layouts_header_item_properties[LAYOUTS_HEADER_ITEM_IS_LOADING_PROPERTY] = g_param_spec_boolean ("is-loading", "is-loading", "is-loading", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE));
#line 1 "../src/Layouts/HeaderItem.vala"
	layouts_header_item_signals[LAYOUTS_HEADER_ITEM_ADD_ACTIVATED_SIGNAL] = g_signal_new ("add-activated", LAYOUTS_TYPE_HEADER_ITEM, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 1258 "HeaderItem.c"
}

static void
layouts_header_item_instance_init (LayoutsHeaderItem * self,
                                   gpointer klass)
{
#line 1 "../src/Layouts/HeaderItem.vala"
	self->priv = layouts_header_item_get_instance_private (self);
#line 1267 "HeaderItem.c"
}

static void
layouts_header_item_finalize (GObject * obj)
{
	LayoutsHeaderItem * self;
#line 1 "../src/Layouts/HeaderItem.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, LAYOUTS_TYPE_HEADER_ITEM, LayoutsHeaderItem);
#line 5 "../src/Layouts/HeaderItem.vala"
	_g_free0 (self->priv->_item_name);
#line 6 "../src/Layouts/HeaderItem.vala"
	_g_free0 (self->priv->_add_tooltip);
#line 7 "../src/Layouts/HeaderItem.vala"
	_g_free0 (self->priv->_placeholder_message);
#line 9 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (self->priv->name_label);
#line 10 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (self->priv->listbox);
#line 11 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (self->priv->flowbox);
#line 12 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (self->priv->action_stack);
#line 13 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (self->priv->action_revealer);
#line 14 "../src/Layouts/HeaderItem.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 1 "../src/Layouts/HeaderItem.vala"
	G_OBJECT_CLASS (layouts_header_item_parent_class)->finalize (obj);
#line 1296 "HeaderItem.c"
}

static GType
layouts_header_item_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (LayoutsHeaderItemClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) layouts_header_item_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (LayoutsHeaderItem), 0, (GInstanceInitFunc) layouts_header_item_instance_init, NULL };
	GType layouts_header_item_type_id;
	layouts_header_item_type_id = g_type_register_static (gtk_event_box_get_type (), "LayoutsHeaderItem", &g_define_type_info, 0);
	LayoutsHeaderItem_private_offset = g_type_add_instance_private (layouts_header_item_type_id, sizeof (LayoutsHeaderItemPrivate));
	return layouts_header_item_type_id;
}

GType
layouts_header_item_get_type (void)
{
	static volatile gsize layouts_header_item_type_id__volatile = 0;
	if (g_once_init_enter (&layouts_header_item_type_id__volatile)) {
		GType layouts_header_item_type_id;
		layouts_header_item_type_id = layouts_header_item_get_type_once ();
		g_once_init_leave (&layouts_header_item_type_id__volatile, layouts_header_item_type_id);
	}
	return layouts_header_item_type_id__volatile;
}

static void
_vala_layouts_header_item_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	LayoutsHeaderItem * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, LAYOUTS_TYPE_HEADER_ITEM, LayoutsHeaderItem);
#line 1 "../src/Layouts/HeaderItem.vala"
	switch (property_id) {
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_PANE_TYPE_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		g_value_set_enum (value, layouts_header_item_get_pane_type (self));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_CONTAINER_SHAPE_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		g_value_set_enum (value, layouts_header_item_get_container_shape (self));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_SELECTION_MODE_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		g_value_set_enum (value, layouts_header_item_get_selection_mode (self));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_ITEM_NAME_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		g_value_set_string (value, layouts_header_item_get_item_name (self));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_ADD_TOOLTIP_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		g_value_set_string (value, layouts_header_item_get_add_tooltip (self));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_PLACEHOLDER_MESSAGE_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		g_value_set_string (value, layouts_header_item_get_placeholder_message (self));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1367 "HeaderItem.c"
		default:
#line 1 "../src/Layouts/HeaderItem.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1373 "HeaderItem.c"
	}
}

static void
_vala_layouts_header_item_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	LayoutsHeaderItem * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, LAYOUTS_TYPE_HEADER_ITEM, LayoutsHeaderItem);
#line 1 "../src/Layouts/HeaderItem.vala"
	switch (property_id) {
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_PANE_TYPE_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		layouts_header_item_set_pane_type (self, g_value_get_enum (value));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_CONTAINER_SHAPE_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		layouts_header_item_set_container_shape (self, g_value_get_enum (value));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_SELECTION_MODE_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		layouts_header_item_set_selection_mode (self, g_value_get_enum (value));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_ITEM_NAME_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		layouts_header_item_set_item_name (self, g_value_get_string (value));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_ADD_TOOLTIP_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		layouts_header_item_set_add_tooltip (self, g_value_get_string (value));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_PLACEHOLDER_MESSAGE_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		layouts_header_item_set_placeholder_message (self, g_value_get_string (value));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1 "../src/Layouts/HeaderItem.vala"
		case LAYOUTS_HEADER_ITEM_IS_LOADING_PROPERTY:
#line 1 "../src/Layouts/HeaderItem.vala"
		layouts_header_item_set_is_loading (self, g_value_get_boolean (value));
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1429 "HeaderItem.c"
		default:
#line 1 "../src/Layouts/HeaderItem.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 1 "../src/Layouts/HeaderItem.vala"
		break;
#line 1435 "HeaderItem.c"
	}
}

