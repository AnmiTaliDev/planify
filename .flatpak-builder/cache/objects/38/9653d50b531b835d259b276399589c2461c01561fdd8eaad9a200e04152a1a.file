/* BaseObject.c generated by valac 0.50.10, the Vala compiler
 * generated from BaseObject.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alainmh23@gmail.com>
*/

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#define OBJECTS_TYPE_BASE_OBJECT (objects_base_object_get_type ())
#define OBJECTS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject))
#define OBJECTS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))
#define OBJECTS_IS_BASE_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_IS_BASE_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_BASE_OBJECT))
#define OBJECTS_BASE_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObjectClass))

typedef struct _ObjectsBaseObject ObjectsBaseObject;
typedef struct _ObjectsBaseObjectClass ObjectsBaseObjectClass;
typedef struct _ObjectsBaseObjectPrivate ObjectsBaseObjectPrivate;
enum  {
	OBJECTS_BASE_OBJECT_0_PROPERTY,
	OBJECTS_BASE_OBJECT_ID_PROPERTY,
	OBJECTS_BASE_OBJECT_UPDATE_TIMEOUT_ID_PROPERTY,
	OBJECTS_BASE_OBJECT_ID_STRING_PROPERTY,
	OBJECTS_BASE_OBJECT_TYPE_DELETE_PROPERTY,
	OBJECTS_BASE_OBJECT_NUM_PROPERTIES
};
static GParamSpec* objects_base_object_properties[OBJECTS_BASE_OBJECT_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

#define OBJECTS_TYPE_ITEM (objects_item_get_type ())
#define OBJECTS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_ITEM, ObjectsItem))
#define OBJECTS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_ITEM, ObjectsItemClass))
#define OBJECTS_IS_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_ITEM))
#define OBJECTS_IS_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_ITEM))
#define OBJECTS_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_ITEM, ObjectsItemClass))

typedef struct _ObjectsItem ObjectsItem;
typedef struct _ObjectsItemClass ObjectsItemClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define OBJECTS_TYPE_SECTION (objects_section_get_type ())
#define OBJECTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_SECTION, ObjectsSection))
#define OBJECTS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_SECTION, ObjectsSectionClass))
#define OBJECTS_IS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_SECTION))
#define OBJECTS_IS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_SECTION))
#define OBJECTS_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_SECTION, ObjectsSectionClass))

typedef struct _ObjectsSection ObjectsSection;
typedef struct _ObjectsSectionClass ObjectsSectionClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
enum  {
	OBJECTS_BASE_OBJECT_DELETED_SIGNAL,
	OBJECTS_BASE_OBJECT_UPDATED_SIGNAL,
	OBJECTS_BASE_OBJECT_NUM_SIGNALS
};
static guint objects_base_object_signals[OBJECTS_BASE_OBJECT_NUM_SIGNALS] = {0};

struct _ObjectsBaseObject {
	GObject parent_instance;
	ObjectsBaseObjectPrivate * priv;
};

struct _ObjectsBaseObjectClass {
	GObjectClass parent_class;
	gchar* (*get_update_json) (ObjectsBaseObject* self, const gchar* uuid, const gchar* temp_id);
	gchar* (*get_add_json) (ObjectsBaseObject* self, const gchar* temp_id, const gchar* uuid);
};

struct _ObjectsBaseObjectPrivate {
	gint64 _id;
	guint _update_timeout_id;
	gchar* _id_string;
};

static gint ObjectsBaseObject_private_offset;
static gpointer objects_base_object_parent_class = NULL;

GType objects_base_object_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsBaseObject, g_object_unref)
gchar* objects_base_object_get_update_json (ObjectsBaseObject* self,
                                            const gchar* uuid,
                                            const gchar* temp_id);
gchar* objects_base_object_get_add_json (ObjectsBaseObject* self,
                                         const gchar* temp_id,
                                         const gchar* uuid);
#define CONSTANTS_INACTIVE 0
static gchar* objects_base_object_real_get_update_json (ObjectsBaseObject* self,
                                                 const gchar* uuid,
                                                 const gchar* temp_id);
static gchar* objects_base_object_real_get_add_json (ObjectsBaseObject* self,
                                              const gchar* temp_id,
                                              const gchar* uuid);
ObjectsBaseObject* objects_base_object_new (void);
ObjectsBaseObject* objects_base_object_construct (GType object_type);
gint64 objects_base_object_get_id (ObjectsBaseObject* self);
void objects_base_object_set_id (ObjectsBaseObject* self,
                                 gint64 value);
guint objects_base_object_get_update_timeout_id (ObjectsBaseObject* self);
void objects_base_object_set_update_timeout_id (ObjectsBaseObject* self,
                                                guint value);
const gchar* objects_base_object_get_id_string (ObjectsBaseObject* self);
const gchar* objects_base_object_get_type_delete (ObjectsBaseObject* self);
GType objects_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsItem, g_object_unref)
GType objects_project_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsProject, g_object_unref)
GType objects_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsSection, g_object_unref)
GType objects_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectsLabel, g_object_unref)
static void objects_base_object_finalize (GObject * obj);
static GType objects_base_object_get_type_once (void);
static void _vala_objects_base_object_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_objects_base_object_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);

static inline gpointer
objects_base_object_get_instance_private (ObjectsBaseObject* self)
{
	return G_STRUCT_MEMBER_P (self, ObjectsBaseObject_private_offset);
}

static gchar*
objects_base_object_real_get_update_json (ObjectsBaseObject* self,
                                          const gchar* uuid,
                                          const gchar* temp_id)
{
	gchar* _tmp0_;
	gchar* result = NULL;
#line 54 "../src/Objects/BaseObject.vala"
	g_return_val_if_fail (uuid != NULL, NULL);
#line 55 "../src/Objects/BaseObject.vala"
	_tmp0_ = g_strdup ("");
#line 55 "../src/Objects/BaseObject.vala"
	result = _tmp0_;
#line 55 "../src/Objects/BaseObject.vala"
	return result;
#line 183 "BaseObject.c"
}

gchar*
objects_base_object_get_update_json (ObjectsBaseObject* self,
                                     const gchar* uuid,
                                     const gchar* temp_id)
{
	ObjectsBaseObjectClass* _klass_;
#line 54 "../src/Objects/BaseObject.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 54 "../src/Objects/BaseObject.vala"
	_klass_ = OBJECTS_BASE_OBJECT_GET_CLASS (self);
#line 54 "../src/Objects/BaseObject.vala"
	if (_klass_->get_update_json) {
#line 54 "../src/Objects/BaseObject.vala"
		return _klass_->get_update_json (self, uuid, temp_id);
#line 200 "BaseObject.c"
	}
#line 54 "../src/Objects/BaseObject.vala"
	return NULL;
#line 204 "BaseObject.c"
}

static gchar*
objects_base_object_real_get_add_json (ObjectsBaseObject* self,
                                       const gchar* temp_id,
                                       const gchar* uuid)
{
	gchar* _tmp0_;
	gchar* result = NULL;
#line 58 "../src/Objects/BaseObject.vala"
	g_return_val_if_fail (temp_id != NULL, NULL);
#line 58 "../src/Objects/BaseObject.vala"
	g_return_val_if_fail (uuid != NULL, NULL);
#line 59 "../src/Objects/BaseObject.vala"
	_tmp0_ = g_strdup ("");
#line 59 "../src/Objects/BaseObject.vala"
	result = _tmp0_;
#line 59 "../src/Objects/BaseObject.vala"
	return result;
#line 224 "BaseObject.c"
}

gchar*
objects_base_object_get_add_json (ObjectsBaseObject* self,
                                  const gchar* temp_id,
                                  const gchar* uuid)
{
	ObjectsBaseObjectClass* _klass_;
#line 58 "../src/Objects/BaseObject.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 58 "../src/Objects/BaseObject.vala"
	_klass_ = OBJECTS_BASE_OBJECT_GET_CLASS (self);
#line 58 "../src/Objects/BaseObject.vala"
	if (_klass_->get_add_json) {
#line 58 "../src/Objects/BaseObject.vala"
		return _klass_->get_add_json (self, temp_id, uuid);
#line 241 "BaseObject.c"
	}
#line 58 "../src/Objects/BaseObject.vala"
	return NULL;
#line 245 "BaseObject.c"
}

ObjectsBaseObject*
objects_base_object_construct (GType object_type)
{
	ObjectsBaseObject * self = NULL;
#line 22 "../src/Objects/BaseObject.vala"
	self = (ObjectsBaseObject*) g_object_new (object_type, NULL);
#line 22 "../src/Objects/BaseObject.vala"
	return self;
#line 256 "BaseObject.c"
}

ObjectsBaseObject*
objects_base_object_new (void)
{
#line 22 "../src/Objects/BaseObject.vala"
	return objects_base_object_construct (OBJECTS_TYPE_BASE_OBJECT);
#line 264 "BaseObject.c"
}

gint64
objects_base_object_get_id (ObjectsBaseObject* self)
{
	gint64 result;
#line 23 "../src/Objects/BaseObject.vala"
	g_return_val_if_fail (self != NULL, 0LL);
#line 23 "../src/Objects/BaseObject.vala"
	result = self->priv->_id;
#line 23 "../src/Objects/BaseObject.vala"
	return result;
#line 277 "BaseObject.c"
}

void
objects_base_object_set_id (ObjectsBaseObject* self,
                            gint64 value)
{
	gint64 old_value;
#line 23 "../src/Objects/BaseObject.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/Objects/BaseObject.vala"
	old_value = objects_base_object_get_id (self);
#line 23 "../src/Objects/BaseObject.vala"
	if (old_value != value) {
#line 23 "../src/Objects/BaseObject.vala"
		self->priv->_id = value;
#line 23 "../src/Objects/BaseObject.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_base_object_properties[OBJECTS_BASE_OBJECT_ID_PROPERTY]);
#line 295 "BaseObject.c"
	}
}

guint
objects_base_object_get_update_timeout_id (ObjectsBaseObject* self)
{
	guint result;
#line 28 "../src/Objects/BaseObject.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 28 "../src/Objects/BaseObject.vala"
	result = self->priv->_update_timeout_id;
#line 28 "../src/Objects/BaseObject.vala"
	return result;
#line 309 "BaseObject.c"
}

void
objects_base_object_set_update_timeout_id (ObjectsBaseObject* self,
                                           guint value)
{
	guint old_value;
#line 28 "../src/Objects/BaseObject.vala"
	g_return_if_fail (self != NULL);
#line 28 "../src/Objects/BaseObject.vala"
	old_value = objects_base_object_get_update_timeout_id (self);
#line 28 "../src/Objects/BaseObject.vala"
	if (old_value != value) {
#line 28 "../src/Objects/BaseObject.vala"
		self->priv->_update_timeout_id = value;
#line 28 "../src/Objects/BaseObject.vala"
		g_object_notify_by_pspec ((GObject *) self, objects_base_object_properties[OBJECTS_BASE_OBJECT_UPDATE_TIMEOUT_ID_PROPERTY]);
#line 327 "BaseObject.c"
	}
}

const gchar*
objects_base_object_get_id_string (ObjectsBaseObject* self)
{
	const gchar* result;
	gint64 _tmp0_;
	gchar* _tmp1_;
	const gchar* _tmp2_;
#line 32 "../src/Objects/BaseObject.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 33 "../src/Objects/BaseObject.vala"
	_tmp0_ = self->priv->_id;
#line 33 "../src/Objects/BaseObject.vala"
	_tmp1_ = g_strdup_printf ("%" G_GINT64_FORMAT, _tmp0_);
#line 33 "../src/Objects/BaseObject.vala"
	_g_free0 (self->priv->_id_string);
#line 33 "../src/Objects/BaseObject.vala"
	self->priv->_id_string = _tmp1_;
#line 34 "../src/Objects/BaseObject.vala"
	_tmp2_ = self->priv->_id_string;
#line 34 "../src/Objects/BaseObject.vala"
	result = _tmp2_;
#line 34 "../src/Objects/BaseObject.vala"
	return result;
#line 354 "BaseObject.c"
}

const gchar*
objects_base_object_get_type_delete (ObjectsBaseObject* self)
{
	const gchar* result;
#line 39 "../src/Objects/BaseObject.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 40 "../src/Objects/BaseObject.vala"
	if (OBJECTS_IS_ITEM (self)) {
#line 41 "../src/Objects/BaseObject.vala"
		result = "item_delete";
#line 41 "../src/Objects/BaseObject.vala"
		return result;
#line 369 "BaseObject.c"
	} else {
#line 42 "../src/Objects/BaseObject.vala"
		if (OBJECTS_IS_PROJECT (self)) {
#line 43 "../src/Objects/BaseObject.vala"
			result = "project_delete";
#line 43 "../src/Objects/BaseObject.vala"
			return result;
#line 377 "BaseObject.c"
		} else {
#line 44 "../src/Objects/BaseObject.vala"
			if (OBJECTS_IS_SECTION (self)) {
#line 45 "../src/Objects/BaseObject.vala"
				result = "section_delete";
#line 45 "../src/Objects/BaseObject.vala"
				return result;
#line 385 "BaseObject.c"
			} else {
#line 46 "../src/Objects/BaseObject.vala"
				if (OBJECTS_IS_LABEL (self)) {
#line 47 "../src/Objects/BaseObject.vala"
					result = "label_delete";
#line 47 "../src/Objects/BaseObject.vala"
					return result;
#line 393 "BaseObject.c"
				} else {
#line 49 "../src/Objects/BaseObject.vala"
					result = "";
#line 49 "../src/Objects/BaseObject.vala"
					return result;
#line 399 "BaseObject.c"
				}
			}
		}
	}
}

static void
objects_base_object_class_init (ObjectsBaseObjectClass * klass,
                                gpointer klass_data)
{
#line 22 "../src/Objects/BaseObject.vala"
	objects_base_object_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Objects/BaseObject.vala"
	g_type_class_adjust_private_offset (klass, &ObjectsBaseObject_private_offset);
#line 22 "../src/Objects/BaseObject.vala"
	((ObjectsBaseObjectClass *) klass)->get_update_json = (gchar* (*) (ObjectsBaseObject*, const gchar*, const gchar*)) objects_base_object_real_get_update_json;
#line 22 "../src/Objects/BaseObject.vala"
	((ObjectsBaseObjectClass *) klass)->get_add_json = (gchar* (*) (ObjectsBaseObject*, const gchar*, const gchar*)) objects_base_object_real_get_add_json;
#line 22 "../src/Objects/BaseObject.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_objects_base_object_get_property;
#line 22 "../src/Objects/BaseObject.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_objects_base_object_set_property;
#line 22 "../src/Objects/BaseObject.vala"
	G_OBJECT_CLASS (klass)->finalize = objects_base_object_finalize;
#line 22 "../src/Objects/BaseObject.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_BASE_OBJECT_ID_PROPERTY, objects_base_object_properties[OBJECTS_BASE_OBJECT_ID_PROPERTY] = g_param_spec_int64 ("id", "id", "id", G_MININT64, G_MAXINT64, (gint64) CONSTANTS_INACTIVE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/BaseObject.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_BASE_OBJECT_UPDATE_TIMEOUT_ID_PROPERTY, objects_base_object_properties[OBJECTS_BASE_OBJECT_UPDATE_TIMEOUT_ID_PROPERTY] = g_param_spec_uint ("update-timeout-id", "update-timeout-id", "update-timeout-id", 0, G_MAXUINT, (guint) CONSTANTS_INACTIVE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "../src/Objects/BaseObject.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_BASE_OBJECT_ID_STRING_PROPERTY, objects_base_object_properties[OBJECTS_BASE_OBJECT_ID_STRING_PROPERTY] = g_param_spec_string ("id-string", "id-string", "id-string", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "../src/Objects/BaseObject.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), OBJECTS_BASE_OBJECT_TYPE_DELETE_PROPERTY, objects_base_object_properties[OBJECTS_BASE_OBJECT_TYPE_DELETE_PROPERTY] = g_param_spec_string ("type-delete", "type-delete", "type-delete", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "../src/Objects/BaseObject.vala"
	objects_base_object_signals[OBJECTS_BASE_OBJECT_DELETED_SIGNAL] = g_signal_new ("deleted", OBJECTS_TYPE_BASE_OBJECT, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "../src/Objects/BaseObject.vala"
	objects_base_object_signals[OBJECTS_BASE_OBJECT_UPDATED_SIGNAL] = g_signal_new ("updated", OBJECTS_TYPE_BASE_OBJECT, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 436 "BaseObject.c"
}

static void
objects_base_object_instance_init (ObjectsBaseObject * self,
                                   gpointer klass)
{
#line 22 "../src/Objects/BaseObject.vala"
	self->priv = objects_base_object_get_instance_private (self);
#line 23 "../src/Objects/BaseObject.vala"
	self->priv->_id = (gint64) CONSTANTS_INACTIVE;
#line 28 "../src/Objects/BaseObject.vala"
	self->priv->_update_timeout_id = (guint) CONSTANTS_INACTIVE;
#line 449 "BaseObject.c"
}

static void
objects_base_object_finalize (GObject * obj)
{
	ObjectsBaseObject * self;
#line 22 "../src/Objects/BaseObject.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject);
#line 30 "../src/Objects/BaseObject.vala"
	_g_free0 (self->priv->_id_string);
#line 22 "../src/Objects/BaseObject.vala"
	G_OBJECT_CLASS (objects_base_object_parent_class)->finalize (obj);
#line 462 "BaseObject.c"
}

static GType
objects_base_object_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ObjectsBaseObjectClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_base_object_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsBaseObject), 0, (GInstanceInitFunc) objects_base_object_instance_init, NULL };
	GType objects_base_object_type_id;
	objects_base_object_type_id = g_type_register_static (G_TYPE_OBJECT, "ObjectsBaseObject", &g_define_type_info, 0);
	ObjectsBaseObject_private_offset = g_type_add_instance_private (objects_base_object_type_id, sizeof (ObjectsBaseObjectPrivate));
	return objects_base_object_type_id;
}

GType
objects_base_object_get_type (void)
{
	static volatile gsize objects_base_object_type_id__volatile = 0;
	if (g_once_init_enter (&objects_base_object_type_id__volatile)) {
		GType objects_base_object_type_id;
		objects_base_object_type_id = objects_base_object_get_type_once ();
		g_once_init_leave (&objects_base_object_type_id__volatile, objects_base_object_type_id);
	}
	return objects_base_object_type_id__volatile;
}

static void
_vala_objects_base_object_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	ObjectsBaseObject * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject);
#line 22 "../src/Objects/BaseObject.vala"
	switch (property_id) {
#line 22 "../src/Objects/BaseObject.vala"
		case OBJECTS_BASE_OBJECT_ID_PROPERTY:
#line 22 "../src/Objects/BaseObject.vala"
		g_value_set_int64 (value, objects_base_object_get_id (self));
#line 22 "../src/Objects/BaseObject.vala"
		break;
#line 22 "../src/Objects/BaseObject.vala"
		case OBJECTS_BASE_OBJECT_UPDATE_TIMEOUT_ID_PROPERTY:
#line 22 "../src/Objects/BaseObject.vala"
		g_value_set_uint (value, objects_base_object_get_update_timeout_id (self));
#line 22 "../src/Objects/BaseObject.vala"
		break;
#line 22 "../src/Objects/BaseObject.vala"
		case OBJECTS_BASE_OBJECT_ID_STRING_PROPERTY:
#line 22 "../src/Objects/BaseObject.vala"
		g_value_set_string (value, objects_base_object_get_id_string (self));
#line 22 "../src/Objects/BaseObject.vala"
		break;
#line 22 "../src/Objects/BaseObject.vala"
		case OBJECTS_BASE_OBJECT_TYPE_DELETE_PROPERTY:
#line 22 "../src/Objects/BaseObject.vala"
		g_value_set_string (value, objects_base_object_get_type_delete (self));
#line 22 "../src/Objects/BaseObject.vala"
		break;
#line 521 "BaseObject.c"
		default:
#line 22 "../src/Objects/BaseObject.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Objects/BaseObject.vala"
		break;
#line 527 "BaseObject.c"
	}
}

static void
_vala_objects_base_object_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	ObjectsBaseObject * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, OBJECTS_TYPE_BASE_OBJECT, ObjectsBaseObject);
#line 22 "../src/Objects/BaseObject.vala"
	switch (property_id) {
#line 22 "../src/Objects/BaseObject.vala"
		case OBJECTS_BASE_OBJECT_ID_PROPERTY:
#line 22 "../src/Objects/BaseObject.vala"
		objects_base_object_set_id (self, g_value_get_int64 (value));
#line 22 "../src/Objects/BaseObject.vala"
		break;
#line 22 "../src/Objects/BaseObject.vala"
		case OBJECTS_BASE_OBJECT_UPDATE_TIMEOUT_ID_PROPERTY:
#line 22 "../src/Objects/BaseObject.vala"
		objects_base_object_set_update_timeout_id (self, g_value_get_uint (value));
#line 22 "../src/Objects/BaseObject.vala"
		break;
#line 553 "BaseObject.c"
		default:
#line 22 "../src/Objects/BaseObject.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "../src/Objects/BaseObject.vala"
		break;
#line 559 "BaseObject.c"
	}
}

